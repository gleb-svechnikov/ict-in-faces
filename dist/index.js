/*! For license information please see index.js.LICENSE.txt */
(()=>{var e={"./node_modules/@vue/devtools-api/lib/esm/const.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{HOOK_PLUGIN_SETTINGS_SET:()=>r,HOOK_SETUP:()=>o});const o="devtools-plugin:setup",r="plugin:settings:set"},"./node_modules/@vue/devtools-api/lib/esm/env.js":(e,t,n)=>{"use strict";function o(){return r().__VUE_DEVTOOLS_GLOBAL_HOOK__}function r(){return"undefined"!=typeof navigator&&"undefined"!=typeof window?window:void 0!==n.g?n.g:{}}n.r(t),n.d(t,{getDevtoolsGlobalHook:()=>o,getTarget:()=>r,isProxyAvailable:()=>i});const i="function"==typeof Proxy},"./node_modules/@vue/devtools-api/lib/esm/index.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{isPerformanceSupported:()=>s.isPerformanceSupported,now:()=>s.now,setupDevtoolsPlugin:()=>a});var o=n("./node_modules/@vue/devtools-api/lib/esm/env.js"),r=n("./node_modules/@vue/devtools-api/lib/esm/const.js"),i=n("./node_modules/@vue/devtools-api/lib/esm/proxy.js"),s=n("./node_modules/@vue/devtools-api/lib/esm/time.js");function a(e,t){const n=e,s=(0,o.getTarget)(),a=(0,o.getDevtoolsGlobalHook)(),l=o.isProxyAvailable&&n.enableEarlyProxy;if(!a||!s.__VUE_DEVTOOLS_PLUGIN_API_AVAILABLE__&&l){const e=l?new i.ApiProxy(n,a):null;(s.__VUE_DEVTOOLS_PLUGINS__=s.__VUE_DEVTOOLS_PLUGINS__||[]).push({pluginDescriptor:n,setupFn:t,proxy:e}),e&&t(e.proxiedTarget)}else a.emit(r.HOOK_SETUP,e,t)}},"./node_modules/@vue/devtools-api/lib/esm/proxy.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{ApiProxy:()=>i});var o=n("./node_modules/@vue/devtools-api/lib/esm/const.js"),r=n("./node_modules/@vue/devtools-api/lib/esm/time.js");class i{constructor(e,t){this.target=null,this.targetQueue=[],this.onQueue=[],this.plugin=e,this.hook=t;const n={};if(e.settings)for(const t in e.settings){const o=e.settings[t];n[t]=o.defaultValue}const i=`__vue-devtools-plugin-settings__${e.id}`;let s=Object.assign({},n);try{const e=localStorage.getItem(i),t=JSON.parse(e);Object.assign(s,t)}catch(e){}this.fallbacks={getSettings:()=>s,setSettings(e){try{localStorage.setItem(i,JSON.stringify(e))}catch(e){}s=e},now:()=>(0,r.now)()},t&&t.on(o.HOOK_PLUGIN_SETTINGS_SET,((e,t)=>{e===this.plugin.id&&this.fallbacks.setSettings(t)})),this.proxiedOn=new Proxy({},{get:(e,t)=>this.target?this.target.on[t]:(...e)=>{this.onQueue.push({method:t,args:e})}}),this.proxiedTarget=new Proxy({},{get:(e,t)=>this.target?this.target[t]:"on"===t?this.proxiedOn:Object.keys(this.fallbacks).includes(t)?(...e)=>(this.targetQueue.push({method:t,args:e,resolve:()=>{}}),this.fallbacks[t](...e)):(...e)=>new Promise((n=>{this.targetQueue.push({method:t,args:e,resolve:n})}))})}async setRealTarget(e){this.target=e;for(const e of this.onQueue)this.target.on[e.method](...e.args);for(const e of this.targetQueue)e.resolve(await this.target[e.method](...e.args))}}},"./node_modules/@vue/devtools-api/lib/esm/time.js":(e,t,n)=>{"use strict";let o,r;function i(){var e;return void 0!==o||("undefined"!=typeof window&&window.performance?(o=!0,r=window.performance):void 0!==n.g&&(null===(e=n.g.perf_hooks)||void 0===e?void 0:e.performance)?(o=!0,r=n.g.perf_hooks.performance):o=!1),o}function s(){return i()?r.now():Date.now()}n.r(t),n.d(t,{isPerformanceSupported:()=>i,now:()=>s})},"./node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{EffectScope:()=>s,ITERATE_KEY:()=>y,ReactiveEffect:()=>A,computed:()=>ot,customRef:()=>Ge,deferredComputed:()=>ct,effect:()=>x,effectScope:()=>a,enableTracking:()=>k,getCurrentScope:()=>c,isProxy:()=>Oe,isReactive:()=>je,isReadonly:()=>Re,isRef:()=>Ve,isShallow:()=>Pe,markRaw:()=>Be,onScopeDispose:()=>u,pauseTracking:()=>E,proxyRefs:()=>Je,reactive:()=>Ce,readonly:()=>Ee,ref:()=>Le,resetTracking:()=>T,shallowReactive:()=>Se,shallowReadonly:()=>ke,shallowRef:()=>$e,stop:()=>w,toRaw:()=>Ne,toRef:()=>et,toRefs:()=>Xe,toValue:()=>We,track:()=>j,trigger:()=>P,triggerRef:()=>qe,unref:()=>ze});var o=n("./node_modules/@vue/shared/dist/shared.esm-bundler.js");function r(e,...t){console.warn(`[Vue warn] ${e}`,...t)}let i;class s{constructor(e=!1){this.detached=e,this._active=!0,this.effects=[],this.cleanups=[],this.parent=i,!e&&i&&(this.index=(i.scopes||(i.scopes=[])).push(this)-1)}get active(){return this._active}run(e){if(this._active){const t=i;try{return i=this,e()}finally{i=t}}else r("cannot run an inactive effect scope.")}on(){i=this}off(){i=this.parent}stop(e){if(this._active){let t,n;for(t=0,n=this.effects.length;t<n;t++)this.effects[t].stop();for(t=0,n=this.cleanups.length;t<n;t++)this.cleanups[t]();if(this.scopes)for(t=0,n=this.scopes.length;t<n;t++)this.scopes[t].stop(!0);if(!this.detached&&this.parent&&!e){const e=this.parent.scopes.pop();e&&e!==this&&(this.parent.scopes[this.index]=e,e.index=this.index)}this.parent=void 0,this._active=!1}}}function a(e){return new s(e)}function l(e,t=i){t&&t.active&&t.effects.push(e)}function c(){return i}function u(e){i?i.cleanups.push(e):r("onScopeDispose() is called when there is no active effect scope to be associated with.")}const d=e=>{const t=new Set(e);return t.w=0,t.n=0,t},p=e=>(e.w&g)>0,f=e=>(e.n&g)>0,h=new WeakMap;let m=0,g=1;let v;const y=Symbol("iterate"),b=Symbol("Map key iterate");class A{constructor(e,t=null,n){this.fn=e,this.scheduler=t,this.active=!0,this.deps=[],this.parent=void 0,l(this,n)}run(){if(!this.active)return this.fn();let e=v,t=C;for(;e;){if(e===this)return;e=e.parent}try{return this.parent=v,v=this,C=!0,g=1<<++m,m<=30?(({deps:e})=>{if(e.length)for(let t=0;t<e.length;t++)e[t].w|=g})(this):_(this),this.fn()}finally{m<=30&&(e=>{const{deps:t}=e;if(t.length){let n=0;for(let o=0;o<t.length;o++){const r=t[o];p(r)&&!f(r)?r.delete(e):t[n++]=r,r.w&=~g,r.n&=~g}t.length=n}})(this),g=1<<--m,v=this.parent,C=t,this.parent=void 0,this.deferStop&&this.stop()}}stop(){v===this?this.deferStop=!0:this.active&&(_(this),this.onStop&&this.onStop(),this.active=!1)}}function _(e){const{deps:t}=e;if(t.length){for(let n=0;n<t.length;n++)t[n].delete(e);t.length=0}}function x(e,t){e.effect&&(e=e.effect.fn);const n=new A(e);t&&((0,o.extend)(n,t),t.scope&&l(n,t.scope)),t&&t.lazy||n.run();const r=n.run.bind(n);return r.effect=n,r}function w(e){e.effect.stop()}let C=!0;const S=[];function E(){S.push(C),C=!1}function k(){S.push(C),C=!0}function T(){const e=S.pop();C=void 0===e||e}function j(e,t,n){if(C&&v){let o=h.get(e);o||h.set(e,o=new Map);let r=o.get(n);r||o.set(n,r=d());R(r,{effect:v,target:e,type:t,key:n})}}function R(e,t){let n=!1;m<=30?f(e)||(e.n|=g,n=!p(e)):n=!e.has(v),n&&(e.add(v),v.deps.push(e),v.onTrack&&v.onTrack((0,o.extend)({effect:v},t)))}function P(e,t,n,r,i,s){const a=h.get(e);if(!a)return;let l=[];if("clear"===t)l=[...a.values()];else if("length"===n&&(0,o.isArray)(e)){const e=Number(r);a.forEach(((t,n)=>{("length"===n||n>=e)&&l.push(t)}))}else switch(void 0!==n&&l.push(a.get(n)),t){case"add":(0,o.isArray)(e)?(0,o.isIntegerKey)(n)&&l.push(a.get("length")):(l.push(a.get(y)),(0,o.isMap)(e)&&l.push(a.get(b)));break;case"delete":(0,o.isArray)(e)||(l.push(a.get(y)),(0,o.isMap)(e)&&l.push(a.get(b)));break;case"set":(0,o.isMap)(e)&&l.push(a.get(y))}const c={target:e,type:t,key:n,newValue:r,oldValue:i,oldTarget:s};if(1===l.length)l[0]&&O(l[0],c);else{const e=[];for(const t of l)t&&e.push(...t);O(d(e),c)}}function O(e,t){const n=(0,o.isArray)(e)?e:[...e];for(const e of n)e.computed&&N(e,t);for(const e of n)e.computed||N(e,t)}function N(e,t){(e!==v||e.allowRecurse)&&(e.onTrigger&&e.onTrigger((0,o.extend)({effect:e},t)),e.scheduler?e.scheduler():e.run())}const B=(0,o.makeMap)("__proto__,__v_isRef,__isVue"),D=new Set(Object.getOwnPropertyNames(Symbol).filter((e=>"arguments"!==e&&"caller"!==e)).map((e=>Symbol[e])).filter(o.isSymbol)),M=U(),F=U(!1,!0),I=U(!0),V=U(!0,!0),L=$();function $(){const e={};return["includes","indexOf","lastIndexOf"].forEach((t=>{e[t]=function(...e){const n=Ne(this);for(let e=0,t=this.length;e<t;e++)j(n,"get",e+"");const o=n[t](...e);return-1===o||!1===o?n[t](...e.map(Ne)):o}})),["push","pop","shift","unshift","splice"].forEach((t=>{e[t]=function(...e){E();const n=Ne(this)[t].apply(this,e);return T(),n}})),e}function H(e){const t=Ne(this);return j(t,"has",e),t.hasOwnProperty(e)}function U(e=!1,t=!1){return function(n,r,i){if("__v_isReactive"===r)return!e;if("__v_isReadonly"===r)return e;if("__v_isShallow"===r)return t;if("__v_raw"===r&&i===(e?t?we:xe:t?_e:Ae).get(n))return n;const s=(0,o.isArray)(n);if(!e){if(s&&(0,o.hasOwn)(L,r))return Reflect.get(L,r,i);if("hasOwnProperty"===r)return H}const a=Reflect.get(n,r,i);return((0,o.isSymbol)(r)?D.has(r):B(r))?a:(e||j(n,"get",r),t?a:Ve(a)?s&&(0,o.isIntegerKey)(r)?a:a.value:(0,o.isObject)(a)?e?Ee(a):Ce(a):a)}}const q=W(),z=W(!0);function W(e=!1){return function(t,n,r,i){let s=t[n];if(Re(s)&&Ve(s)&&!Ve(r))return!1;if(!e&&(Pe(r)||Re(r)||(s=Ne(s),r=Ne(r)),!(0,o.isArray)(t)&&Ve(s)&&!Ve(r)))return s.value=r,!0;const a=(0,o.isArray)(t)&&(0,o.isIntegerKey)(n)?Number(n)<t.length:(0,o.hasOwn)(t,n),l=Reflect.set(t,n,r,i);return t===Ne(i)&&(a?(0,o.hasChanged)(r,s)&&P(t,"set",n,r,s):P(t,"add",n,r)),l}}const Y={get:M,set:q,deleteProperty:function(e,t){const n=(0,o.hasOwn)(e,t),r=e[t],i=Reflect.deleteProperty(e,t);return i&&n&&P(e,"delete",t,void 0,r),i},has:function(e,t){const n=Reflect.has(e,t);return(0,o.isSymbol)(t)&&D.has(t)||j(e,"has",t),n},ownKeys:function(e){return j(e,"iterate",(0,o.isArray)(e)?"length":y),Reflect.ownKeys(e)}},J={get:I,set:(e,t)=>(r(`Set operation on key "${String(t)}" failed: target is readonly.`,e),!0),deleteProperty:(e,t)=>(r(`Delete operation on key "${String(t)}" failed: target is readonly.`,e),!0)},K=(0,o.extend)({},Y,{get:F,set:z}),G=(0,o.extend)({},J,{get:V}),X=e=>e,Q=e=>Reflect.getPrototypeOf(e);function Z(e,t,n=!1,o=!1){const r=Ne(e=e.__v_raw),i=Ne(t);n||(t!==i&&j(r,"get",t),j(r,"get",i));const{has:s}=Q(r),a=o?X:n?Me:De;return s.call(r,t)?a(e.get(t)):s.call(r,i)?a(e.get(i)):void(e!==r&&e.get(t))}function ee(e,t=!1){const n=this.__v_raw,o=Ne(n),r=Ne(e);return t||(e!==r&&j(o,"has",e),j(o,"has",r)),e===r?n.has(e):n.has(e)||n.has(r)}function te(e,t=!1){return e=e.__v_raw,!t&&j(Ne(e),"iterate",y),Reflect.get(e,"size",e)}function ne(e){e=Ne(e);const t=Ne(this);return Q(t).has.call(t,e)||(t.add(e),P(t,"add",e,e)),this}function oe(e,t){t=Ne(t);const n=Ne(this),{has:r,get:i}=Q(n);let s=r.call(n,e);s?be(n,r,e):(e=Ne(e),s=r.call(n,e));const a=i.call(n,e);return n.set(e,t),s?(0,o.hasChanged)(t,a)&&P(n,"set",e,t,a):P(n,"add",e,t),this}function re(e){const t=Ne(this),{has:n,get:o}=Q(t);let r=n.call(t,e);r?be(t,n,e):(e=Ne(e),r=n.call(t,e));const i=o?o.call(t,e):void 0,s=t.delete(e);return r&&P(t,"delete",e,void 0,i),s}function ie(){const e=Ne(this),t=0!==e.size,n=(0,o.isMap)(e)?new Map(e):new Set(e),r=e.clear();return t&&P(e,"clear",void 0,void 0,n),r}function se(e,t){return function(n,o){const r=this,i=r.__v_raw,s=Ne(i),a=t?X:e?Me:De;return!e&&j(s,"iterate",y),i.forEach(((e,t)=>n.call(o,a(e),a(t),r)))}}function ae(e,t,n){return function(...r){const i=this.__v_raw,s=Ne(i),a=(0,o.isMap)(s),l="entries"===e||e===Symbol.iterator&&a,c="keys"===e&&a,u=i[e](...r),d=n?X:t?Me:De;return!t&&j(s,"iterate",c?b:y),{next(){const{value:e,done:t}=u.next();return t?{value:e,done:t}:{value:l?[d(e[0]),d(e[1])]:d(e),done:t}},[Symbol.iterator](){return this}}}}function le(e){return function(...t){{const n=t[0]?`on key "${t[0]}" `:"";console.warn(`${(0,o.capitalize)(e)} operation ${n}failed: target is readonly.`,Ne(this))}return"delete"!==e&&this}}function ce(){const e={get(e){return Z(this,e)},get size(){return te(this)},has:ee,add:ne,set:oe,delete:re,clear:ie,forEach:se(!1,!1)},t={get(e){return Z(this,e,!1,!0)},get size(){return te(this)},has:ee,add:ne,set:oe,delete:re,clear:ie,forEach:se(!1,!0)},n={get(e){return Z(this,e,!0)},get size(){return te(this,!0)},has(e){return ee.call(this,e,!0)},add:le("add"),set:le("set"),delete:le("delete"),clear:le("clear"),forEach:se(!0,!1)},o={get(e){return Z(this,e,!0,!0)},get size(){return te(this,!0)},has(e){return ee.call(this,e,!0)},add:le("add"),set:le("set"),delete:le("delete"),clear:le("clear"),forEach:se(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach((r=>{e[r]=ae(r,!1,!1),n[r]=ae(r,!0,!1),t[r]=ae(r,!1,!0),o[r]=ae(r,!0,!0)})),[e,n,t,o]}const[ue,de,pe,fe]=ce();function he(e,t){const n=t?e?fe:pe:e?de:ue;return(t,r,i)=>"__v_isReactive"===r?!e:"__v_isReadonly"===r?e:"__v_raw"===r?t:Reflect.get((0,o.hasOwn)(n,r)&&r in t?n:t,r,i)}const me={get:he(!1,!1)},ge={get:he(!1,!0)},ve={get:he(!0,!1)},ye={get:he(!0,!0)};function be(e,t,n){const r=Ne(n);if(r!==n&&t.call(e,r)){const t=(0,o.toRawType)(e);console.warn(`Reactive ${t} contains both the raw and reactive versions of the same object${"Map"===t?" as keys":""}, which can lead to inconsistencies. Avoid differentiating between the raw and reactive versions of an object and only use the reactive version if possible.`)}}const Ae=new WeakMap,_e=new WeakMap,xe=new WeakMap,we=new WeakMap;function Ce(e){return Re(e)?e:Te(e,!1,Y,me,Ae)}function Se(e){return Te(e,!1,K,ge,_e)}function Ee(e){return Te(e,!0,J,ve,xe)}function ke(e){return Te(e,!0,G,ye,we)}function Te(e,t,n,r,i){if(!(0,o.isObject)(e))return console.warn(`value cannot be made reactive: ${String(e)}`),e;if(e.__v_raw&&(!t||!e.__v_isReactive))return e;const s=i.get(e);if(s)return s;const a=(l=e).__v_skip||!Object.isExtensible(l)?0:function(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}((0,o.toRawType)(l));var l;if(0===a)return e;const c=new Proxy(e,2===a?r:n);return i.set(e,c),c}function je(e){return Re(e)?je(e.__v_raw):!(!e||!e.__v_isReactive)}function Re(e){return!(!e||!e.__v_isReadonly)}function Pe(e){return!(!e||!e.__v_isShallow)}function Oe(e){return je(e)||Re(e)}function Ne(e){const t=e&&e.__v_raw;return t?Ne(t):e}function Be(e){return(0,o.def)(e,"__v_skip",!0),e}const De=e=>(0,o.isObject)(e)?Ce(e):e,Me=e=>(0,o.isObject)(e)?Ee(e):e;function Fe(e){C&&v&&R((e=Ne(e)).dep||(e.dep=d()),{target:e,type:"get",key:"value"})}function Ie(e,t){const n=(e=Ne(e)).dep;n&&O(n,{target:e,type:"set",key:"value",newValue:t})}function Ve(e){return!(!e||!0!==e.__v_isRef)}function Le(e){return He(e,!1)}function $e(e){return He(e,!0)}function He(e,t){return Ve(e)?e:new Ue(e,t)}class Ue{constructor(e,t){this.__v_isShallow=t,this.dep=void 0,this.__v_isRef=!0,this._rawValue=t?e:Ne(e),this._value=t?e:De(e)}get value(){return Fe(this),this._value}set value(e){const t=this.__v_isShallow||Pe(e)||Re(e);e=t?e:Ne(e),(0,o.hasChanged)(e,this._rawValue)&&(this._rawValue=e,this._value=t?e:De(e),Ie(this,e))}}function qe(e){Ie(e,e.value)}function ze(e){return Ve(e)?e.value:e}function We(e){return(0,o.isFunction)(e)?e():ze(e)}const Ye={get:(e,t,n)=>ze(Reflect.get(e,t,n)),set:(e,t,n,o)=>{const r=e[t];return Ve(r)&&!Ve(n)?(r.value=n,!0):Reflect.set(e,t,n,o)}};function Je(e){return je(e)?e:new Proxy(e,Ye)}class Ke{constructor(e){this.dep=void 0,this.__v_isRef=!0;const{get:t,set:n}=e((()=>Fe(this)),(()=>Ie(this)));this._get=t,this._set=n}get value(){return this._get()}set value(e){this._set(e)}}function Ge(e){return new Ke(e)}function Xe(e){Oe(e)||console.warn("toRefs() expects a reactive object but received a plain one.");const t=(0,o.isArray)(e)?new Array(e.length):{};for(const n in e)t[n]=tt(e,n);return t}class Qe{constructor(e,t,n){this._object=e,this._key=t,this._defaultValue=n,this.__v_isRef=!0}get value(){const e=this._object[this._key];return void 0===e?this._defaultValue:e}set value(e){this._object[this._key]=e}get dep(){return e=Ne(this._object),t=this._key,null==(n=h.get(e))?void 0:n.get(t);var e,t,n}}class Ze{constructor(e){this._getter=e,this.__v_isRef=!0,this.__v_isReadonly=!0}get value(){return this._getter()}}function et(e,t,n){return Ve(e)?e:(0,o.isFunction)(e)?new Ze(e):(0,o.isObject)(e)&&arguments.length>1?tt(e,t,n):Le(e)}function tt(e,t,n){const o=e[t];return Ve(o)?o:new Qe(e,t,n)}class nt{constructor(e,t,n,o){this._setter=t,this.dep=void 0,this.__v_isRef=!0,this.__v_isReadonly=!1,this._dirty=!0,this.effect=new A(e,(()=>{this._dirty||(this._dirty=!0,Ie(this))})),this.effect.computed=this,this.effect.active=this._cacheable=!o,this.__v_isReadonly=n}get value(){const e=Ne(this);return Fe(e),!e._dirty&&e._cacheable||(e._dirty=!1,e._value=e.effect.run()),e._value}set value(e){this._setter(e)}}function ot(e,t,n=!1){let r,i;const s=(0,o.isFunction)(e);s?(r=e,i=()=>{console.warn("Write operation failed: computed value is readonly")}):(r=e.get,i=e.set);const a=new nt(r,i,s||!i,n);return t&&!n&&(a.effect.onTrack=t.onTrack,a.effect.onTrigger=t.onTrigger),a}const rt=Promise.resolve(),it=[];let st=!1;const at=()=>{for(let e=0;e<it.length;e++)it[e]();it.length=0,st=!1};class lt{constructor(e){let t;this.dep=void 0,this._dirty=!0,this.__v_isRef=!0,this.__v_isReadonly=!0;let n=!1,o=!1;this.effect=new A(e,(e=>{if(this.dep){if(e)t=this._value,n=!0;else if(!o){const e=n?t:this._value;o=!0,n=!1,r=()=>{this.effect.active&&this._get()!==e&&Ie(this),o=!1},it.push(r),st||(st=!0,rt.then(at))}for(const e of this.dep)e.computed instanceof lt&&e.scheduler(!0)}var r;this._dirty=!0})),this.effect.computed=this}_get(){return this._dirty?(this._dirty=!1,this._value=this.effect.run()):this._value}get value(){return Fe(this),Ne(this)._get()}}function ct(e){return new lt(e)}},"./node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{BaseTransition:()=>$e,BaseTransitionPropsValidators:()=>Le,Comment:()=>ao,EffectScope:()=>o.EffectScope,Fragment:()=>io,KeepAlive:()=>Ze,ReactiveEffect:()=>o.ReactiveEffect,Static:()=>lo,Suspense:()=>be,Teleport:()=>oo,Text:()=>so,assertNumber:()=>c,callWithAsyncErrorHandling:()=>p,callWithErrorHandling:()=>d,camelize:()=>r.camelize,capitalize:()=>r.capitalize,cloneVNode:()=>jo,compatUtils:()=>xr,computed:()=>pr,createBlock:()=>bo,createCommentVNode:()=>No,createElementBlock:()=>yo,createElementVNode:()=>Eo,createHydrationRenderer:()=>Kn,createPropsRestProxy:()=>Xt,createRenderer:()=>Jn,createSlots:()=>kt,createStaticVNode:()=>Oo,createTextVNode:()=>Po,createVNode:()=>ko,customRef:()=>o.customRef,defineAsyncComponent:()=>Ge,defineComponent:()=>Je,defineEmits:()=>It,defineExpose:()=>Vt,defineModel:()=>Ht,defineOptions:()=>Lt,defineProps:()=>Ft,defineSlots:()=>$t,devtools:()=>L,effect:()=>o.effect,effectScope:()=>o.effectScope,getCurrentInstance:()=>Uo,getCurrentScope:()=>o.getCurrentScope,getTransitionRawChildren:()=>Ye,guardReactiveProps:()=>To,h:()=>fr,handleError:()=>f,hasInjectionContext:()=>yn,initCustomFormatter:()=>gr,inject:()=>vn,isMemoSame:()=>yr,isProxy:()=>o.isProxy,isReactive:()=>o.isReactive,isReadonly:()=>o.isReadonly,isRef:()=>o.isRef,isRuntimeOnly:()=>rr,isShallow:()=>o.isShallow,isVNode:()=>Ao,markRaw:()=>o.markRaw,mergeDefaults:()=>Kt,mergeModels:()=>Gt,mergeProps:()=>Fo,nextTick:()=>w,normalizeClass:()=>r.normalizeClass,normalizeProps:()=>r.normalizeProps,normalizeStyle:()=>r.normalizeStyle,onActivated:()=>tt,onBeforeMount:()=>ct,onBeforeUnmount:()=>ft,onBeforeUpdate:()=>dt,onDeactivated:()=>nt,onErrorCaptured:()=>yt,onMounted:()=>ut,onRenderTracked:()=>vt,onRenderTriggered:()=>gt,onScopeDispose:()=>o.onScopeDispose,onServerPrefetch:()=>mt,onUnmounted:()=>ht,onUpdated:()=>pt,openBlock:()=>po,popScopeId:()=>ie,provide:()=>gn,proxyRefs:()=>o.proxyRefs,pushScopeId:()=>re,queuePostFlushCb:()=>E,reactive:()=>o.reactive,readonly:()=>o.readonly,ref:()=>o.ref,registerRuntimeCompiler:()=>or,renderList:()=>Et,renderSlot:()=>Tt,resolveComponent:()=>At,resolveDirective:()=>wt,resolveDynamicComponent:()=>xt,resolveFilter:()=>_r,resolveTransitionHooks:()=>Ue,setBlockTracking:()=>go,setDevtoolsHook:()=>q,setTransitionHooks:()=>We,shallowReactive:()=>o.shallowReactive,shallowReadonly:()=>o.shallowReadonly,shallowRef:()=>o.shallowRef,ssrContextKey:()=>hr,ssrUtils:()=>Ar,stop:()=>o.stop,toDisplayString:()=>r.toDisplayString,toHandlerKey:()=>r.toHandlerKey,toHandlers:()=>Rt,toRaw:()=>o.toRaw,toRef:()=>o.toRef,toRefs:()=>o.toRefs,toValue:()=>o.toValue,transformVNodeArgs:()=>xo,triggerRef:()=>o.triggerRef,unref:()=>o.unref,useAttrs:()=>zt,useModel:()=>Wt,useSSRContext:()=>mr,useSlots:()=>qt,useTransitionState:()=>Ie,version:()=>br,warn:()=>l,watch:()=>Re,watchEffect:()=>Ee,watchPostEffect:()=>ke,watchSyncEffect:()=>Te,withAsyncContext:()=>Qt,withCtx:()=>ae,withDefaults:()=>Ut,withDirectives:()=>Me,withMemo:()=>vr,withScopeId:()=>se});var o=n("./node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js"),r=n("./node_modules/@vue/shared/dist/shared.esm-bundler.js");const i=[];function s(e){i.push(e)}function a(){i.pop()}function l(e,...t){}function c(e,t){}const u={sp:"serverPrefetch hook",bc:"beforeCreate hook",c:"created hook",bm:"beforeMount hook",m:"mounted hook",bu:"beforeUpdate hook",u:"updated",bum:"beforeUnmount hook",um:"unmounted hook",a:"activated hook",da:"deactivated hook",ec:"errorCaptured hook",rtc:"renderTracked hook",rtg:"renderTriggered hook",0:"setup function",1:"render function",2:"watcher getter",3:"watcher callback",4:"watcher cleanup function",5:"native event handler",6:"component event handler",7:"vnode hook",8:"directive hook",9:"transition hook",10:"app errorHandler",11:"app warnHandler",12:"ref function",13:"async component loader",14:"scheduler flush. This is likely a Vue internals bug. Please open an issue at https://new-issue.vuejs.org/?repo=vuejs/core"};function d(e,t,n,o){let r;try{r=o?e(...o):e()}catch(e){f(e,t,n)}return r}function p(e,t,n,o){if((0,r.isFunction)(e)){const i=d(e,t,n,o);return i&&(0,r.isPromise)(i)&&i.catch((e=>{f(e,t,n)})),i}const i=[];for(let r=0;r<e.length;r++)i.push(p(e[r],t,n,o));return i}function f(e,t,n,o=!0){const r=t?t.vnode:null;if(t){let o=t.parent;const r=t.proxy,i=u[n];for(;o;){const t=o.ec;if(t)for(let n=0;n<t.length;n++)if(!1===t[n](e,r,i))return;o=o.parent}const s=t.appContext.config.errorHandler;if(s)return void d(s,null,10,[e,r,i])}!function(e,t,n,o=!0){u[t];if(n&&s(n),n&&a(),o)throw e;console.error(e)}(e,n,r,o)}let h=!1,m=!1;const g=[];let v=0;const y=[];let b=null,A=0;const _=Promise.resolve();let x=null;function w(e){const t=x||_;return e?t.then(this?e.bind(this):e):t}function C(e){g.length&&g.includes(e,h&&e.allowRecurse?v+1:v)||(null==e.id?g.push(e):g.splice(function(e){let t=v+1,n=g.length;for(;t<n;){const o=t+n>>>1;j(g[o])<e?t=o+1:n=o}return t}(e.id),0,e),S())}function S(){h||m||(m=!0,x=_.then(P))}function E(e){(0,r.isArray)(e)?y.push(...e):b&&b.includes(e,e.allowRecurse?A+1:A)||y.push(e),S()}function k(e,t=(h?v+1:0)){for(e=e||new Map;t<g.length;t++){const n=g[t];if(n&&n.pre){if(O(e,n))continue;g.splice(t,1),t--,n()}}}function T(e){if(y.length){const t=[...new Set(y)];if(y.length=0,b)return void b.push(...t);for(b=t,e=e||new Map,b.sort(((e,t)=>j(e)-j(t))),A=0;A<b.length;A++)O(e,b[A])||b[A]();b=null,A=0}}const j=e=>null==e.id?1/0:e.id,R=(e,t)=>{const n=j(e)-j(t);if(0===n){if(e.pre&&!t.pre)return-1;if(t.pre&&!e.pre)return 1}return n};function P(e){m=!1,h=!0,e=e||new Map,g.sort(R);const t=t=>O(e,t);try{for(v=0;v<g.length;v++){const e=g[v];if(e&&!1!==e.active){if(t(e))continue;d(e,null,14)}}}finally{v=0,g.length=0,T(e),h=!1,x=null,(g.length||y.length)&&P(e)}}function O(e,t){if(e.has(t)){const n=e.get(t);if(n>100){const e=t.ownerInstance;e&&cr(e.type);return!0}e.set(t,n+1)}else e.set(t,1)}let N=!1;const B=new Set;(0,r.getGlobalThis)().__VUE_HMR_RUNTIME__={createRecord:V(M),rerender:V((function(e,t){const n=D.get(e);if(!n)return;n.initialDef.render=t,[...n.instances].forEach((e=>{t&&(e.render=t,F(e.type).render=t),e.renderCache=[],N=!0,e.update(),N=!1}))})),reload:V((function(e,t){const n=D.get(e);if(!n)return;t=F(t),I(n.initialDef,t);const o=[...n.instances];for(const e of o){const o=F(e.type);B.has(o)||(o!==n.initialDef&&I(o,t),B.add(o)),e.appContext.propsCache.delete(e.type),e.appContext.emitsCache.delete(e.type),e.appContext.optionsCache.delete(e.type),e.ceReload?(B.add(o),e.ceReload(t.styles),B.delete(o)):e.parent?C(e.parent.update):e.appContext.reload?e.appContext.reload():"undefined"!=typeof window?window.location.reload():console.warn("[HMR] Root or manually mounted instance modified. Full reload required.")}E((()=>{for(const e of o)B.delete(F(e.type))}))}))};const D=new Map;function M(e,t){return!D.has(e)&&(D.set(e,{initialDef:F(t),instances:new Set}),!0)}function F(e){return dr(e)?e.__vccOpts:e}function I(e,t){(0,r.extend)(e,t);for(const n in e)"__file"===n||n in t||delete e[n]}function V(e){return(t,n)=>{try{return e(t,n)}catch(e){console.error(e),console.warn("[HMR] Something went wrong during Vue component hot-reload. Full reload required.")}}}let L,$=[],H=!1;function U(e,...t){L?L.emit(e,...t):H||$.push({event:e,args:t})}function q(e,t){var n,o;if(L=e,L)L.enabled=!0,$.forEach((({event:e,args:t})=>L.emit(e,...t))),$=[];else if("undefined"!=typeof window&&window.HTMLElement&&!(null==(o=null==(n=window.navigator)?void 0:n.userAgent)?void 0:o.includes("jsdom"))){(t.__VUE_DEVTOOLS_HOOK_REPLAY__=t.__VUE_DEVTOOLS_HOOK_REPLAY__||[]).push((e=>{q(e,t)})),setTimeout((()=>{L||(t.__VUE_DEVTOOLS_HOOK_REPLAY__=null,H=!0,$=[])}),3e3)}else H=!0,$=[]}const z=J("component:added"),W=J("component:updated"),Y=J("component:removed");function J(e){return t=>{U(e,t.appContext.app,t.uid,t.parent?t.parent.uid:void 0,t)}}const K=X("perf:start"),G=X("perf:end");function X(e){return(t,n,o)=>{U(e,t.appContext.app,t.uid,t,n,o)}}function Q(e,t,...n){if(e.isUnmounted)return;const o=e.vnode.props||r.EMPTY_OBJ;{const{emitsOptions:o,propsOptions:[i]}=e;if(o)if(t in o){const e=o[t];if((0,r.isFunction)(e)){e(...n)}}else i&&(0,r.toHandlerKey)(t)in i||(0,r.toHandlerKey)(t)}let i=n;const s=t.startsWith("update:"),a=s&&t.slice(7);if(a&&a in o){const e=`${"modelValue"===a?"model":a}Modifiers`,{number:t,trim:s}=o[e]||r.EMPTY_OBJ;s&&(i=n.map((e=>(0,r.isString)(e)?e.trim():e))),t&&(i=n.map(r.looseToNumber))}(function(e,t,n){U("component:emit",e.appContext.app,e,t,n)})(e,t,i);{const n=t.toLowerCase();n!==t&&o[(0,r.toHandlerKey)(n)]&&(ur(e,e.type),(0,r.hyphenate)(t))}let l,c=o[l=(0,r.toHandlerKey)(t)]||o[l=(0,r.toHandlerKey)((0,r.camelize)(t))];!c&&s&&(c=o[l=(0,r.toHandlerKey)((0,r.hyphenate)(t))]),c&&p(c,e,6,i);const u=o[l+"Once"];if(u){if(e.emitted){if(e.emitted[l])return}else e.emitted={};e.emitted[l]=!0,p(u,e,6,i)}}function Z(e,t,n=!1){const o=t.emitsCache,i=o.get(e);if(void 0!==i)return i;const s=e.emits;let a={},l=!1;if(__VUE_OPTIONS_API__&&!(0,r.isFunction)(e)){const o=e=>{const n=Z(e,t,!0);n&&(l=!0,(0,r.extend)(a,n))};!n&&t.mixins.length&&t.mixins.forEach(o),e.extends&&o(e.extends),e.mixins&&e.mixins.forEach(o)}return s||l?((0,r.isArray)(s)?s.forEach((e=>a[e]=null)):(0,r.extend)(a,s),(0,r.isObject)(e)&&o.set(e,a),a):((0,r.isObject)(e)&&o.set(e,null),null)}function ee(e,t){return!(!e||!(0,r.isOn)(t))&&(t=t.slice(2).replace(/Once$/,""),(0,r.hasOwn)(e,t[0].toLowerCase()+t.slice(1))||(0,r.hasOwn)(e,(0,r.hyphenate)(t))||(0,r.hasOwn)(e,t))}let te=null,ne=null;function oe(e){const t=te;return te=e,ne=e&&e.type.__scopeId||null,t}function re(e){ne=e}function ie(){ne=null}const se=e=>ae;function ae(e,t=te,n){if(!t)return e;if(e._n)return e;const o=(...n)=>{o._d&&go(-1);const r=oe(t);let i;try{i=e(...n)}finally{oe(r),o._d&&go(1)}return W(t),i};return o._n=!0,o._c=!0,o._d=!0,o}let le=!1;function ce(){le=!0}function ue(e){const{type:t,vnode:n,proxy:o,withProxy:i,props:s,propsOptions:[a],slots:l,attrs:c,emit:u,render:d,renderCache:p,data:h,setupState:m,ctx:g,inheritAttrs:v}=e;let y,b;const A=oe(e);le=!1;try{if(4&n.shapeFlag){const e=i||o;y=Bo(d.call(e,e,p,s,m,h,g)),b=c}else{const e=t;c===s&&ce(),y=Bo(e.length>1?e(s,{get attrs(){return ce(),c},slots:l,emit:u}):e(s,null)),b=t.props?c:fe(c)}}catch(t){co.length=0,f(t,e,1),y=ko(ao)}let _,x=y;if(y.patchFlag>0&&2048&y.patchFlag&&([x,_]=de(y)),b&&!1!==v){const e=Object.keys(b),{shapeFlag:t}=x;if(e.length)if(7&t)a&&e.some(r.isModelListener)&&(b=he(b,a)),x=jo(x,b);else if(!le&&x.type!==ao){const e=Object.keys(c),t=[],n=[];for(let o=0,i=e.length;o<i;o++){const i=e[o];(0,r.isOn)(i)?(0,r.isModelListener)(i)||t.push(i[2].toLowerCase()+i.slice(3)):n.push(i)}n.length&&n.join(", "),t.length&&t.join(", ")}}return n.dirs&&(me(x),x=jo(x),x.dirs=x.dirs?x.dirs.concat(n.dirs):n.dirs),n.transition&&(me(x),x.transition=n.transition),_?_(x):y=x,oe(A),y}const de=e=>{const t=e.children,n=e.dynamicChildren,o=pe(t);if(!o)return[e,void 0];const r=t.indexOf(o),i=n?n.indexOf(o):-1;return[Bo(o),o=>{t[r]=o,n&&(i>-1?n[i]=o:o.patchFlag>0&&(e.dynamicChildren=[...n,o]))}]};function pe(e){let t;for(let n=0;n<e.length;n++){const o=e[n];if(!Ao(o))return;if(o.type!==ao||"v-if"===o.children){if(t)return;t=o}}return t}const fe=e=>{let t;for(const n in e)("class"===n||"style"===n||(0,r.isOn)(n))&&((t||(t={}))[n]=e[n]);return t},he=(e,t)=>{const n={};for(const o in e)(0,r.isModelListener)(o)&&o.slice(9)in t||(n[o]=e[o]);return n},me=e=>7&e.shapeFlag||e.type===ao;function ge(e,t,n){const o=Object.keys(t);if(o.length!==Object.keys(e).length)return!0;for(let r=0;r<o.length;r++){const i=o[r];if(t[i]!==e[i]&&!ee(n,i))return!0}return!1}function ve({vnode:e,parent:t},n){for(;t&&t.subTree===e;)(e=t.vnode).el=n,t=t.parent}const ye=e=>e.__isSuspense,be={name:"Suspense",__isSuspense:!0,process(e,t,n,o,r,i,s,a,l,c){null==e?function(e,t,n,o,r,i,s,a,l){const{p:c,o:{createElement:u}}=l,d=u("div"),p=e.suspense=xe(e,r,o,t,d,n,i,s,a,l);c(null,p.pendingBranch=e.ssContent,d,null,o,p,i,s),p.deps>0?(Ae(e,"onPending"),Ae(e,"onFallback"),c(null,e.ssFallback,t,n,o,null,i,s),Se(p,e.ssFallback)):p.resolve(!1,!0)}(t,n,o,r,i,s,a,l,c):function(e,t,n,o,r,i,s,a,{p:l,um:c,o:{createElement:u}}){const d=t.suspense=e.suspense;d.vnode=t,t.el=e.el;const p=t.ssContent,f=t.ssFallback,{activeBranch:h,pendingBranch:m,isInFallback:g,isHydrating:v}=d;if(m)d.pendingBranch=p,_o(p,m)?(l(m,p,d.hiddenContainer,null,r,d,i,s,a),d.deps<=0?d.resolve():g&&(l(h,f,n,o,r,null,i,s,a),Se(d,f))):(d.pendingId++,v?(d.isHydrating=!1,d.activeBranch=m):c(m,r,d),d.deps=0,d.effects.length=0,d.hiddenContainer=u("div"),g?(l(null,p,d.hiddenContainer,null,r,d,i,s,a),d.deps<=0?d.resolve():(l(h,f,n,o,r,null,i,s,a),Se(d,f))):h&&_o(p,h)?(l(h,p,n,o,r,d,i,s,a),d.resolve(!0)):(l(null,p,d.hiddenContainer,null,r,d,i,s,a),d.deps<=0&&d.resolve()));else if(h&&_o(p,h))l(h,p,n,o,r,d,i,s,a),Se(d,p);else if(Ae(t,"onPending"),d.pendingBranch=p,d.pendingId++,l(null,p,d.hiddenContainer,null,r,d,i,s,a),d.deps<=0)d.resolve();else{const{timeout:e,pendingId:t}=d;e>0?setTimeout((()=>{d.pendingId===t&&d.fallback(f)}),e):0===e&&d.fallback(f)}}(e,t,n,o,r,s,a,l,c)},hydrate:function(e,t,n,o,r,i,s,a,l){const c=t.suspense=xe(t,o,n,e.parentNode,document.createElement("div"),null,r,i,s,a,!0),u=l(e,c.pendingBranch=t.ssContent,n,c,i,s);0===c.deps&&c.resolve();return u},create:xe,normalize:function(e){const{shapeFlag:t,children:n}=e,o=32&t;e.ssContent=we(o?n.default:n),e.ssFallback=o?we(n.fallback):ko(ao)}};function Ae(e,t){const n=e.props&&e.props[t];(0,r.isFunction)(n)&&n()}let _e=!1;function xe(e,t,n,o,i,l,c,u,d,p,h=!1){_e||(_e=!0,console[console.info?"info":"log"]("<Suspense> is an experimental feature and its API will likely change."));const{p:m,m:g,um:v,n:y,o:{parentNode:b,remove:A}}=p;let _;const x=function(e){var t;return null!=(null==(t=e.props)?void 0:t.suspensible)&&!1!==e.props.suspensible}(e);x&&(null==t?void 0:t.pendingBranch)&&(_=t.pendingId,t.deps++);const w=e.props?(0,r.toNumber)(e.props.timeout):void 0;const C={vnode:e,parent:t,parentComponent:n,isSVG:c,container:o,hiddenContainer:i,anchor:l,deps:0,pendingId:0,timeout:"number"==typeof w?w:-1,activeBranch:null,pendingBranch:null,isInFallback:!0,isHydrating:h,isUnmounted:!1,effects:[],resolve(e=!1,n=!1){if(!e&&!C.pendingBranch)throw new Error("suspense.resolve() is called without a pending branch.");if(C.isUnmounted)throw new Error("suspense.resolve() is called on an already unmounted suspense boundary.");const{vnode:o,activeBranch:r,pendingBranch:i,pendingId:s,effects:a,parentComponent:l,container:c}=C;if(C.isHydrating)C.isHydrating=!1;else if(!e){const e=r&&i.transition&&"out-in"===i.transition.mode;e&&(r.transition.afterLeave=()=>{s===C.pendingId&&g(i,c,t,0)});let{anchor:t}=C;r&&(t=y(r),v(r,l,C,!0)),e||g(i,c,t,0)}Se(C,i),C.pendingBranch=null,C.isInFallback=!1;let u=C.parent,d=!1;for(;u;){if(u.pendingBranch){u.effects.push(...a),d=!0;break}u=u.parent}d||E(a),C.effects=[],x&&t&&t.pendingBranch&&_===t.pendingId&&(t.deps--,0!==t.deps||n||t.resolve()),Ae(o,"onResolve")},fallback(e){if(!C.pendingBranch)return;const{vnode:t,activeBranch:n,parentComponent:o,container:r,isSVG:i}=C;Ae(t,"onFallback");const s=y(n),a=()=>{C.isInFallback&&(m(null,e,r,s,o,null,i,u,d),Se(C,e))},l=e.transition&&"out-in"===e.transition.mode;l&&(n.transition.afterLeave=a),C.isInFallback=!0,v(n,o,null,!0),l||a()},move(e,t,n){C.activeBranch&&g(C.activeBranch,e,t,n),C.container=e},next:()=>C.activeBranch&&y(C.activeBranch),registerDep(e,t){const n=!!C.pendingBranch;n&&C.deps++;const o=e.vnode.el;e.asyncDep.catch((t=>{f(t,e,0)})).then((r=>{if(e.isUnmounted||C.isUnmounted||C.pendingId!==e.suspenseId)return;e.asyncResolved=!0;const{vnode:i}=e;s(i),nr(e,r,!1),o&&(i.el=o);const l=!o&&e.subTree.el;t(e,i,b(o||e.subTree.el),o?null:y(e.subTree),C,c,d),l&&A(l),ve(e,i.el),a(),n&&0==--C.deps&&C.resolve()}))},unmount(e,t){C.isUnmounted=!0,C.activeBranch&&v(C.activeBranch,n,e,t),C.pendingBranch&&v(C.pendingBranch,n,e,t)}};return C}function we(e){let t;if((0,r.isFunction)(e)){const n=mo&&e._c;n&&(e._d=!1,po()),e=e(),n&&(e._d=!0,t=uo,fo())}if((0,r.isArray)(e)){const t=pe(e);e=t}return e=Bo(e),t&&!e.dynamicChildren&&(e.dynamicChildren=t.filter((t=>t!==e))),e}function Ce(e,t){t&&t.pendingBranch?(0,r.isArray)(e)?t.effects.push(...e):t.effects.push(e):E(e)}function Se(e,t){e.activeBranch=t;const{vnode:n,parentComponent:o}=e,r=n.el=t.el;o&&o.subTree===n&&(o.vnode.el=r,ve(o,r))}function Ee(e,t){return Pe(e,null,t)}function ke(e,t){return Pe(e,null,(0,r.extend)({},t,{flush:"post"}))}function Te(e,t){return Pe(e,null,(0,r.extend)({},t,{flush:"sync"}))}const je={};function Re(e,t,n){return(0,r.isFunction)(t),Pe(e,t,n)}function Pe(e,t,{immediate:n,deep:i,flush:s,onTrack:a,onTrigger:l}=r.EMPTY_OBJ){var c;const u=(0,o.getCurrentScope)()===(null==(c=Ho)?void 0:c.scope)?Ho:null;let f,h,m=!1,g=!1;if((0,o.isRef)(e)?(f=()=>e.value,m=(0,o.isShallow)(e)):(0,o.isReactive)(e)?(f=()=>e,i=!0):(0,r.isArray)(e)?(g=!0,m=e.some((e=>(0,o.isReactive)(e)||(0,o.isShallow)(e))),f=()=>e.map((e=>(0,o.isRef)(e)?e.value:(0,o.isReactive)(e)?Be(e):(0,r.isFunction)(e)?d(e,u,2):void 0))):f=(0,r.isFunction)(e)?t?()=>d(e,u,2):()=>{if(!u||!u.isUnmounted)return h&&h(),p(e,u,3,[y])}:r.NOOP,t&&i){const e=f;f=()=>Be(e())}let v,y=e=>{h=x.onStop=()=>{d(e,u,4)}};if(er){if(y=r.NOOP,t?n&&p(t,u,3,[f(),g?[]:void 0,y]):f(),"sync"!==s)return r.NOOP;{const e=mr();v=e.__watcherHandles||(e.__watcherHandles=[])}}let b=g?new Array(e.length).fill(je):je;const A=()=>{if(x.active)if(t){const e=x.run();(i||m||(g?e.some(((e,t)=>(0,r.hasChanged)(e,b[t]))):(0,r.hasChanged)(e,b)))&&(h&&h(),p(t,u,3,[e,b===je?void 0:g&&b[0]===je?[]:b,y]),b=e)}else x.run()};let _;A.allowRecurse=!!t,"sync"===s?_=A:"post"===s?_=()=>Yn(A,u&&u.suspense):(A.pre=!0,u&&(A.id=u.uid),_=()=>C(A));const x=new o.ReactiveEffect(f,_);x.onTrack=a,x.onTrigger=l,t?n?A():b=x.run():"post"===s?Yn(x.run.bind(x),u&&u.suspense):x.run();const w=()=>{x.stop(),u&&u.scope&&(0,r.remove)(u.scope.effects,x)};return v&&v.push(w),w}function Oe(e,t,n){const o=this.proxy,i=(0,r.isString)(e)?e.includes(".")?Ne(o,e):()=>o[e]:e.bind(o,o);let s;(0,r.isFunction)(t)?s=t:(s=t.handler,n=t);const a=Ho;Yo(this);const l=Pe(i,s.bind(o),n);return a?Yo(a):Jo(),l}function Ne(e,t){const n=t.split(".");return()=>{let t=e;for(let e=0;e<n.length&&t;e++)t=t[n[e]];return t}}function Be(e,t){if(!(0,r.isObject)(e)||e.__v_skip)return e;if((t=t||new Set).has(e))return e;if(t.add(e),(0,o.isRef)(e))Be(e.value,t);else if((0,r.isArray)(e))for(let n=0;n<e.length;n++)Be(e[n],t);else if((0,r.isSet)(e)||(0,r.isMap)(e))e.forEach((e=>{Be(e,t)}));else if((0,r.isPlainObject)(e))for(const n in e)Be(e[n],t);return e}function De(e){(0,r.isBuiltInDirective)(e)}function Me(e,t){const n=te;if(null===n)return e;const o=ar(n)||n.proxy,i=e.dirs||(e.dirs=[]);for(let e=0;e<t.length;e++){let[n,s,a,l=r.EMPTY_OBJ]=t[e];n&&((0,r.isFunction)(n)&&(n={mounted:n,updated:n}),n.deep&&Be(s),i.push({dir:n,instance:o,value:s,oldValue:void 0,arg:a,modifiers:l}))}return e}function Fe(e,t,n,r){const i=e.dirs,s=t&&t.dirs;for(let a=0;a<i.length;a++){const l=i[a];s&&(l.oldValue=s[a].value);let c=l.dir[r];c&&((0,o.pauseTracking)(),p(c,n,8,[e.el,l,e,t]),(0,o.resetTracking)())}}function Ie(){const e={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:new Map};return ut((()=>{e.isMounted=!0})),ft((()=>{e.isUnmounting=!0})),e}const Ve=[Function,Array],Le={mode:String,appear:Boolean,persisted:Boolean,onBeforeEnter:Ve,onEnter:Ve,onAfterEnter:Ve,onEnterCancelled:Ve,onBeforeLeave:Ve,onLeave:Ve,onAfterLeave:Ve,onLeaveCancelled:Ve,onBeforeAppear:Ve,onAppear:Ve,onAfterAppear:Ve,onAppearCancelled:Ve},$e={name:"BaseTransition",props:Le,setup(e,{slots:t}){const n=Uo(),r=Ie();let i;return()=>{const s=t.default&&Ye(t.default(),!0);if(!s||!s.length)return;let a=s[0];if(s.length>1){let e=!1;for(const t of s)if(t.type!==ao){if(e)break;a=t,e=!0;break}}const l=(0,o.toRaw)(e),{mode:c}=l;if(r.isLeaving)return qe(a);const u=ze(a);if(!u)return qe(a);const d=Ue(u,l,r,n);We(u,d);const p=n.subTree,f=p&&ze(p);let h=!1;const{getTransitionKey:m}=u.type;if(m){const e=m();void 0===i?i=e:e!==i&&(i=e,h=!0)}if(f&&f.type!==ao&&(!_o(u,f)||h)){const e=Ue(f,l,r,n);if(We(f,e),"out-in"===c)return r.isLeaving=!0,e.afterLeave=()=>{r.isLeaving=!1,!1!==n.update.active&&n.update()},qe(a);"in-out"===c&&u.type!==ao&&(e.delayLeave=(e,t,n)=>{He(r,f)[String(f.key)]=f,e._leaveCb=()=>{t(),e._leaveCb=void 0,delete d.delayedLeave},d.delayedLeave=n})}return a}}};function He(e,t){const{leavingVNodes:n}=e;let o=n.get(t.type);return o||(o=Object.create(null),n.set(t.type,o)),o}function Ue(e,t,n,o){const{appear:i,mode:s,persisted:a=!1,onBeforeEnter:l,onEnter:c,onAfterEnter:u,onEnterCancelled:d,onBeforeLeave:f,onLeave:h,onAfterLeave:m,onLeaveCancelled:g,onBeforeAppear:v,onAppear:y,onAfterAppear:b,onAppearCancelled:A}=t,_=String(e.key),x=He(n,e),w=(e,t)=>{e&&p(e,o,9,t)},C=(e,t)=>{const n=t[1];w(e,t),(0,r.isArray)(e)?e.every((e=>e.length<=1))&&n():e.length<=1&&n()},S={mode:s,persisted:a,beforeEnter(t){let o=l;if(!n.isMounted){if(!i)return;o=v||l}t._leaveCb&&t._leaveCb(!0);const r=x[_];r&&_o(e,r)&&r.el._leaveCb&&r.el._leaveCb(),w(o,[t])},enter(e){let t=c,o=u,r=d;if(!n.isMounted){if(!i)return;t=y||c,o=b||u,r=A||d}let s=!1;const a=e._enterCb=t=>{s||(s=!0,w(t?r:o,[e]),S.delayedLeave&&S.delayedLeave(),e._enterCb=void 0)};t?C(t,[e,a]):a()},leave(t,o){const r=String(e.key);if(t._enterCb&&t._enterCb(!0),n.isUnmounting)return o();w(f,[t]);let i=!1;const s=t._leaveCb=n=>{i||(i=!0,o(),w(n?g:m,[t]),t._leaveCb=void 0,x[r]===e&&delete x[r])};x[r]=e,h?C(h,[t,s]):s()},clone:e=>Ue(e,t,n,o)};return S}function qe(e){if(Qe(e))return(e=jo(e)).children=null,e}function ze(e){return Qe(e)?e.children?e.children[0]:void 0:e}function We(e,t){6&e.shapeFlag&&e.component?We(e.component.subTree,t):128&e.shapeFlag?(e.ssContent.transition=t.clone(e.ssContent),e.ssFallback.transition=t.clone(e.ssFallback)):e.transition=t}function Ye(e,t=!1,n){let o=[],r=0;for(let i=0;i<e.length;i++){let s=e[i];const a=null==n?s.key:String(n)+String(null!=s.key?s.key:i);s.type===io?(128&s.patchFlag&&r++,o=o.concat(Ye(s.children,t,a))):(t||s.type!==ao)&&o.push(null!=a?jo(s,{key:a}):s)}if(r>1)for(let e=0;e<o.length;e++)o[e].patchFlag=-2;return o}function Je(e,t){return(0,r.isFunction)(e)?(()=>(0,r.extend)({name:e.name},t,{setup:e}))():e}const Ke=e=>!!e.type.__asyncLoader;function Ge(e){(0,r.isFunction)(e)&&(e={loader:e});const{loader:t,loadingComponent:n,errorComponent:i,delay:s=200,timeout:a,suspensible:l=!0,onError:c}=e;let u,d=null,p=0;const h=()=>{let e;return d||(e=d=t().catch((e=>{if(e=e instanceof Error?e:new Error(String(e)),c)return new Promise(((t,n)=>{c(e,(()=>t((p++,d=null,h()))),(()=>n(e)),p+1)}));throw e})).then((t=>{if(e!==d&&d)return d;if(t&&(t.__esModule||"Module"===t[Symbol.toStringTag])&&(t=t.default),t&&!(0,r.isObject)(t)&&!(0,r.isFunction)(t))throw new Error(`Invalid async component load result: ${t}`);return u=t,t})))};return Je({name:"AsyncComponentWrapper",__asyncLoader:h,get __asyncResolved(){return u},setup(){const e=Ho;if(u)return()=>Xe(u,e);const t=t=>{d=null,f(t,e,13,!i)};if(l&&e.suspense||er)return h().then((t=>()=>Xe(t,e))).catch((e=>(t(e),()=>i?ko(i,{error:e}):null)));const r=(0,o.ref)(!1),c=(0,o.ref)(),p=(0,o.ref)(!!s);return s&&setTimeout((()=>{p.value=!1}),s),null!=a&&setTimeout((()=>{if(!r.value&&!c.value){const e=new Error(`Async component timed out after ${a}ms.`);t(e),c.value=e}}),a),h().then((()=>{r.value=!0,e.parent&&Qe(e.parent.vnode)&&C(e.parent.update)})).catch((e=>{t(e),c.value=e})),()=>r.value&&u?Xe(u,e):c.value&&i?ko(i,{error:c.value}):n&&!p.value?ko(n):void 0}})}function Xe(e,t){const{ref:n,props:o,children:r,ce:i}=t.vnode,s=ko(e,o,r);return s.ref=n,s.ce=i,delete t.vnode.ce,s}const Qe=e=>e.type.__isKeepAlive,Ze={name:"KeepAlive",__isKeepAlive:!0,props:{include:[String,RegExp,Array],exclude:[String,RegExp,Array],max:[String,Number]},setup(e,{slots:t}){const n=Uo(),o=n.ctx;if(!o.renderer)return()=>{const e=t.default&&t.default();return e&&1===e.length?e[0]:e};const i=new Map,s=new Set;let a=null;n.__v_cache=i;const l=n.suspense,{renderer:{p:c,m:u,um:d,o:{createElement:p}}}=o,f=p("div");function h(e){it(e),d(e,n,l,!0)}function m(e){i.forEach(((t,n)=>{const o=cr(t.type);!o||e&&e(o)||g(n)}))}function g(e){const t=i.get(e);a&&_o(t,a)?a&&it(a):h(t),i.delete(e),s.delete(e)}o.activate=(e,t,n,o,i)=>{const s=e.component;u(e,t,n,0,l),c(s.vnode,e,t,n,s,l,o,e.slotScopeIds,i),Yn((()=>{s.isDeactivated=!1,s.a&&(0,r.invokeArrayFns)(s.a);const t=e.props&&e.props.onVnodeMounted;t&&Io(t,s.parent,e)}),l),z(s)},o.deactivate=e=>{const t=e.component;u(e,f,null,1,l),Yn((()=>{t.da&&(0,r.invokeArrayFns)(t.da);const n=e.props&&e.props.onVnodeUnmounted;n&&Io(n,t.parent,e),t.isDeactivated=!0}),l),z(t)},Re((()=>[e.include,e.exclude]),(([e,t])=>{e&&m((t=>et(e,t))),t&&m((e=>!et(t,e)))}),{flush:"post",deep:!0});let v=null;const y=()=>{null!=v&&i.set(v,st(n.subTree))};return ut(y),pt(y),ft((()=>{i.forEach((e=>{const{subTree:t,suspense:o}=n,r=st(t);if(e.type!==r.type||e.key!==r.key)h(e);else{it(r);const e=r.component.da;e&&Yn(e,o)}}))})),()=>{if(v=null,!t.default)return null;const n=t.default(),o=n[0];if(n.length>1)return a=null,n;if(!(Ao(o)&&(4&o.shapeFlag||128&o.shapeFlag)))return a=null,o;let r=st(o);const l=r.type,c=cr(Ke(r)?r.type.__asyncResolved||{}:l),{include:u,exclude:d,max:p}=e;if(u&&(!c||!et(u,c))||d&&c&&et(d,c))return a=r,o;const f=null==r.key?l:r.key,h=i.get(f);return r.el&&(r=jo(r),128&o.shapeFlag&&(o.ssContent=r)),v=f,h?(r.el=h.el,r.component=h.component,r.transition&&We(r,r.transition),r.shapeFlag|=512,s.delete(f),s.add(f)):(s.add(f),p&&s.size>parseInt(p,10)&&g(s.values().next().value)),r.shapeFlag|=256,a=r,ye(o.type)?o:r}}};function et(e,t){return(0,r.isArray)(e)?e.some((e=>et(e,t))):(0,r.isString)(e)?e.split(",").includes(t):!!(0,r.isRegExp)(e)&&e.test(t)}function tt(e,t){ot(e,"a",t)}function nt(e,t){ot(e,"da",t)}function ot(e,t,n=Ho){const o=e.__wdc||(e.__wdc=()=>{let t=n;for(;t;){if(t.isDeactivated)return;t=t.parent}return e()});if(at(t,o,n),n){let e=n.parent;for(;e&&e.parent;)Qe(e.parent.vnode)&&rt(o,t,n,e),e=e.parent}}function rt(e,t,n,o){const i=at(t,e,o,!0);ht((()=>{(0,r.remove)(o[t],i)}),n)}function it(e){e.shapeFlag&=-257,e.shapeFlag&=-513}function st(e){return 128&e.shapeFlag?e.ssContent:e}function at(e,t,n=Ho,i=!1){if(n){const r=n[e]||(n[e]=[]),s=t.__weh||(t.__weh=(...r)=>{if(n.isUnmounted)return;(0,o.pauseTracking)(),Yo(n);const i=p(t,n,e,r);return Jo(),(0,o.resetTracking)(),i});return i?r.unshift(s):r.push(s),s}(0,r.toHandlerKey)(u[e].replace(/ hook$/,""))}const lt=e=>(t,n=Ho)=>(!er||"sp"===e)&&at(e,((...e)=>t(...e)),n),ct=lt("bm"),ut=lt("m"),dt=lt("bu"),pt=lt("u"),ft=lt("bum"),ht=lt("um"),mt=lt("sp"),gt=lt("rtg"),vt=lt("rtc");function yt(e,t=Ho){at("ec",e,t)}const bt="components";function At(e,t){return Ct(bt,e,!0,t)||e}const _t=Symbol.for("v-ndc");function xt(e){return(0,r.isString)(e)?Ct(bt,e,!1)||e:e||_t}function wt(e){return Ct("directives",e)}function Ct(e,t,n=!0,o=!1){const i=te||Ho;if(i){const s=i.type;if(e===bt){const e=cr(s,!1);if(e&&(e===t||e===(0,r.camelize)(t)||e===(0,r.capitalize)((0,r.camelize)(t))))return s}const a=St(i[e]||s[e],t)||St(i.appContext[e],t);if(!a&&o)return s;if(n&&!a){e.slice(0,-1)}return a}(0,r.capitalize)(e.slice(0,-1))}function St(e,t){return e&&(e[t]||e[(0,r.camelize)(t)]||e[(0,r.capitalize)((0,r.camelize)(t))])}function Et(e,t,n,o){let i;const s=n&&n[o];if((0,r.isArray)(e)||(0,r.isString)(e)){i=new Array(e.length);for(let n=0,o=e.length;n<o;n++)i[n]=t(e[n],n,void 0,s&&s[n])}else if("number"==typeof e){Number.isInteger(e),i=new Array(e);for(let n=0;n<e;n++)i[n]=t(n+1,n,void 0,s&&s[n])}else if((0,r.isObject)(e))if(e[Symbol.iterator])i=Array.from(e,((e,n)=>t(e,n,void 0,s&&s[n])));else{const n=Object.keys(e);i=new Array(n.length);for(let o=0,r=n.length;o<r;o++){const r=n[o];i[o]=t(e[r],r,o,s&&s[o])}}else i=[];return n&&(n[o]=i),i}function kt(e,t){for(let n=0;n<t.length;n++){const o=t[n];if((0,r.isArray)(o))for(let t=0;t<o.length;t++)e[o[t].name]=o[t].fn;else o&&(e[o.name]=o.key?(...e)=>{const t=o.fn(...e);return t&&(t.key=o.key),t}:o.fn)}return e}function Tt(e,t,n={},o,r){if(te.isCE||te.parent&&Ke(te.parent)&&te.parent.isCE)return"default"!==t&&(n.name=t),ko("slot",n,o&&o());let i=e[t];i&&i.length>1&&(i=()=>[]),i&&i._c&&(i._d=!1),po();const s=i&&jt(i(n)),a=bo(io,{key:n.key||s&&s.key||`_${t}`},s||(o?o():[]),s&&1===e._?64:-2);return!r&&a.scopeId&&(a.slotScopeIds=[a.scopeId+"-s"]),i&&i._c&&(i._d=!0),a}function jt(e){return e.some((e=>!Ao(e)||e.type!==ao&&!(e.type===io&&!jt(e.children))))?e:null}function Rt(e,t){const n={};if(!(0,r.isObject)(e))return n;for(const o in e)n[t&&/[A-Z]/.test(o)?`on:${o}`:(0,r.toHandlerKey)(o)]=e[o];return n}const Pt=e=>e?Xo(e)?ar(e)||e.proxy:Pt(e.parent):null,Ot=(0,r.extend)(Object.create(null),{$:e=>e,$el:e=>e.vnode.el,$data:e=>e.data,$props:e=>(0,o.shallowReadonly)(e.props),$attrs:e=>(0,o.shallowReadonly)(e.attrs),$slots:e=>(0,o.shallowReadonly)(e.slots),$refs:e=>(0,o.shallowReadonly)(e.refs),$parent:e=>Pt(e.parent),$root:e=>Pt(e.root),$emit:e=>e.emit,$options:e=>__VUE_OPTIONS_API__?on(e):e.type,$forceUpdate:e=>e.f||(e.f=()=>C(e.update)),$nextTick:e=>e.n||(e.n=w.bind(e.proxy)),$watch:e=>__VUE_OPTIONS_API__?Oe.bind(e):r.NOOP}),Nt=e=>"_"===e||"$"===e,Bt=(e,t)=>e!==r.EMPTY_OBJ&&!e.__isScriptSetup&&(0,r.hasOwn)(e,t),Dt={get({_:e},t){const{ctx:n,setupState:i,data:s,props:a,accessCache:l,type:c,appContext:u}=e;if("__isVue"===t)return!0;let d;if("$"!==t[0]){const o=l[t];if(void 0!==o)switch(o){case 1:return i[t];case 2:return s[t];case 4:return n[t];case 3:return a[t]}else{if(Bt(i,t))return l[t]=1,i[t];if(s!==r.EMPTY_OBJ&&(0,r.hasOwn)(s,t))return l[t]=2,s[t];if((d=e.propsOptions[0])&&(0,r.hasOwn)(d,t))return l[t]=3,a[t];if(n!==r.EMPTY_OBJ&&(0,r.hasOwn)(n,t))return l[t]=4,n[t];__VUE_OPTIONS_API__&&!Zt||(l[t]=0)}}const p=Ot[t];let f,h;return p?("$attrs"===t?((0,o.track)(e,"get",t),ce()):"$slots"===t&&(0,o.track)(e,"get",t),p(e)):(f=c.__cssModules)&&(f=f[t])?f:n!==r.EMPTY_OBJ&&(0,r.hasOwn)(n,t)?(l[t]=4,n[t]):(h=u.config.globalProperties,(0,r.hasOwn)(h,t)?h[t]:void(!te||(0,r.isString)(t)&&0===t.indexOf("__v")||(s!==r.EMPTY_OBJ&&Nt(t[0])&&(0,r.hasOwn)(s,t)||e===te)&&JSON.stringify(t)))},set({_:e},t,n){const{data:o,setupState:i,ctx:s}=e;return Bt(i,t)?(i[t]=n,!0):(!i.__isScriptSetup||!(0,r.hasOwn)(i,t))&&(o!==r.EMPTY_OBJ&&(0,r.hasOwn)(o,t)?(o[t]=n,!0):!(0,r.hasOwn)(e.props,t)&&(("$"!==t[0]||!(t.slice(1)in e))&&(t in e.appContext.config.globalProperties?Object.defineProperty(s,t,{enumerable:!0,configurable:!0,value:n}):s[t]=n,!0)))},has({_:{data:e,setupState:t,accessCache:n,ctx:o,appContext:i,propsOptions:s}},a){let l;return!!n[a]||e!==r.EMPTY_OBJ&&(0,r.hasOwn)(e,a)||Bt(t,a)||(l=s[0])&&(0,r.hasOwn)(l,a)||(0,r.hasOwn)(o,a)||(0,r.hasOwn)(Ot,a)||(0,r.hasOwn)(i.config.globalProperties,a)},defineProperty(e,t,n){return null!=n.get?e._.accessCache[t]=0:(0,r.hasOwn)(n,"value")&&this.set(e,t,n.value,null),Reflect.defineProperty(e,t,n)},ownKeys:e=>Reflect.ownKeys(e)},Mt=(0,r.extend)({},Dt,{get(e,t){if(t!==Symbol.unscopables)return Dt.get(e,t,e)},has(e,t){const n="_"!==t[0]&&!(0,r.isGloballyWhitelisted)(t);return!n&&Dt.has(e,t)&&JSON.stringify(t),n}});function Ft(){return null}function It(){return null}function Vt(e){1}function Lt(e){1}function $t(){return null}function Ht(){1}function Ut(e,t){return null}function qt(){return Yt().slots}function zt(){return Yt().attrs}function Wt(e,t,n){const r=Uo();if(!r)return(0,o.ref)();if(!r.propsOptions[0][t])return(0,o.ref)();if(n&&n.local){const n=(0,o.ref)(e[t]);return Re((()=>e[t]),(e=>n.value=e)),Re(n,(n=>{n!==e[t]&&r.emit(`update:${t}`,n)})),n}return{__v_isRef:!0,get value(){return e[t]},set value(e){r.emit(`update:${t}`,e)}}}function Yt(){const e=Uo();return e.setupContext||(e.setupContext=sr(e))}function Jt(e){return(0,r.isArray)(e)?e.reduce(((e,t)=>(e[t]=null,e)),{}):e}function Kt(e,t){const n=Jt(e);for(const e in t){if(e.startsWith("__skip"))continue;let o=n[e];o?(0,r.isArray)(o)||(0,r.isFunction)(o)?o=n[e]={type:o,default:t[e]}:o.default=t[e]:null===o&&(o=n[e]={default:t[e]}),o&&t[`__skip_${e}`]&&(o.skipFactory=!0)}return n}function Gt(e,t){return e&&t?(0,r.isArray)(e)&&(0,r.isArray)(t)?e.concat(t):(0,r.extend)({},Jt(e),Jt(t)):e||t}function Xt(e,t){const n={};for(const o in e)t.includes(o)||Object.defineProperty(n,o,{enumerable:!0,get:()=>e[o]});return n}function Qt(e){const t=Uo();let n=e();return Jo(),(0,r.isPromise)(n)&&(n=n.catch((e=>{throw Yo(t),e}))),[n,()=>Yo(t)]}let Zt=!0;function en(e){const t=on(e),n=e.proxy,i=e.ctx;Zt=!1,t.beforeCreate&&tn(t.beforeCreate,e,"bc");const{data:s,computed:a,methods:l,watch:c,provide:u,inject:d,created:p,beforeMount:f,mounted:h,beforeUpdate:m,updated:g,activated:v,deactivated:y,beforeDestroy:b,beforeUnmount:A,destroyed:_,unmounted:x,render:w,renderTracked:C,renderTriggered:S,errorCaptured:E,serverPrefetch:k,expose:T,inheritAttrs:j,components:R,directives:P,filters:O}=t,N=function(){const e=Object.create(null);return(t,n)=>{e[n]?e[n]:e[n]=t}}();{const[t]=e.propsOptions;if(t)for(const e in t)N("Props",e)}if(d&&function(e,t,n=r.NOOP){(0,r.isArray)(e)&&(e=ln(e));for(const i in e){const s=e[i];let a;a=(0,r.isObject)(s)?"default"in s?vn(s.from||i,s.default,!0):vn(s.from||i):vn(s),(0,o.isRef)(a)?Object.defineProperty(t,i,{enumerable:!0,configurable:!0,get:()=>a.value,set:e=>a.value=e}):t[i]=a,n("Inject",i)}}(d,i,N),l)for(const e in l){const t=l[e];(0,r.isFunction)(t)&&(Object.defineProperty(i,e,{value:t.bind(n),configurable:!0,enumerable:!0,writable:!0}),N("Methods",e))}if(s){(0,r.isFunction)(s);const t=s.call(n,n);if((0,r.isPromise)(t),(0,r.isObject)(t)){e.data=(0,o.reactive)(t);for(const e in t)N("Data",e),Nt(e[0])||Object.defineProperty(i,e,{configurable:!0,enumerable:!0,get:()=>t[e],set:r.NOOP})}else;}if(Zt=!0,a)for(const e in a){const t=a[e],o=(0,r.isFunction)(t)?t.bind(n,n):(0,r.isFunction)(t.get)?t.get.bind(n,n):r.NOOP;r.NOOP;const s=!(0,r.isFunction)(t)&&(0,r.isFunction)(t.set)?t.set.bind(n):()=>{},l=pr({get:o,set:s});Object.defineProperty(i,e,{enumerable:!0,configurable:!0,get:()=>l.value,set:e=>l.value=e}),N("Computed",e)}if(c)for(const e in c)nn(c[e],i,n,e);if(u){const e=(0,r.isFunction)(u)?u.call(n):u;Reflect.ownKeys(e).forEach((t=>{gn(t,e[t])}))}function B(e,t){(0,r.isArray)(t)?t.forEach((t=>e(t.bind(n)))):t&&e(t.bind(n))}if(p&&tn(p,e,"c"),B(ct,f),B(ut,h),B(dt,m),B(pt,g),B(tt,v),B(nt,y),B(yt,E),B(vt,C),B(gt,S),B(ft,A),B(ht,x),B(mt,k),(0,r.isArray)(T))if(T.length){const t=e.exposed||(e.exposed={});T.forEach((e=>{Object.defineProperty(t,e,{get:()=>n[e],set:t=>n[e]=t})}))}else e.exposed||(e.exposed={});w&&e.render===r.NOOP&&(e.render=w),null!=j&&(e.inheritAttrs=j),R&&(e.components=R),P&&(e.directives=P)}function tn(e,t,n){p((0,r.isArray)(e)?e.map((e=>e.bind(t.proxy))):e.bind(t.proxy),t,n)}function nn(e,t,n,o){const i=o.includes(".")?Ne(n,o):()=>n[o];if((0,r.isString)(e)){const n=t[e];(0,r.isFunction)(n)&&Re(i,n)}else if((0,r.isFunction)(e))Re(i,e.bind(n));else if((0,r.isObject)(e))if((0,r.isArray)(e))e.forEach((e=>nn(e,t,n,o)));else{const o=(0,r.isFunction)(e.handler)?e.handler.bind(n):t[e.handler];(0,r.isFunction)(o)?Re(i,o,e):e.handler}else 1}function on(e){const t=e.type,{mixins:n,extends:o}=t,{mixins:i,optionsCache:s,config:{optionMergeStrategies:a}}=e.appContext,l=s.get(t);let c;return l?c=l:i.length||n||o?(c={},i.length&&i.forEach((e=>rn(c,e,a,!0))),rn(c,t,a)):c=t,(0,r.isObject)(t)&&s.set(t,c),c}function rn(e,t,n,o=!1){const{mixins:r,extends:i}=t;i&&rn(e,i,n,!0),r&&r.forEach((t=>rn(e,t,n,!0)));for(const r in t)if(o&&"expose"===r);else{const o=sn[r]||n&&n[r];e[r]=o?o(e[r],t[r]):t[r]}return e}const sn={data:an,props:dn,emits:dn,methods:un,computed:un,beforeCreate:cn,created:cn,beforeMount:cn,mounted:cn,beforeUpdate:cn,updated:cn,beforeDestroy:cn,beforeUnmount:cn,destroyed:cn,unmounted:cn,activated:cn,deactivated:cn,errorCaptured:cn,serverPrefetch:cn,components:un,directives:un,watch:function(e,t){if(!e)return t;if(!t)return e;const n=(0,r.extend)(Object.create(null),e);for(const o in t)n[o]=cn(e[o],t[o]);return n},provide:an,inject:function(e,t){return un(ln(e),ln(t))}};function an(e,t){return t?e?function(){return(0,r.extend)((0,r.isFunction)(e)?e.call(this,this):e,(0,r.isFunction)(t)?t.call(this,this):t)}:t:e}function ln(e){if((0,r.isArray)(e)){const t={};for(let n=0;n<e.length;n++)t[e[n]]=e[n];return t}return e}function cn(e,t){return e?[...new Set([].concat(e,t))]:t}function un(e,t){return e?(0,r.extend)(Object.create(null),e,t):t}function dn(e,t){return e?(0,r.isArray)(e)&&(0,r.isArray)(t)?[...new Set([...e,...t])]:(0,r.extend)(Object.create(null),Jt(e),Jt(null!=t?t:{})):t}function pn(){return{app:null,config:{isNativeTag:r.NO,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let fn=0;function hn(e,t){return function(n,o=null){(0,r.isFunction)(n)||(n=(0,r.extend)({},n)),null==o||(0,r.isObject)(o)||(o=null);const i=pn();Object.defineProperty(i.config,"unwrapInjectedRef",{get:()=>!0,set(){}});const s=new Set;let a=!1;const l=i.app={_uid:fn++,_component:n,_props:o,_container:null,_context:i,_instance:null,version:br,get config(){return i.config},set config(e){1},use:(e,...t)=>(s.has(e)||(e&&(0,r.isFunction)(e.install)?(s.add(e),e.install(l,...t)):(0,r.isFunction)(e)&&(s.add(e),e(l,...t))),l),mixin:e=>(__VUE_OPTIONS_API__&&(i.mixins.includes(e)?e.name&&e.name:i.mixins.push(e)),l),component:(e,t)=>(Go(e,i.config),t?(i.components[e],i.components[e]=t,l):i.components[e]),directive:(e,t)=>(De(e),t?(i.directives[e],i.directives[e]=t,l):i.directives[e]),mount(r,s,c){if(!a){r.__vue_app__;const u=ko(n,o);return u.appContext=i,i.reload=()=>{e(jo(u),r,c)},s&&t?t(u,r):e(u,r,c),a=!0,l._container=r,r.__vue_app__=l,l._instance=u.component,function(e,t){U("app:init",e,t,{Fragment:io,Text:so,Comment:ao,Static:lo})}(l,br),ar(u.component)||u.component.proxy}},unmount(){a&&(e(null,l._container),l._instance=null,function(e){U("app:unmount",e)}(l),delete l._container.__vue_app__)},provide:(e,t)=>(e in i.provides&&String(e),i.provides[e]=t,l),runWithContext(e){mn=l;try{return e()}finally{mn=null}}};return l}}let mn=null;function gn(e,t){if(Ho){let n=Ho.provides;const o=Ho.parent&&Ho.parent.provides;o===n&&(n=Ho.provides=Object.create(o)),n[e]=t}else 1}function vn(e,t,n=!1){const o=Ho||te;if(o||mn){const i=o?null==o.parent?o.vnode.appContext&&o.vnode.appContext.provides:o.parent.provides:mn._context.provides;if(i&&e in i)return i[e];if(arguments.length>1)return n&&(0,r.isFunction)(t)?t.call(o&&o.proxy):t;String(e)}else 1}function yn(){return!!(Ho||te||mn)}function bn(e,t,n,i){const[s,a]=e.propsOptions;let l,c=!1;if(t)for(let o in t){if((0,r.isReservedProp)(o))continue;const u=t[o];let d;s&&(0,r.hasOwn)(s,d=(0,r.camelize)(o))?a&&a.includes(d)?(l||(l={}))[d]=u:n[d]=u:ee(e.emitsOptions,o)||o in i&&u===i[o]||(i[o]=u,c=!0)}if(a){const t=(0,o.toRaw)(n),i=l||r.EMPTY_OBJ;for(let o=0;o<a.length;o++){const l=a[o];n[l]=An(s,t,l,i[l],e,!(0,r.hasOwn)(i,l))}}return c}function An(e,t,n,o,i,s){const a=e[n];if(null!=a){const e=(0,r.hasOwn)(a,"default");if(e&&void 0===o){const e=a.default;if(a.type!==Function&&!a.skipFactory&&(0,r.isFunction)(e)){const{propsDefaults:r}=i;n in r?o=r[n]:(Yo(i),o=r[n]=e.call(null,t),Jo())}else o=e}a[0]&&(s&&!e?o=!1:!a[1]||""!==o&&o!==(0,r.hyphenate)(n)||(o=!0))}return o}function _n(e,t,n=!1){const o=t.propsCache,i=o.get(e);if(i)return i;const s=e.props,a={},l=[];let c=!1;if(__VUE_OPTIONS_API__&&!(0,r.isFunction)(e)){const o=e=>{c=!0;const[n,o]=_n(e,t,!0);(0,r.extend)(a,n),o&&l.push(...o)};!n&&t.mixins.length&&t.mixins.forEach(o),e.extends&&o(e.extends),e.mixins&&e.mixins.forEach(o)}if(!s&&!c)return(0,r.isObject)(e)&&o.set(e,r.EMPTY_ARR),r.EMPTY_ARR;if((0,r.isArray)(s))for(let e=0;e<s.length;e++){(0,r.isString)(s[e])||s[e];const t=(0,r.camelize)(s[e]);xn(t)&&(a[t]=r.EMPTY_OBJ)}else if(s){(0,r.isObject)(s);for(const e in s){const t=(0,r.camelize)(e);if(xn(t)){const n=s[e],o=a[t]=(0,r.isArray)(n)||(0,r.isFunction)(n)?{type:n}:(0,r.extend)({},n);if(o){const e=Sn(Boolean,o.type),n=Sn(String,o.type);o[0]=e>-1,o[1]=n<0||e<n,(e>-1||(0,r.hasOwn)(o,"default"))&&l.push(t)}}}}const u=[a,l];return(0,r.isObject)(e)&&o.set(e,u),u}function xn(e){return"$"!==e[0]}function wn(e){const t=e&&e.toString().match(/^\s*(function|class) (\w+)/);return t?t[2]:null===e?"null":""}function Cn(e,t){return wn(e)===wn(t)}function Sn(e,t){return(0,r.isArray)(t)?t.findIndex((t=>Cn(t,e))):(0,r.isFunction)(t)&&Cn(t,e)?0:-1}function En(e,t,n){const i=(0,o.toRaw)(t),s=n.propsOptions[0];for(const t in s){let n=s[t];null!=n&&kn(t,i[t],n,!(0,r.hasOwn)(e,t)&&!(0,r.hasOwn)(e,(0,r.hyphenate)(t)))}}function kn(e,t,n,o){const{type:i,required:s,validator:a,skipCheck:l}=n;if((!s||!o)&&(null!=t||s)){if(null!=i&&!0!==i&&!l){let n=!1;const o=(0,r.isArray)(i)?i:[i],s=[];for(let e=0;e<o.length&&!n;e++){const{valid:r,expectedType:i}=jn(t,o[e]);s.push(i||""),n=r}if(!n)return void function(e,t,n){let o=`Invalid prop: type check failed for prop "${e}". Expected ${n.map(r.capitalize).join(" | ")}`;const i=n[0],s=(0,r.toRawType)(t),a=Rn(t,i),l=Rn(t,s);1===n.length&&Pn(i)&&!function(...e){return e.some((e=>"boolean"===e.toLowerCase()))}(i,s)&&(o+=` with value ${a}`);o+=`, got ${s} `,Pn(s)&&(o+=`with value ${l}.`)}(e,t,s)}a&&a(t)}}const Tn=(0,r.makeMap)("String,Number,Boolean,Function,Symbol,BigInt");function jn(e,t){let n;const o=wn(t);if(Tn(o)){const r=typeof e;n=r===o.toLowerCase(),n||"object"!==r||(n=e instanceof t)}else n="Object"===o?(0,r.isObject)(e):"Array"===o?(0,r.isArray)(e):"null"===o?null===e:e instanceof t;return{valid:n,expectedType:o}}function Rn(e,t){return"String"===t?`"${e}"`:"Number"===t?`${Number(e)}`:`${e}`}function Pn(e){return["string","number","boolean"].some((t=>e.toLowerCase()===t))}const On=e=>"_"===e[0]||"$stable"===e,Nn=e=>(0,r.isArray)(e)?e.map(Bo):[Bo(e)],Bn=(e,t,n)=>{if(t._n)return t;const o=ae(((...e)=>Nn(t(...e))),n);return o._c=!1,o},Dn=(e,t,n)=>{const o=e._ctx;for(const n in e){if(On(n))continue;const i=e[n];if((0,r.isFunction)(i))t[n]=Bn(0,i,o);else if(null!=i){1;const e=Nn(i);t[n]=()=>e}}},Mn=(e,t)=>{Qe(e.vnode);const n=Nn(t);e.slots.default=()=>n};function Fn(e,t,n,i,s=!1){if((0,r.isArray)(e))return void e.forEach(((e,o)=>Fn(e,t&&((0,r.isArray)(t)?t[o]:t),n,i,s)));if(Ke(i)&&!s)return;const a=4&i.shapeFlag?ar(i.component)||i.component.proxy:i.el,l=s?null:a,{i:c,r:u}=e;if(!c)return;const p=t&&t.r,f=c.refs===r.EMPTY_OBJ?c.refs={}:c.refs,h=c.setupState;if(null!=p&&p!==u&&((0,r.isString)(p)?(f[p]=null,(0,r.hasOwn)(h,p)&&(h[p]=null)):(0,o.isRef)(p)&&(p.value=null)),(0,r.isFunction)(u))d(u,c,12,[l,f]);else{const t=(0,r.isString)(u),i=(0,o.isRef)(u);if(t||i){const o=()=>{if(e.f){const n=t?(0,r.hasOwn)(h,u)?h[u]:f[u]:u.value;s?(0,r.isArray)(n)&&(0,r.remove)(n,a):(0,r.isArray)(n)?n.includes(a)||n.push(a):t?(f[u]=[a],(0,r.hasOwn)(h,u)&&(h[u]=f[u])):(u.value=[a],e.k&&(f[e.k]=u.value))}else t?(f[u]=l,(0,r.hasOwn)(h,u)&&(h[u]=l)):i&&(u.value=l,e.k&&(f[e.k]=l))};l?(o.id=-1,Yn(o,n)):o()}else 1}}let In=!1;const Vn=e=>/svg/.test(e.namespaceURI)&&"foreignObject"!==e.tagName,Ln=e=>8===e.nodeType;function $n(e){const{mt:t,p:n,o:{patchProp:o,createText:i,nextSibling:s,parentNode:a,remove:l,insert:c,createComment:u}}=e,d=(n,o,r,l,u,v=!1)=>{const y=Ln(n)&&"["===n.data,b=()=>m(n,o,r,l,u,y),{type:A,ref:_,shapeFlag:x,patchFlag:w}=o;let C=n.nodeType;o.el=n,-2===w&&(v=!1,o.dynamicChildren=null);let S=null;switch(A){case so:3!==C?""===o.children?(c(o.el=i(""),a(n),n),S=n):S=b():(n.data!==o.children&&(In=!0,JSON.stringify(n.data),JSON.stringify(o.children),n.data=o.children),S=s(n));break;case ao:S=8!==C||y?b():s(n);break;case lo:if(y&&(C=(n=s(n)).nodeType),1===C||3===C){S=n;const e=!o.children.length;for(let t=0;t<o.staticCount;t++)e&&(o.children+=1===S.nodeType?S.outerHTML:S.data),t===o.staticCount-1&&(o.anchor=S),S=s(S);return y?s(S):S}b();break;case io:S=y?h(n,o,r,l,u,v):b();break;default:if(1&x)S=1!==C||o.type.toLowerCase()!==n.tagName.toLowerCase()?b():p(n,o,r,l,u,v);else if(6&x){o.slotScopeIds=u;const e=a(n);if(t(o,e,null,r,l,Vn(e),v),S=y?g(n):s(n),S&&Ln(S)&&"teleport end"===S.data&&(S=s(S)),Ke(o)){let t;y?(t=ko(io),t.anchor=S?S.previousSibling:e.lastChild):t=3===n.nodeType?Po(""):ko("div"),t.el=n,o.component.subTree=t}}else 64&x?S=8!==C?b():o.type.hydrate(n,o,r,l,u,v,e,f):128&x&&(S=o.type.hydrate(n,o,r,l,Vn(a(n)),u,v,e,d))}return null!=_&&Fn(_,null,l,o),S},p=(e,t,n,i,s,a)=>{a=a||!!t.dynamicChildren;const{type:c,props:u,patchFlag:d,shapeFlag:p,dirs:h}=t,m="input"===c&&h||"option"===c;{if(h&&Fe(t,null,n,"created"),u)if(m||!a||48&d)for(const t in u)(m&&t.endsWith("value")||(0,r.isOn)(t)&&!(0,r.isReservedProp)(t))&&o(e,t,null,u[t],!1,void 0,n);else u.onClick&&o(e,"onClick",null,u.onClick,!1,void 0,n);let c;if((c=u&&u.onVnodeBeforeMount)&&Io(c,n,t),h&&Fe(t,null,n,"beforeMount"),((c=u&&u.onVnodeMounted)||h)&&Ce((()=>{c&&Io(c,n,t),h&&Fe(t,null,n,"mounted")}),i),16&p&&(!u||!u.innerHTML&&!u.textContent)){let o=f(e.firstChild,t,e,n,i,s,a),r=!1;for(;o;){In=!0,r||(t.type,r=!0);const e=o;o=o.nextSibling,l(e)}}else 8&p&&e.textContent!==t.children&&(In=!0,t.type,e.textContent,t.children,e.textContent=t.children)}return e.nextSibling},f=(e,t,o,r,i,s,a)=>{a=a||!!t.dynamicChildren;const l=t.children,c=l.length;let u=!1;for(let t=0;t<c;t++){const c=a?l[t]:l[t]=Bo(l[t]);if(e)e=d(e,c,r,i,s,a);else{if(c.type===so&&!c.children)continue;In=!0,u||(o.tagName.toLowerCase(),u=!0),n(null,c,o,null,r,i,Vn(o),s)}}return e},h=(e,t,n,o,r,i)=>{const{slotScopeIds:l}=t;l&&(r=r?r.concat(l):l);const d=a(e),p=f(s(e),t,d,n,o,r,i);return p&&Ln(p)&&"]"===p.data?s(t.anchor=p):(In=!0,c(t.anchor=u("]"),d,p),p)},m=(e,t,o,r,i,c)=>{if(In=!0,t.type,3===e.nodeType||Ln(e)&&e.data,t.el=null,c){const t=g(e);for(;;){const n=s(e);if(!n||n===t)break;l(n)}}const u=s(e),d=a(e);return l(e),n(null,t,d,u,o,r,Vn(d),i),u},g=e=>{let t=0;for(;e;)if((e=s(e))&&Ln(e)&&("["===e.data&&t++,"]"===e.data)){if(0===t)return s(e);t--}return e};return[(e,t)=>{if(!t.hasChildNodes())return n(null,e,t),T(),void(t._vnode=e);In=!1,d(t.firstChild,e,null,null,null),T(),t._vnode=e,In&&console.error("Hydration completed but contains mismatches.")},d]}let Hn,Un;function qn(e,t){e.appContext.config.performance&&Wn()&&Un.mark(`vue-${t}-${e.uid}`),K(e,t,Wn()?Un.now():Date.now())}function zn(e,t){if(e.appContext.config.performance&&Wn()){const n=`vue-${t}-${e.uid}`,o=n+":end";Un.mark(o),Un.measure(`<${ur(e,e.type)}> ${t}`,n,o),Un.clearMarks(n),Un.clearMarks(o)}G(e,t,Wn()?Un.now():Date.now())}function Wn(){return void 0!==Hn||("undefined"!=typeof window&&window.performance?(Hn=!0,Un=window.performance):Hn=!1),Hn}const Yn=Ce;function Jn(e){return Gn(e)}function Kn(e){return Gn(e,$n)}function Gn(e,t){!function(){const e=[];if("boolean"!=typeof __VUE_OPTIONS_API__&&(e.push("__VUE_OPTIONS_API__"),(0,r.getGlobalThis)().__VUE_OPTIONS_API__=!0),"boolean"!=typeof __VUE_PROD_DEVTOOLS__&&(e.push("__VUE_PROD_DEVTOOLS__"),(0,r.getGlobalThis)().__VUE_PROD_DEVTOOLS__=!1),e.length){const t=e.length>1;console.warn(`Feature flag${t?"s":""} ${e.join(", ")} ${t?"are":"is"} not explicitly defined. You are running the esm-bundler build of Vue, which expects these compile-time feature flags to be globally injected via the bundler config in order to get better tree-shaking in the production bundle.\n\nFor more details, see https://link.vuejs.org/feature-flags.`)}}();const n=(0,r.getGlobalThis)();n.__VUE__=!0,q(n.__VUE_DEVTOOLS_GLOBAL_HOOK__,n);const{insert:i,remove:l,patchProp:c,createElement:u,createText:d,createComment:p,setText:f,setElementText:h,parentNode:m,nextSibling:y,setScopeId:b=r.NOOP,insertStaticContent:A}=e,_=(e,t,n,o=null,r=null,i=null,s=!1,a=null,l=!N&&!!t.dynamicChildren)=>{if(e===t)return;e&&!_o(e,t)&&(o=ae(e),ne(e,r,i,!0),e=null),-2===t.patchFlag&&(l=!1,t.dynamicChildren=null);const{type:c,ref:u,shapeFlag:d}=t;switch(c){case so:x(e,t,n,o);break;case ao:w(e,t,n,o);break;case lo:null==e?S(t,n,o,s):E(e,t,n,s);break;case io:$(e,t,n,o,r,i,s,a,l);break;default:1&d?R(e,t,n,o,r,i,s,a,l):6&d?H(e,t,n,o,r,i,s,a,l):(64&d||128&d)&&c.process(e,t,n,o,r,i,s,a,l,ce)}null!=u&&r&&Fn(u,e&&e.ref,i,t||e,!t)},x=(e,t,n,o)=>{if(null==e)i(t.el=d(t.children),n,o);else{const n=t.el=e.el;t.children!==e.children&&f(n,t.children)}},w=(e,t,n,o)=>{null==e?i(t.el=p(t.children||""),n,o):t.el=e.el},S=(e,t,n,o)=>{[e.el,e.anchor]=A(e.children,t,n,o,e.el,e.anchor)},E=(e,t,n,o)=>{if(t.children!==e.children){const r=y(e.anchor);j(e),[t.el,t.anchor]=A(t.children,n,r,o)}else t.el=e.el,t.anchor=e.anchor},j=({el:e,anchor:t})=>{let n;for(;e&&e!==t;)n=y(e),l(e),e=n;l(t)},R=(e,t,n,o,r,i,s,a,l)=>{s=s||"svg"===t.type,null==e?P(t,n,o,r,i,s,a,l):F(e,t,r,i,s,a,l)},P=(e,t,n,o,s,a,l,d)=>{let p,f;const{type:m,props:g,shapeFlag:v,transition:y,dirs:b}=e;if(p=e.el=u(e.type,a,g&&g.is,g),8&v?h(p,e.children):16&v&&B(e.children,p,null,o,s,a&&"foreignObject"!==m,l,d),b&&Fe(e,null,o,"created"),O(p,e,e.scopeId,l,o),g){for(const t in g)"value"===t||(0,r.isReservedProp)(t)||c(p,t,null,g[t],a,e.children,o,s,se);"value"in g&&c(p,"value",null,g.value),(f=g.onVnodeBeforeMount)&&Io(f,o,e)}Object.defineProperty(p,"__vnode",{value:e,enumerable:!1}),Object.defineProperty(p,"__vueParentComponent",{value:o,enumerable:!1}),b&&Fe(e,null,o,"beforeMount");const A=(!s||s&&!s.pendingBranch)&&y&&!y.persisted;A&&y.beforeEnter(p),i(p,t,n),((f=g&&g.onVnodeMounted)||A||b)&&Yn((()=>{f&&Io(f,o,e),A&&y.enter(p),b&&Fe(e,null,o,"mounted")}),s)},O=(e,t,n,o,r)=>{if(n&&b(e,n),o)for(let t=0;t<o.length;t++)b(e,o[t]);if(r){let n=r.subTree;if(n.patchFlag>0&&2048&n.patchFlag&&(n=pe(n.children)||n),t===n){const t=r.vnode;O(e,t,t.scopeId,t.slotScopeIds,r.parent)}}},B=(e,t,n,o,r,i,s,a,l=0)=>{for(let c=l;c<e.length;c++){const l=e[c]=a?Do(e[c]):Bo(e[c]);_(null,l,t,n,o,r,i,s,a)}},F=(e,t,n,o,i,s,a)=>{const l=t.el=e.el;let{patchFlag:u,dynamicChildren:d,dirs:p}=t;u|=16&e.patchFlag;const f=e.props||r.EMPTY_OBJ,m=t.props||r.EMPTY_OBJ;let g;n&&Xn(n,!1),(g=m.onVnodeBeforeUpdate)&&Io(g,n,t,e),p&&Fe(t,e,n,"beforeUpdate"),n&&Xn(n,!0),N&&(u=0,a=!1,d=null);const v=i&&"foreignObject"!==t.type;if(d?(I(e.dynamicChildren,d,l,n,o,v,s),Qn(e,t)):a||X(e,t,l,null,n,o,v,s,!1),u>0){if(16&u)V(l,t,f,m,n,o,i);else if(2&u&&f.class!==m.class&&c(l,"class",null,m.class,i),4&u&&c(l,"style",f.style,m.style,i),8&u){const r=t.dynamicProps;for(let t=0;t<r.length;t++){const s=r[t],a=f[s],u=m[s];u===a&&"value"!==s||c(l,s,a,u,i,e.children,n,o,se)}}1&u&&e.children!==t.children&&h(l,t.children)}else a||null!=d||V(l,t,f,m,n,o,i);((g=m.onVnodeUpdated)||p)&&Yn((()=>{g&&Io(g,n,t,e),p&&Fe(t,e,n,"updated")}),o)},I=(e,t,n,o,r,i,s)=>{for(let a=0;a<t.length;a++){const l=e[a],c=t[a],u=l.el&&(l.type===io||!_o(l,c)||70&l.shapeFlag)?m(l.el):n;_(l,c,u,null,o,r,i,s,!0)}},V=(e,t,n,o,i,s,a)=>{if(n!==o){if(n!==r.EMPTY_OBJ)for(const l in n)(0,r.isReservedProp)(l)||l in o||c(e,l,n[l],null,a,t.children,i,s,se);for(const l in o){if((0,r.isReservedProp)(l))continue;const u=o[l],d=n[l];u!==d&&"value"!==l&&c(e,l,d,u,a,t.children,i,s,se)}"value"in o&&c(e,"value",n.value,o.value)}},$=(e,t,n,o,r,s,a,l,c)=>{const u=t.el=e?e.el:d(""),p=t.anchor=e?e.anchor:d("");let{patchFlag:f,dynamicChildren:h,slotScopeIds:m}=t;(N||2048&f)&&(f=0,c=!1,h=null),m&&(l=l?l.concat(m):m),null==e?(i(u,n,o),i(p,n,o),B(t.children,n,p,r,s,a,l,c)):f>0&&64&f&&h&&e.dynamicChildren?(I(e.dynamicChildren,h,n,r,s,a,l),Qn(e,t)):X(e,t,n,p,r,s,a,l,c)},H=(e,t,n,o,r,i,s,a,l)=>{t.slotScopeIds=a,null==e?512&t.shapeFlag?r.ctx.activate(t,n,o,s,l):U(t,n,o,r,i,s,l):J(e,t,l)},U=(e,t,n,o,r,i,l)=>{const c=e.component=$o(e,o,r);if(c.type.__hmrId&&function(e){const t=e.type.__hmrId;let n=D.get(t);n||(M(t,e.type),n=D.get(t)),n.instances.add(e)}(c),s(e),qn(c,"mount"),Qe(e)&&(c.ctx.renderer=ce),qn(c,"init"),tr(c),zn(c,"init"),c.asyncDep){if(r&&r.registerDep(c,K),!e.el){const e=c.subTree=ko(ao);w(null,e,t,n)}}else K(c,e,t,n,r,i,l),a(),zn(c,"mount")},J=(e,t,n)=>{const o=t.component=e.component;if(function(e,t,n){const{props:o,children:r,component:i}=e,{props:s,children:a,patchFlag:l}=t,c=i.emitsOptions;if((r||a)&&N)return!0;if(t.dirs||t.transition)return!0;if(!(n&&l>=0))return!(!r&&!a||a&&a.$stable)||o!==s&&(o?!s||ge(o,s,c):!!s);if(1024&l)return!0;if(16&l)return o?ge(o,s,c):!!s;if(8&l){const e=t.dynamicProps;for(let t=0;t<e.length;t++){const n=e[t];if(s[n]!==o[n]&&!ee(c,n))return!0}}return!1}(e,t,n)){if(o.asyncDep&&!o.asyncResolved)return s(t),G(o,t,n),void a();o.next=t,function(e){const t=g.indexOf(e);t>v&&g.splice(t,1)}(o.update),o.update()}else t.el=e.el,o.vnode=t},K=(e,t,n,i,l,c,u)=>{const d=e.effect=new o.ReactiveEffect((()=>{if(e.isMounted){let t,{next:n,bu:o,u:i,parent:d,vnode:p}=e,f=n;s(n||e.vnode),Xn(e,!1),n?(n.el=p.el,G(e,n,u)):n=p,o&&(0,r.invokeArrayFns)(o),(t=n.props&&n.props.onVnodeBeforeUpdate)&&Io(t,d,n,p),Xn(e,!0),qn(e,"render");const h=ue(e);zn(e,"render");const g=e.subTree;e.subTree=h,qn(e,"patch"),_(g,h,m(g.el),ae(g),e,l,c),zn(e,"patch"),n.el=h.el,null===f&&ve(e,h.el),i&&Yn(i,l),(t=n.props&&n.props.onVnodeUpdated)&&Yn((()=>Io(t,d,n,p)),l),W(e),a()}else{let o;const{el:s,props:a}=t,{bm:u,m:d,parent:p}=e,f=Ke(t);if(Xn(e,!1),u&&(0,r.invokeArrayFns)(u),!f&&(o=a&&a.onVnodeBeforeMount)&&Io(o,p,t),Xn(e,!0),s&&fe){const n=()=>{qn(e,"render"),e.subTree=ue(e),zn(e,"render"),qn(e,"hydrate"),fe(s,e.subTree,e,l,null),zn(e,"hydrate")};f?t.type.__asyncLoader().then((()=>!e.isUnmounted&&n())):n()}else{qn(e,"render");const o=e.subTree=ue(e);zn(e,"render"),qn(e,"patch"),_(null,o,n,i,e,l,c),zn(e,"patch"),t.el=o.el}if(d&&Yn(d,l),!f&&(o=a&&a.onVnodeMounted)){const e=t;Yn((()=>Io(o,p,e)),l)}(256&t.shapeFlag||p&&Ke(p.vnode)&&256&p.vnode.shapeFlag)&&e.a&&Yn(e.a,l),e.isMounted=!0,z(e),t=n=i=null}}),(()=>C(p)),e.scope),p=e.update=()=>d.run();p.id=e.uid,Xn(e,!0),d.onTrack=e.rtc?t=>(0,r.invokeArrayFns)(e.rtc,t):void 0,d.onTrigger=e.rtg?t=>(0,r.invokeArrayFns)(e.rtg,t):void 0,p.ownerInstance=e,p()},G=(e,t,n)=>{t.component=e;const i=e.vnode.props;e.vnode=t,e.next=null,function(e,t,n,i){const{props:s,attrs:a,vnode:{patchFlag:l}}=e,c=(0,o.toRaw)(s),[u]=e.propsOptions;let d=!1;if(function(e){for(;e;){if(e.type.__hmrId)return!0;e=e.parent}}(e)||!(i||l>0)||16&l){let o;bn(e,t,s,a)&&(d=!0);for(const i in c)t&&((0,r.hasOwn)(t,i)||(o=(0,r.hyphenate)(i))!==i&&(0,r.hasOwn)(t,o))||(u?!n||void 0===n[i]&&void 0===n[o]||(s[i]=An(u,c,i,void 0,e,!0)):delete s[i]);if(a!==c)for(const e in a)t&&(0,r.hasOwn)(t,e)||(delete a[e],d=!0)}else if(8&l){const n=e.vnode.dynamicProps;for(let o=0;o<n.length;o++){let i=n[o];if(ee(e.emitsOptions,i))continue;const l=t[i];if(u)if((0,r.hasOwn)(a,i))l!==a[i]&&(a[i]=l,d=!0);else{const t=(0,r.camelize)(i);s[t]=An(u,c,t,l,e,!1)}else l!==a[i]&&(a[i]=l,d=!0)}}d&&(0,o.trigger)(e,"set","$attrs"),En(t||{},s,e)}(e,t.props,i,n),((e,t,n)=>{const{vnode:i,slots:s}=e;let a=!0,l=r.EMPTY_OBJ;if(32&i.shapeFlag){const i=t._;i?N?((0,r.extend)(s,t),(0,o.trigger)(e,"set","$slots")):n&&1===i?a=!1:((0,r.extend)(s,t),n||1!==i||delete s._):(a=!t.$stable,Dn(t,s)),l=t}else t&&(Mn(e,t),l={default:1});if(a)for(const e in s)On(e)||e in l||delete s[e]})(e,t.children,n),(0,o.pauseTracking)(),k(),(0,o.resetTracking)()},X=(e,t,n,o,r,i,s,a,l=!1)=>{const c=e&&e.children,u=e?e.shapeFlag:0,d=t.children,{patchFlag:p,shapeFlag:f}=t;if(p>0){if(128&p)return void Z(c,d,n,o,r,i,s,a,l);if(256&p)return void Q(c,d,n,o,r,i,s,a,l)}8&f?(16&u&&se(c,r,i),d!==c&&h(n,d)):16&u?16&f?Z(c,d,n,o,r,i,s,a,l):se(c,r,i,!0):(8&u&&h(n,""),16&f&&B(d,n,o,r,i,s,a,l))},Q=(e,t,n,o,i,s,a,l,c)=>{e=e||r.EMPTY_ARR,t=t||r.EMPTY_ARR;const u=e.length,d=t.length,p=Math.min(u,d);let f;for(f=0;f<p;f++){const o=t[f]=c?Do(t[f]):Bo(t[f]);_(e[f],o,n,null,i,s,a,l,c)}u>d?se(e,i,s,!0,!1,p):B(t,n,o,i,s,a,l,c,p)},Z=(e,t,n,o,i,s,a,l,c)=>{let u=0;const d=t.length;let p=e.length-1,f=d-1;for(;u<=p&&u<=f;){const o=e[u],r=t[u]=c?Do(t[u]):Bo(t[u]);if(!_o(o,r))break;_(o,r,n,null,i,s,a,l,c),u++}for(;u<=p&&u<=f;){const o=e[p],r=t[f]=c?Do(t[f]):Bo(t[f]);if(!_o(o,r))break;_(o,r,n,null,i,s,a,l,c),p--,f--}if(u>p){if(u<=f){const e=f+1,r=e<d?t[e].el:o;for(;u<=f;)_(null,t[u]=c?Do(t[u]):Bo(t[u]),n,r,i,s,a,l,c),u++}}else if(u>f)for(;u<=p;)ne(e[u],i,s,!0),u++;else{const h=u,m=u,g=new Map;for(u=m;u<=f;u++){const e=t[u]=c?Do(t[u]):Bo(t[u]);null!=e.key&&(g.has(e.key)&&JSON.stringify(e.key),g.set(e.key,u))}let v,y=0;const b=f-m+1;let A=!1,x=0;const w=new Array(b);for(u=0;u<b;u++)w[u]=0;for(u=h;u<=p;u++){const o=e[u];if(y>=b){ne(o,i,s,!0);continue}let r;if(null!=o.key)r=g.get(o.key);else for(v=m;v<=f;v++)if(0===w[v-m]&&_o(o,t[v])){r=v;break}void 0===r?ne(o,i,s,!0):(w[r-m]=u+1,r>=x?x=r:A=!0,_(o,t[r],n,null,i,s,a,l,c),y++)}const C=A?function(e){const t=e.slice(),n=[0];let o,r,i,s,a;const l=e.length;for(o=0;o<l;o++){const l=e[o];if(0!==l){if(r=n[n.length-1],e[r]<l){t[o]=r,n.push(o);continue}for(i=0,s=n.length-1;i<s;)a=i+s>>1,e[n[a]]<l?i=a+1:s=a;l<e[n[i]]&&(i>0&&(t[o]=n[i-1]),n[i]=o)}}i=n.length,s=n[i-1];for(;i-- >0;)n[i]=s,s=t[s];return n}(w):r.EMPTY_ARR;for(v=C.length-1,u=b-1;u>=0;u--){const e=m+u,r=t[e],p=e+1<d?t[e+1].el:o;0===w[u]?_(null,r,n,p,i,s,a,l,c):A&&(v<0||u!==C[v]?te(r,n,p,2):v--)}}},te=(e,t,n,o,r=null)=>{const{el:s,type:a,transition:l,children:c,shapeFlag:u}=e;if(6&u)return void te(e.component.subTree,t,n,o);if(128&u)return void e.suspense.move(t,n,o);if(64&u)return void a.move(e,t,n,ce);if(a===io){i(s,t,n);for(let e=0;e<c.length;e++)te(c[e],t,n,o);return void i(e.anchor,t,n)}if(a===lo)return void(({el:e,anchor:t},n,o)=>{let r;for(;e&&e!==t;)r=y(e),i(e,n,o),e=r;i(t,n,o)})(e,t,n);if(2!==o&&1&u&&l)if(0===o)l.beforeEnter(s),i(s,t,n),Yn((()=>l.enter(s)),r);else{const{leave:e,delayLeave:o,afterLeave:r}=l,a=()=>i(s,t,n),c=()=>{e(s,(()=>{a(),r&&r()}))};o?o(s,a,c):c()}else i(s,t,n)},ne=(e,t,n,o=!1,r=!1)=>{const{type:i,props:s,ref:a,children:l,dynamicChildren:c,shapeFlag:u,patchFlag:d,dirs:p}=e;if(null!=a&&Fn(a,null,n,e,!0),256&u)return void t.ctx.deactivate(e);const f=1&u&&p,h=!Ke(e);let m;if(h&&(m=s&&s.onVnodeBeforeUnmount)&&Io(m,t,e),6&u)ie(e.component,n,o);else{if(128&u)return void e.suspense.unmount(n,o);f&&Fe(e,null,t,"beforeUnmount"),64&u?e.type.remove(e,t,n,r,ce,o):c&&(i!==io||d>0&&64&d)?se(c,t,n,!1,!0):(i===io&&384&d||!r&&16&u)&&se(l,t,n),o&&oe(e)}(h&&(m=s&&s.onVnodeUnmounted)||f)&&Yn((()=>{m&&Io(m,t,e),f&&Fe(e,null,t,"unmounted")}),n)},oe=e=>{const{type:t,el:n,anchor:o,transition:r}=e;if(t===io)return void(e.patchFlag>0&&2048&e.patchFlag&&r&&!r.persisted?e.children.forEach((e=>{e.type===ao?l(e.el):oe(e)})):re(n,o));if(t===lo)return void j(e);const i=()=>{l(n),r&&!r.persisted&&r.afterLeave&&r.afterLeave()};if(1&e.shapeFlag&&r&&!r.persisted){const{leave:t,delayLeave:o}=r,s=()=>t(n,i);o?o(e.el,i,s):s()}else i()},re=(e,t)=>{let n;for(;e!==t;)n=y(e),l(e),e=n;l(t)},ie=(e,t,n)=>{e.type.__hmrId&&function(e){D.get(e.type.__hmrId).instances.delete(e)}(e);const{bum:o,scope:i,update:s,subTree:a,um:l}=e;var c;o&&(0,r.invokeArrayFns)(o),i.stop(),s&&(s.active=!1,ne(a,e,t,n)),l&&Yn(l,t),Yn((()=>{e.isUnmounted=!0}),t),t&&t.pendingBranch&&!t.isUnmounted&&e.asyncDep&&!e.asyncResolved&&e.suspenseId===t.pendingId&&(t.deps--,0===t.deps&&t.resolve()),c=e,L&&"function"==typeof L.cleanupBuffer&&!L.cleanupBuffer(c)&&Y(c)},se=(e,t,n,o=!1,r=!1,i=0)=>{for(let s=i;s<e.length;s++)ne(e[s],t,n,o,r)},ae=e=>6&e.shapeFlag?ae(e.component.subTree):128&e.shapeFlag?e.suspense.next():y(e.anchor||e.el),le=(e,t,n)=>{null==e?t._vnode&&ne(t._vnode,null,null,!0):_(t._vnode||null,e,t,null,null,null,n),k(),T(),t._vnode=e},ce={p:_,um:ne,m:te,r:oe,mt:U,mc:B,pc:X,pbc:I,n:ae,o:e};let de,fe;return t&&([de,fe]=t(ce)),{render:le,hydrate:de,createApp:hn(le,de)}}function Xn({effect:e,update:t},n){e.allowRecurse=t.allowRecurse=n}function Qn(e,t,n=!1){const o=e.children,i=t.children;if((0,r.isArray)(o)&&(0,r.isArray)(i))for(let e=0;e<o.length;e++){const t=o[e];let r=i[e];1&r.shapeFlag&&!r.dynamicChildren&&((r.patchFlag<=0||32===r.patchFlag)&&(r=i[e]=Do(i[e]),r.el=t.el),n||Qn(t,r)),r.type===so&&(r.el=t.el),r.type!==ao||r.el||(r.el=t.el)}}const Zn=e=>e&&(e.disabled||""===e.disabled),eo=e=>"undefined"!=typeof SVGElement&&e instanceof SVGElement,to=(e,t)=>{const n=e&&e.to;if((0,r.isString)(n)){if(t){const e=t(n);return e}return null}return!n&&Zn(e),n};function no(e,t,n,{o:{insert:o},m:r},i=2){0===i&&o(e.targetAnchor,t,n);const{el:s,anchor:a,shapeFlag:l,children:c,props:u}=e,d=2===i;if(d&&o(s,t,n),(!d||Zn(u))&&16&l)for(let e=0;e<c.length;e++)r(c[e],t,n,2);d&&o(a,t,n)}const oo={__isTeleport:!0,process(e,t,n,o,r,i,s,a,l,c){const{mc:u,pc:d,pbc:p,o:{insert:f,querySelector:h,createText:m,createComment:g}}=c,v=Zn(t.props);let{shapeFlag:y,children:b,dynamicChildren:A}=t;if(N&&(l=!1,A=null),null==e){const e=t.el=g("teleport start"),c=t.anchor=g("teleport end");f(e,n,o),f(c,n,o);const d=t.target=to(t.props,h),p=t.targetAnchor=m("");d&&(f(p,d),s=s||eo(d));const A=(e,t)=>{16&y&&u(b,e,t,r,i,s,a,l)};v?A(n,c):d&&A(d,p)}else{t.el=e.el;const o=t.anchor=e.anchor,u=t.target=e.target,f=t.targetAnchor=e.targetAnchor,m=Zn(e.props),g=m?n:u,y=m?o:f;if(s=s||eo(u),A?(p(e.dynamicChildren,A,g,r,i,s,a),Qn(e,t,!0)):l||d(e,t,g,y,r,i,s,a,!1),v)m||no(t,n,o,c,1);else if((t.props&&t.props.to)!==(e.props&&e.props.to)){const e=t.target=to(t.props,h);e&&no(t,e,null,c,0)}else m&&no(t,u,f,c,1)}ro(t)},remove(e,t,n,o,{um:r,o:{remove:i}},s){const{shapeFlag:a,children:l,anchor:c,targetAnchor:u,target:d,props:p}=e;if(d&&i(u),(s||!Zn(p))&&(i(c),16&a))for(let e=0;e<l.length;e++){const o=l[e];r(o,t,n,!0,!!o.dynamicChildren)}},move:no,hydrate:function(e,t,n,o,r,i,{o:{nextSibling:s,parentNode:a,querySelector:l}},c){const u=t.target=to(t.props,l);if(u){const l=u._lpa||u.firstChild;if(16&t.shapeFlag)if(Zn(t.props))t.anchor=c(s(e),t,a(e),n,o,r,i),t.targetAnchor=l;else{t.anchor=s(e);let a=l;for(;a;)if(a=s(a),a&&8===a.nodeType&&"teleport anchor"===a.data){t.targetAnchor=a,u._lpa=t.targetAnchor&&s(t.targetAnchor);break}c(l,t,u,n,o,r,i)}ro(t)}return t.anchor&&s(t.anchor)}};function ro(e){const t=e.ctx;if(t&&t.ut){let n=e.children[0].el;for(;n!==e.targetAnchor;)1===n.nodeType&&n.setAttribute("data-v-owner",t.uid),n=n.nextSibling;t.ut()}}const io=Symbol.for("v-fgt"),so=Symbol.for("v-txt"),ao=Symbol.for("v-cmt"),lo=Symbol.for("v-stc"),co=[];let uo=null;function po(e=!1){co.push(uo=e?null:[])}function fo(){co.pop(),uo=co[co.length-1]||null}let ho,mo=1;function go(e){mo+=e}function vo(e){return e.dynamicChildren=mo>0?uo||r.EMPTY_ARR:null,fo(),mo>0&&uo&&uo.push(e),e}function yo(e,t,n,o,r,i){return vo(Eo(e,t,n,o,r,i,!0))}function bo(e,t,n,o,r){return vo(ko(e,t,n,o,r,!0))}function Ao(e){return!!e&&!0===e.__v_isVNode}function _o(e,t){return 6&t.shapeFlag&&B.has(t.type)?(e.shapeFlag&=-257,t.shapeFlag&=-513,!1):e.type===t.type&&e.key===t.key}function xo(e){ho=e}const wo="__vInternal",Co=({key:e})=>null!=e?e:null,So=({ref:e,ref_key:t,ref_for:n})=>("number"==typeof e&&(e=""+e),null!=e?(0,r.isString)(e)||(0,o.isRef)(e)||(0,r.isFunction)(e)?{i:te,r:e,k:t,f:!!n}:e:null);function Eo(e,t=null,n=null,o=0,i=null,s=(e===io?0:1),a=!1,l=!1){const c={__v_isVNode:!0,__v_skip:!0,type:e,props:t,key:t&&Co(t),ref:t&&So(t),scopeId:ne,slotScopeIds:null,children:n,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:s,patchFlag:o,dynamicProps:i,dynamicChildren:null,appContext:null,ctx:te};return l?(Mo(c,n),128&s&&e.normalize(c)):n&&(c.shapeFlag|=(0,r.isString)(n)?8:16),c.key!=c.key&&c.type,mo>0&&!a&&uo&&(c.patchFlag>0||6&s)&&32!==c.patchFlag&&uo.push(c),c}const ko=(...e)=>function(e,t=null,n=null,i=0,s=null,a=!1){e&&e!==_t||(e=ao);if(Ao(e)){const o=jo(e,t,!0);return n&&Mo(o,n),mo>0&&!a&&uo&&(6&o.shapeFlag?uo[uo.indexOf(e)]=o:uo.push(o)),o.patchFlag|=-2,o}dr(e)&&(e=e.__vccOpts);if(t){t=To(t);let{class:e,style:n}=t;e&&!(0,r.isString)(e)&&(t.class=(0,r.normalizeClass)(e)),(0,r.isObject)(n)&&((0,o.isProxy)(n)&&!(0,r.isArray)(n)&&(n=(0,r.extend)({},n)),t.style=(0,r.normalizeStyle)(n))}const l=(0,r.isString)(e)?1:ye(e)?128:(e=>e.__isTeleport)(e)?64:(0,r.isObject)(e)?4:(0,r.isFunction)(e)?2:0;4&l&&(0,o.isProxy)(e)&&(e=(0,o.toRaw)(e));return Eo(e,t,n,i,s,l,a,!0)}(...ho?ho(e,te):e);function To(e){return e?(0,o.isProxy)(e)||wo in e?(0,r.extend)({},e):e:null}function jo(e,t,n=!1){const{props:o,ref:i,patchFlag:s,children:a}=e,l=t?Fo(o||{},t):o;return{__v_isVNode:!0,__v_skip:!0,type:e.type,props:l,key:l&&Co(l),ref:t&&t.ref?n&&i?(0,r.isArray)(i)?i.concat(So(t)):[i,So(t)]:So(t):i,scopeId:e.scopeId,slotScopeIds:e.slotScopeIds,children:-1===s&&(0,r.isArray)(a)?a.map(Ro):a,target:e.target,targetAnchor:e.targetAnchor,staticCount:e.staticCount,shapeFlag:e.shapeFlag,patchFlag:t&&e.type!==io?-1===s?16:16|s:s,dynamicProps:e.dynamicProps,dynamicChildren:e.dynamicChildren,appContext:e.appContext,dirs:e.dirs,transition:e.transition,component:e.component,suspense:e.suspense,ssContent:e.ssContent&&jo(e.ssContent),ssFallback:e.ssFallback&&jo(e.ssFallback),el:e.el,anchor:e.anchor,ctx:e.ctx,ce:e.ce}}function Ro(e){const t=jo(e);return(0,r.isArray)(e.children)&&(t.children=e.children.map(Ro)),t}function Po(e=" ",t=0){return ko(so,null,e,t)}function Oo(e,t){const n=ko(lo,null,e);return n.staticCount=t,n}function No(e="",t=!1){return t?(po(),bo(ao,null,e)):ko(ao,null,e)}function Bo(e){return null==e||"boolean"==typeof e?ko(ao):(0,r.isArray)(e)?ko(io,null,e.slice()):"object"==typeof e?Do(e):ko(so,null,String(e))}function Do(e){return null===e.el&&-1!==e.patchFlag||e.memo?e:jo(e)}function Mo(e,t){let n=0;const{shapeFlag:o}=e;if(null==t)t=null;else if((0,r.isArray)(t))n=16;else if("object"==typeof t){if(65&o){const n=t.default;return void(n&&(n._c&&(n._d=!1),Mo(e,n()),n._c&&(n._d=!0)))}{n=32;const o=t._;o||wo in t?3===o&&te&&(1===te.slots._?t._=1:(t._=2,e.patchFlag|=1024)):t._ctx=te}}else(0,r.isFunction)(t)?(t={default:t,_ctx:te},n=32):(t=String(t),64&o?(n=16,t=[Po(t)]):n=8);e.children=t,e.shapeFlag|=n}function Fo(...e){const t={};for(let n=0;n<e.length;n++){const o=e[n];for(const e in o)if("class"===e)t.class!==o.class&&(t.class=(0,r.normalizeClass)([t.class,o.class]));else if("style"===e)t.style=(0,r.normalizeStyle)([t.style,o.style]);else if((0,r.isOn)(e)){const n=t[e],i=o[e];!i||n===i||(0,r.isArray)(n)&&n.includes(i)||(t[e]=n?[].concat(n,i):i)}else""!==e&&(t[e]=o[e])}return t}function Io(e,t,n,o=null){p(e,t,7,[n,o])}const Vo=pn();let Lo=0;function $o(e,t,n){const i=e.type,s=(t?t.appContext:e.appContext)||Vo,a={uid:Lo++,vnode:e,type:i,parent:t,appContext:s,root:null,next:null,subTree:null,effect:null,update:null,scope:new o.EffectScope(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:t?t.provides:Object.create(s.provides),accessCache:null,renderCache:[],components:null,directives:null,propsOptions:_n(i,s),emitsOptions:Z(i,s),emit:null,emitted:null,propsDefaults:r.EMPTY_OBJ,inheritAttrs:i.inheritAttrs,ctx:r.EMPTY_OBJ,data:r.EMPTY_OBJ,props:r.EMPTY_OBJ,attrs:r.EMPTY_OBJ,slots:r.EMPTY_OBJ,refs:r.EMPTY_OBJ,setupState:r.EMPTY_OBJ,setupContext:null,attrsProxy:null,slotsProxy:null,suspense:n,suspenseId:n?n.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return a.ctx=function(e){const t={};return Object.defineProperty(t,"_",{configurable:!0,enumerable:!1,get:()=>e}),Object.keys(Ot).forEach((n=>{Object.defineProperty(t,n,{configurable:!0,enumerable:!1,get:()=>Ot[n](e),set:r.NOOP})})),t}(a),a.root=t?t.root:a,a.emit=Q.bind(null,a),e.ce&&e.ce(a),a}let Ho=null;const Uo=()=>Ho||te;let qo,zo,Wo="__VUE_INSTANCE_SETTERS__";(zo=(0,r.getGlobalThis)()[Wo])||(zo=(0,r.getGlobalThis)()[Wo]=[]),zo.push((e=>Ho=e)),qo=e=>{zo.length>1?zo.forEach((t=>t(e))):zo[0](e)};const Yo=e=>{qo(e),e.scope.on()},Jo=()=>{Ho&&Ho.scope.off(),qo(null)},Ko=(0,r.makeMap)("slot,component");function Go(e,t){const n=t.isNativeTag||r.NO;Ko(e)||n(e)}function Xo(e){return 4&e.vnode.shapeFlag}let Qo,Zo,er=!1;function tr(e,t=!1){er=t;const{props:n,children:i}=e.vnode,s=Xo(e);!function(e,t,n,i=!1){const s={},a={};(0,r.def)(a,wo,1),e.propsDefaults=Object.create(null),bn(e,t,s,a);for(const t in e.propsOptions[0])t in s||(s[t]=void 0);En(t||{},s,e),n?e.props=i?s:(0,o.shallowReactive)(s):e.type.props?e.props=s:e.props=a,e.attrs=a}(e,n,s,t),((e,t)=>{if(32&e.vnode.shapeFlag){const n=t._;n?(e.slots=(0,o.toRaw)(t),(0,r.def)(t,"_",n)):Dn(t,e.slots={})}else e.slots={},t&&Mn(e,t);(0,r.def)(e.slots,wo,1)})(e,i);const a=s?function(e,t){var n;const i=e.type;if(i.name&&Go(i.name,e.appContext.config),i.components){const t=Object.keys(i.components);for(let n=0;n<t.length;n++)Go(t[n],e.appContext.config)}if(i.directives){const e=Object.keys(i.directives);for(let t=0;t<e.length;t++)De(e[t])}i.compilerOptions&&rr();e.accessCache=Object.create(null),e.proxy=(0,o.markRaw)(new Proxy(e.ctx,Dt)),function(e){const{ctx:t,propsOptions:[n]}=e;n&&Object.keys(n).forEach((n=>{Object.defineProperty(t,n,{enumerable:!0,configurable:!0,get:()=>e.props[n],set:r.NOOP})}))}(e);const{setup:s}=i;if(s){const a=e.setupContext=s.length>1?sr(e):null;Yo(e),(0,o.pauseTracking)();const l=d(s,e,0,[(0,o.shallowReadonly)(e.props),a]);if((0,o.resetTracking)(),Jo(),(0,r.isPromise)(l)){if(l.then(Jo,Jo),t)return l.then((n=>{nr(e,n,t)})).catch((t=>{f(t,e,0)}));if(e.asyncDep=l,!e.suspense){n=i.name}}else nr(e,l,t)}else ir(e,t)}(e,t):void 0;return er=!1,a}function nr(e,t,n){(0,r.isFunction)(t)?e.type.__ssrInlineRender?e.ssrRender=t:e.render=t:(0,r.isObject)(t)&&(Ao(t),e.devtoolsRawSetupState=t,e.setupState=(0,o.proxyRefs)(t),function(e){const{ctx:t,setupState:n}=e;Object.keys((0,o.toRaw)(n)).forEach((e=>{if(!n.__isScriptSetup){if(Nt(e[0]))return void JSON.stringify(e);Object.defineProperty(t,e,{enumerable:!0,configurable:!0,get:()=>n[e],set:r.NOOP})}}))}(e)),ir(e,n)}function or(e){Qo=e,Zo=e=>{e.render._rc&&(e.withProxy=new Proxy(e.ctx,Mt))}}const rr=()=>!Qo;function ir(e,t,n){const i=e.type;if(!e.render){if(!t&&Qo&&!i.render){const t=i.template||on(e).template;if(t){qn(e,"compile");const{isCustomElement:n,compilerOptions:o}=e.appContext.config,{delimiters:s,compilerOptions:a}=i,l=(0,r.extend)((0,r.extend)({isCustomElement:n,delimiters:s},o),a);i.render=Qo(t,l),zn(e,"compile")}}e.render=i.render||r.NOOP,Zo&&Zo(e)}__VUE_OPTIONS_API__&&(Yo(e),(0,o.pauseTracking)(),en(e),(0,o.resetTracking)(),Jo()),i.render||e.render!==r.NOOP||t||!Qo&&i.template}function sr(e){const t=t=>{if(e.exposed,null!=t){let e=typeof t;"object"===e&&((0,r.isArray)(t)?e="array":(0,o.isRef)(t)&&(e="ref"))}e.exposed=t||{}};return Object.freeze({get attrs(){return function(e){return e.attrsProxy||(e.attrsProxy=new Proxy(e.attrs,{get:(t,n)=>(ce(),(0,o.track)(e,"get","$attrs"),t[n]),set:()=>!1,deleteProperty:()=>!1}))}(e)},get slots(){return function(e){return e.slotsProxy||(e.slotsProxy=new Proxy(e.slots,{get:(t,n)=>((0,o.track)(e,"get","$slots"),t[n])}))}(e)},get emit(){return(t,...n)=>e.emit(t,...n)},expose:t})}function ar(e){if(e.exposed)return e.exposeProxy||(e.exposeProxy=new Proxy((0,o.proxyRefs)((0,o.markRaw)(e.exposed)),{get:(t,n)=>n in t?t[n]:n in Ot?Ot[n](e):void 0,has:(e,t)=>t in e||t in Ot}))}const lr=/(?:^|[-_])(\w)/g;function cr(e,t=!0){return(0,r.isFunction)(e)?e.displayName||e.name:e.name||t&&e.__name}function ur(e,t,n=!1){let o=cr(t);if(!o&&t.__file){const e=t.__file.match(/([^/\\]+)\.\w+$/);e&&(o=e[1])}if(!o&&e&&e.parent){const n=e=>{for(const n in e)if(e[n]===t)return n};o=n(e.components||e.parent.type.components)||n(e.appContext.components)}return o?o.replace(lr,(e=>e.toUpperCase())).replace(/[-_]/g,""):n?"App":"Anonymous"}function dr(e){return(0,r.isFunction)(e)&&"__vccOpts"in e}const pr=(e,t)=>(0,o.computed)(e,t,er);function fr(e,t,n){const o=arguments.length;return 2===o?(0,r.isObject)(t)&&!(0,r.isArray)(t)?Ao(t)?ko(e,null,[t]):ko(e,t):ko(e,null,t):(o>3?n=Array.prototype.slice.call(arguments,2):3===o&&Ao(n)&&(n=[n]),ko(e,t,n))}const hr=Symbol.for("v-scx"),mr=()=>{{const e=vn(hr);return e}};function gr(){return void 0}function vr(e,t,n,o){const r=n[o];if(r&&yr(r,e))return r;const i=t();return i.memo=e.slice(),n[o]=i}function yr(e,t){const n=e.memo;if(n.length!=t.length)return!1;for(let e=0;e<n.length;e++)if((0,r.hasChanged)(n[e],t[e]))return!1;return mo>0&&uo&&uo.push(e),!0}const br="3.3.0",Ar={createComponentInstance:$o,setupComponent:tr,renderComponentRoot:ue,setCurrentRenderingInstance:oe,isVNode:Ao,normalizeVNode:Bo},_r=null,xr=null},"./node_modules/@vue/runtime-dom/dist/runtime-dom.esm-bundler.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{BaseTransition:()=>o.BaseTransition,BaseTransitionPropsValidators:()=>o.BaseTransitionPropsValidators,Comment:()=>o.Comment,EffectScope:()=>o.EffectScope,Fragment:()=>o.Fragment,KeepAlive:()=>o.KeepAlive,ReactiveEffect:()=>o.ReactiveEffect,Static:()=>o.Static,Suspense:()=>o.Suspense,Teleport:()=>o.Teleport,Text:()=>o.Text,Transition:()=>P,TransitionGroup:()=>G,VueElement:()=>C,assertNumber:()=>o.assertNumber,callWithAsyncErrorHandling:()=>o.callWithAsyncErrorHandling,callWithErrorHandling:()=>o.callWithErrorHandling,camelize:()=>o.camelize,capitalize:()=>o.capitalize,cloneVNode:()=>o.cloneVNode,compatUtils:()=>o.compatUtils,computed:()=>o.computed,createApp:()=>Te,createBlock:()=>o.createBlock,createCommentVNode:()=>o.createCommentVNode,createElementBlock:()=>o.createElementBlock,createElementVNode:()=>o.createElementVNode,createHydrationRenderer:()=>o.createHydrationRenderer,createPropsRestProxy:()=>o.createPropsRestProxy,createRenderer:()=>o.createRenderer,createSSRApp:()=>je,createSlots:()=>o.createSlots,createStaticVNode:()=>o.createStaticVNode,createTextVNode:()=>o.createTextVNode,createVNode:()=>o.createVNode,customRef:()=>o.customRef,defineAsyncComponent:()=>o.defineAsyncComponent,defineComponent:()=>o.defineComponent,defineCustomElement:()=>_,defineEmits:()=>o.defineEmits,defineExpose:()=>o.defineExpose,defineModel:()=>o.defineModel,defineOptions:()=>o.defineOptions,defineProps:()=>o.defineProps,defineSSRCustomElement:()=>x,defineSlots:()=>o.defineSlots,devtools:()=>o.devtools,effect:()=>o.effect,effectScope:()=>o.effectScope,getCurrentInstance:()=>o.getCurrentInstance,getCurrentScope:()=>o.getCurrentScope,getTransitionRawChildren:()=>o.getTransitionRawChildren,guardReactiveProps:()=>o.guardReactiveProps,h:()=>o.h,handleError:()=>o.handleError,hasInjectionContext:()=>o.hasInjectionContext,hydrate:()=>ke,initCustomFormatter:()=>o.initCustomFormatter,initDirectivesForSSR:()=>Be,inject:()=>o.inject,isMemoSame:()=>o.isMemoSame,isProxy:()=>o.isProxy,isReactive:()=>o.isReactive,isReadonly:()=>o.isReadonly,isRef:()=>o.isRef,isRuntimeOnly:()=>o.isRuntimeOnly,isShallow:()=>o.isShallow,isVNode:()=>o.isVNode,markRaw:()=>o.markRaw,mergeDefaults:()=>o.mergeDefaults,mergeModels:()=>o.mergeModels,mergeProps:()=>o.mergeProps,nextTick:()=>o.nextTick,normalizeClass:()=>o.normalizeClass,normalizeProps:()=>o.normalizeProps,normalizeStyle:()=>o.normalizeStyle,onActivated:()=>o.onActivated,onBeforeMount:()=>o.onBeforeMount,onBeforeUnmount:()=>o.onBeforeUnmount,onBeforeUpdate:()=>o.onBeforeUpdate,onDeactivated:()=>o.onDeactivated,onErrorCaptured:()=>o.onErrorCaptured,onMounted:()=>o.onMounted,onRenderTracked:()=>o.onRenderTracked,onRenderTriggered:()=>o.onRenderTriggered,onScopeDispose:()=>o.onScopeDispose,onServerPrefetch:()=>o.onServerPrefetch,onUnmounted:()=>o.onUnmounted,onUpdated:()=>o.onUpdated,openBlock:()=>o.openBlock,popScopeId:()=>o.popScopeId,provide:()=>o.provide,proxyRefs:()=>o.proxyRefs,pushScopeId:()=>o.pushScopeId,queuePostFlushCb:()=>o.queuePostFlushCb,reactive:()=>o.reactive,readonly:()=>o.readonly,ref:()=>o.ref,registerRuntimeCompiler:()=>o.registerRuntimeCompiler,render:()=>Ee,renderList:()=>o.renderList,renderSlot:()=>o.renderSlot,resolveComponent:()=>o.resolveComponent,resolveDirective:()=>o.resolveDirective,resolveDynamicComponent:()=>o.resolveDynamicComponent,resolveFilter:()=>o.resolveFilter,resolveTransitionHooks:()=>o.resolveTransitionHooks,setBlockTracking:()=>o.setBlockTracking,setDevtoolsHook:()=>o.setDevtoolsHook,setTransitionHooks:()=>o.setTransitionHooks,shallowReactive:()=>o.shallowReactive,shallowReadonly:()=>o.shallowReadonly,shallowRef:()=>o.shallowRef,ssrContextKey:()=>o.ssrContextKey,ssrUtils:()=>o.ssrUtils,stop:()=>o.stop,toDisplayString:()=>o.toDisplayString,toHandlerKey:()=>o.toHandlerKey,toHandlers:()=>o.toHandlers,toRaw:()=>o.toRaw,toRef:()=>o.toRef,toRefs:()=>o.toRefs,toValue:()=>o.toValue,transformVNodeArgs:()=>o.transformVNodeArgs,triggerRef:()=>o.triggerRef,unref:()=>o.unref,useAttrs:()=>o.useAttrs,useCssModule:()=>S,useCssVars:()=>E,useModel:()=>o.useModel,useSSRContext:()=>o.useSSRContext,useSlots:()=>o.useSlots,useTransitionState:()=>o.useTransitionState,vModelCheckbox:()=>re,vModelDynamic:()=>de,vModelRadio:()=>se,vModelSelect:()=>ae,vModelText:()=>oe,vShow:()=>be,version:()=>o.version,warn:()=>o.warn,watch:()=>o.watch,watchEffect:()=>o.watchEffect,watchPostEffect:()=>o.watchPostEffect,watchSyncEffect:()=>o.watchSyncEffect,withAsyncContext:()=>o.withAsyncContext,withCtx:()=>o.withCtx,withDefaults:()=>o.withDefaults,withDirectives:()=>o.withDirectives,withKeys:()=>ye,withMemo:()=>o.withMemo,withModifiers:()=>ge,withScopeId:()=>o.withScopeId});var o=n("./node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js"),r=n("./node_modules/@vue/shared/dist/shared.esm-bundler.js"),i=n("./node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js");const s="undefined"!=typeof document?document:null,a=s&&s.createElement("template"),l={insert:(e,t,n)=>{t.insertBefore(e,n||null)},remove:e=>{const t=e.parentNode;t&&t.removeChild(e)},createElement:(e,t,n,o)=>{const r=t?s.createElementNS("http://www.w3.org/2000/svg",e):s.createElement(e,n?{is:n}:void 0);return"select"===e&&o&&null!=o.multiple&&r.setAttribute("multiple",o.multiple),r},createText:e=>s.createTextNode(e),createComment:e=>s.createComment(e),setText:(e,t)=>{e.nodeValue=t},setElementText:(e,t)=>{e.textContent=t},parentNode:e=>e.parentNode,nextSibling:e=>e.nextSibling,querySelector:e=>s.querySelector(e),setScopeId(e,t){e.setAttribute(t,"")},insertStaticContent(e,t,n,o,r,i){const s=n?n.previousSibling:t.lastChild;if(r&&(r===i||r.nextSibling))for(;t.insertBefore(r.cloneNode(!0),n),r!==i&&(r=r.nextSibling););else{a.innerHTML=o?`<svg>${e}</svg>`:e;const r=a.content;if(o){const e=r.firstChild;for(;e.firstChild;)r.appendChild(e.firstChild);r.removeChild(e)}t.insertBefore(r,n)}return[s?s.nextSibling:t.firstChild,n?n.previousSibling:t.lastChild]}};const c=/[^\\];\s*$/,u=/\s*!important$/;function d(e,t,n){if((0,r.isArray)(n))n.forEach((n=>d(e,t,n)));else if(null==n&&(n=""),c.test(n)&&(0,o.warn)(`Unexpected semicolon at the end of '${t}' style value: '${n}'`),t.startsWith("--"))e.setProperty(t,n);else{const o=function(e,t){const n=f[t];if(n)return n;let o=(0,r.camelize)(t);if("filter"!==o&&o in e)return f[t]=o;o=(0,r.capitalize)(o);for(let n=0;n<p.length;n++){const r=p[n]+o;if(r in e)return f[t]=r}return t}(e,t);u.test(n)?e.setProperty((0,r.hyphenate)(o),n.replace(u,""),"important"):e[o]=n}}const p=["Webkit","Moz","ms"],f={};const h="http://www.w3.org/1999/xlink";function m(e,t,n,o){e.addEventListener(t,n,o)}function g(e,t,n,i,s=null){const a=e._vei||(e._vei={}),l=a[t];if(i&&l)l.value=i;else{const[n,c]=function(e){let t;if(v.test(e)){let n;for(t={};n=e.match(v);)e=e.slice(0,e.length-n[0].length),t[n[0].toLowerCase()]=!0}const n=":"===e[2]?e.slice(3):(0,r.hyphenate)(e.slice(2));return[n,t]}(t);if(i){const l=a[t]=function(e,t){const n=e=>{if(e._vts){if(e._vts<=n.attached)return}else e._vts=Date.now();(0,o.callWithAsyncErrorHandling)(function(e,t){if((0,r.isArray)(t)){const n=e.stopImmediatePropagation;return e.stopImmediatePropagation=()=>{n.call(e),e._stopped=!0},t.map((e=>t=>!t._stopped&&e&&e(t)))}return t}(e,n.value),t,5,[e])};return n.value=e,n.attached=(()=>y||(b.then((()=>y=0)),y=Date.now()))(),n}(i,s);m(e,n,l,c)}else l&&(!function(e,t,n,o){e.removeEventListener(t,n,o)}(e,n,l,c),a[t]=void 0)}}const v=/(?:Once|Passive|Capture)$/;let y=0;const b=Promise.resolve();const A=/^on[a-z]/;function _(e,t){const n=(0,o.defineComponent)(e);class r extends C{constructor(e){super(n,e,t)}}return r.def=n,r}const x=e=>_(e,ke),w="undefined"!=typeof HTMLElement?HTMLElement:class{};class C extends w{constructor(e,t={},n){super(),this._def=e,this._props=t,this._instance=null,this._connected=!1,this._resolved=!1,this._numberProps=null,this.shadowRoot&&n?n(this._createVNode(),this.shadowRoot):(this.shadowRoot&&(0,o.warn)("Custom element has pre-rendered declarative shadow root but is not defined as hydratable. Use `defineSSRCustomElement`."),this.attachShadow({mode:"open"}),this._def.__asyncLoader||this._resolveProps(this._def))}connectedCallback(){this._connected=!0,this._instance||(this._resolved?this._update():this._resolveDef())}disconnectedCallback(){this._connected=!1,(0,o.nextTick)((()=>{this._connected||(Ee(null,this.shadowRoot),this._instance=null)}))}_resolveDef(){this._resolved=!0;for(let e=0;e<this.attributes.length;e++)this._setAttr(this.attributes[e].name);new MutationObserver((e=>{for(const t of e)this._setAttr(t.attributeName)})).observe(this,{attributes:!0});const e=(e,t=!1)=>{const{props:n,styles:o}=e;let i;if(n&&!(0,r.isArray)(n))for(const e in n){const t=n[e];(t===Number||t&&t.type===Number)&&(e in this._props&&(this._props[e]=(0,r.toNumber)(this._props[e])),(i||(i=Object.create(null)))[(0,r.camelize)(e)]=!0)}this._numberProps=i,t&&this._resolveProps(e),this._applyStyles(o),this._update()},t=this._def.__asyncLoader;t?t().then((t=>e(t,!0))):e(this._def)}_resolveProps(e){const{props:t}=e,n=(0,r.isArray)(t)?t:Object.keys(t||{});for(const e of Object.keys(this))"_"!==e[0]&&n.includes(e)&&this._setProp(e,this[e],!0,!1);for(const e of n.map(r.camelize))Object.defineProperty(this,e,{get(){return this._getProp(e)},set(t){this._setProp(e,t)}})}_setAttr(e){let t=this.getAttribute(e);const n=(0,r.camelize)(e);this._numberProps&&this._numberProps[n]&&(t=(0,r.toNumber)(t)),this._setProp(n,t,!1)}_getProp(e){return this._props[e]}_setProp(e,t,n=!0,o=!0){t!==this._props[e]&&(this._props[e]=t,o&&this._instance&&this._update(),n&&(!0===t?this.setAttribute((0,r.hyphenate)(e),""):"string"==typeof t||"number"==typeof t?this.setAttribute((0,r.hyphenate)(e),t+""):t||this.removeAttribute((0,r.hyphenate)(e))))}_update(){Ee(this._createVNode(),this.shadowRoot)}_createVNode(){const e=(0,o.createVNode)(this._def,(0,r.extend)({},this._props));return this._instance||(e.ce=e=>{this._instance=e,e.isCE=!0,e.ceReload=e=>{this._styles&&(this._styles.forEach((e=>this.shadowRoot.removeChild(e))),this._styles.length=0),this._applyStyles(e),this._instance=null,this._update()};const t=(e,t)=>{this.dispatchEvent(new CustomEvent(e,{detail:t}))};e.emit=(e,...n)=>{t(e,n),(0,r.hyphenate)(e)!==e&&t((0,r.hyphenate)(e),n)};let n=this;for(;n=n&&(n.parentNode||n.host);)if(n instanceof C){e.parent=n._instance,e.provides=n._instance.provides;break}}),e}_applyStyles(e){e&&e.forEach((e=>{const t=document.createElement("style");t.textContent=e,this.shadowRoot.appendChild(t),(this._styles||(this._styles=[])).push(t)}))}}function S(e="$style"){{const t=(0,o.getCurrentInstance)();if(!t)return(0,o.warn)("useCssModule must be called inside setup()"),r.EMPTY_OBJ;const n=t.type.__cssModules;if(!n)return(0,o.warn)("Current instance does not have CSS modules injected."),r.EMPTY_OBJ;const i=n[e];return i||((0,o.warn)(`Current instance does not have CSS module named "${e}".`),r.EMPTY_OBJ)}}function E(e){const t=(0,o.getCurrentInstance)();if(!t)return void(0,o.warn)("useCssVars is called without current active component instance.");const n=t.ut=(n=e(t.proxy))=>{Array.from(document.querySelectorAll(`[data-v-owner="${t.uid}"]`)).forEach((e=>T(e,n)))},r=()=>{const o=e(t.proxy);k(t.subTree,o),n(o)};(0,o.watchPostEffect)(r),(0,o.onMounted)((()=>{const e=new MutationObserver(r);e.observe(t.subTree.el.parentNode,{childList:!0}),(0,o.onUnmounted)((()=>e.disconnect()))}))}function k(e,t){if(128&e.shapeFlag){const n=e.suspense;e=n.activeBranch,n.pendingBranch&&!n.isHydrating&&n.effects.push((()=>{k(n.activeBranch,t)}))}for(;e.component;)e=e.component.subTree;if(1&e.shapeFlag&&e.el)T(e.el,t);else if(e.type===o.Fragment)e.children.forEach((e=>k(e,t)));else if(e.type===o.Static){let{el:n,anchor:o}=e;for(;n&&(T(n,t),n!==o);)n=n.nextSibling}}function T(e,t){if(1===e.nodeType){const n=e.style;for(const e in t)n.setProperty(`--${e}`,t[e])}}const j="transition",R="animation",P=(e,{slots:t})=>(0,o.h)(o.BaseTransition,M(e),t);P.displayName="Transition";const O={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String},N=P.props=(0,r.extend)({},o.BaseTransitionPropsValidators,O),B=(e,t=[])=>{(0,r.isArray)(e)?e.forEach((e=>e(...t))):e&&e(...t)},D=e=>!!e&&((0,r.isArray)(e)?e.some((e=>e.length>1)):e.length>1);function M(e){const t={};for(const n in e)n in O||(t[n]=e[n]);if(!1===e.css)return t;const{name:n="v",type:o,duration:i,enterFromClass:s=`${n}-enter-from`,enterActiveClass:a=`${n}-enter-active`,enterToClass:l=`${n}-enter-to`,appearFromClass:c=s,appearActiveClass:u=a,appearToClass:d=l,leaveFromClass:p=`${n}-leave-from`,leaveActiveClass:f=`${n}-leave-active`,leaveToClass:h=`${n}-leave-to`}=e,m=function(e){if(null==e)return null;if((0,r.isObject)(e))return[F(e.enter),F(e.leave)];{const t=F(e);return[t,t]}}(i),g=m&&m[0],v=m&&m[1],{onBeforeEnter:y,onEnter:b,onEnterCancelled:A,onLeave:_,onLeaveCancelled:x,onBeforeAppear:w=y,onAppear:C=b,onAppearCancelled:S=A}=t,E=(e,t,n)=>{V(e,t?d:l),V(e,t?u:a),n&&n()},k=(e,t)=>{e._isLeaving=!1,V(e,p),V(e,h),V(e,f),t&&t()},T=e=>(t,n)=>{const r=e?C:b,i=()=>E(t,e,n);B(r,[t,i]),L((()=>{V(t,e?c:s),I(t,e?d:l),D(r)||H(t,o,g,i)}))};return(0,r.extend)(t,{onBeforeEnter(e){B(y,[e]),I(e,s),I(e,a)},onBeforeAppear(e){B(w,[e]),I(e,c),I(e,u)},onEnter:T(!1),onAppear:T(!0),onLeave(e,t){e._isLeaving=!0;const n=()=>k(e,t);I(e,p),W(),I(e,f),L((()=>{e._isLeaving&&(V(e,p),I(e,h),D(_)||H(e,o,v,n))})),B(_,[e,n])},onEnterCancelled(e){E(e,!1),B(A,[e])},onAppearCancelled(e){E(e,!0),B(S,[e])},onLeaveCancelled(e){k(e),B(x,[e])}})}function F(e){const t=(0,r.toNumber)(e);return(0,o.assertNumber)(t,"<transition> explicit duration"),t}function I(e,t){t.split(/\s+/).forEach((t=>t&&e.classList.add(t))),(e._vtc||(e._vtc=new Set)).add(t)}function V(e,t){t.split(/\s+/).forEach((t=>t&&e.classList.remove(t)));const{_vtc:n}=e;n&&(n.delete(t),n.size||(e._vtc=void 0))}function L(e){requestAnimationFrame((()=>{requestAnimationFrame(e)}))}let $=0;function H(e,t,n,o){const r=e._endId=++$,i=()=>{r===e._endId&&o()};if(n)return setTimeout(i,n);const{type:s,timeout:a,propCount:l}=U(e,t);if(!s)return o();const c=s+"end";let u=0;const d=()=>{e.removeEventListener(c,p),i()},p=t=>{t.target===e&&++u>=l&&d()};setTimeout((()=>{u<l&&d()}),a+1),e.addEventListener(c,p)}function U(e,t){const n=window.getComputedStyle(e),o=e=>(n[e]||"").split(", "),r=o(`${j}Delay`),i=o(`${j}Duration`),s=q(r,i),a=o(`${R}Delay`),l=o(`${R}Duration`),c=q(a,l);let u=null,d=0,p=0;t===j?s>0&&(u=j,d=s,p=i.length):t===R?c>0&&(u=R,d=c,p=l.length):(d=Math.max(s,c),u=d>0?s>c?j:R:null,p=u?u===j?i.length:l.length:0);return{type:u,timeout:d,propCount:p,hasTransform:u===j&&/\b(transform|all)(,|$)/.test(o(`${j}Property`).toString())}}function q(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max(...t.map(((t,n)=>z(t)+z(e[n]))))}function z(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function W(){return document.body.offsetHeight}const Y=new WeakMap,J=new WeakMap,K={name:"TransitionGroup",props:(0,r.extend)({},N,{tag:String,moveClass:String}),setup(e,{slots:t}){const n=(0,o.getCurrentInstance)(),r=(0,o.useTransitionState)();let s,a;return(0,o.onUpdated)((()=>{if(!s.length)return;const t=e.moveClass||`${e.name||"v"}-move`;if(!function(e,t,n){const o=e.cloneNode();e._vtc&&e._vtc.forEach((e=>{e.split(/\s+/).forEach((e=>e&&o.classList.remove(e)))}));n.split(/\s+/).forEach((e=>e&&o.classList.add(e))),o.style.display="none";const r=1===t.nodeType?t:t.parentNode;r.appendChild(o);const{hasTransform:i}=U(o);return r.removeChild(o),i}(s[0].el,n.vnode.el,t))return;s.forEach(X),s.forEach(Q);const o=s.filter(Z);W(),o.forEach((e=>{const n=e.el,o=n.style;I(n,t),o.transform=o.webkitTransform=o.transitionDuration="";const r=n._moveCb=e=>{e&&e.target!==n||e&&!/transform$/.test(e.propertyName)||(n.removeEventListener("transitionend",r),n._moveCb=null,V(n,t))};n.addEventListener("transitionend",r)}))})),()=>{const l=(0,i.toRaw)(e),c=M(l);let u=l.tag||o.Fragment;s=a,a=t.default?(0,o.getTransitionRawChildren)(t.default()):[];for(let e=0;e<a.length;e++){const t=a[e];null!=t.key?(0,o.setTransitionHooks)(t,(0,o.resolveTransitionHooks)(t,c,r,n)):(0,o.warn)("<TransitionGroup> children must be keyed.")}if(s)for(let e=0;e<s.length;e++){const t=s[e];(0,o.setTransitionHooks)(t,(0,o.resolveTransitionHooks)(t,c,r,n)),Y.set(t,t.el.getBoundingClientRect())}return(0,o.createVNode)(u,null,a)}}},G=K;function X(e){const t=e.el;t._moveCb&&t._moveCb(),t._enterCb&&t._enterCb()}function Q(e){J.set(e,e.el.getBoundingClientRect())}function Z(e){const t=Y.get(e),n=J.get(e),o=t.left-n.left,r=t.top-n.top;if(o||r){const t=e.el.style;return t.transform=t.webkitTransform=`translate(${o}px,${r}px)`,t.transitionDuration="0s",e}}const ee=e=>{const t=e.props["onUpdate:modelValue"]||!1;return(0,r.isArray)(t)?e=>(0,r.invokeArrayFns)(t,e):t};function te(e){e.target.composing=!0}function ne(e){const t=e.target;t.composing&&(t.composing=!1,t.dispatchEvent(new Event("input")))}const oe={created(e,{modifiers:{lazy:t,trim:n,number:o}},i){e._assign=ee(i);const s=o||i.props&&"number"===i.props.type;m(e,t?"change":"input",(t=>{if(t.target.composing)return;let o=e.value;n&&(o=o.trim()),s&&(o=(0,r.looseToNumber)(o)),e._assign(o)})),n&&m(e,"change",(()=>{e.value=e.value.trim()})),t||(m(e,"compositionstart",te),m(e,"compositionend",ne),m(e,"change",ne))},mounted(e,{value:t}){e.value=null==t?"":t},beforeUpdate(e,{value:t,modifiers:{lazy:n,trim:o,number:i}},s){if(e._assign=ee(s),e.composing)return;if(document.activeElement===e&&"range"!==e.type){if(n)return;if(o&&e.value.trim()===t)return;if((i||"number"===e.type)&&(0,r.looseToNumber)(e.value)===t)return}const a=null==t?"":t;e.value!==a&&(e.value=a)}},re={deep:!0,created(e,t,n){e._assign=ee(n),m(e,"change",(()=>{const t=e._modelValue,n=ce(e),o=e.checked,i=e._assign;if((0,r.isArray)(t)){const e=(0,r.looseIndexOf)(t,n),s=-1!==e;if(o&&!s)i(t.concat(n));else if(!o&&s){const n=[...t];n.splice(e,1),i(n)}}else if((0,r.isSet)(t)){const e=new Set(t);o?e.add(n):e.delete(n),i(e)}else i(ue(e,o))}))},mounted:ie,beforeUpdate(e,t,n){e._assign=ee(n),ie(e,t,n)}};function ie(e,{value:t,oldValue:n},o){e._modelValue=t,(0,r.isArray)(t)?e.checked=(0,r.looseIndexOf)(t,o.props.value)>-1:(0,r.isSet)(t)?e.checked=t.has(o.props.value):t!==n&&(e.checked=(0,r.looseEqual)(t,ue(e,!0)))}const se={created(e,{value:t},n){e.checked=(0,r.looseEqual)(t,n.props.value),e._assign=ee(n),m(e,"change",(()=>{e._assign(ce(e))}))},beforeUpdate(e,{value:t,oldValue:n},o){e._assign=ee(o),t!==n&&(e.checked=(0,r.looseEqual)(t,o.props.value))}},ae={deep:!0,created(e,{value:t,modifiers:{number:n}},o){const i=(0,r.isSet)(t);m(e,"change",(()=>{const t=Array.prototype.filter.call(e.options,(e=>e.selected)).map((e=>n?(0,r.looseToNumber)(ce(e)):ce(e)));e._assign(e.multiple?i?new Set(t):t:t[0])})),e._assign=ee(o)},mounted(e,{value:t}){le(e,t)},beforeUpdate(e,t,n){e._assign=ee(n)},updated(e,{value:t}){le(e,t)}};function le(e,t){const n=e.multiple;if(!n||(0,r.isArray)(t)||(0,r.isSet)(t)){for(let o=0,i=e.options.length;o<i;o++){const i=e.options[o],s=ce(i);if(n)(0,r.isArray)(t)?i.selected=(0,r.looseIndexOf)(t,s)>-1:i.selected=t.has(s);else if((0,r.looseEqual)(ce(i),t))return void(e.selectedIndex!==o&&(e.selectedIndex=o))}n||-1===e.selectedIndex||(e.selectedIndex=-1)}else(0,o.warn)(`<select multiple v-model> expects an Array or Set value for its binding, but got ${Object.prototype.toString.call(t).slice(8,-1)}.`)}function ce(e){return"_value"in e?e._value:e.value}function ue(e,t){const n=t?"_trueValue":"_falseValue";return n in e?e[n]:t}const de={created(e,t,n){fe(e,t,n,null,"created")},mounted(e,t,n){fe(e,t,n,null,"mounted")},beforeUpdate(e,t,n,o){fe(e,t,n,o,"beforeUpdate")},updated(e,t,n,o){fe(e,t,n,o,"updated")}};function pe(e,t){switch(e){case"SELECT":return ae;case"TEXTAREA":return oe;default:switch(t){case"checkbox":return re;case"radio":return se;default:return oe}}}function fe(e,t,n,o,r){const i=pe(e.tagName,n.props&&n.props.type)[r];i&&i(e,t,n,o)}const he=["ctrl","shift","alt","meta"],me={stop:e=>e.stopPropagation(),prevent:e=>e.preventDefault(),self:e=>e.target!==e.currentTarget,ctrl:e=>!e.ctrlKey,shift:e=>!e.shiftKey,alt:e=>!e.altKey,meta:e=>!e.metaKey,left:e=>"button"in e&&0!==e.button,middle:e=>"button"in e&&1!==e.button,right:e=>"button"in e&&2!==e.button,exact:(e,t)=>he.some((n=>e[`${n}Key`]&&!t.includes(n)))},ge=(e,t)=>(n,...o)=>{for(let e=0;e<t.length;e++){const o=me[t[e]];if(o&&o(n,t))return}return e(n,...o)},ve={esc:"escape",space:" ",up:"arrow-up",left:"arrow-left",right:"arrow-right",down:"arrow-down",delete:"backspace"},ye=(e,t)=>n=>{if(!("key"in n))return;const o=(0,r.hyphenate)(n.key);return t.some((e=>e===o||ve[e]===o))?e(n):void 0},be={beforeMount(e,{value:t},{transition:n}){e._vod="none"===e.style.display?"":e.style.display,n&&t?n.beforeEnter(e):Ae(e,t)},mounted(e,{value:t},{transition:n}){n&&t&&n.enter(e)},updated(e,{value:t,oldValue:n},{transition:o}){!t!=!n&&(o?t?(o.beforeEnter(e),Ae(e,!0),o.enter(e)):o.leave(e,(()=>{Ae(e,!1)})):Ae(e,t))},beforeUnmount(e,{value:t}){Ae(e,t)}};function Ae(e,t){e.style.display=t?e._vod:"none"}const _e=(0,r.extend)({patchProp:(e,t,n,i,s=!1,a,l,c,u)=>{"class"===t?function(e,t,n){const o=e._vtc;o&&(t=(t?[t,...o]:[...o]).join(" ")),null==t?e.removeAttribute("class"):n?e.setAttribute("class",t):e.className=t}(e,i,s):"style"===t?function(e,t,n){const o=e.style,i=(0,r.isString)(n);if(n&&!i){if(t&&!(0,r.isString)(t))for(const e in t)null==n[e]&&d(o,e,"");for(const e in n)d(o,e,n[e])}else{const r=o.display;i?t!==n&&(o.cssText=n):t&&e.removeAttribute("style"),"_vod"in e&&(o.display=r)}}(e,n,i):(0,r.isOn)(t)?(0,r.isModelListener)(t)||g(e,t,0,i,l):("."===t[0]?(t=t.slice(1),1):"^"===t[0]?(t=t.slice(1),0):function(e,t,n,o){if(o)return"innerHTML"===t||"textContent"===t||!!(t in e&&A.test(t)&&(0,r.isFunction)(n));if("spellcheck"===t||"draggable"===t||"translate"===t)return!1;if("form"===t)return!1;if("list"===t&&"INPUT"===e.tagName)return!1;if("type"===t&&"TEXTAREA"===e.tagName)return!1;if(A.test(t)&&(0,r.isString)(n))return!1;return t in e}(e,t,i,s))?function(e,t,n,i,s,a,l){if("innerHTML"===t||"textContent"===t)return i&&l(i,s,a),void(e[t]=null==n?"":n);const c=e.tagName;if("value"===t&&"PROGRESS"!==c&&!c.includes("-")){e._value=n;const o=null==n?"":n;return("OPTION"===c?e.getAttribute("value"):e.value)!==o&&(e.value=o),void(null==n&&e.removeAttribute(t))}let u=!1;if(""===n||null==n){const o=typeof e[t];"boolean"===o?n=(0,r.includeBooleanAttr)(n):null==n&&"string"===o?(n="",u=!0):"number"===o&&(n=0,u=!0)}try{e[t]=n}catch(e){u||(0,o.warn)(`Failed setting prop "${t}" on <${c.toLowerCase()}>: value ${n} is invalid.`,e)}u&&e.removeAttribute(t)}(e,t,i,a,l,c,u):("true-value"===t?e._trueValue=i:"false-value"===t&&(e._falseValue=i),function(e,t,n,o,i){if(o&&t.startsWith("xlink:"))null==n?e.removeAttributeNS(h,t.slice(6,t.length)):e.setAttributeNS(h,t,n);else{const o=(0,r.isSpecialBooleanAttr)(t);null==n||o&&!(0,r.includeBooleanAttr)(n)?e.removeAttribute(t):e.setAttribute(t,o?"":n)}}(e,t,i,s))}},l);let xe,we=!1;function Ce(){return xe||(xe=(0,o.createRenderer)(_e))}function Se(){return xe=we?xe:(0,o.createHydrationRenderer)(_e),we=!0,xe}const Ee=(...e)=>{Ce().render(...e)},ke=(...e)=>{Se().hydrate(...e)},Te=(...e)=>{const t=Ce().createApp(...e);Re(t),Pe(t);const{mount:n}=t;return t.mount=e=>{const o=Oe(e);if(!o)return;const i=t._component;(0,r.isFunction)(i)||i.render||i.template||(i.template=o.innerHTML),o.innerHTML="";const s=n(o,!1,o instanceof SVGElement);return o instanceof Element&&(o.removeAttribute("v-cloak"),o.setAttribute("data-v-app","")),s},t},je=(...e)=>{const t=Se().createApp(...e);Re(t),Pe(t);const{mount:n}=t;return t.mount=e=>{const t=Oe(e);if(t)return n(t,!0,t instanceof SVGElement)},t};function Re(e){Object.defineProperty(e.config,"isNativeTag",{value:e=>(0,r.isHTMLTag)(e)||(0,r.isSVGTag)(e),writable:!1})}function Pe(e){if((0,o.isRuntimeOnly)()){const t=e.config.isCustomElement;Object.defineProperty(e.config,"isCustomElement",{get:()=>t,set(){(0,o.warn)("The `isCustomElement` config option is deprecated. Use `compilerOptions.isCustomElement` instead.")}});const n=e.config.compilerOptions,r='The `compilerOptions` config option is only respected when using a build of Vue.js that includes the runtime compiler (aka "full build"). Since you are using the runtime-only build, `compilerOptions` must be passed to `@vue/compiler-dom` in the build setup instead.\n- For vue-loader: pass it via vue-loader\'s `compilerOptions` loader option.\n- For vue-cli: see https://cli.vuejs.org/guide/webpack.html#modifying-options-of-a-loader\n- For vite: pass it via @vitejs/plugin-vue options. See https://github.com/vitejs/vite-plugin-vue/tree/main/packages/plugin-vue#example-for-passing-options-to-vuecompiler-sfc';Object.defineProperty(e.config,"compilerOptions",{get:()=>((0,o.warn)(r),n),set(){(0,o.warn)(r)}})}}function Oe(e){if((0,r.isString)(e)){const t=document.querySelector(e);return t||(0,o.warn)(`Failed to mount app: mount target selector "${e}" returned null.`),t}return window.ShadowRoot&&e instanceof window.ShadowRoot&&"closed"===e.mode&&(0,o.warn)('mounting on a ShadowRoot with `{mode: "closed"}` may lead to unpredictable bugs'),e}let Ne=!1;const Be=()=>{Ne||(Ne=!0,oe.getSSRProps=({value:e})=>({value:e}),se.getSSRProps=({value:e},t)=>{if(t.props&&(0,r.looseEqual)(t.props.value,e))return{checked:!0}},re.getSSRProps=({value:e},t)=>{if((0,r.isArray)(e)){if(t.props&&(0,r.looseIndexOf)(e,t.props.value)>-1)return{checked:!0}}else if((0,r.isSet)(e)){if(t.props&&e.has(t.props.value))return{checked:!0}}else if(e)return{checked:!0}},de.getSSRProps=(e,t)=>{if("string"!=typeof t.type)return;const n=pe(t.type.toUpperCase(),t.props&&t.props.type);return n.getSSRProps?n.getSSRProps(e,t):void 0},be.getSSRProps=({value:e})=>{if(!e)return{style:{display:"none"}}})}},"./node_modules/@vue/shared/dist/shared.esm-bundler.js":(e,t,n)=>{"use strict";function o(e,t){const n=Object.create(null),o=e.split(",");for(let e=0;e<o.length;e++)n[o[e]]=!0;return t?e=>!!n[e.toLowerCase()]:e=>!!n[e]}n.r(t),n.d(t,{EMPTY_ARR:()=>i,EMPTY_OBJ:()=>r,NO:()=>a,NOOP:()=>s,PatchFlagNames:()=>J,camelize:()=>B,capitalize:()=>F,def:()=>$,escapeHtml:()=>Ae,escapeHtmlComment:()=>xe,extend:()=>d,genPropsAccessExp:()=>Y,generateCodeFrame:()=>X,getGlobalThis:()=>z,hasChanged:()=>V,hasOwn:()=>h,hyphenate:()=>M,includeBooleanAttr:()=>pe,invokeArrayFns:()=>L,isArray:()=>m,isBooleanAttr:()=>de,isBuiltInDirective:()=>P,isDate:()=>y,isFunction:()=>A,isGloballyWhitelisted:()=>G,isHTMLTag:()=>se,isIntegerKey:()=>j,isKnownHtmlAttr:()=>ve,isKnownSvgAttr:()=>ye,isMap:()=>g,isModelListener:()=>u,isObject:()=>w,isOn:()=>c,isPlainObject:()=>T,isPromise:()=>C,isRegExp:()=>b,isReservedProp:()=>R,isSSRSafeAttrName:()=>me,isSVGTag:()=>ae,isSet:()=>v,isSpecialBooleanAttr:()=>ue,isString:()=>_,isSymbol:()=>x,isVoidTag:()=>le,looseEqual:()=>we,looseIndexOf:()=>Ce,looseToNumber:()=>H,makeMap:()=>o,normalizeClass:()=>re,normalizeProps:()=>ie,normalizeStyle:()=>Q,objectToString:()=>S,parseStringStyle:()=>ne,propsToAttrMap:()=>ge,remove:()=>p,slotFlagsText:()=>K,stringifyStyle:()=>oe,toDisplayString:()=>Se,toHandlerKey:()=>I,toNumber:()=>U,toRawType:()=>k,toTypeString:()=>E});const r=Object.freeze({}),i=Object.freeze([]),s=()=>{},a=()=>!1,l=/^on[^a-z]/,c=e=>l.test(e),u=e=>e.startsWith("onUpdate:"),d=Object.assign,p=(e,t)=>{const n=e.indexOf(t);n>-1&&e.splice(n,1)},f=Object.prototype.hasOwnProperty,h=(e,t)=>f.call(e,t),m=Array.isArray,g=e=>"[object Map]"===E(e),v=e=>"[object Set]"===E(e),y=e=>"[object Date]"===E(e),b=e=>"[object RegExp]"===E(e),A=e=>"function"==typeof e,_=e=>"string"==typeof e,x=e=>"symbol"==typeof e,w=e=>null!==e&&"object"==typeof e,C=e=>w(e)&&A(e.then)&&A(e.catch),S=Object.prototype.toString,E=e=>S.call(e),k=e=>E(e).slice(8,-1),T=e=>"[object Object]"===E(e),j=e=>_(e)&&"NaN"!==e&&"-"!==e[0]&&""+parseInt(e,10)===e,R=o(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),P=o("bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo"),O=e=>{const t=Object.create(null);return n=>t[n]||(t[n]=e(n))},N=/-(\w)/g,B=O((e=>e.replace(N,((e,t)=>t?t.toUpperCase():"")))),D=/\B([A-Z])/g,M=O((e=>e.replace(D,"-$1").toLowerCase())),F=O((e=>e.charAt(0).toUpperCase()+e.slice(1))),I=O((e=>e?`on${F(e)}`:"")),V=(e,t)=>!Object.is(e,t),L=(e,t)=>{for(let n=0;n<e.length;n++)e[n](t)},$=(e,t,n)=>{Object.defineProperty(e,t,{configurable:!0,enumerable:!1,value:n})},H=e=>{const t=parseFloat(e);return isNaN(t)?e:t},U=e=>{const t=_(e)?Number(e):NaN;return isNaN(t)?e:t};let q;const z=()=>q||(q="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==n.g?n.g:{}),W=/^[_$a-zA-Z\xA0-\uFFFF][_$a-zA-Z0-9\xA0-\uFFFF]*$/;function Y(e){return W.test(e)?`__props.${e}`:`__props[${JSON.stringify(e)}]`}const J={1:"TEXT",2:"CLASS",4:"STYLE",8:"PROPS",16:"FULL_PROPS",32:"HYDRATE_EVENTS",64:"STABLE_FRAGMENT",128:"KEYED_FRAGMENT",256:"UNKEYED_FRAGMENT",512:"NEED_PATCH",1024:"DYNAMIC_SLOTS",2048:"DEV_ROOT_FRAGMENT",[-1]:"HOISTED",[-2]:"BAIL"},K={1:"STABLE",2:"DYNAMIC",3:"FORWARDED"},G=o("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt,console");function X(e,t=0,n=e.length){let o=e.split(/(\r?\n)/);const r=o.filter(((e,t)=>t%2==1));o=o.filter(((e,t)=>t%2==0));let i=0;const s=[];for(let e=0;e<o.length;e++)if(i+=o[e].length+(r[e]&&r[e].length||0),i>=t){for(let a=e-2;a<=e+2||n>i;a++){if(a<0||a>=o.length)continue;const l=a+1;s.push(`${l}${" ".repeat(Math.max(3-String(l).length,0))}|  ${o[a]}`);const c=o[a].length,u=r[a]&&r[a].length||0;if(a===e){const e=t-(i-(c+u)),o=Math.max(1,n>i?c-e:n-t);s.push("   |  "+" ".repeat(e)+"^".repeat(o))}else if(a>e){if(n>i){const e=Math.max(Math.min(n-i,c),1);s.push("   |  "+"^".repeat(e))}i+=c+u}}break}return s.join("\n")}function Q(e){if(m(e)){const t={};for(let n=0;n<e.length;n++){const o=e[n],r=_(o)?ne(o):Q(o);if(r)for(const e in r)t[e]=r[e]}return t}return _(e)||w(e)?e:void 0}const Z=/;(?![^(]*\))/g,ee=/:([^]+)/,te=new RegExp("\\/\\*.*?\\*\\/","gs");function ne(e){const t={};return e.replace(te,"").split(Z).forEach((e=>{if(e){const n=e.split(ee);n.length>1&&(t[n[0].trim()]=n[1].trim())}})),t}function oe(e){let t="";if(!e||_(e))return t;for(const n in e){const o=e[n],r=n.startsWith("--")?n:M(n);(_(o)||"number"==typeof o)&&(t+=`${r}:${o};`)}return t}function re(e){let t="";if(_(e))t=e;else if(m(e))for(let n=0;n<e.length;n++){const o=re(e[n]);o&&(t+=o+" ")}else if(w(e))for(const n in e)e[n]&&(t+=n+" ");return t.trim()}function ie(e){if(!e)return null;let{class:t,style:n}=e;return t&&!_(t)&&(e.class=re(t)),n&&(e.style=Q(n)),e}const se=o("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,hgroup,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot"),ae=o("svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistantLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view"),le=o("area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr"),ce="itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly",ue=o(ce),de=o(ce+",async,autofocus,autoplay,controls,default,defer,disabled,hidden,inert,loop,open,required,reversed,scoped,seamless,checked,muted,multiple,selected");function pe(e){return!!e||""===e}const fe=/[>/="'\u0009\u000a\u000c\u0020]/,he={};function me(e){if(he.hasOwnProperty(e))return he[e];const t=fe.test(e);return t&&console.error(`unsafe attribute name: ${e}`),he[e]=!t}const ge={acceptCharset:"accept-charset",className:"class",htmlFor:"for",httpEquiv:"http-equiv"},ve=o("accept,accept-charset,accesskey,action,align,allow,alt,async,autocapitalize,autocomplete,autofocus,autoplay,background,bgcolor,border,buffered,capture,challenge,charset,checked,cite,class,code,codebase,color,cols,colspan,content,contenteditable,contextmenu,controls,coords,crossorigin,csp,data,datetime,decoding,default,defer,dir,dirname,disabled,download,draggable,dropzone,enctype,enterkeyhint,for,form,formaction,formenctype,formmethod,formnovalidate,formtarget,headers,height,hidden,high,href,hreflang,http-equiv,icon,id,importance,inert,integrity,ismap,itemprop,keytype,kind,label,lang,language,loading,list,loop,low,manifest,max,maxlength,minlength,media,min,multiple,muted,name,novalidate,open,optimum,pattern,ping,placeholder,poster,preload,radiogroup,readonly,referrerpolicy,rel,required,reversed,rows,rowspan,sandbox,scope,scoped,selected,shape,size,sizes,slot,span,spellcheck,src,srcdoc,srclang,srcset,start,step,style,summary,tabindex,target,title,translate,type,usemap,value,width,wrap"),ye=o("xmlns,accent-height,accumulate,additive,alignment-baseline,alphabetic,amplitude,arabic-form,ascent,attributeName,attributeType,azimuth,baseFrequency,baseline-shift,baseProfile,bbox,begin,bias,by,calcMode,cap-height,class,clip,clipPathUnits,clip-path,clip-rule,color,color-interpolation,color-interpolation-filters,color-profile,color-rendering,contentScriptType,contentStyleType,crossorigin,cursor,cx,cy,d,decelerate,descent,diffuseConstant,direction,display,divisor,dominant-baseline,dur,dx,dy,edgeMode,elevation,enable-background,end,exponent,fill,fill-opacity,fill-rule,filter,filterRes,filterUnits,flood-color,flood-opacity,font-family,font-size,font-size-adjust,font-stretch,font-style,font-variant,font-weight,format,from,fr,fx,fy,g1,g2,glyph-name,glyph-orientation-horizontal,glyph-orientation-vertical,glyphRef,gradientTransform,gradientUnits,hanging,height,href,hreflang,horiz-adv-x,horiz-origin-x,id,ideographic,image-rendering,in,in2,intercept,k,k1,k2,k3,k4,kernelMatrix,kernelUnitLength,kerning,keyPoints,keySplines,keyTimes,lang,lengthAdjust,letter-spacing,lighting-color,limitingConeAngle,local,marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mask,maskContentUnits,maskUnits,mathematical,max,media,method,min,mode,name,numOctaves,offset,opacity,operator,order,orient,orientation,origin,overflow,overline-position,overline-thickness,panose-1,paint-order,path,pathLength,patternContentUnits,patternTransform,patternUnits,ping,pointer-events,points,pointsAtX,pointsAtY,pointsAtZ,preserveAlpha,preserveAspectRatio,primitiveUnits,r,radius,referrerPolicy,refX,refY,rel,rendering-intent,repeatCount,repeatDur,requiredExtensions,requiredFeatures,restart,result,rotate,rx,ry,scale,seed,shape-rendering,slope,spacing,specularConstant,specularExponent,speed,spreadMethod,startOffset,stdDeviation,stemh,stemv,stitchTiles,stop-color,stop-opacity,strikethrough-position,strikethrough-thickness,string,stroke,stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,stroke-width,style,surfaceScale,systemLanguage,tabindex,tableValues,target,targetX,targetY,text-anchor,text-decoration,text-rendering,textLength,to,transform,transform-origin,type,u1,u2,underline-position,underline-thickness,unicode,unicode-bidi,unicode-range,units-per-em,v-alphabetic,v-hanging,v-ideographic,v-mathematical,values,vector-effect,version,vert-adv-y,vert-origin-x,vert-origin-y,viewBox,viewTarget,visibility,width,widths,word-spacing,writing-mode,x,x-height,x1,x2,xChannelSelector,xlink:actuate,xlink:arcrole,xlink:href,xlink:role,xlink:show,xlink:title,xlink:type,xml:base,xml:lang,xml:space,y,y1,y2,yChannelSelector,z,zoomAndPan"),be=/["'&<>]/;function Ae(e){const t=""+e,n=be.exec(t);if(!n)return t;let o,r,i="",s=0;for(r=n.index;r<t.length;r++){switch(t.charCodeAt(r)){case 34:o="&quot;";break;case 38:o="&amp;";break;case 39:o="&#39;";break;case 60:o="&lt;";break;case 62:o="&gt;";break;default:continue}s!==r&&(i+=t.slice(s,r)),s=r+1,i+=o}return s!==r?i+t.slice(s,r):i}const _e=/^-?>|<!--|-->|--!>|<!-$/g;function xe(e){return e.replace(_e,"")}function we(e,t){if(e===t)return!0;let n=y(e),o=y(t);if(n||o)return!(!n||!o)&&e.getTime()===t.getTime();if(n=x(e),o=x(t),n||o)return e===t;if(n=m(e),o=m(t),n||o)return!(!n||!o)&&function(e,t){if(e.length!==t.length)return!1;let n=!0;for(let o=0;n&&o<e.length;o++)n=we(e[o],t[o]);return n}(e,t);if(n=w(e),o=w(t),n||o){if(!n||!o)return!1;if(Object.keys(e).length!==Object.keys(t).length)return!1;for(const n in e){const o=e.hasOwnProperty(n),r=t.hasOwnProperty(n);if(o&&!r||!o&&r||!we(e[n],t[n]))return!1}}return String(e)===String(t)}function Ce(e,t){return e.findIndex((e=>we(e,t)))}const Se=e=>_(e)?e:null==e?"":m(e)||w(e)&&(e.toString===S||!A(e.toString))?JSON.stringify(e,Ee,2):String(e),Ee=(e,t)=>t&&t.__v_isRef?Ee(e,t.value):g(t)?{[`Map(${t.size})`]:[...t.entries()].reduce(((e,[t,n])=>(e[`${t} =>`]=n,e)),{})}:v(t)?{[`Set(${t.size})`]:[...t.values()]}:!w(t)||m(t)||T(t)?t:String(t)},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./src/js-modules/Catalog-products.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";function o(e){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o(e)}function r(e){return function(e){if(Array.isArray(e))return i(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return i(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return i(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function i(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}n.r(t),n.d(t,{default:()=>s});const s={data:function(){return{limit:30,counter:1,products:[],categories:[],brands:[],maxPrice:0,priсes:[],filters:[],selectedPriceCategory:[],priceFilters:[],sorting:"popular",isLoadMoreHidden:!1,isFiltersAccordionHidden:!1,isCategoriesScrollHidden:!1,filtersAccordionStatus:{categories:!1,price:!1,brands:!1}}},computed:{oneThirdPrice:function(){return Math.ceil(this.maxPrice/3)},priceRange:function(){return[{id:1,name:"0 - ".concat(this.oneThirdPrice),minValue:0,maxValue:this.oneThirdPrice},{id:2,name:"".concat(this.oneThirdPrice+1," - ").concat(2*this.oneThirdPrice),minValue:this.oneThirdPrice+1,maxValue:2*this.oneThirdPrice},{id:3,name:"".concat(2*this.oneThirdPrice+1," - ").concat(this.maxPrice),minValue:2*this.oneThirdPrice+1,maxValue:this.maxPrice}]},productsfiltered:function(){var e=this;if(!this.filters.length)return this.products;var t=[];return this.products.forEach((function(n){e.filters.forEach((function(e){"string"!=typeof e||e!==n.brand&&e!==n.category||t.includes(n)||t.push(n),"string"!=typeof e&&n.price>=e.minValue&&n.price<=e.maxValue&&!t.includes(n)&&t.push(n)}))})),t},productsSorted:function(){var e=r(this.productsfiltered);return"popular"===this.sorting?this.productsfiltered:"cheap"===this.sorting?e.sort((function(e,t){return e.price-t.price})):"expensive"===this.sorting&&e.sort((function(e,t){return t.price-e.price}))}},created:function(){var e=this;fetch("https://dummyjson.com/products").then((function(e){return e.json()})).then((function(t){e.products=t.products,console.log(t),e.createFilters()})).catch(console.log)},methods:{appearanceAcordion:function(){this.isFiltersAccordionHidden=!this.isFiltersAccordionHidden},filtersAccordion:function(e){var t=e.target.innerText.toLowerCase();this.filtersAccordionStatus[t]=!this.filtersAccordionStatus[t]},createFilters:function(){var e=this;this.products.forEach((function(t){e.categories.includes(t.category)||e.categories.push(t.category),e.brands.includes(t.brand)||e.brands.push(t.brand),e.maxPrice=t.price>e.maxPrice?t.price:e.maxPrice}))},filterItems:function(e){e.target.checked?"price"===e.target.name?this.filters.push(this.priceRange.find((function(t){return t.id===+e.target.value}))):this.filters.push(e.target.value):this.filters=this.filters.filter((function(t){return"string"==typeof t&&t!==e.target.value||"object"===o(t)&&t.id!==+e.target.value}))},loadingProducts:function(){var e=this;fetch("https://dummyjson.com/products?limit=".concat(this.limit,"&skip=").concat(this.counter*this.limit)).then((function(e){return e.json()})).then((function(t){e.counter+=1,e.products=e.products.concat(t.products),e.createFilters(),e.isCategoriesScrollHidden=!0,t.limit<e.limit&&(e.isLoadMoreHidden=!0)})).catch(console.log)}}}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./src/js-modules/Product-count.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./src/js-modules/store.js");const r={computed:{countVisible:function(){return(0,o.useCountStore)().countVisible},addCount:function(){return(0,o.useCountStore)().countAdd}}}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./src/js-modules/Product-details.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./src/js-modules/store.js");const r={data:function(){return{count:1,isModalActive:!1}},computed:{limitedCounter:function(){return Math.max(this.count,1)}},methods:{addPlus:function(){this.count+=1},addMinus:function(){this.count-=1,this.count=this.limitedCounter},addCart:function(){(0,o.useCountStore)().addCount(this.count)}}}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[3]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./src/js-modules/Catalog-products.vue?vue&type=template&id=7f0766fb":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>E});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js"),r={id:"catalog",class:"filters"},i={class:"filters__wrapper"},s=(0,o.createElementVNode)("h2",{class:"visially-hidden"}," Filters ",-1),a={class:"filters__button-wrapper"},l=[(0,o.createElementVNode)("option",{value:"popular"}," Popular ",-1),(0,o.createElementVNode)("option",{value:"cheap"}," Cheapest first ",-1),(0,o.createElementVNode)("option",{value:"expensive"}," Expensive first ",-1)],c={class:"filters__title"},u=["id","value"],d=["for"],p={class:"filters__title"},f=["id","value"],h=["for"],m={class:"filters__title"},g=["id","value"],v=["for"],y={class:"products-catalog"},b=(0,o.createElementVNode)("h2",{class:"visially-hidden"}," Products catalog ",-1),A={class:"products-catalog__list"},_={class:"products-catalog__link",href:"#"},x=["src"],w={class:"products-catalog__title"},C={class:"products-catalog__text"},S={class:"products-catalog__button-link-wrapper"};function E(e,t,n,E,k,T){return(0,o.openBlock)(),(0,o.createElementBlock)(o.Fragment,null,[(0,o.createElementVNode)("aside",r,[(0,o.createElementVNode)("div",i,[s,(0,o.createElementVNode)("div",a,[(0,o.createElementVNode)("button",{class:"filters__button-first",onClick:t[0]||(t[0]=function(){return T.appearanceAcordion&&T.appearanceAcordion.apply(T,arguments)})}," Filters "),(0,o.withDirectives)((0,o.createElementVNode)("select",{"onUpdate:modelValue":t[1]||(t[1]=function(e){return k.sorting=e}),class:"filters__button-second",name:"sorting"},l,512),[[o.vModelSelect,k.sorting]])]),(0,o.createElementVNode)("div",{class:(0,o.normalizeClass)({"filters__accordion-wrapper":!0,"active-accordion":k.isFiltersAccordionHidden})},[(0,o.createElementVNode)("h3",c,[(0,o.createElementVNode)("button",{class:(0,o.normalizeClass)({accordion:!0,active:k.filtersAccordionStatus.categories}),onClick:t[2]||(t[2]=function(){return T.filtersAccordion&&T.filtersAccordion.apply(T,arguments)})}," Categories ",2)]),(0,o.createElementVNode)("ul",{class:(0,o.normalizeClass)({"panel filters__list-categories":!0,active:k.filtersAccordionStatus.categories,"filters__list-categories--scroll panel--scroll":k.isCategoriesScrollHidden})},[((0,o.openBlock)(!0),(0,o.createElementBlock)(o.Fragment,null,(0,o.renderList)(k.categories,(function(e){return(0,o.openBlock)(),(0,o.createElementBlock)("li",{key:e,class:"filters__item"},[(0,o.createElementVNode)("input",{id:e,class:"filters__checkbox",type:"checkbox",name:"categories",value:e,onChange:t[3]||(t[3]=function(){return T.filterItems&&T.filterItems.apply(T,arguments)})},null,40,u),(0,o.createElementVNode)("label",{class:"filters__label",for:e},(0,o.toDisplayString)(e.charAt(0).toUpperCase()+e.slice(1)),9,d)])})),128))],2),(0,o.createElementVNode)("h3",p,[(0,o.createElementVNode)("button",{class:(0,o.normalizeClass)({accordion:!0,active:k.filtersAccordionStatus.price}),onClick:t[4]||(t[4]=function(){return T.filtersAccordion&&T.filtersAccordion.apply(T,arguments)})}," Price ",2)]),(0,o.createElementVNode)("ul",{class:(0,o.normalizeClass)({"panel filters__list":!0,active:k.filtersAccordionStatus.price})},[((0,o.openBlock)(!0),(0,o.createElementBlock)(o.Fragment,null,(0,o.renderList)(T.priceRange,(function(e){return(0,o.openBlock)(),(0,o.createElementBlock)("li",{key:e,class:"filters__item"},[(0,o.createElementVNode)("input",{id:e.id,class:"filters__checkbox",type:"checkbox",name:"price",value:e.id,onChange:t[5]||(t[5]=function(){return T.filterItems&&T.filterItems.apply(T,arguments)})},null,40,f),(0,o.createElementVNode)("label",{class:"filters__label",for:e.id},(0,o.toDisplayString)(e.name),9,h)])})),128))],2),(0,o.createElementVNode)("h3",m,[(0,o.createElementVNode)("button",{class:(0,o.normalizeClass)({accordion:!0,active:k.filtersAccordionStatus.brands}),onClick:t[6]||(t[6]=function(){return T.filtersAccordion&&T.filtersAccordion.apply(T,arguments)})}," Brands ",2)]),(0,o.createElementVNode)("ul",{class:(0,o.normalizeClass)({"panel panel--scroll filters__list--scroll":!0,active:k.filtersAccordionStatus.brands})},[((0,o.openBlock)(!0),(0,o.createElementBlock)(o.Fragment,null,(0,o.renderList)(k.brands,(function(e){return(0,o.openBlock)(),(0,o.createElementBlock)("li",{key:e,class:"filters__item"},[(0,o.createElementVNode)("input",{id:e,class:"filters__checkbox",type:"checkbox",name:"brands",value:e,onChange:t[7]||(t[7]=function(){return T.filterItems&&T.filterItems.apply(T,arguments)})},null,40,g),(0,o.createElementVNode)("label",{class:"filters__label",for:e},(0,o.toDisplayString)(e),9,v)])})),128))],2)],2)])]),(0,o.createElementVNode)("section",y,[b,(0,o.createElementVNode)("ul",A,[((0,o.openBlock)(!0),(0,o.createElementBlock)(o.Fragment,null,(0,o.renderList)(T.productsSorted,(function(e){return(0,o.openBlock)(),(0,o.createElementBlock)("li",{key:e,class:"products-catalog__item"},[(0,o.createElementVNode)("a",_,[(0,o.createElementVNode)("img",{class:"products-catalog__image",src:e.images[0],alt:"image-first"},null,8,x),(0,o.createElementVNode)("h3",w,(0,o.toDisplayString)(e.title),1),(0,o.createElementVNode)("p",C,"£"+(0,o.toDisplayString)(e.price),1)])])})),128))]),(0,o.withDirectives)((0,o.createElementVNode)("div",S,[(0,o.createElementVNode)("a",{class:"products-catalog__button-link",href:"#",onClick:t[8]||(t[8]=(0,o.withModifiers)((function(){return T.loadingProducts&&T.loadingProducts.apply(T,arguments)}),["prevent"]))},"Load more")],512),[[o.vShow,!k.filters.length&&!k.isLoadMoreHidden]])])],64)}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[3]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./src/js-modules/Product-count.vue?vue&type=template&id=dc4a7e44":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>a});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js"),r={id:"product-count",class:"link-icons wrapper__cart-link",href:"#"},i={key:0,class:"wrapper__product-count"},s=(0,o.createElementVNode)("svg",{class:"wrapper__cart",width:"16",height:"16",viewbox:"0 0 16 16",fill:"none",xmlns:"http://www.w3.org/2000/svg"},[(0,o.createElementVNode)("rect",{width:"16",height:"16",fill:"white",style:{"mix-blend-mode":"multiply"}}),(0,o.createElementVNode)("path",{d:"M5 15.0001C5.55228 15.0001\n        6 14.5524 6 14.0001C6 13.4478 5.55228 13.0001\n        5 13.0001C4.44772 13.0001 4 13.4478 4 14.0001C4 14.5524 4.44772 15.0001 5 15.0001Z",fill:"currentColor"}),(0,o.createElementVNode)("path",{d:"M12 15.0001C12.5523 15.0001 13 14.5524 13\n        14.0001C13 13.4478 12.5523 13.0001 12 13.0001C11.4477\n        13.0001 11 13.4478 11 14.0001C11 14.5524 11.4477 15.0001 12 15.0001Z",fill:"currentColor"}),(0,o.createElementVNode)("path",{d:"M14 3.5001H2.91L2.5 1.4001C2.47662 1.28546\n        2.41379 1.18265 2.32243 1.10957C2.23107 1.03648 2.11697\n        0.997743 2 1.0001H0V2.0001H1.59L3.5 11.6001C3.52338 11.7147 3.58621\n        11.8176 3.67757 11.8906C3.76893 11.9637 3.88303 12.0025\n        4 12.0001H13V11.0001H4.41L4 9.0001H13C13.1156 9.00293 13.2286 8.96561\n        13.3197 8.8945C13.4109 8.82339 13.4746 8.72289 13.5 8.6101L14.5\n        4.1101C14.5168 4.03591 14.5164 3.95888 14.4989 3.88487C14.4814\n        3.81085 14.4472 3.74181 14.399 3.68299C14.3508 3.62417 14.2898\n        3.57712 14.2206 3.54543C14.1515 3.51373 14.076 3.49823 14 3.5001ZM12.6\n        8.0001H3.81L3.11 4.5001H13.375L12.6 8.0001Z",fill:"currentColor"})],-1);function a(e,t,n,a,l,c){return(0,o.openBlock)(),(0,o.createElementBlock)("a",r,[c.countVisible?((0,o.openBlock)(),(0,o.createElementBlock)("div",i,(0,o.toDisplayString)(c.addCount),1)):(0,o.createCommentVNode)("v-if",!0),s])}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[3]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./src/js-modules/Product-details.vue?vue&type=template&id=4dc3825e":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>v});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js"),r=n("./src/img/content-image/image-fourteen.png"),i={class:"product-details container js-product-details"},s={class:"product-details__wrapper container__grey-wrapper"},a=(0,o.createElementVNode)("div",{class:"product-details__image-inner-wrapper"},[(0,o.createElementVNode)("img",{class:"product-details__image",src:r.default,alt:"image-fourteen"})],-1),l={class:"product-details__description-inner-wrapper"},c=(0,o.createStaticVNode)('<h1 class="product-details__heading"> The Dandy Chair </h1><p class="product-details__price-text"> £250 </p><h2 class="product-details__title"> Product description </h2><p class="product-details__description-text"> A timeless design, with premium materials features as one of our most popular and iconic pieces. The dandy chair is perfect for any stylish living space with beech legs and lambskin leather upholstery. </p><h2 class="product-details__title"> Dimensions </h2><div class="product-details__table-wrapper"><dl class="product-details__table-inner-wrapper"><dt class="product-details__title-table"> Height </dt><dd class="product-details__text-table"> 110cm </dd></dl><dl class="product-details__table-inner-wrapper"><dt class="product-details__title-table"> Width </dt><dd class="product-details__text-table"> 75cm </dd></dl><dl class="product-details__table-inner-wrapper"><dt class="product-details__title-table"> Depth </dt><dd class="product-details__text-table"> 50cm </dd></dl></div>',6),u={action:"",method:"GET"},d=(0,o.createElementVNode)("label",{class:"product-details__title-text",for:"product-quantity"}," Quantitity ",-1),p={class:"product-details__input-wrapper"},f=["value"],h={class:"product-details__button-wrapper"},m=(0,o.createElementVNode)("div",{class:"product-details__button-link-wrapper"},[(0,o.createElementVNode)("a",{class:"product-details__button-link",href:"#"}," Save to favorites ")],-1),g=(0,o.createStaticVNode)('<div class="product-details__modal"><div class="product-details__modal-content"><p class="product-details__modal-text"> All products added to cart </p><div class="product-details__modal-wrapper"><a class="product-details-modal-link" href="#"><button class="product-details__modal-button-link"> Go to cart </button></a><button class="product-details__modal-button"> Stay on this page </button></div></div></div>',1);function v(e,t,n,r,v,y){return(0,o.openBlock)(),(0,o.createElementBlock)("section",i,[(0,o.createElementVNode)("div",s,[a,(0,o.createElementVNode)("div",l,[c,(0,o.createElementVNode)("form",u,[d,(0,o.createElementVNode)("div",p,[(0,o.createElementVNode)("button",{class:"product-details__minus",type:"button",onClick:t[0]||(t[0]=function(){return y.addMinus&&y.addMinus.apply(y,arguments)})}," - "),(0,o.createElementVNode)("input",{id:"product-quantity",class:"product-details__input",type:"number",name:"product-quantity",value:v.count},null,8,f),(0,o.createElementVNode)("button",{class:"product-details__plus",type:"button",onClick:t[1]||(t[1]=function(){return y.addPlus&&y.addPlus.apply(y,arguments)})}," + ")]),(0,o.createElementVNode)("div",h,[(0,o.createElementVNode)("button",{class:"product-details__button",type:"submit",onClick:t[2]||(t[2]=(0,o.withModifiers)((function(){return y.addCart&&y.addCart.apply(y,arguments)}),["prevent"]))}," Add to cart "),m])])])]),g])}},"./src/js-modules/header.js":(e,t,n)=>{var o=n("./node_modules/jquery/dist/jquery.js");o(".js-hamburger-link").click((function(e){e.preventDefault(),o("#header").toggleClass("js-header--show-menu").removeClass("js-header--show-search")})),o(".js-search-link").click((function(e){e.preventDefault(),o("#header").toggleClass("js-header--show-search").removeClass("js-header--show-menu")}))},"./src/js-modules/info-banner.js":(e,t,n)=>{var o=n("./node_modules/jquery/dist/jquery.js");o(".info-banner__close-button-link").click((function(){o(".info-banner").fadeOut(2e3),o("#header").addClass("header-animation"),localStorage.setItem("infoBannerClosed","true")}))},"./src/js-modules/store.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{useCountStore:()=>o});var o=(0,n("./node_modules/pinia/dist/pinia.mjs").defineStore)("CountStore",{state:function(){return{countVisible:!1,countAdd:0}},actions:{addCount:function(e){this.countVisible=!0,this.countAdd+=Number(e)}}})},"./src/js-modules/subsription.js":()=>{document.querySelectorAll(".js-subscription-form").forEach((function(e){e.addEventListener("submit",(function(t){t.preventDefault(),t.target.querySelectorAll(".js-subscription-button").forEach((function(t){var n=t.textContent;t.textContent="",t.innerHTML+='<i class="fa fa-spinner fa-spin"/>',t.disabled=!0,setTimeout((function(){t.textContent=n,t.disabled=!1,e.innerHTML+='<div class="window">Спасибо за заявку</div>'}),1e4)}))}))}))},"./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./src/js-modules/Catalog-products.vue?vue&type=style&index=0&id=7f0766fb&lang=scss":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>p});var o=n("./node_modules/css-loader/dist/runtime/sourceMaps.js"),r=n.n(o),i=n("./node_modules/css-loader/dist/runtime/api.js"),s=n.n(i),a=n("./node_modules/css-loader/dist/runtime/getUrl.js"),l=n.n(a),c=new URL(n("data:image/svg+xml,%3Csvg xmlns=%27http://www.w3.org/2000/svg%27 viewBox=%270 0 80 80%27%3E%3Cpath d=%27M70.3 13.8L40 66.3 9.7 13.8z%27 fill=%27%23000%27%3E%3C/path%3E%3C/svg%3E"),n.b),u=s()(r()),d=l()(c);u.push([e.id,'.filters__sorting {\n  margin-bottom: 20px;\n}\n.filters__accordion-wrapper {\n  margin-bottom: 50px;\n}\n.filters__list--scroll {\n  width: 270px;\n  max-height: 250px;\n  overflow-y: scroll;\n}\n.filters__list-categories {\n  margin-bottom: 48px;\n  max-height: 130px;\n}\n.filters__list-categories--scroll {\n  overflow-y: scroll;\n}\n.filters__button-first {\n  display: none;\n}\n.filters__button-wrapper {\n  display: block;\n}\n.filters__button-second {\n  position: relative;\n  width: 120px;\n  height: 40px;\n  margin-bottom: 20px;\n  font-family: "Satoshi";\n  font-size: 14px;\n  color: #2a254b;\n  background-color: #f9f9f9;\n  border-width: 0;\n  appearance: none;\n  text-align: center;\n}\n.filters__button-second:not([multiple]) {\n  padding-right: 5px;\n  background-repeat: no-repeat;\n  background-position: 105px 16px;\n  background-size: 10px 10px;\n  background-image: url('+d+');\n}\n.filters__checkbox {\n  position: absolute;\n  width: 0;\n  height: 0;\n  opacity: 0;\n}\n.filters__label {\n  position: relative;\n  display: block;\n  padding-left: 25px;\n  font-family: "Satoshi";\n  cursor: pointer;\n}\n.filters__label::before {\n  position: absolute;\n  top: 50%;\n  left: 0;\n  display: block;\n  width: 16px;\n  height: 16px;\n  margin-top: -10px;\n  content: "";\n  background-color: #fff;\n  border: 1px solid #dcdcdc;\n  border-radius: 2px;\n  opacity: 1;\n}\n.filters__label::after {\n  position: absolute;\n  top: 2px;\n  left: 5px;\n  width: 5px;\n  height: 10px;\n  content: "";\n  border: solid #fff;\n  border-width: 0 1px 1px 0;\n  opacity: 0;\n  transform: rotate(45deg);\n}\n.filters__checkbox:checked + .filters__label::after {\n  opacity: 1;\n}\n.filters__checkbox:checked + .filters__label::before {\n  background-color: #4e4d93;\n  opacity: 1;\n}\n.js-string-list {\n  position: absolute;\n  width: 120px;\n  margin-bottom: 35px;\n  margin-left: 95px;\n  background-color: #f9f9f9;\n  text-align: start;\n}\n.js-hidden {\n  display: none;\n}\n.products-catalog__list {\n  margin-bottom: 45px;\n}\n.accordion {\n  color: #2a254b;\n  font-family: "Clash Display";\n  cursor: default;\n}\n@media screen and (max-width: 767px) {\n.filters__accordion-wrapper {\n    display: none;\n    margin-right: 50px;\n}\n.filters__button-wrapper {\n    display: block;\n    margin-right: auto;\n    margin-left: auto;\n}\n.filters__button-first {\n    display: inline-block;\n}\n.filters__sorting {\n    display: block;\n    margin-top: 20px;\n}\n.accordion {\n    background-color: #eee;\n    color: #2a254b;\n    font-family: "Clash Display";\n    cursor: pointer;\n    padding: 18px;\n    width: 100%;\n    text-align: left;\n    border: none;\n    outline: none;\n    transition: 0.4s;\n}\n.accordion--brands {\n    padding-top: 20px;\n}\n.active-accordion {\n    display: block;\n}\n.active,\n  .accordion:hover {\n    background-color: #ccc;\n}\n.panel {\n    padding: 0 18px 20px;\n    background-color: white;\n    display: none;\n    overflow: hidden;\n}\n.panel.active {\n    display: block;\n}\n.panel--scroll {\n    padding: 0 18px;\n    background-color: white;\n    display: none;\n    overflow: hidden;\n    width: 300px;\n    max-height: 250px;\n    overflow-y: scroll;\n}\n}',"",{version:3,sources:["webpack://./src/js-modules/Catalog-products.vue","webpack://./Catalog-products.vue","webpack://./src/styles/components/variables.scss"],names:[],mappings:"AAIE;EACE,mBAAA;ACHJ;ADME;EACE,mBAAA;ACJJ;ADOE;EACE,YAAA;EACA,iBAAA;EACA,kBAAA;ACLJ;ADQE;EACE,mBAAA;EACA,iBAAA;ACNJ;ADSE;EACE,kBAAA;ACPJ;ADUE;EACE,aAAA;ACRJ;ADWE;EACE,cAAA;ACTJ;ADYE;EACE,kBAAA;EACA,YAAA;EACA,YAAA;EACA,mBAAA;EACA,sBEvCa;EFwCb,eAAA;EACA,cExCiB;EFyCjB,yBEtCe;EFuCf,eAAA;EACA,gBAAA;EACA,kBAAA;ACVJ;ADaE;EACE,kBAAA;EACA,4BAAA;EACA,+BAAA;EACA,0BAAA;EACA,yDAAA;ACXJ;ADcE;EACE,kBAAA;EACA,QAAA;EACA,SAAA;EACA,UAAA;ACZJ;ADeE;EACE,kBAAA;EACA,cAAA;EACA,kBAAA;EACA,sBEnEa;EFoEb,eAAA;ACbJ;ADgBE;EACE,kBAAA;EACA,QAAA;EACA,OAAA;EACA,cAAA;EACA,WAAA;EACA,YAAA;EACA,iBAAA;EACA,WAAA;EACA,sBAAA;EACA,yBAAA;EACA,kBAAA;EACA,UAAA;ACdJ;ADiBE;EACE,kBAAA;EACA,QAAA;EACA,SAAA;EACA,UAAA;EACA,YAAA;EACA,WAAA;EACA,kBAAA;EACA,yBAAA;EACA,UAAA;EACA,wBAAA;ACfJ;ADkBE;EACE,UAAA;AChBJ;ADmBE;EACE,yBAAA;EACA,UAAA;ACjBJ;ADqBA;EACE,kBAAA;EACA,YAAA;EACA,mBAAA;EACA,iBAAA;EACA,yBE9GiB;EF+GjB,iBAAA;AClBF;ADqBA;EACE,aAAA;AClBF;ADqBA;EACE,mBAAA;AClBF;ADqBA;EACE,cAAA;EACA,4BEjIa;EFkIb,eAAA;AClBF;ADqBA;AAEI;IACE,aAAA;IACA,kBAAA;ACnBJ;ADsBE;IACE,cAAA;IACA,kBAAA;IACA,iBAAA;ACpBJ;ADuBE;IACE,qBAAA;ACrBJ;ADwBE;IACE,cAAA;IACA,gBAAA;ACtBJ;AD0BA;IACE,sBAAA;IACA,cAAA;IACA,4BE/JW;IFgKX,eAAA;IACA,aAAA;IACA,WAAA;IACA,gBAAA;IACA,YAAA;IACA,aAAA;IACA,gBAAA;ACxBF;AD2BA;IACE,iBAAA;ACzBF;AD4BA;IACE,cAAA;AC1BF;AD6BA;;IAEE,sBAAA;AC3BF;AD8BA;IACE,oBAAA;IACA,uBAAA;IACA,aAAA;IACA,gBAAA;AC5BF;AD8BE;IACE,cAAA;AC5BJ;ADgCA;IACE,eAAA;IACA,uBAAA;IACA,aAAA;IACA,gBAAA;IACA,YAAA;IACA,iBAAA;IACA,kBAAA;AC9BF;AACF",sourcesContent:["\n@import \"../styles/components/variables.scss\";\n\n.filters {\n  &__sorting {\n    margin-bottom: 20px;\n  }\n\n  &__accordion-wrapper {\n    margin-bottom: 50px;\n  }\n\n  &__list--scroll {\n    width: 270px;\n    max-height: 250px;\n    overflow-y: scroll;\n  }\n\n  &__list-categories {\n    margin-bottom: 48px;\n    max-height: 130px;\n  }\n\n  &__list-categories--scroll {\n    overflow-y: scroll;\n  }\n\n  &__button-first {\n    display: none;\n  }\n\n  &__button-wrapper {\n    display: block;\n  }\n\n  &__button-second {\n    position: relative;\n    width: 120px;\n    height: 40px;\n    margin-bottom: 20px;\n    font-family: $font-secondary;\n    font-size: 14px;\n    color: $background-primary;\n    background-color: $background-third;\n    border-width: 0;\n    appearance: none;\n    text-align: center;\n  }\n\n  &__button-second:not([multiple]) {\n    padding-right: 5px;\n    background-repeat: no-repeat;\n    background-position: 105px 16px;\n    background-size: 10px 10px;\n    background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 80 80'%3E%3Cpath d='M70.3 13.8L40 66.3 9.7 13.8z' fill='%23000'%3E%3C/path%3E%3C/svg%3E\");\n  }\n\n  &__checkbox {\n    position: absolute;\n    width: 0;\n    height: 0;\n    opacity: 0;\n  }\n\n  &__label {\n    position: relative;\n    display: block;\n    padding-left: 25px;\n    font-family: $font-secondary;\n    cursor: pointer;\n  }\n\n  &__label::before {\n    position: absolute;\n    top: 50%;\n    left: 0;\n    display: block;\n    width: 16px;\n    height: 16px;\n    margin-top: -10px;\n    content: '';\n    background-color: #fff;\n    border: 1px solid #dcdcdc;\n    border-radius: 2px;\n    opacity: 1;\n  }\n\n  &__label::after {\n    position: absolute;\n    top: 2px;\n    left: 5px;\n    width: 5px;\n    height: 10px;\n    content: '';\n    border: solid #fff;\n    border-width: 0 1px 1px 0;\n    opacity: 0;\n    transform: rotate(45deg);\n  }\n\n  &__checkbox:checked+&__label::after {\n    opacity: 1;\n  }\n\n  &__checkbox:checked+&__label::before {\n    background-color: #4e4d93;\n    opacity: 1;\n  }\n}\n\n.js-string-list {\n  position: absolute;\n  width: 120px;\n  margin-bottom: 35px;\n  margin-left: 95px;\n  background-color: $background-third;\n  text-align: start;\n}\n\n.js-hidden {\n  display: none;\n}\n\n.products-catalog__list {\n  margin-bottom: 45px;\n}\n\n.accordion {\n  color: #2a254b;\n  font-family: $font-primary;\n  cursor: default;\n}\n\n@media screen and (max-width: 767px) {\n  .filters {\n    &__accordion-wrapper {\n      display: none;\n      margin-right: 50px;\n    }\n\n    &__button-wrapper {\n      display: block;\n      margin-right: auto;\n      margin-left: auto;\n    }\n\n    &__button-first {\n      display: inline-block;\n    }\n\n    &__sorting {\n      display: block;\n      margin-top: 20px;\n    }\n  }\n\n  .accordion {\n    background-color: #eee;\n    color: #2a254b;\n    font-family: $font-primary;\n    cursor: pointer;\n    padding: 18px;\n    width: 100%;\n    text-align: left;\n    border: none;\n    outline: none;\n    transition: 0.4s;\n  }\n\n  .accordion--brands {\n    padding-top: 20px;\n  }\n\n  .active-accordion {\n    display: block;\n  }\n\n  .active,\n  .accordion:hover {\n    background-color: #ccc;\n  }\n\n  .panel {\n    padding: 0 18px 20px;\n    background-color: white;\n    display: none;\n    overflow: hidden;\n\n    &.active {\n      display: block;\n    }\n  }\n\n  .panel--scroll {\n    padding: 0 18px;\n    background-color: white;\n    display: none;\n    overflow: hidden;\n    width: 300px;\n    max-height: 250px;\n    overflow-y: scroll;\n  }\n}\n",'.filters__sorting {\n  margin-bottom: 20px;\n}\n.filters__accordion-wrapper {\n  margin-bottom: 50px;\n}\n.filters__list--scroll {\n  width: 270px;\n  max-height: 250px;\n  overflow-y: scroll;\n}\n.filters__list-categories {\n  margin-bottom: 48px;\n  max-height: 130px;\n}\n.filters__list-categories--scroll {\n  overflow-y: scroll;\n}\n.filters__button-first {\n  display: none;\n}\n.filters__button-wrapper {\n  display: block;\n}\n.filters__button-second {\n  position: relative;\n  width: 120px;\n  height: 40px;\n  margin-bottom: 20px;\n  font-family: "Satoshi";\n  font-size: 14px;\n  color: #2a254b;\n  background-color: #f9f9f9;\n  border-width: 0;\n  appearance: none;\n  text-align: center;\n}\n.filters__button-second:not([multiple]) {\n  padding-right: 5px;\n  background-repeat: no-repeat;\n  background-position: 105px 16px;\n  background-size: 10px 10px;\n  background-image: url("data:image/svg+xml,%3Csvg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'0 0 80 80\'%3E%3Cpath d=\'M70.3 13.8L40 66.3 9.7 13.8z\' fill=\'%23000\'%3E%3C/path%3E%3C/svg%3E");\n}\n.filters__checkbox {\n  position: absolute;\n  width: 0;\n  height: 0;\n  opacity: 0;\n}\n.filters__label {\n  position: relative;\n  display: block;\n  padding-left: 25px;\n  font-family: "Satoshi";\n  cursor: pointer;\n}\n.filters__label::before {\n  position: absolute;\n  top: 50%;\n  left: 0;\n  display: block;\n  width: 16px;\n  height: 16px;\n  margin-top: -10px;\n  content: "";\n  background-color: #fff;\n  border: 1px solid #dcdcdc;\n  border-radius: 2px;\n  opacity: 1;\n}\n.filters__label::after {\n  position: absolute;\n  top: 2px;\n  left: 5px;\n  width: 5px;\n  height: 10px;\n  content: "";\n  border: solid #fff;\n  border-width: 0 1px 1px 0;\n  opacity: 0;\n  transform: rotate(45deg);\n}\n.filters__checkbox:checked + .filters__label::after {\n  opacity: 1;\n}\n.filters__checkbox:checked + .filters__label::before {\n  background-color: #4e4d93;\n  opacity: 1;\n}\n\n.js-string-list {\n  position: absolute;\n  width: 120px;\n  margin-bottom: 35px;\n  margin-left: 95px;\n  background-color: #f9f9f9;\n  text-align: start;\n}\n\n.js-hidden {\n  display: none;\n}\n\n.products-catalog__list {\n  margin-bottom: 45px;\n}\n\n.accordion {\n  color: #2a254b;\n  font-family: "Clash Display";\n  cursor: default;\n}\n\n@media screen and (max-width: 767px) {\n  .filters__accordion-wrapper {\n    display: none;\n    margin-right: 50px;\n  }\n  .filters__button-wrapper {\n    display: block;\n    margin-right: auto;\n    margin-left: auto;\n  }\n  .filters__button-first {\n    display: inline-block;\n  }\n  .filters__sorting {\n    display: block;\n    margin-top: 20px;\n  }\n  .accordion {\n    background-color: #eee;\n    color: #2a254b;\n    font-family: "Clash Display";\n    cursor: pointer;\n    padding: 18px;\n    width: 100%;\n    text-align: left;\n    border: none;\n    outline: none;\n    transition: 0.4s;\n  }\n  .accordion--brands {\n    padding-top: 20px;\n  }\n  .active-accordion {\n    display: block;\n  }\n  .active,\n  .accordion:hover {\n    background-color: #ccc;\n  }\n  .panel {\n    padding: 0 18px 20px;\n    background-color: white;\n    display: none;\n    overflow: hidden;\n  }\n  .panel.active {\n    display: block;\n  }\n  .panel--scroll {\n    padding: 0 18px;\n    background-color: white;\n    display: none;\n    overflow: hidden;\n    width: 300px;\n    max-height: 250px;\n    overflow-y: scroll;\n  }\n}','$font-primary: "Clash Display";\n$font-secondary: "Satoshi";\n$background-primary: #2a254b;\n$color-primary: #fff;\n$background-secondary: rgba(249 249 249 / 15%);\n$background-third: #f9f9f9;\n$color-secondary: #22202e;\n$color-third: #726e8d;\n$color-fourth: #800080;\n'],sourceRoot:""}]);const p=u},"./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./src/js-modules/Product-count.vue?vue&type=style&index=0&id=dc4a7e44&lang=scss":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});var o=n("./node_modules/css-loader/dist/runtime/sourceMaps.js"),r=n.n(o),i=n("./node_modules/css-loader/dist/runtime/api.js"),s=n.n(i)()(r());s.push([e.id,".wrapper__product-count {\n  position: absolute;\n  right: 10px;\n  display: block;\n  width: 17px;\n  height: 17px;\n  padding: 2px 2px;\n  padding-left: 0;\n  font-size: 10px;\n  line-height: 10px;\n  color: #fff;\n  text-align: center;\n  background-color: #2a254b;\n  border: 2px solid #2a254b;\n  border-radius: 50%;\n}","",{version:3,sources:["webpack://./src/js-modules/Product-count.vue","webpack://./src/styles/components/variables.scss","webpack://./Product-count.vue"],names:[],mappings:"AAEA;EACI,kBAAA;EACA,WAAA;EACA,cAAA;EACA,WAAA;EACA,YAAA;EACA,gBAAA;EACA,eAAA;EACA,eAAA;EACA,iBAAA;EACA,WCTY;EDUZ,kBAAA;EACA,yBCZiB;EDajB,yBAAA;EACA,kBAAA;AEDJ",sourcesContent:['\n@import "../styles/components/variables.scss";\n.wrapper__product-count {\n    position: absolute;\n    right: 10px;\n    display: block;\n    width: 17px;\n    height: 17px;\n    padding: 2px 2px;\n    padding-left: 0;\n    font-size: 10px;\n    line-height: 10px;\n    color: $color-primary;\n    text-align: center;\n    background-color: $background-primary;\n    border: 2px solid $background-primary;\n    border-radius: 50%;\n  }\n\n','$font-primary: "Clash Display";\n$font-secondary: "Satoshi";\n$background-primary: #2a254b;\n$color-primary: #fff;\n$background-secondary: rgba(249 249 249 / 15%);\n$background-third: #f9f9f9;\n$color-secondary: #22202e;\n$color-third: #726e8d;\n$color-fourth: #800080;\n',".wrapper__product-count {\n  position: absolute;\n  right: 10px;\n  display: block;\n  width: 17px;\n  height: 17px;\n  padding: 2px 2px;\n  padding-left: 0;\n  font-size: 10px;\n  line-height: 10px;\n  color: #fff;\n  text-align: center;\n  background-color: #2a254b;\n  border: 2px solid #2a254b;\n  border-radius: 50%;\n}"],sourceRoot:""}]);const a=s},"./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./src/js-modules/Product-details.vue?vue&type=style&index=0&id=4dc3825e&lang=scss":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});var o=n("./node_modules/css-loader/dist/runtime/sourceMaps.js"),r=n.n(o),i=n("./node_modules/css-loader/dist/runtime/api.js"),s=n.n(i)()(r());s.push([e.id,'.product-details__modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: -1;\n  display: block;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  background-color: rgba(0, 0, 0, 0.5);\n  opacity: 0;\n}\n.product-details__modal-content {\n  width: 100%;\n  max-width: 800px;\n  padding: 20px;\n  margin: auto;\n  margin-top: 20%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  background-color: #f9f9f9;\n  border: 1px solid #888;\n  transform: translateY(-50%);\n}\n.product-details__modal-text {\n  text-align: center;\n}\n.product-details__modal-wrapper {\n  display: flex;\n  justify-content: space-between;\n  margin-top: 20px;\n}\n.product-details__modal-button-link {\n  width: 120px;\n  height: 50px;\n  margin-right: 16px;\n  font-family: "Satoshi";\n  color: #fff;\n  background-color: #2a254b;\n}\n.product-details__modal-button {\n  width: 155px;\n  height: 50px;\n  font-family: "Satoshi";\n  color: #2a254b;\n  background-color: #fff;\n}\n.product-details .js-modal-active {\n  z-index: 4;\n}\n.product-details .js-modal-active-animation {\n  animation: modalFadeIn 0.5s ease forwards;\n}\n@keyframes modalFadeIn {\n0% {\n    opacity: 0;\n}\n100% {\n    opacity: 1;\n}\n}',"",{version:3,sources:["webpack://./src/js-modules/Product-details.vue","webpack://./Product-details.vue","webpack://./src/styles/components/variables.scss"],names:[],mappings:"AAIE;EACE,eAAA;EACA,MAAA;EACA,OAAA;EACA,WAAA;EACA,cAAA;EACA,WAAA;EACA,YAAA;EACA,gBAAA;EACA,oCAAA;EACA,UAAA;ACHJ;ADME;EACE,WAAA;EACA,gBAAA;EACA,aAAA;EACA,YAAA;EACA,eAAA;EACA,gBAAA;EACA,uBAAA;EACA,mBAAA;EACA,yBErBe;EFsBf,sBAAA;EACA,2BAAA;ACJJ;ADOE;EACE,kBAAA;ACLJ;ADQE;EACE,aAAA;EACA,8BAAA;EACA,gBAAA;ACNJ;ADSE;EACE,YAAA;EACA,YAAA;EACA,kBAAA;EACA,sBE5Ca;EF6Cb,WE3CY;EF4CZ,yBE7CiB;ADsCrB;ADUE;EACE,YAAA;EACA,YAAA;EACA,sBEpDa;EFqDb,cEpDiB;EFqDjB,sBEpDY;AD4ChB;ADWE;EACA,UAAA;ACTF;ADYA;EACE,yCAAA;ACVF;ADaA;AACE;IACE,UAAA;ACXF;ADcA;IACE,UAAA;ACZF;AACF",sourcesContent:['\n@import "../styles/components/variables.scss";\n\n.product-details {\n  &__modal {\n    position: fixed;\n    top: 0;\n    left: 0;\n    z-index: -1;\n    display: block;\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    background-color: rgba(0, 0, 0, 0.5);\n    opacity: 0;\n  }\n\n  &__modal-content {\n    width: 100%;\n    max-width: 800px;\n    padding: 20px;\n    margin: auto;\n    margin-top: 20%;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    background-color: $background-third;\n    border: 1px solid #888;\n    transform: translateY(-50%);\n  }\n\n  &__modal-text {\n    text-align: center;\n  }\n\n  &__modal-wrapper {\n    display: flex;\n    justify-content: space-between;\n    margin-top: 20px;\n  }\n\n  &__modal-button-link {\n    width: 120px;\n    height: 50px;\n    margin-right: 16px;\n    font-family: $font-secondary;\n    color: $color-primary;\n    background-color: $background-primary;\n  }\n\n  &__modal-button {\n    width: 155px;\n    height: 50px;\n    font-family: $font-secondary;\n    color: $background-primary;\n    background-color: $color-primary;\n  }\n\n  .js-modal-active {\n  z-index: 4;\n}\n\n.js-modal-active-animation {\n  animation: modalFadeIn 0.5s ease forwards;\n}\n\n@keyframes modalFadeIn {\n  0% {\n    opacity: 0;\n  }\n\n  100% {\n    opacity: 1;\n  }\n}\n}\n','.product-details__modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: -1;\n  display: block;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  background-color: rgba(0, 0, 0, 0.5);\n  opacity: 0;\n}\n.product-details__modal-content {\n  width: 100%;\n  max-width: 800px;\n  padding: 20px;\n  margin: auto;\n  margin-top: 20%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  background-color: #f9f9f9;\n  border: 1px solid #888;\n  transform: translateY(-50%);\n}\n.product-details__modal-text {\n  text-align: center;\n}\n.product-details__modal-wrapper {\n  display: flex;\n  justify-content: space-between;\n  margin-top: 20px;\n}\n.product-details__modal-button-link {\n  width: 120px;\n  height: 50px;\n  margin-right: 16px;\n  font-family: "Satoshi";\n  color: #fff;\n  background-color: #2a254b;\n}\n.product-details__modal-button {\n  width: 155px;\n  height: 50px;\n  font-family: "Satoshi";\n  color: #2a254b;\n  background-color: #fff;\n}\n.product-details .js-modal-active {\n  z-index: 4;\n}\n.product-details .js-modal-active-animation {\n  animation: modalFadeIn 0.5s ease forwards;\n}\n@keyframes modalFadeIn {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}','$font-primary: "Clash Display";\n$font-secondary: "Satoshi";\n$background-primary: #2a254b;\n$color-primary: #fff;\n$background-secondary: rgba(249 249 249 / 15%);\n$background-third: #f9f9f9;\n$color-secondary: #22202e;\n$color-third: #726e8d;\n$color-fourth: #800080;\n'],sourceRoot:""}]);const a=s},"./node_modules/css-loader/dist/runtime/api.js":e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,r,i){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(o)for(var a=0;a<this.length;a++){var l=this[a][0];null!=l&&(s[l]=!0)}for(var c=0;c<e.length;c++){var u=[].concat(e[c]);o&&s[u[0]]||(void 0!==i&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=i),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),r&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=r):u[4]="".concat(r)),t.push(u))}},t}},"./node_modules/css-loader/dist/runtime/getUrl.js":e=>{"use strict";e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},"./node_modules/css-loader/dist/runtime/sourceMaps.js":e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},"./src/img/content-image/image-fourteen.png":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o=n.p+"e3af05971f59254a6bb19c44ca6b4f0a.png"},"./node_modules/jquery/dist/jquery.js":function(e,t){var n;!function(t,n){"use strict";"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,(function(o,r){"use strict";var i=[],s=Object.getPrototypeOf,a=i.slice,l=i.flat?function(e){return i.flat.call(e)}:function(e){return i.concat.apply([],e)},c=i.push,u=i.indexOf,d={},p=d.toString,f=d.hasOwnProperty,h=f.toString,m=h.call(Object),g={},v=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType&&"function"!=typeof e.item},y=function(e){return null!=e&&e===e.window},b=o.document,A={type:!0,src:!0,nonce:!0,noModule:!0};function _(e,t,n){var o,r,i=(n=n||b).createElement("script");if(i.text=e,t)for(o in A)(r=t[o]||t.getAttribute&&t.getAttribute(o))&&i.setAttribute(o,r);n.head.appendChild(i).parentNode.removeChild(i)}function x(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?d[p.call(e)]||"object":typeof e}var w="3.6.4",C=function(e,t){return new C.fn.init(e,t)};function S(e){var t=!!e&&"length"in e&&e.length,n=x(e);return!v(e)&&!y(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}C.fn=C.prototype={jquery:w,constructor:C,length:0,toArray:function(){return a.call(this)},get:function(e){return null==e?a.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=C.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return C.each(this,e)},map:function(e){return this.pushStack(C.map(this,(function(t,n){return e.call(t,n,t)})))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(C.grep(this,(function(e,t){return(t+1)%2})))},odd:function(){return this.pushStack(C.grep(this,(function(e,t){return t%2})))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:c,sort:i.sort,splice:i.splice},C.extend=C.fn.extend=function(){var e,t,n,o,r,i,s=arguments[0]||{},a=1,l=arguments.length,c=!1;for("boolean"==typeof s&&(c=s,s=arguments[a]||{},a++),"object"==typeof s||v(s)||(s={}),a===l&&(s=this,a--);a<l;a++)if(null!=(e=arguments[a]))for(t in e)o=e[t],"__proto__"!==t&&s!==o&&(c&&o&&(C.isPlainObject(o)||(r=Array.isArray(o)))?(n=s[t],i=r&&!Array.isArray(n)?[]:r||C.isPlainObject(n)?n:{},r=!1,s[t]=C.extend(c,i,o)):void 0!==o&&(s[t]=o));return s},C.extend({expando:"jQuery"+(w+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==p.call(e))&&(!(t=s(e))||"function"==typeof(n=f.call(t,"constructor")&&t.constructor)&&h.call(n)===m)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){_(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,o=0;if(S(e))for(n=e.length;o<n&&!1!==t.call(e[o],o,e[o]);o++);else for(o in e)if(!1===t.call(e[o],o,e[o]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(S(Object(e))?C.merge(n,"string"==typeof e?[e]:e):c.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:u.call(t,e,n)},merge:function(e,t){for(var n=+t.length,o=0,r=e.length;o<n;o++)e[r++]=t[o];return e.length=r,e},grep:function(e,t,n){for(var o=[],r=0,i=e.length,s=!n;r<i;r++)!t(e[r],r)!==s&&o.push(e[r]);return o},map:function(e,t,n){var o,r,i=0,s=[];if(S(e))for(o=e.length;i<o;i++)null!=(r=t(e[i],i,n))&&s.push(r);else for(i in e)null!=(r=t(e[i],i,n))&&s.push(r);return l(s)},guid:1,support:g}),"function"==typeof Symbol&&(C.fn[Symbol.iterator]=i[Symbol.iterator]),C.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,t){d["[object "+t+"]"]=t.toLowerCase()}));var E=function(e){var t,n,o,r,i,s,a,l,c,u,d,p,f,h,m,g,v,y,b,A="sizzle"+1*new Date,_=e.document,x=0,w=0,C=le(),S=le(),E=le(),k=le(),T=function(e,t){return e===t&&(d=!0),0},j={}.hasOwnProperty,R=[],P=R.pop,O=R.push,N=R.push,B=R.slice,D=function(e,t){for(var n=0,o=e.length;n<o;n++)if(e[n]===t)return n;return-1},M="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",F="[\\x20\\t\\r\\n\\f]",I="(?:\\\\[\\da-fA-F]{1,6}"+F+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",V="\\["+F+"*("+I+")(?:"+F+"*([*^$|!~]?=)"+F+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+I+"))|)"+F+"*\\]",L=":("+I+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+V+")*)|.*)\\)|)",$=new RegExp(F+"+","g"),H=new RegExp("^"+F+"+|((?:^|[^\\\\])(?:\\\\.)*)"+F+"+$","g"),U=new RegExp("^"+F+"*,"+F+"*"),q=new RegExp("^"+F+"*([>+~]|"+F+")"+F+"*"),z=new RegExp(F+"|>"),W=new RegExp(L),Y=new RegExp("^"+I+"$"),J={ID:new RegExp("^#("+I+")"),CLASS:new RegExp("^\\.("+I+")"),TAG:new RegExp("^("+I+"|[*])"),ATTR:new RegExp("^"+V),PSEUDO:new RegExp("^"+L),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+F+"*(even|odd|(([+-]|)(\\d*)n|)"+F+"*(?:([+-]|)"+F+"*(\\d+)|))"+F+"*\\)|)","i"),bool:new RegExp("^(?:"+M+")$","i"),needsContext:new RegExp("^"+F+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+F+"*((?:-\\d)?\\d*)"+F+"*\\)|)(?=[^-]|$)","i")},K=/HTML$/i,G=/^(?:input|select|textarea|button)$/i,X=/^h\d$/i,Q=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\[\\da-fA-F]{1,6}"+F+"?|\\\\([^\\r\\n\\f])","g"),ne=function(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},oe=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,re=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},ie=function(){p()},se=Ae((function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{N.apply(R=B.call(_.childNodes),_.childNodes),R[_.childNodes.length].nodeType}catch(e){N={apply:R.length?function(e,t){O.apply(e,B.call(t))}:function(e,t){for(var n=e.length,o=0;e[n++]=t[o++];);e.length=n-1}}}function ae(e,t,o,r){var i,a,c,u,d,h,v,y=t&&t.ownerDocument,_=t?t.nodeType:9;if(o=o||[],"string"!=typeof e||!e||1!==_&&9!==_&&11!==_)return o;if(!r&&(p(t),t=t||f,m)){if(11!==_&&(d=Z.exec(e)))if(i=d[1]){if(9===_){if(!(c=t.getElementById(i)))return o;if(c.id===i)return o.push(c),o}else if(y&&(c=y.getElementById(i))&&b(t,c)&&c.id===i)return o.push(c),o}else{if(d[2])return N.apply(o,t.getElementsByTagName(e)),o;if((i=d[3])&&n.getElementsByClassName&&t.getElementsByClassName)return N.apply(o,t.getElementsByClassName(i)),o}if(n.qsa&&!k[e+" "]&&(!g||!g.test(e))&&(1!==_||"object"!==t.nodeName.toLowerCase())){if(v=e,y=t,1===_&&(z.test(e)||q.test(e))){for((y=ee.test(e)&&ve(t.parentNode)||t)===t&&n.scope||((u=t.getAttribute("id"))?u=u.replace(oe,re):t.setAttribute("id",u=A)),a=(h=s(e)).length;a--;)h[a]=(u?"#"+u:":scope")+" "+be(h[a]);v=h.join(",")}try{return N.apply(o,y.querySelectorAll(v)),o}catch(t){k(e,!0)}finally{u===A&&t.removeAttribute("id")}}}return l(e.replace(H,"$1"),t,o,r)}function le(){var e=[];return function t(n,r){return e.push(n+" ")>o.cacheLength&&delete t[e.shift()],t[n+" "]=r}}function ce(e){return e[A]=!0,e}function ue(e){var t=f.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function de(e,t){for(var n=e.split("|"),r=n.length;r--;)o.attrHandle[n[r]]=t}function pe(e,t){var n=t&&e,o=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(o)return o;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function fe(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function he(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function me(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&se(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function ge(e){return ce((function(t){return t=+t,ce((function(n,o){for(var r,i=e([],n.length,t),s=i.length;s--;)n[r=i[s]]&&(n[r]=!(o[r]=n[r]))}))}))}function ve(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=ae.support={},i=ae.isXML=function(e){var t=e&&e.namespaceURI,n=e&&(e.ownerDocument||e).documentElement;return!K.test(t||n&&n.nodeName||"HTML")},p=ae.setDocument=function(e){var t,r,s=e?e.ownerDocument||e:_;return s!=f&&9===s.nodeType&&s.documentElement?(h=(f=s).documentElement,m=!i(f),_!=f&&(r=f.defaultView)&&r.top!==r&&(r.addEventListener?r.addEventListener("unload",ie,!1):r.attachEvent&&r.attachEvent("onunload",ie)),n.scope=ue((function(e){return h.appendChild(e).appendChild(f.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length})),n.cssHas=ue((function(){try{return f.querySelector(":has(*,:jqfake)"),!1}catch(e){return!0}})),n.attributes=ue((function(e){return e.className="i",!e.getAttribute("className")})),n.getElementsByTagName=ue((function(e){return e.appendChild(f.createComment("")),!e.getElementsByTagName("*").length})),n.getElementsByClassName=Q.test(f.getElementsByClassName),n.getById=ue((function(e){return h.appendChild(e).id=A,!f.getElementsByName||!f.getElementsByName(A).length})),n.getById?(o.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},o.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var n=t.getElementById(e);return n?[n]:[]}}):(o.filter.ID=function(e){var t=e.replace(te,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},o.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var n,o,r,i=t.getElementById(e);if(i){if((n=i.getAttributeNode("id"))&&n.value===e)return[i];for(r=t.getElementsByName(e),o=0;i=r[o++];)if((n=i.getAttributeNode("id"))&&n.value===e)return[i]}return[]}}),o.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,o=[],r=0,i=t.getElementsByTagName(e);if("*"===e){for(;n=i[r++];)1===n.nodeType&&o.push(n);return o}return i},o.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&m)return t.getElementsByClassName(e)},v=[],g=[],(n.qsa=Q.test(f.querySelectorAll))&&(ue((function(e){var t;h.appendChild(e).innerHTML="<a id='"+A+"'></a><select id='"+A+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&g.push("[*^$]="+F+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||g.push("\\["+F+"*(?:value|"+M+")"),e.querySelectorAll("[id~="+A+"-]").length||g.push("~="),(t=f.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||g.push("\\["+F+"*name"+F+"*="+F+"*(?:''|\"\")"),e.querySelectorAll(":checked").length||g.push(":checked"),e.querySelectorAll("a#"+A+"+*").length||g.push(".#.+[+~]"),e.querySelectorAll("\\\f"),g.push("[\\r\\n\\f]")})),ue((function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=f.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&g.push("name"+F+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&g.push(":enabled",":disabled"),h.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&g.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),g.push(",.*:")}))),(n.matchesSelector=Q.test(y=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector))&&ue((function(e){n.disconnectedMatch=y.call(e,"*"),y.call(e,"[s!='']:x"),v.push("!=",L)})),n.cssHas||g.push(":has"),g=g.length&&new RegExp(g.join("|")),v=v.length&&new RegExp(v.join("|")),t=Q.test(h.compareDocumentPosition),b=t||Q.test(h.contains)?function(e,t){var n=9===e.nodeType&&e.documentElement||e,o=t&&t.parentNode;return e===o||!(!o||1!==o.nodeType||!(n.contains?n.contains(o):e.compareDocumentPosition&&16&e.compareDocumentPosition(o)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},T=t?function(e,t){if(e===t)return d=!0,0;var o=!e.compareDocumentPosition-!t.compareDocumentPosition;return o||(1&(o=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===o?e==f||e.ownerDocument==_&&b(_,e)?-1:t==f||t.ownerDocument==_&&b(_,t)?1:u?D(u,e)-D(u,t):0:4&o?-1:1)}:function(e,t){if(e===t)return d=!0,0;var n,o=0,r=e.parentNode,i=t.parentNode,s=[e],a=[t];if(!r||!i)return e==f?-1:t==f?1:r?-1:i?1:u?D(u,e)-D(u,t):0;if(r===i)return pe(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)a.unshift(n);for(;s[o]===a[o];)o++;return o?pe(s[o],a[o]):s[o]==_?-1:a[o]==_?1:0},f):f},ae.matches=function(e,t){return ae(e,null,null,t)},ae.matchesSelector=function(e,t){if(p(e),n.matchesSelector&&m&&!k[t+" "]&&(!v||!v.test(t))&&(!g||!g.test(t)))try{var o=y.call(e,t);if(o||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return o}catch(e){k(t,!0)}return ae(t,f,null,[e]).length>0},ae.contains=function(e,t){return(e.ownerDocument||e)!=f&&p(e),b(e,t)},ae.attr=function(e,t){(e.ownerDocument||e)!=f&&p(e);var r=o.attrHandle[t.toLowerCase()],i=r&&j.call(o.attrHandle,t.toLowerCase())?r(e,t,!m):void 0;return void 0!==i?i:n.attributes||!m?e.getAttribute(t):(i=e.getAttributeNode(t))&&i.specified?i.value:null},ae.escape=function(e){return(e+"").replace(oe,re)},ae.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},ae.uniqueSort=function(e){var t,o=[],r=0,i=0;if(d=!n.detectDuplicates,u=!n.sortStable&&e.slice(0),e.sort(T),d){for(;t=e[i++];)t===e[i]&&(r=o.push(i));for(;r--;)e.splice(o[r],1)}return u=null,e},r=ae.getText=function(e){var t,n="",o=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=r(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[o++];)n+=r(t);return n},o=ae.selectors={cacheLength:50,createPseudo:ce,match:J,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||ae.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&ae.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return J.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&W.test(n)&&(t=s(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=C[e+" "];return t||(t=new RegExp("(^|"+F+")"+e+"("+F+"|$)"))&&C(e,(function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,t,n){return function(o){var r=ae.attr(o,e);return null==r?"!="===t:!t||(r+="","="===t?r===n:"!="===t?r!==n:"^="===t?n&&0===r.indexOf(n):"*="===t?n&&r.indexOf(n)>-1:"$="===t?n&&r.slice(-n.length)===n:"~="===t?(" "+r.replace($," ")+" ").indexOf(n)>-1:"|="===t&&(r===n||r.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,o,r){var i="nth"!==e.slice(0,3),s="last"!==e.slice(-4),a="of-type"===t;return 1===o&&0===r?function(e){return!!e.parentNode}:function(t,n,l){var c,u,d,p,f,h,m=i!==s?"nextSibling":"previousSibling",g=t.parentNode,v=a&&t.nodeName.toLowerCase(),y=!l&&!a,b=!1;if(g){if(i){for(;m;){for(p=t;p=p[m];)if(a?p.nodeName.toLowerCase()===v:1===p.nodeType)return!1;h=m="only"===e&&!h&&"nextSibling"}return!0}if(h=[s?g.firstChild:g.lastChild],s&&y){for(b=(f=(c=(u=(d=(p=g)[A]||(p[A]={}))[p.uniqueID]||(d[p.uniqueID]={}))[e]||[])[0]===x&&c[1])&&c[2],p=f&&g.childNodes[f];p=++f&&p&&p[m]||(b=f=0)||h.pop();)if(1===p.nodeType&&++b&&p===t){u[e]=[x,f,b];break}}else if(y&&(b=f=(c=(u=(d=(p=t)[A]||(p[A]={}))[p.uniqueID]||(d[p.uniqueID]={}))[e]||[])[0]===x&&c[1]),!1===b)for(;(p=++f&&p&&p[m]||(b=f=0)||h.pop())&&((a?p.nodeName.toLowerCase()!==v:1!==p.nodeType)||!++b||(y&&((u=(d=p[A]||(p[A]={}))[p.uniqueID]||(d[p.uniqueID]={}))[e]=[x,b]),p!==t)););return(b-=r)===o||b%o==0&&b/o>=0}}},PSEUDO:function(e,t){var n,r=o.pseudos[e]||o.setFilters[e.toLowerCase()]||ae.error("unsupported pseudo: "+e);return r[A]?r(t):r.length>1?(n=[e,e,"",t],o.setFilters.hasOwnProperty(e.toLowerCase())?ce((function(e,n){for(var o,i=r(e,t),s=i.length;s--;)e[o=D(e,i[s])]=!(n[o]=i[s])})):function(e){return r(e,0,n)}):r}},pseudos:{not:ce((function(e){var t=[],n=[],o=a(e.replace(H,"$1"));return o[A]?ce((function(e,t,n,r){for(var i,s=o(e,null,r,[]),a=e.length;a--;)(i=s[a])&&(e[a]=!(t[a]=i))})):function(e,r,i){return t[0]=e,o(t,null,i,n),t[0]=null,!n.pop()}})),has:ce((function(e){return function(t){return ae(e,t).length>0}})),contains:ce((function(e){return e=e.replace(te,ne),function(t){return(t.textContent||r(t)).indexOf(e)>-1}})),lang:ce((function(e){return Y.test(e||"")||ae.error("unsupported lang: "+e),e=e.replace(te,ne).toLowerCase(),function(t){var n;do{if(n=m?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===h},focus:function(e){return e===f.activeElement&&(!f.hasFocus||f.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:me(!1),disabled:me(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!o.pseudos.empty(e)},header:function(e){return X.test(e.nodeName)},input:function(e){return G.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:ge((function(){return[0]})),last:ge((function(e,t){return[t-1]})),eq:ge((function(e,t,n){return[n<0?n+t:n]})),even:ge((function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e})),odd:ge((function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e})),lt:ge((function(e,t,n){for(var o=n<0?n+t:n>t?t:n;--o>=0;)e.push(o);return e})),gt:ge((function(e,t,n){for(var o=n<0?n+t:n;++o<t;)e.push(o);return e}))}},o.pseudos.nth=o.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})o.pseudos[t]=fe(t);for(t in{submit:!0,reset:!0})o.pseudos[t]=he(t);function ye(){}function be(e){for(var t=0,n=e.length,o="";t<n;t++)o+=e[t].value;return o}function Ae(e,t,n){var o=t.dir,r=t.next,i=r||o,s=n&&"parentNode"===i,a=w++;return t.first?function(t,n,r){for(;t=t[o];)if(1===t.nodeType||s)return e(t,n,r);return!1}:function(t,n,l){var c,u,d,p=[x,a];if(l){for(;t=t[o];)if((1===t.nodeType||s)&&e(t,n,l))return!0}else for(;t=t[o];)if(1===t.nodeType||s)if(u=(d=t[A]||(t[A]={}))[t.uniqueID]||(d[t.uniqueID]={}),r&&r===t.nodeName.toLowerCase())t=t[o]||t;else{if((c=u[i])&&c[0]===x&&c[1]===a)return p[2]=c[2];if(u[i]=p,p[2]=e(t,n,l))return!0}return!1}}function _e(e){return e.length>1?function(t,n,o){for(var r=e.length;r--;)if(!e[r](t,n,o))return!1;return!0}:e[0]}function xe(e,t,n,o,r){for(var i,s=[],a=0,l=e.length,c=null!=t;a<l;a++)(i=e[a])&&(n&&!n(i,o,r)||(s.push(i),c&&t.push(a)));return s}function we(e,t,n,o,r,i){return o&&!o[A]&&(o=we(o)),r&&!r[A]&&(r=we(r,i)),ce((function(i,s,a,l){var c,u,d,p=[],f=[],h=s.length,m=i||function(e,t,n){for(var o=0,r=t.length;o<r;o++)ae(e,t[o],n);return n}(t||"*",a.nodeType?[a]:a,[]),g=!e||!i&&t?m:xe(m,p,e,a,l),v=n?r||(i?e:h||o)?[]:s:g;if(n&&n(g,v,a,l),o)for(c=xe(v,f),o(c,[],a,l),u=c.length;u--;)(d=c[u])&&(v[f[u]]=!(g[f[u]]=d));if(i){if(r||e){if(r){for(c=[],u=v.length;u--;)(d=v[u])&&c.push(g[u]=d);r(null,v=[],c,l)}for(u=v.length;u--;)(d=v[u])&&(c=r?D(i,d):p[u])>-1&&(i[c]=!(s[c]=d))}}else v=xe(v===s?v.splice(h,v.length):v),r?r(null,s,v,l):N.apply(s,v)}))}function Ce(e){for(var t,n,r,i=e.length,s=o.relative[e[0].type],a=s||o.relative[" "],l=s?1:0,u=Ae((function(e){return e===t}),a,!0),d=Ae((function(e){return D(t,e)>-1}),a,!0),p=[function(e,n,o){var r=!s&&(o||n!==c)||((t=n).nodeType?u(e,n,o):d(e,n,o));return t=null,r}];l<i;l++)if(n=o.relative[e[l].type])p=[Ae(_e(p),n)];else{if((n=o.filter[e[l].type].apply(null,e[l].matches))[A]){for(r=++l;r<i&&!o.relative[e[r].type];r++);return we(l>1&&_e(p),l>1&&be(e.slice(0,l-1).concat({value:" "===e[l-2].type?"*":""})).replace(H,"$1"),n,l<r&&Ce(e.slice(l,r)),r<i&&Ce(e=e.slice(r)),r<i&&be(e))}p.push(n)}return _e(p)}return ye.prototype=o.filters=o.pseudos,o.setFilters=new ye,s=ae.tokenize=function(e,t){var n,r,i,s,a,l,c,u=S[e+" "];if(u)return t?0:u.slice(0);for(a=e,l=[],c=o.preFilter;a;){for(s in n&&!(r=U.exec(a))||(r&&(a=a.slice(r[0].length)||a),l.push(i=[])),n=!1,(r=q.exec(a))&&(n=r.shift(),i.push({value:n,type:r[0].replace(H," ")}),a=a.slice(n.length)),o.filter)!(r=J[s].exec(a))||c[s]&&!(r=c[s](r))||(n=r.shift(),i.push({value:n,type:s,matches:r}),a=a.slice(n.length));if(!n)break}return t?a.length:a?ae.error(e):S(e,l).slice(0)},a=ae.compile=function(e,t){var n,r=[],i=[],a=E[e+" "];if(!a){for(t||(t=s(e)),n=t.length;n--;)(a=Ce(t[n]))[A]?r.push(a):i.push(a);a=E(e,function(e,t){var n=t.length>0,r=e.length>0,i=function(i,s,a,l,u){var d,h,g,v=0,y="0",b=i&&[],A=[],_=c,w=i||r&&o.find.TAG("*",u),C=x+=null==_?1:Math.random()||.1,S=w.length;for(u&&(c=s==f||s||u);y!==S&&null!=(d=w[y]);y++){if(r&&d){for(h=0,s||d.ownerDocument==f||(p(d),a=!m);g=e[h++];)if(g(d,s||f,a)){l.push(d);break}u&&(x=C)}n&&((d=!g&&d)&&v--,i&&b.push(d))}if(v+=y,n&&y!==v){for(h=0;g=t[h++];)g(b,A,s,a);if(i){if(v>0)for(;y--;)b[y]||A[y]||(A[y]=P.call(l));A=xe(A)}N.apply(l,A),u&&!i&&A.length>0&&v+t.length>1&&ae.uniqueSort(l)}return u&&(x=C,c=_),b};return n?ce(i):i}(i,r)),a.selector=e}return a},l=ae.select=function(e,t,n,r){var i,l,c,u,d,p="function"==typeof e&&e,f=!r&&s(e=p.selector||e);if(n=n||[],1===f.length){if((l=f[0]=f[0].slice(0)).length>2&&"ID"===(c=l[0]).type&&9===t.nodeType&&m&&o.relative[l[1].type]){if(!(t=(o.find.ID(c.matches[0].replace(te,ne),t)||[])[0]))return n;p&&(t=t.parentNode),e=e.slice(l.shift().value.length)}for(i=J.needsContext.test(e)?0:l.length;i--&&(c=l[i],!o.relative[u=c.type]);)if((d=o.find[u])&&(r=d(c.matches[0].replace(te,ne),ee.test(l[0].type)&&ve(t.parentNode)||t))){if(l.splice(i,1),!(e=r.length&&be(l)))return N.apply(n,r),n;break}}return(p||a(e,f))(r,t,!m,n,!t||ee.test(e)&&ve(t.parentNode)||t),n},n.sortStable=A.split("").sort(T).join("")===A,n.detectDuplicates=!!d,p(),n.sortDetached=ue((function(e){return 1&e.compareDocumentPosition(f.createElement("fieldset"))})),ue((function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")}))||de("type|href|height|width",(function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)})),n.attributes&&ue((function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")}))||de("value",(function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue})),ue((function(e){return null==e.getAttribute("disabled")}))||de(M,(function(e,t,n){var o;if(!n)return!0===e[t]?t.toLowerCase():(o=e.getAttributeNode(t))&&o.specified?o.value:null})),ae}(o);C.find=E,C.expr=E.selectors,C.expr[":"]=C.expr.pseudos,C.uniqueSort=C.unique=E.uniqueSort,C.text=E.getText,C.isXMLDoc=E.isXML,C.contains=E.contains,C.escapeSelector=E.escape;var k=function(e,t,n){for(var o=[],r=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(r&&C(e).is(n))break;o.push(e)}return o},T=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},j=C.expr.match.needsContext;function R(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var P=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function O(e,t,n){return v(t)?C.grep(e,(function(e,o){return!!t.call(e,o,e)!==n})):t.nodeType?C.grep(e,(function(e){return e===t!==n})):"string"!=typeof t?C.grep(e,(function(e){return u.call(t,e)>-1!==n})):C.filter(t,e,n)}C.filter=function(e,t,n){var o=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===o.nodeType?C.find.matchesSelector(o,e)?[o]:[]:C.find.matches(e,C.grep(t,(function(e){return 1===e.nodeType})))},C.fn.extend({find:function(e){var t,n,o=this.length,r=this;if("string"!=typeof e)return this.pushStack(C(e).filter((function(){for(t=0;t<o;t++)if(C.contains(r[t],this))return!0})));for(n=this.pushStack([]),t=0;t<o;t++)C.find(e,r[t],n);return o>1?C.uniqueSort(n):n},filter:function(e){return this.pushStack(O(this,e||[],!1))},not:function(e){return this.pushStack(O(this,e||[],!0))},is:function(e){return!!O(this,"string"==typeof e&&j.test(e)?C(e):e||[],!1).length}});var N,B=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(C.fn.init=function(e,t,n){var o,r;if(!e)return this;if(n=n||N,"string"==typeof e){if(!(o="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:B.exec(e))||!o[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(o[1]){if(t=t instanceof C?t[0]:t,C.merge(this,C.parseHTML(o[1],t&&t.nodeType?t.ownerDocument||t:b,!0)),P.test(o[1])&&C.isPlainObject(t))for(o in t)v(this[o])?this[o](t[o]):this.attr(o,t[o]);return this}return(r=b.getElementById(o[2]))&&(this[0]=r,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):v(e)?void 0!==n.ready?n.ready(e):e(C):C.makeArray(e,this)}).prototype=C.fn,N=C(b);var D=/^(?:parents|prev(?:Until|All))/,M={children:!0,contents:!0,next:!0,prev:!0};function F(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}C.fn.extend({has:function(e){var t=C(e,this),n=t.length;return this.filter((function(){for(var e=0;e<n;e++)if(C.contains(this,t[e]))return!0}))},closest:function(e,t){var n,o=0,r=this.length,i=[],s="string"!=typeof e&&C(e);if(!j.test(e))for(;o<r;o++)for(n=this[o];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&C.find.matchesSelector(n,e))){i.push(n);break}return this.pushStack(i.length>1?C.uniqueSort(i):i)},index:function(e){return e?"string"==typeof e?u.call(C(e),this[0]):u.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(C.uniqueSort(C.merge(this.get(),C(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),C.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return k(e,"parentNode")},parentsUntil:function(e,t,n){return k(e,"parentNode",n)},next:function(e){return F(e,"nextSibling")},prev:function(e){return F(e,"previousSibling")},nextAll:function(e){return k(e,"nextSibling")},prevAll:function(e){return k(e,"previousSibling")},nextUntil:function(e,t,n){return k(e,"nextSibling",n)},prevUntil:function(e,t,n){return k(e,"previousSibling",n)},siblings:function(e){return T((e.parentNode||{}).firstChild,e)},children:function(e){return T(e.firstChild)},contents:function(e){return null!=e.contentDocument&&s(e.contentDocument)?e.contentDocument:(R(e,"template")&&(e=e.content||e),C.merge([],e.childNodes))}},(function(e,t){C.fn[e]=function(n,o){var r=C.map(this,t,n);return"Until"!==e.slice(-5)&&(o=n),o&&"string"==typeof o&&(r=C.filter(o,r)),this.length>1&&(M[e]||C.uniqueSort(r),D.test(e)&&r.reverse()),this.pushStack(r)}}));var I=/[^\x20\t\r\n\f]+/g;function V(e){return e}function L(e){throw e}function $(e,t,n,o){var r;try{e&&v(r=e.promise)?r.call(e).done(t).fail(n):e&&v(r=e.then)?r.call(e,t,n):t.apply(void 0,[e].slice(o))}catch(e){n.apply(void 0,[e])}}C.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return C.each(e.match(I)||[],(function(e,n){t[n]=!0})),t}(e):C.extend({},e);var t,n,o,r,i=[],s=[],a=-1,l=function(){for(r=r||e.once,o=t=!0;s.length;a=-1)for(n=s.shift();++a<i.length;)!1===i[a].apply(n[0],n[1])&&e.stopOnFalse&&(a=i.length,n=!1);e.memory||(n=!1),t=!1,r&&(i=n?[]:"")},c={add:function(){return i&&(n&&!t&&(a=i.length-1,s.push(n)),function t(n){C.each(n,(function(n,o){v(o)?e.unique&&c.has(o)||i.push(o):o&&o.length&&"string"!==x(o)&&t(o)}))}(arguments),n&&!t&&l()),this},remove:function(){return C.each(arguments,(function(e,t){for(var n;(n=C.inArray(t,i,n))>-1;)i.splice(n,1),n<=a&&a--})),this},has:function(e){return e?C.inArray(e,i)>-1:i.length>0},empty:function(){return i&&(i=[]),this},disable:function(){return r=s=[],i=n="",this},disabled:function(){return!i},lock:function(){return r=s=[],n||t||(i=n=""),this},locked:function(){return!!r},fireWith:function(e,n){return r||(n=[e,(n=n||[]).slice?n.slice():n],s.push(n),t||l()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!o}};return c},C.extend({Deferred:function(e){var t=[["notify","progress",C.Callbacks("memory"),C.Callbacks("memory"),2],["resolve","done",C.Callbacks("once memory"),C.Callbacks("once memory"),0,"resolved"],["reject","fail",C.Callbacks("once memory"),C.Callbacks("once memory"),1,"rejected"]],n="pending",r={state:function(){return n},always:function(){return i.done(arguments).fail(arguments),this},catch:function(e){return r.then(null,e)},pipe:function(){var e=arguments;return C.Deferred((function(n){C.each(t,(function(t,o){var r=v(e[o[4]])&&e[o[4]];i[o[1]]((function(){var e=r&&r.apply(this,arguments);e&&v(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[o[0]+"With"](this,r?[e]:arguments)}))})),e=null})).promise()},then:function(e,n,r){var i=0;function s(e,t,n,r){return function(){var a=this,l=arguments,c=function(){var o,c;if(!(e<i)){if((o=n.apply(a,l))===t.promise())throw new TypeError("Thenable self-resolution");c=o&&("object"==typeof o||"function"==typeof o)&&o.then,v(c)?r?c.call(o,s(i,t,V,r),s(i,t,L,r)):(i++,c.call(o,s(i,t,V,r),s(i,t,L,r),s(i,t,V,t.notifyWith))):(n!==V&&(a=void 0,l=[o]),(r||t.resolveWith)(a,l))}},u=r?c:function(){try{c()}catch(o){C.Deferred.exceptionHook&&C.Deferred.exceptionHook(o,u.stackTrace),e+1>=i&&(n!==L&&(a=void 0,l=[o]),t.rejectWith(a,l))}};e?u():(C.Deferred.getStackHook&&(u.stackTrace=C.Deferred.getStackHook()),o.setTimeout(u))}}return C.Deferred((function(o){t[0][3].add(s(0,o,v(r)?r:V,o.notifyWith)),t[1][3].add(s(0,o,v(e)?e:V)),t[2][3].add(s(0,o,v(n)?n:L))})).promise()},promise:function(e){return null!=e?C.extend(e,r):r}},i={};return C.each(t,(function(e,o){var s=o[2],a=o[5];r[o[1]]=s.add,a&&s.add((function(){n=a}),t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),s.add(o[3].fire),i[o[0]]=function(){return i[o[0]+"With"](this===i?void 0:this,arguments),this},i[o[0]+"With"]=s.fireWith})),r.promise(i),e&&e.call(i,i),i},when:function(e){var t=arguments.length,n=t,o=Array(n),r=a.call(arguments),i=C.Deferred(),s=function(e){return function(n){o[e]=this,r[e]=arguments.length>1?a.call(arguments):n,--t||i.resolveWith(o,r)}};if(t<=1&&($(e,i.done(s(n)).resolve,i.reject,!t),"pending"===i.state()||v(r[n]&&r[n].then)))return i.then();for(;n--;)$(r[n],s(n),i.reject);return i.promise()}});var H=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;C.Deferred.exceptionHook=function(e,t){o.console&&o.console.warn&&e&&H.test(e.name)&&o.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},C.readyException=function(e){o.setTimeout((function(){throw e}))};var U=C.Deferred();function q(){b.removeEventListener("DOMContentLoaded",q),o.removeEventListener("load",q),C.ready()}C.fn.ready=function(e){return U.then(e).catch((function(e){C.readyException(e)})),this},C.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--C.readyWait:C.isReady)||(C.isReady=!0,!0!==e&&--C.readyWait>0||U.resolveWith(b,[C]))}}),C.ready.then=U.then,"complete"===b.readyState||"loading"!==b.readyState&&!b.documentElement.doScroll?o.setTimeout(C.ready):(b.addEventListener("DOMContentLoaded",q),o.addEventListener("load",q));var z=function(e,t,n,o,r,i,s){var a=0,l=e.length,c=null==n;if("object"===x(n))for(a in r=!0,n)z(e,t,a,n[a],!0,i,s);else if(void 0!==o&&(r=!0,v(o)||(s=!0),c&&(s?(t.call(e,o),t=null):(c=t,t=function(e,t,n){return c.call(C(e),n)})),t))for(;a<l;a++)t(e[a],n,s?o:o.call(e[a],a,t(e[a],n)));return r?e:c?t.call(e):l?t(e[0],n):i},W=/^-ms-/,Y=/-([a-z])/g;function J(e,t){return t.toUpperCase()}function K(e){return e.replace(W,"ms-").replace(Y,J)}var G=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function X(){this.expando=C.expando+X.uid++}X.uid=1,X.prototype={cache:function(e){var t=e[this.expando];return t||(t={},G(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var o,r=this.cache(e);if("string"==typeof t)r[K(t)]=n;else for(o in t)r[K(o)]=t[o];return r},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][K(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,o=e[this.expando];if(void 0!==o){if(void 0!==t){n=(t=Array.isArray(t)?t.map(K):(t=K(t))in o?[t]:t.match(I)||[]).length;for(;n--;)delete o[t[n]]}(void 0===t||C.isEmptyObject(o))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!C.isEmptyObject(t)}};var Q=new X,Z=new X,ee=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,te=/[A-Z]/g;function ne(e,t,n){var o;if(void 0===n&&1===e.nodeType)if(o="data-"+t.replace(te,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(o))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ee.test(e)?JSON.parse(e):e)}(n)}catch(e){}Z.set(e,t,n)}else n=void 0;return n}C.extend({hasData:function(e){return Z.hasData(e)||Q.hasData(e)},data:function(e,t,n){return Z.access(e,t,n)},removeData:function(e,t){Z.remove(e,t)},_data:function(e,t,n){return Q.access(e,t,n)},_removeData:function(e,t){Q.remove(e,t)}}),C.fn.extend({data:function(e,t){var n,o,r,i=this[0],s=i&&i.attributes;if(void 0===e){if(this.length&&(r=Z.get(i),1===i.nodeType&&!Q.get(i,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&0===(o=s[n].name).indexOf("data-")&&(o=K(o.slice(5)),ne(i,o,r[o]));Q.set(i,"hasDataAttrs",!0)}return r}return"object"==typeof e?this.each((function(){Z.set(this,e)})):z(this,(function(t){var n;if(i&&void 0===t)return void 0!==(n=Z.get(i,e))||void 0!==(n=ne(i,e))?n:void 0;this.each((function(){Z.set(this,e,t)}))}),null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){Z.remove(this,e)}))}}),C.extend({queue:function(e,t,n){var o;if(e)return t=(t||"fx")+"queue",o=Q.get(e,t),n&&(!o||Array.isArray(n)?o=Q.access(e,t,C.makeArray(n)):o.push(n)),o||[]},dequeue:function(e,t){t=t||"fx";var n=C.queue(e,t),o=n.length,r=n.shift(),i=C._queueHooks(e,t);"inprogress"===r&&(r=n.shift(),o--),r&&("fx"===t&&n.unshift("inprogress"),delete i.stop,r.call(e,(function(){C.dequeue(e,t)}),i)),!o&&i&&i.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return Q.get(e,n)||Q.access(e,n,{empty:C.Callbacks("once memory").add((function(){Q.remove(e,[t+"queue",n])}))})}}),C.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?C.queue(this[0],e):void 0===t?this:this.each((function(){var n=C.queue(this,e,t);C._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&C.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){C.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,o=1,r=C.Deferred(),i=this,s=this.length,a=function(){--o||r.resolveWith(i,[i])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(n=Q.get(i[s],e+"queueHooks"))&&n.empty&&(o++,n.empty.add(a));return a(),r.promise(t)}});var oe=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,re=new RegExp("^(?:([+-])=|)("+oe+")([a-z%]*)$","i"),ie=["Top","Right","Bottom","Left"],se=b.documentElement,ae=function(e){return C.contains(e.ownerDocument,e)},le={composed:!0};se.getRootNode&&(ae=function(e){return C.contains(e.ownerDocument,e)||e.getRootNode(le)===e.ownerDocument});var ce=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&ae(e)&&"none"===C.css(e,"display")};function ue(e,t,n,o){var r,i,s=20,a=o?function(){return o.cur()}:function(){return C.css(e,t,"")},l=a(),c=n&&n[3]||(C.cssNumber[t]?"":"px"),u=e.nodeType&&(C.cssNumber[t]||"px"!==c&&+l)&&re.exec(C.css(e,t));if(u&&u[3]!==c){for(l/=2,c=c||u[3],u=+l||1;s--;)C.style(e,t,u+c),(1-i)*(1-(i=a()/l||.5))<=0&&(s=0),u/=i;u*=2,C.style(e,t,u+c),n=n||[]}return n&&(u=+u||+l||0,r=n[1]?u+(n[1]+1)*n[2]:+n[2],o&&(o.unit=c,o.start=u,o.end=r)),r}var de={};function pe(e){var t,n=e.ownerDocument,o=e.nodeName,r=de[o];return r||(t=n.body.appendChild(n.createElement(o)),r=C.css(t,"display"),t.parentNode.removeChild(t),"none"===r&&(r="block"),de[o]=r,r)}function fe(e,t){for(var n,o,r=[],i=0,s=e.length;i<s;i++)(o=e[i]).style&&(n=o.style.display,t?("none"===n&&(r[i]=Q.get(o,"display")||null,r[i]||(o.style.display="")),""===o.style.display&&ce(o)&&(r[i]=pe(o))):"none"!==n&&(r[i]="none",Q.set(o,"display",n)));for(i=0;i<s;i++)null!=r[i]&&(e[i].style.display=r[i]);return e}C.fn.extend({show:function(){return fe(this,!0)},hide:function(){return fe(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){ce(this)?C(this).show():C(this).hide()}))}});var he,me,ge=/^(?:checkbox|radio)$/i,ve=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,ye=/^$|^module$|\/(?:java|ecma)script/i;he=b.createDocumentFragment().appendChild(b.createElement("div")),(me=b.createElement("input")).setAttribute("type","radio"),me.setAttribute("checked","checked"),me.setAttribute("name","t"),he.appendChild(me),g.checkClone=he.cloneNode(!0).cloneNode(!0).lastChild.checked,he.innerHTML="<textarea>x</textarea>",g.noCloneChecked=!!he.cloneNode(!0).lastChild.defaultValue,he.innerHTML="<option></option>",g.option=!!he.lastChild;var be={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function Ae(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&R(e,t)?C.merge([e],n):n}function _e(e,t){for(var n=0,o=e.length;n<o;n++)Q.set(e[n],"globalEval",!t||Q.get(t[n],"globalEval"))}be.tbody=be.tfoot=be.colgroup=be.caption=be.thead,be.th=be.td,g.option||(be.optgroup=be.option=[1,"<select multiple='multiple'>","</select>"]);var xe=/<|&#?\w+;/;function we(e,t,n,o,r){for(var i,s,a,l,c,u,d=t.createDocumentFragment(),p=[],f=0,h=e.length;f<h;f++)if((i=e[f])||0===i)if("object"===x(i))C.merge(p,i.nodeType?[i]:i);else if(xe.test(i)){for(s=s||d.appendChild(t.createElement("div")),a=(ve.exec(i)||["",""])[1].toLowerCase(),l=be[a]||be._default,s.innerHTML=l[1]+C.htmlPrefilter(i)+l[2],u=l[0];u--;)s=s.lastChild;C.merge(p,s.childNodes),(s=d.firstChild).textContent=""}else p.push(t.createTextNode(i));for(d.textContent="",f=0;i=p[f++];)if(o&&C.inArray(i,o)>-1)r&&r.push(i);else if(c=ae(i),s=Ae(d.appendChild(i),"script"),c&&_e(s),n)for(u=0;i=s[u++];)ye.test(i.type||"")&&n.push(i);return d}var Ce=/^([^.]*)(?:\.(.+)|)/;function Se(){return!0}function Ee(){return!1}function ke(e,t){return e===function(){try{return b.activeElement}catch(e){}}()==("focus"===t)}function Te(e,t,n,o,r,i){var s,a;if("object"==typeof t){for(a in"string"!=typeof n&&(o=o||n,n=void 0),t)Te(e,a,n,o,t[a],i);return e}if(null==o&&null==r?(r=n,o=n=void 0):null==r&&("string"==typeof n?(r=o,o=void 0):(r=o,o=n,n=void 0)),!1===r)r=Ee;else if(!r)return e;return 1===i&&(s=r,r=function(e){return C().off(e),s.apply(this,arguments)},r.guid=s.guid||(s.guid=C.guid++)),e.each((function(){C.event.add(this,t,r,o,n)}))}function je(e,t,n){n?(Q.set(e,t,!1),C.event.add(e,t,{namespace:!1,handler:function(e){var o,r,i=Q.get(this,t);if(1&e.isTrigger&&this[t]){if(i.length)(C.event.special[t]||{}).delegateType&&e.stopPropagation();else if(i=a.call(arguments),Q.set(this,t,i),o=n(this,t),this[t](),i!==(r=Q.get(this,t))||o?Q.set(this,t,!1):r={},i!==r)return e.stopImmediatePropagation(),e.preventDefault(),r&&r.value}else i.length&&(Q.set(this,t,{value:C.event.trigger(C.extend(i[0],C.Event.prototype),i.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===Q.get(e,t)&&C.event.add(e,t,Se)}C.event={global:{},add:function(e,t,n,o,r){var i,s,a,l,c,u,d,p,f,h,m,g=Q.get(e);if(G(e))for(n.handler&&(n=(i=n).handler,r=i.selector),r&&C.find.matchesSelector(se,r),n.guid||(n.guid=C.guid++),(l=g.events)||(l=g.events=Object.create(null)),(s=g.handle)||(s=g.handle=function(t){return void 0!==C&&C.event.triggered!==t.type?C.event.dispatch.apply(e,arguments):void 0}),c=(t=(t||"").match(I)||[""]).length;c--;)f=m=(a=Ce.exec(t[c])||[])[1],h=(a[2]||"").split(".").sort(),f&&(d=C.event.special[f]||{},f=(r?d.delegateType:d.bindType)||f,d=C.event.special[f]||{},u=C.extend({type:f,origType:m,data:o,handler:n,guid:n.guid,selector:r,needsContext:r&&C.expr.match.needsContext.test(r),namespace:h.join(".")},i),(p=l[f])||((p=l[f]=[]).delegateCount=0,d.setup&&!1!==d.setup.call(e,o,h,s)||e.addEventListener&&e.addEventListener(f,s)),d.add&&(d.add.call(e,u),u.handler.guid||(u.handler.guid=n.guid)),r?p.splice(p.delegateCount++,0,u):p.push(u),C.event.global[f]=!0)},remove:function(e,t,n,o,r){var i,s,a,l,c,u,d,p,f,h,m,g=Q.hasData(e)&&Q.get(e);if(g&&(l=g.events)){for(c=(t=(t||"").match(I)||[""]).length;c--;)if(f=m=(a=Ce.exec(t[c])||[])[1],h=(a[2]||"").split(".").sort(),f){for(d=C.event.special[f]||{},p=l[f=(o?d.delegateType:d.bindType)||f]||[],a=a[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=i=p.length;i--;)u=p[i],!r&&m!==u.origType||n&&n.guid!==u.guid||a&&!a.test(u.namespace)||o&&o!==u.selector&&("**"!==o||!u.selector)||(p.splice(i,1),u.selector&&p.delegateCount--,d.remove&&d.remove.call(e,u));s&&!p.length&&(d.teardown&&!1!==d.teardown.call(e,h,g.handle)||C.removeEvent(e,f,g.handle),delete l[f])}else for(f in l)C.event.remove(e,f+t[c],n,o,!0);C.isEmptyObject(l)&&Q.remove(e,"handle events")}},dispatch:function(e){var t,n,o,r,i,s,a=new Array(arguments.length),l=C.event.fix(e),c=(Q.get(this,"events")||Object.create(null))[l.type]||[],u=C.event.special[l.type]||{};for(a[0]=l,t=1;t<arguments.length;t++)a[t]=arguments[t];if(l.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,l)){for(s=C.event.handlers.call(this,l,c),t=0;(r=s[t++])&&!l.isPropagationStopped();)for(l.currentTarget=r.elem,n=0;(i=r.handlers[n++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==i.namespace&&!l.rnamespace.test(i.namespace)||(l.handleObj=i,l.data=i.data,void 0!==(o=((C.event.special[i.origType]||{}).handle||i.handler).apply(r.elem,a))&&!1===(l.result=o)&&(l.preventDefault(),l.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,l),l.result}},handlers:function(e,t){var n,o,r,i,s,a=[],l=t.delegateCount,c=e.target;if(l&&c.nodeType&&!("click"===e.type&&e.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||!0!==c.disabled)){for(i=[],s={},n=0;n<l;n++)void 0===s[r=(o=t[n]).selector+" "]&&(s[r]=o.needsContext?C(r,this).index(c)>-1:C.find(r,this,null,[c]).length),s[r]&&i.push(o);i.length&&a.push({elem:c,handlers:i})}return c=this,l<t.length&&a.push({elem:c,handlers:t.slice(l)}),a},addProp:function(e,t){Object.defineProperty(C.Event.prototype,e,{enumerable:!0,configurable:!0,get:v(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[C.expando]?e:new C.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return ge.test(t.type)&&t.click&&R(t,"input")&&je(t,"click",Se),!1},trigger:function(e){var t=this||e;return ge.test(t.type)&&t.click&&R(t,"input")&&je(t,"click"),!0},_default:function(e){var t=e.target;return ge.test(t.type)&&t.click&&R(t,"input")&&Q.get(t,"click")||R(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},C.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},C.Event=function(e,t){if(!(this instanceof C.Event))return new C.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Se:Ee,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&C.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[C.expando]=!0},C.Event.prototype={constructor:C.Event,isDefaultPrevented:Ee,isPropagationStopped:Ee,isImmediatePropagationStopped:Ee,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Se,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Se,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Se,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},C.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},C.event.addProp),C.each({focus:"focusin",blur:"focusout"},(function(e,t){C.event.special[e]={setup:function(){return je(this,e,ke),!1},trigger:function(){return je(this,e),!0},_default:function(t){return Q.get(t.target,e)},delegateType:t}})),C.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,t){C.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,o=this,r=e.relatedTarget,i=e.handleObj;return r&&(r===o||C.contains(o,r))||(e.type=i.origType,n=i.handler.apply(this,arguments),e.type=t),n}}})),C.fn.extend({on:function(e,t,n,o){return Te(this,e,t,n,o)},one:function(e,t,n,o){return Te(this,e,t,n,o,1)},off:function(e,t,n){var o,r;if(e&&e.preventDefault&&e.handleObj)return o=e.handleObj,C(e.delegateTarget).off(o.namespace?o.origType+"."+o.namespace:o.origType,o.selector,o.handler),this;if("object"==typeof e){for(r in e)this.off(r,t,e[r]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Ee),this.each((function(){C.event.remove(this,e,n,t)}))}});var Re=/<script|<style|<link/i,Pe=/checked\s*(?:[^=]|=\s*.checked.)/i,Oe=/^\s*<!\[CDATA\[|\]\]>\s*$/g;function Ne(e,t){return R(e,"table")&&R(11!==t.nodeType?t:t.firstChild,"tr")&&C(e).children("tbody")[0]||e}function Be(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function De(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Me(e,t){var n,o,r,i,s,a;if(1===t.nodeType){if(Q.hasData(e)&&(a=Q.get(e).events))for(r in Q.remove(t,"handle events"),a)for(n=0,o=a[r].length;n<o;n++)C.event.add(t,r,a[r][n]);Z.hasData(e)&&(i=Z.access(e),s=C.extend({},i),Z.set(t,s))}}function Fe(e,t){var n=t.nodeName.toLowerCase();"input"===n&&ge.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function Ie(e,t,n,o){t=l(t);var r,i,s,a,c,u,d=0,p=e.length,f=p-1,h=t[0],m=v(h);if(m||p>1&&"string"==typeof h&&!g.checkClone&&Pe.test(h))return e.each((function(r){var i=e.eq(r);m&&(t[0]=h.call(this,r,i.html())),Ie(i,t,n,o)}));if(p&&(i=(r=we(t,e[0].ownerDocument,!1,e,o)).firstChild,1===r.childNodes.length&&(r=i),i||o)){for(a=(s=C.map(Ae(r,"script"),Be)).length;d<p;d++)c=r,d!==f&&(c=C.clone(c,!0,!0),a&&C.merge(s,Ae(c,"script"))),n.call(e[d],c,d);if(a)for(u=s[s.length-1].ownerDocument,C.map(s,De),d=0;d<a;d++)c=s[d],ye.test(c.type||"")&&!Q.access(c,"globalEval")&&C.contains(u,c)&&(c.src&&"module"!==(c.type||"").toLowerCase()?C._evalUrl&&!c.noModule&&C._evalUrl(c.src,{nonce:c.nonce||c.getAttribute("nonce")},u):_(c.textContent.replace(Oe,""),c,u))}return e}function Ve(e,t,n){for(var o,r=t?C.filter(t,e):e,i=0;null!=(o=r[i]);i++)n||1!==o.nodeType||C.cleanData(Ae(o)),o.parentNode&&(n&&ae(o)&&_e(Ae(o,"script")),o.parentNode.removeChild(o));return e}C.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var o,r,i,s,a=e.cloneNode(!0),l=ae(e);if(!(g.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||C.isXMLDoc(e)))for(s=Ae(a),o=0,r=(i=Ae(e)).length;o<r;o++)Fe(i[o],s[o]);if(t)if(n)for(i=i||Ae(e),s=s||Ae(a),o=0,r=i.length;o<r;o++)Me(i[o],s[o]);else Me(e,a);return(s=Ae(a,"script")).length>0&&_e(s,!l&&Ae(e,"script")),a},cleanData:function(e){for(var t,n,o,r=C.event.special,i=0;void 0!==(n=e[i]);i++)if(G(n)){if(t=n[Q.expando]){if(t.events)for(o in t.events)r[o]?C.event.remove(n,o):C.removeEvent(n,o,t.handle);n[Q.expando]=void 0}n[Z.expando]&&(n[Z.expando]=void 0)}}}),C.fn.extend({detach:function(e){return Ve(this,e,!0)},remove:function(e){return Ve(this,e)},text:function(e){return z(this,(function(e){return void 0===e?C.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return Ie(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Ne(this,e).appendChild(e)}))},prepend:function(){return Ie(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Ne(this,e);t.insertBefore(e,t.firstChild)}}))},before:function(){return Ie(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return Ie(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(C.cleanData(Ae(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map((function(){return C.clone(this,e,t)}))},html:function(e){return z(this,(function(e){var t=this[0]||{},n=0,o=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Re.test(e)&&!be[(ve.exec(e)||["",""])[1].toLowerCase()]){e=C.htmlPrefilter(e);try{for(;n<o;n++)1===(t=this[n]||{}).nodeType&&(C.cleanData(Ae(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return Ie(this,arguments,(function(t){var n=this.parentNode;C.inArray(this,e)<0&&(C.cleanData(Ae(this)),n&&n.replaceChild(t,this))}),e)}}),C.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,t){C.fn[e]=function(e){for(var n,o=[],r=C(e),i=r.length-1,s=0;s<=i;s++)n=s===i?this:this.clone(!0),C(r[s])[t](n),c.apply(o,n.get());return this.pushStack(o)}}));var Le=new RegExp("^("+oe+")(?!px)[a-z%]+$","i"),$e=/^--/,He=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=o),t.getComputedStyle(e)},Ue=function(e,t,n){var o,r,i={};for(r in t)i[r]=e.style[r],e.style[r]=t[r];for(r in o=n.call(e),t)e.style[r]=i[r];return o},qe=new RegExp(ie.join("|"),"i"),ze="[\\x20\\t\\r\\n\\f]",We=new RegExp("^"+ze+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ze+"+$","g");function Ye(e,t,n){var o,r,i,s,a=$e.test(t),l=e.style;return(n=n||He(e))&&(s=n.getPropertyValue(t)||n[t],a&&s&&(s=s.replace(We,"$1")||void 0),""!==s||ae(e)||(s=C.style(e,t)),!g.pixelBoxStyles()&&Le.test(s)&&qe.test(t)&&(o=l.width,r=l.minWidth,i=l.maxWidth,l.minWidth=l.maxWidth=l.width=s,s=n.width,l.width=o,l.minWidth=r,l.maxWidth=i)),void 0!==s?s+"":s}function Je(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(u){c.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",u.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",se.appendChild(c).appendChild(u);var e=o.getComputedStyle(u);n="1%"!==e.top,l=12===t(e.marginLeft),u.style.right="60%",s=36===t(e.right),r=36===t(e.width),u.style.position="absolute",i=12===t(u.offsetWidth/3),se.removeChild(c),u=null}}function t(e){return Math.round(parseFloat(e))}var n,r,i,s,a,l,c=b.createElement("div"),u=b.createElement("div");u.style&&(u.style.backgroundClip="content-box",u.cloneNode(!0).style.backgroundClip="",g.clearCloneStyle="content-box"===u.style.backgroundClip,C.extend(g,{boxSizingReliable:function(){return e(),r},pixelBoxStyles:function(){return e(),s},pixelPosition:function(){return e(),n},reliableMarginLeft:function(){return e(),l},scrollboxSize:function(){return e(),i},reliableTrDimensions:function(){var e,t,n,r;return null==a&&(e=b.createElement("table"),t=b.createElement("tr"),n=b.createElement("div"),e.style.cssText="position:absolute;left:-11111px;border-collapse:separate",t.style.cssText="border:1px solid",t.style.height="1px",n.style.height="9px",n.style.display="block",se.appendChild(e).appendChild(t).appendChild(n),r=o.getComputedStyle(t),a=parseInt(r.height,10)+parseInt(r.borderTopWidth,10)+parseInt(r.borderBottomWidth,10)===t.offsetHeight,se.removeChild(e)),a}}))}();var Ke=["Webkit","Moz","ms"],Ge=b.createElement("div").style,Xe={};function Qe(e){var t=C.cssProps[e]||Xe[e];return t||(e in Ge?e:Xe[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=Ke.length;n--;)if((e=Ke[n]+t)in Ge)return e}(e)||e)}var Ze=/^(none|table(?!-c[ea]).+)/,et={position:"absolute",visibility:"hidden",display:"block"},tt={letterSpacing:"0",fontWeight:"400"};function nt(e,t,n){var o=re.exec(t);return o?Math.max(0,o[2]-(n||0))+(o[3]||"px"):t}function ot(e,t,n,o,r,i){var s="width"===t?1:0,a=0,l=0;if(n===(o?"border":"content"))return 0;for(;s<4;s+=2)"margin"===n&&(l+=C.css(e,n+ie[s],!0,r)),o?("content"===n&&(l-=C.css(e,"padding"+ie[s],!0,r)),"margin"!==n&&(l-=C.css(e,"border"+ie[s]+"Width",!0,r))):(l+=C.css(e,"padding"+ie[s],!0,r),"padding"!==n?l+=C.css(e,"border"+ie[s]+"Width",!0,r):a+=C.css(e,"border"+ie[s]+"Width",!0,r));return!o&&i>=0&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-i-l-a-.5))||0),l}function rt(e,t,n){var o=He(e),r=(!g.boxSizingReliable()||n)&&"border-box"===C.css(e,"boxSizing",!1,o),i=r,s=Ye(e,t,o),a="offset"+t[0].toUpperCase()+t.slice(1);if(Le.test(s)){if(!n)return s;s="auto"}return(!g.boxSizingReliable()&&r||!g.reliableTrDimensions()&&R(e,"tr")||"auto"===s||!parseFloat(s)&&"inline"===C.css(e,"display",!1,o))&&e.getClientRects().length&&(r="border-box"===C.css(e,"boxSizing",!1,o),(i=a in e)&&(s=e[a])),(s=parseFloat(s)||0)+ot(e,t,n||(r?"border":"content"),i,o,s)+"px"}function it(e,t,n,o,r){return new it.prototype.init(e,t,n,o,r)}C.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Ye(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,o){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var r,i,s,a=K(t),l=$e.test(t),c=e.style;if(l||(t=Qe(a)),s=C.cssHooks[t]||C.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(r=s.get(e,!1,o))?r:c[t];"string"===(i=typeof n)&&(r=re.exec(n))&&r[1]&&(n=ue(e,t,r),i="number"),null!=n&&n==n&&("number"!==i||l||(n+=r&&r[3]||(C.cssNumber[a]?"":"px")),g.clearCloneStyle||""!==n||0!==t.indexOf("background")||(c[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,o))||(l?c.setProperty(t,n):c[t]=n))}},css:function(e,t,n,o){var r,i,s,a=K(t);return $e.test(t)||(t=Qe(a)),(s=C.cssHooks[t]||C.cssHooks[a])&&"get"in s&&(r=s.get(e,!0,n)),void 0===r&&(r=Ye(e,t,o)),"normal"===r&&t in tt&&(r=tt[t]),""===n||n?(i=parseFloat(r),!0===n||isFinite(i)?i||0:r):r}}),C.each(["height","width"],(function(e,t){C.cssHooks[t]={get:function(e,n,o){if(n)return!Ze.test(C.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?rt(e,t,o):Ue(e,et,(function(){return rt(e,t,o)}))},set:function(e,n,o){var r,i=He(e),s=!g.scrollboxSize()&&"absolute"===i.position,a=(s||o)&&"border-box"===C.css(e,"boxSizing",!1,i),l=o?ot(e,t,o,a,i):0;return a&&s&&(l-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(i[t])-ot(e,t,"border",!1,i)-.5)),l&&(r=re.exec(n))&&"px"!==(r[3]||"px")&&(e.style[t]=n,n=C.css(e,t)),nt(0,n,l)}}})),C.cssHooks.marginLeft=Je(g.reliableMarginLeft,(function(e,t){if(t)return(parseFloat(Ye(e,"marginLeft"))||e.getBoundingClientRect().left-Ue(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),C.each({margin:"",padding:"",border:"Width"},(function(e,t){C.cssHooks[e+t]={expand:function(n){for(var o=0,r={},i="string"==typeof n?n.split(" "):[n];o<4;o++)r[e+ie[o]+t]=i[o]||i[o-2]||i[0];return r}},"margin"!==e&&(C.cssHooks[e+t].set=nt)})),C.fn.extend({css:function(e,t){return z(this,(function(e,t,n){var o,r,i={},s=0;if(Array.isArray(t)){for(o=He(e),r=t.length;s<r;s++)i[t[s]]=C.css(e,t[s],!1,o);return i}return void 0!==n?C.style(e,t,n):C.css(e,t)}),e,t,arguments.length>1)}}),C.Tween=it,it.prototype={constructor:it,init:function(e,t,n,o,r,i){this.elem=e,this.prop=n,this.easing=r||C.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=o,this.unit=i||(C.cssNumber[n]?"":"px")},cur:function(){var e=it.propHooks[this.prop];return e&&e.get?e.get(this):it.propHooks._default.get(this)},run:function(e){var t,n=it.propHooks[this.prop];return this.options.duration?this.pos=t=C.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):it.propHooks._default.set(this),this}},it.prototype.init.prototype=it.prototype,it.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=C.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){C.fx.step[e.prop]?C.fx.step[e.prop](e):1!==e.elem.nodeType||!C.cssHooks[e.prop]&&null==e.elem.style[Qe(e.prop)]?e.elem[e.prop]=e.now:C.style(e.elem,e.prop,e.now+e.unit)}}},it.propHooks.scrollTop=it.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},C.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},C.fx=it.prototype.init,C.fx.step={};var st,at,lt=/^(?:toggle|show|hide)$/,ct=/queueHooks$/;function ut(){at&&(!1===b.hidden&&o.requestAnimationFrame?o.requestAnimationFrame(ut):o.setTimeout(ut,C.fx.interval),C.fx.tick())}function dt(){return o.setTimeout((function(){st=void 0})),st=Date.now()}function pt(e,t){var n,o=0,r={height:e};for(t=t?1:0;o<4;o+=2-t)r["margin"+(n=ie[o])]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}function ft(e,t,n){for(var o,r=(ht.tweeners[t]||[]).concat(ht.tweeners["*"]),i=0,s=r.length;i<s;i++)if(o=r[i].call(n,t,e))return o}function ht(e,t,n){var o,r,i=0,s=ht.prefilters.length,a=C.Deferred().always((function(){delete l.elem})),l=function(){if(r)return!1;for(var t=st||dt(),n=Math.max(0,c.startTime+c.duration-t),o=1-(n/c.duration||0),i=0,s=c.tweens.length;i<s;i++)c.tweens[i].run(o);return a.notifyWith(e,[c,o,n]),o<1&&s?n:(s||a.notifyWith(e,[c,1,0]),a.resolveWith(e,[c]),!1)},c=a.promise({elem:e,props:C.extend({},t),opts:C.extend(!0,{specialEasing:{},easing:C.easing._default},n),originalProperties:t,originalOptions:n,startTime:st||dt(),duration:n.duration,tweens:[],createTween:function(t,n){var o=C.Tween(e,c.opts,t,n,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(o),o},stop:function(t){var n=0,o=t?c.tweens.length:0;if(r)return this;for(r=!0;n<o;n++)c.tweens[n].run(1);return t?(a.notifyWith(e,[c,1,0]),a.resolveWith(e,[c,t])):a.rejectWith(e,[c,t]),this}}),u=c.props;for(!function(e,t){var n,o,r,i,s;for(n in e)if(r=t[o=K(n)],i=e[n],Array.isArray(i)&&(r=i[1],i=e[n]=i[0]),n!==o&&(e[o]=i,delete e[n]),(s=C.cssHooks[o])&&"expand"in s)for(n in i=s.expand(i),delete e[o],i)n in e||(e[n]=i[n],t[n]=r);else t[o]=r}(u,c.opts.specialEasing);i<s;i++)if(o=ht.prefilters[i].call(c,e,u,c.opts))return v(o.stop)&&(C._queueHooks(c.elem,c.opts.queue).stop=o.stop.bind(o)),o;return C.map(u,ft,c),v(c.opts.start)&&c.opts.start.call(e,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),C.fx.timer(C.extend(l,{elem:e,anim:c,queue:c.opts.queue})),c}C.Animation=C.extend(ht,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ue(n.elem,e,re.exec(t),n),n}]},tweener:function(e,t){v(e)?(t=e,e=["*"]):e=e.match(I);for(var n,o=0,r=e.length;o<r;o++)n=e[o],ht.tweeners[n]=ht.tweeners[n]||[],ht.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var o,r,i,s,a,l,c,u,d="width"in t||"height"in t,p=this,f={},h=e.style,m=e.nodeType&&ce(e),g=Q.get(e,"fxshow");for(o in n.queue||(null==(s=C._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,p.always((function(){p.always((function(){s.unqueued--,C.queue(e,"fx").length||s.empty.fire()}))}))),t)if(r=t[o],lt.test(r)){if(delete t[o],i=i||"toggle"===r,r===(m?"hide":"show")){if("show"!==r||!g||void 0===g[o])continue;m=!0}f[o]=g&&g[o]||C.style(e,o)}if((l=!C.isEmptyObject(t))||!C.isEmptyObject(f))for(o in d&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(c=g&&g.display)&&(c=Q.get(e,"display")),"none"===(u=C.css(e,"display"))&&(c?u=c:(fe([e],!0),c=e.style.display||c,u=C.css(e,"display"),fe([e]))),("inline"===u||"inline-block"===u&&null!=c)&&"none"===C.css(e,"float")&&(l||(p.done((function(){h.display=c})),null==c&&(u=h.display,c="none"===u?"":u)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",p.always((function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]}))),l=!1,f)l||(g?"hidden"in g&&(m=g.hidden):g=Q.access(e,"fxshow",{display:c}),i&&(g.hidden=!m),m&&fe([e],!0),p.done((function(){for(o in m||fe([e]),Q.remove(e,"fxshow"),f)C.style(e,o,f[o])}))),l=ft(m?g[o]:0,o,p),o in g||(g[o]=l.start,m&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?ht.prefilters.unshift(e):ht.prefilters.push(e)}}),C.speed=function(e,t,n){var o=e&&"object"==typeof e?C.extend({},e):{complete:n||!n&&t||v(e)&&e,duration:e,easing:n&&t||t&&!v(t)&&t};return C.fx.off?o.duration=0:"number"!=typeof o.duration&&(o.duration in C.fx.speeds?o.duration=C.fx.speeds[o.duration]:o.duration=C.fx.speeds._default),null!=o.queue&&!0!==o.queue||(o.queue="fx"),o.old=o.complete,o.complete=function(){v(o.old)&&o.old.call(this),o.queue&&C.dequeue(this,o.queue)},o},C.fn.extend({fadeTo:function(e,t,n,o){return this.filter(ce).css("opacity",0).show().end().animate({opacity:t},e,n,o)},animate:function(e,t,n,o){var r=C.isEmptyObject(e),i=C.speed(t,n,o),s=function(){var t=ht(this,C.extend({},e),i);(r||Q.get(this,"finish"))&&t.stop(!0)};return s.finish=s,r||!1===i.queue?this.each(s):this.queue(i.queue,s)},stop:function(e,t,n){var o=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&this.queue(e||"fx",[]),this.each((function(){var t=!0,r=null!=e&&e+"queueHooks",i=C.timers,s=Q.get(this);if(r)s[r]&&s[r].stop&&o(s[r]);else for(r in s)s[r]&&s[r].stop&&ct.test(r)&&o(s[r]);for(r=i.length;r--;)i[r].elem!==this||null!=e&&i[r].queue!==e||(i[r].anim.stop(n),t=!1,i.splice(r,1));!t&&n||C.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var t,n=Q.get(this),o=n[e+"queue"],r=n[e+"queueHooks"],i=C.timers,s=o?o.length:0;for(n.finish=!0,C.queue(this,e,[]),r&&r.stop&&r.stop.call(this,!0),t=i.length;t--;)i[t].elem===this&&i[t].queue===e&&(i[t].anim.stop(!0),i.splice(t,1));for(t=0;t<s;t++)o[t]&&o[t].finish&&o[t].finish.call(this);delete n.finish}))}}),C.each(["toggle","show","hide"],(function(e,t){var n=C.fn[t];C.fn[t]=function(e,o,r){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(pt(t,!0),e,o,r)}})),C.each({slideDown:pt("show"),slideUp:pt("hide"),slideToggle:pt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,t){C.fn[e]=function(e,n,o){return this.animate(t,e,n,o)}})),C.timers=[],C.fx.tick=function(){var e,t=0,n=C.timers;for(st=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||C.fx.stop(),st=void 0},C.fx.timer=function(e){C.timers.push(e),C.fx.start()},C.fx.interval=13,C.fx.start=function(){at||(at=!0,ut())},C.fx.stop=function(){at=null},C.fx.speeds={slow:600,fast:200,_default:400},C.fn.delay=function(e,t){return e=C.fx&&C.fx.speeds[e]||e,t=t||"fx",this.queue(t,(function(t,n){var r=o.setTimeout(t,e);n.stop=function(){o.clearTimeout(r)}}))},function(){var e=b.createElement("input"),t=b.createElement("select").appendChild(b.createElement("option"));e.type="checkbox",g.checkOn=""!==e.value,g.optSelected=t.selected,(e=b.createElement("input")).value="t",e.type="radio",g.radioValue="t"===e.value}();var mt,gt=C.expr.attrHandle;C.fn.extend({attr:function(e,t){return z(this,C.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each((function(){C.removeAttr(this,e)}))}}),C.extend({attr:function(e,t,n){var o,r,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return void 0===e.getAttribute?C.prop(e,t,n):(1===i&&C.isXMLDoc(e)||(r=C.attrHooks[t.toLowerCase()]||(C.expr.match.bool.test(t)?mt:void 0)),void 0!==n?null===n?void C.removeAttr(e,t):r&&"set"in r&&void 0!==(o=r.set(e,n,t))?o:(e.setAttribute(t,n+""),n):r&&"get"in r&&null!==(o=r.get(e,t))?o:null==(o=C.find.attr(e,t))?void 0:o)},attrHooks:{type:{set:function(e,t){if(!g.radioValue&&"radio"===t&&R(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,o=0,r=t&&t.match(I);if(r&&1===e.nodeType)for(;n=r[o++];)e.removeAttribute(n)}}),mt={set:function(e,t,n){return!1===t?C.removeAttr(e,n):e.setAttribute(n,n),n}},C.each(C.expr.match.bool.source.match(/\w+/g),(function(e,t){var n=gt[t]||C.find.attr;gt[t]=function(e,t,o){var r,i,s=t.toLowerCase();return o||(i=gt[s],gt[s]=r,r=null!=n(e,t,o)?s:null,gt[s]=i),r}}));var vt=/^(?:input|select|textarea|button)$/i,yt=/^(?:a|area)$/i;function bt(e){return(e.match(I)||[]).join(" ")}function At(e){return e.getAttribute&&e.getAttribute("class")||""}function _t(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(I)||[]}C.fn.extend({prop:function(e,t){return z(this,C.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each((function(){delete this[C.propFix[e]||e]}))}}),C.extend({prop:function(e,t,n){var o,r,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return 1===i&&C.isXMLDoc(e)||(t=C.propFix[t]||t,r=C.propHooks[t]),void 0!==n?r&&"set"in r&&void 0!==(o=r.set(e,n,t))?o:e[t]=n:r&&"get"in r&&null!==(o=r.get(e,t))?o:e[t]},propHooks:{tabIndex:{get:function(e){var t=C.find.attr(e,"tabindex");return t?parseInt(t,10):vt.test(e.nodeName)||yt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),g.optSelected||(C.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),C.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){C.propFix[this.toLowerCase()]=this})),C.fn.extend({addClass:function(e){var t,n,o,r,i,s;return v(e)?this.each((function(t){C(this).addClass(e.call(this,t,At(this)))})):(t=_t(e)).length?this.each((function(){if(o=At(this),n=1===this.nodeType&&" "+bt(o)+" "){for(i=0;i<t.length;i++)r=t[i],n.indexOf(" "+r+" ")<0&&(n+=r+" ");s=bt(n),o!==s&&this.setAttribute("class",s)}})):this},removeClass:function(e){var t,n,o,r,i,s;return v(e)?this.each((function(t){C(this).removeClass(e.call(this,t,At(this)))})):arguments.length?(t=_t(e)).length?this.each((function(){if(o=At(this),n=1===this.nodeType&&" "+bt(o)+" "){for(i=0;i<t.length;i++)for(r=t[i];n.indexOf(" "+r+" ")>-1;)n=n.replace(" "+r+" "," ");s=bt(n),o!==s&&this.setAttribute("class",s)}})):this:this.attr("class","")},toggleClass:function(e,t){var n,o,r,i,s=typeof e,a="string"===s||Array.isArray(e);return v(e)?this.each((function(n){C(this).toggleClass(e.call(this,n,At(this),t),t)})):"boolean"==typeof t&&a?t?this.addClass(e):this.removeClass(e):(n=_t(e),this.each((function(){if(a)for(i=C(this),r=0;r<n.length;r++)o=n[r],i.hasClass(o)?i.removeClass(o):i.addClass(o);else void 0!==e&&"boolean"!==s||((o=At(this))&&Q.set(this,"__className__",o),this.setAttribute&&this.setAttribute("class",o||!1===e?"":Q.get(this,"__className__")||""))})))},hasClass:function(e){var t,n,o=0;for(t=" "+e+" ";n=this[o++];)if(1===n.nodeType&&(" "+bt(At(n))+" ").indexOf(t)>-1)return!0;return!1}});var xt=/\r/g;C.fn.extend({val:function(e){var t,n,o,r=this[0];return arguments.length?(o=v(e),this.each((function(n){var r;1===this.nodeType&&(null==(r=o?e.call(this,n,C(this).val()):e)?r="":"number"==typeof r?r+="":Array.isArray(r)&&(r=C.map(r,(function(e){return null==e?"":e+""}))),(t=C.valHooks[this.type]||C.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,r,"value")||(this.value=r))}))):r?(t=C.valHooks[r.type]||C.valHooks[r.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(r,"value"))?n:"string"==typeof(n=r.value)?n.replace(xt,""):null==n?"":n:void 0}}),C.extend({valHooks:{option:{get:function(e){var t=C.find.attr(e,"value");return null!=t?t:bt(C.text(e))}},select:{get:function(e){var t,n,o,r=e.options,i=e.selectedIndex,s="select-one"===e.type,a=s?null:[],l=s?i+1:r.length;for(o=i<0?l:s?i:0;o<l;o++)if(((n=r[o]).selected||o===i)&&!n.disabled&&(!n.parentNode.disabled||!R(n.parentNode,"optgroup"))){if(t=C(n).val(),s)return t;a.push(t)}return a},set:function(e,t){for(var n,o,r=e.options,i=C.makeArray(t),s=r.length;s--;)((o=r[s]).selected=C.inArray(C.valHooks.option.get(o),i)>-1)&&(n=!0);return n||(e.selectedIndex=-1),i}}}}),C.each(["radio","checkbox"],(function(){C.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=C.inArray(C(e).val(),t)>-1}},g.checkOn||(C.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})})),g.focusin="onfocusin"in o;var wt=/^(?:focusinfocus|focusoutblur)$/,Ct=function(e){e.stopPropagation()};C.extend(C.event,{trigger:function(e,t,n,r){var i,s,a,l,c,u,d,p,h=[n||b],m=f.call(e,"type")?e.type:e,g=f.call(e,"namespace")?e.namespace.split("."):[];if(s=p=a=n=n||b,3!==n.nodeType&&8!==n.nodeType&&!wt.test(m+C.event.triggered)&&(m.indexOf(".")>-1&&(g=m.split("."),m=g.shift(),g.sort()),c=m.indexOf(":")<0&&"on"+m,(e=e[C.expando]?e:new C.Event(m,"object"==typeof e&&e)).isTrigger=r?2:3,e.namespace=g.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+g.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:C.makeArray(t,[e]),d=C.event.special[m]||{},r||!d.trigger||!1!==d.trigger.apply(n,t))){if(!r&&!d.noBubble&&!y(n)){for(l=d.delegateType||m,wt.test(l+m)||(s=s.parentNode);s;s=s.parentNode)h.push(s),a=s;a===(n.ownerDocument||b)&&h.push(a.defaultView||a.parentWindow||o)}for(i=0;(s=h[i++])&&!e.isPropagationStopped();)p=s,e.type=i>1?l:d.bindType||m,(u=(Q.get(s,"events")||Object.create(null))[e.type]&&Q.get(s,"handle"))&&u.apply(s,t),(u=c&&s[c])&&u.apply&&G(s)&&(e.result=u.apply(s,t),!1===e.result&&e.preventDefault());return e.type=m,r||e.isDefaultPrevented()||d._default&&!1!==d._default.apply(h.pop(),t)||!G(n)||c&&v(n[m])&&!y(n)&&((a=n[c])&&(n[c]=null),C.event.triggered=m,e.isPropagationStopped()&&p.addEventListener(m,Ct),n[m](),e.isPropagationStopped()&&p.removeEventListener(m,Ct),C.event.triggered=void 0,a&&(n[c]=a)),e.result}},simulate:function(e,t,n){var o=C.extend(new C.Event,n,{type:e,isSimulated:!0});C.event.trigger(o,null,t)}}),C.fn.extend({trigger:function(e,t){return this.each((function(){C.event.trigger(e,t,this)}))},triggerHandler:function(e,t){var n=this[0];if(n)return C.event.trigger(e,t,n,!0)}}),g.focusin||C.each({focus:"focusin",blur:"focusout"},(function(e,t){var n=function(e){C.event.simulate(t,e.target,C.event.fix(e))};C.event.special[t]={setup:function(){var o=this.ownerDocument||this.document||this,r=Q.access(o,t);r||o.addEventListener(e,n,!0),Q.access(o,t,(r||0)+1)},teardown:function(){var o=this.ownerDocument||this.document||this,r=Q.access(o,t)-1;r?Q.access(o,t,r):(o.removeEventListener(e,n,!0),Q.remove(o,t))}}}));var St=o.location,Et={guid:Date.now()},kt=/\?/;C.parseXML=function(e){var t,n;if(!e||"string"!=typeof e)return null;try{t=(new o.DOMParser).parseFromString(e,"text/xml")}catch(e){}return n=t&&t.getElementsByTagName("parsererror")[0],t&&!n||C.error("Invalid XML: "+(n?C.map(n.childNodes,(function(e){return e.textContent})).join("\n"):e)),t};var Tt=/\[\]$/,jt=/\r?\n/g,Rt=/^(?:submit|button|image|reset|file)$/i,Pt=/^(?:input|select|textarea|keygen)/i;function Ot(e,t,n,o){var r;if(Array.isArray(t))C.each(t,(function(t,r){n||Tt.test(e)?o(e,r):Ot(e+"["+("object"==typeof r&&null!=r?t:"")+"]",r,n,o)}));else if(n||"object"!==x(t))o(e,t);else for(r in t)Ot(e+"["+r+"]",t[r],n,o)}C.param=function(e,t){var n,o=[],r=function(e,t){var n=v(t)?t():t;o[o.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!C.isPlainObject(e))C.each(e,(function(){r(this.name,this.value)}));else for(n in e)Ot(n,e[n],t,r);return o.join("&")},C.fn.extend({serialize:function(){return C.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=C.prop(this,"elements");return e?C.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!C(this).is(":disabled")&&Pt.test(this.nodeName)&&!Rt.test(e)&&(this.checked||!ge.test(e))})).map((function(e,t){var n=C(this).val();return null==n?null:Array.isArray(n)?C.map(n,(function(e){return{name:t.name,value:e.replace(jt,"\r\n")}})):{name:t.name,value:n.replace(jt,"\r\n")}})).get()}});var Nt=/%20/g,Bt=/#.*$/,Dt=/([?&])_=[^&]*/,Mt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Ft=/^(?:GET|HEAD)$/,It=/^\/\//,Vt={},Lt={},$t="*/".concat("*"),Ht=b.createElement("a");function Ut(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var o,r=0,i=t.toLowerCase().match(I)||[];if(v(n))for(;o=i[r++];)"+"===o[0]?(o=o.slice(1)||"*",(e[o]=e[o]||[]).unshift(n)):(e[o]=e[o]||[]).push(n)}}function qt(e,t,n,o){var r={},i=e===Lt;function s(a){var l;return r[a]=!0,C.each(e[a]||[],(function(e,a){var c=a(t,n,o);return"string"!=typeof c||i||r[c]?i?!(l=c):void 0:(t.dataTypes.unshift(c),s(c),!1)})),l}return s(t.dataTypes[0])||!r["*"]&&s("*")}function zt(e,t){var n,o,r=C.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((r[n]?e:o||(o={}))[n]=t[n]);return o&&C.extend(!0,e,o),e}Ht.href=St.href,C.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:St.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(St.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":$t,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":C.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?zt(zt(e,C.ajaxSettings),t):zt(C.ajaxSettings,e)},ajaxPrefilter:Ut(Vt),ajaxTransport:Ut(Lt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var n,r,i,s,a,l,c,u,d,p,f=C.ajaxSetup({},t),h=f.context||f,m=f.context&&(h.nodeType||h.jquery)?C(h):C.event,g=C.Deferred(),v=C.Callbacks("once memory"),y=f.statusCode||{},A={},_={},x="canceled",w={readyState:0,getResponseHeader:function(e){var t;if(c){if(!s)for(s={};t=Mt.exec(i);)s[t[1].toLowerCase()+" "]=(s[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=s[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return c?i:null},setRequestHeader:function(e,t){return null==c&&(e=_[e.toLowerCase()]=_[e.toLowerCase()]||e,A[e]=t),this},overrideMimeType:function(e){return null==c&&(f.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)w.always(e[w.status]);else for(t in e)y[t]=[y[t],e[t]];return this},abort:function(e){var t=e||x;return n&&n.abort(t),S(0,t),this}};if(g.promise(w),f.url=((e||f.url||St.href)+"").replace(It,St.protocol+"//"),f.type=t.method||t.type||f.method||f.type,f.dataTypes=(f.dataType||"*").toLowerCase().match(I)||[""],null==f.crossDomain){l=b.createElement("a");try{l.href=f.url,l.href=l.href,f.crossDomain=Ht.protocol+"//"+Ht.host!=l.protocol+"//"+l.host}catch(e){f.crossDomain=!0}}if(f.data&&f.processData&&"string"!=typeof f.data&&(f.data=C.param(f.data,f.traditional)),qt(Vt,f,t,w),c)return w;for(d in(u=C.event&&f.global)&&0==C.active++&&C.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!Ft.test(f.type),r=f.url.replace(Bt,""),f.hasContent?f.data&&f.processData&&0===(f.contentType||"").indexOf("application/x-www-form-urlencoded")&&(f.data=f.data.replace(Nt,"+")):(p=f.url.slice(r.length),f.data&&(f.processData||"string"==typeof f.data)&&(r+=(kt.test(r)?"&":"?")+f.data,delete f.data),!1===f.cache&&(r=r.replace(Dt,"$1"),p=(kt.test(r)?"&":"?")+"_="+Et.guid+++p),f.url=r+p),f.ifModified&&(C.lastModified[r]&&w.setRequestHeader("If-Modified-Since",C.lastModified[r]),C.etag[r]&&w.setRequestHeader("If-None-Match",C.etag[r])),(f.data&&f.hasContent&&!1!==f.contentType||t.contentType)&&w.setRequestHeader("Content-Type",f.contentType),w.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+$t+"; q=0.01":""):f.accepts["*"]),f.headers)w.setRequestHeader(d,f.headers[d]);if(f.beforeSend&&(!1===f.beforeSend.call(h,w,f)||c))return w.abort();if(x="abort",v.add(f.complete),w.done(f.success),w.fail(f.error),n=qt(Lt,f,t,w)){if(w.readyState=1,u&&m.trigger("ajaxSend",[w,f]),c)return w;f.async&&f.timeout>0&&(a=o.setTimeout((function(){w.abort("timeout")}),f.timeout));try{c=!1,n.send(A,S)}catch(e){if(c)throw e;S(-1,e)}}else S(-1,"No Transport");function S(e,t,s,l){var d,p,b,A,_,x=t;c||(c=!0,a&&o.clearTimeout(a),n=void 0,i=l||"",w.readyState=e>0?4:0,d=e>=200&&e<300||304===e,s&&(A=function(e,t,n){for(var o,r,i,s,a=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===o&&(o=e.mimeType||t.getResponseHeader("Content-Type"));if(o)for(r in a)if(a[r]&&a[r].test(o)){l.unshift(r);break}if(l[0]in n)i=l[0];else{for(r in n){if(!l[0]||e.converters[r+" "+l[0]]){i=r;break}s||(s=r)}i=i||s}if(i)return i!==l[0]&&l.unshift(i),n[i]}(f,w,s)),!d&&C.inArray("script",f.dataTypes)>-1&&C.inArray("json",f.dataTypes)<0&&(f.converters["text script"]=function(){}),A=function(e,t,n,o){var r,i,s,a,l,c={},u=e.dataTypes.slice();if(u[1])for(s in e.converters)c[s.toLowerCase()]=e.converters[s];for(i=u.shift();i;)if(e.responseFields[i]&&(n[e.responseFields[i]]=t),!l&&o&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=i,i=u.shift())if("*"===i)i=l;else if("*"!==l&&l!==i){if(!(s=c[l+" "+i]||c["* "+i]))for(r in c)if((a=r.split(" "))[1]===i&&(s=c[l+" "+a[0]]||c["* "+a[0]])){!0===s?s=c[r]:!0!==c[r]&&(i=a[0],u.unshift(a[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+l+" to "+i}}}return{state:"success",data:t}}(f,A,w,d),d?(f.ifModified&&((_=w.getResponseHeader("Last-Modified"))&&(C.lastModified[r]=_),(_=w.getResponseHeader("etag"))&&(C.etag[r]=_)),204===e||"HEAD"===f.type?x="nocontent":304===e?x="notmodified":(x=A.state,p=A.data,d=!(b=A.error))):(b=x,!e&&x||(x="error",e<0&&(e=0))),w.status=e,w.statusText=(t||x)+"",d?g.resolveWith(h,[p,x,w]):g.rejectWith(h,[w,x,b]),w.statusCode(y),y=void 0,u&&m.trigger(d?"ajaxSuccess":"ajaxError",[w,f,d?p:b]),v.fireWith(h,[w,x]),u&&(m.trigger("ajaxComplete",[w,f]),--C.active||C.event.trigger("ajaxStop")))}return w},getJSON:function(e,t,n){return C.get(e,t,n,"json")},getScript:function(e,t){return C.get(e,void 0,t,"script")}}),C.each(["get","post"],(function(e,t){C[t]=function(e,n,o,r){return v(n)&&(r=r||o,o=n,n=void 0),C.ajax(C.extend({url:e,type:t,dataType:r,data:n,success:o},C.isPlainObject(e)&&e))}})),C.ajaxPrefilter((function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")})),C._evalUrl=function(e,t,n){return C.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){C.globalEval(e,t,n)}})},C.fn.extend({wrapAll:function(e){var t;return this[0]&&(v(e)&&(e=e.call(this[0])),t=C(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return v(e)?this.each((function(t){C(this).wrapInner(e.call(this,t))})):this.each((function(){var t=C(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)}))},wrap:function(e){var t=v(e);return this.each((function(n){C(this).wrapAll(t?e.call(this,n):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){C(this).replaceWith(this.childNodes)})),this}}),C.expr.pseudos.hidden=function(e){return!C.expr.pseudos.visible(e)},C.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},C.ajaxSettings.xhr=function(){try{return new o.XMLHttpRequest}catch(e){}};var Wt={0:200,1223:204},Yt=C.ajaxSettings.xhr();g.cors=!!Yt&&"withCredentials"in Yt,g.ajax=Yt=!!Yt,C.ajaxTransport((function(e){var t,n;if(g.cors||Yt&&!e.crossDomain)return{send:function(r,i){var s,a=e.xhr();if(a.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(s in e.xhrFields)a[s]=e.xhrFields[s];for(s in e.mimeType&&a.overrideMimeType&&a.overrideMimeType(e.mimeType),e.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest"),r)a.setRequestHeader(s,r[s]);t=function(e){return function(){t&&(t=n=a.onload=a.onerror=a.onabort=a.ontimeout=a.onreadystatechange=null,"abort"===e?a.abort():"error"===e?"number"!=typeof a.status?i(0,"error"):i(a.status,a.statusText):i(Wt[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=t(),n=a.onerror=a.ontimeout=t("error"),void 0!==a.onabort?a.onabort=n:a.onreadystatechange=function(){4===a.readyState&&o.setTimeout((function(){t&&n()}))},t=t("abort");try{a.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}})),C.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),C.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return C.globalEval(e),e}}}),C.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),C.ajaxTransport("script",(function(e){var t,n;if(e.crossDomain||e.scriptAttrs)return{send:function(o,r){t=C("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&r("error"===e.type?404:200,e.type)}),b.head.appendChild(t[0])},abort:function(){n&&n()}}}));var Jt,Kt=[],Gt=/(=)\?(?=&|$)|\?\?/;C.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Kt.pop()||C.expando+"_"+Et.guid++;return this[e]=!0,e}}),C.ajaxPrefilter("json jsonp",(function(e,t,n){var r,i,s,a=!1!==e.jsonp&&(Gt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Gt.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return r=e.jsonpCallback=v(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(Gt,"$1"+r):!1!==e.jsonp&&(e.url+=(kt.test(e.url)?"&":"?")+e.jsonp+"="+r),e.converters["script json"]=function(){return s||C.error(r+" was not called"),s[0]},e.dataTypes[0]="json",i=o[r],o[r]=function(){s=arguments},n.always((function(){void 0===i?C(o).removeProp(r):o[r]=i,e[r]&&(e.jsonpCallback=t.jsonpCallback,Kt.push(r)),s&&v(i)&&i(s[0]),s=i=void 0})),"script"})),g.createHTMLDocument=((Jt=b.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Jt.childNodes.length),C.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(g.createHTMLDocument?((o=(t=b.implementation.createHTMLDocument("")).createElement("base")).href=b.location.href,t.head.appendChild(o)):t=b),i=!n&&[],(r=P.exec(e))?[t.createElement(r[1])]:(r=we([e],t,i),i&&i.length&&C(i).remove(),C.merge([],r.childNodes)));var o,r,i},C.fn.load=function(e,t,n){var o,r,i,s=this,a=e.indexOf(" ");return a>-1&&(o=bt(e.slice(a)),e=e.slice(0,a)),v(t)?(n=t,t=void 0):t&&"object"==typeof t&&(r="POST"),s.length>0&&C.ajax({url:e,type:r||"GET",dataType:"html",data:t}).done((function(e){i=arguments,s.html(o?C("<div>").append(C.parseHTML(e)).find(o):e)})).always(n&&function(e,t){s.each((function(){n.apply(this,i||[e.responseText,t,e])}))}),this},C.expr.pseudos.animated=function(e){return C.grep(C.timers,(function(t){return e===t.elem})).length},C.offset={setOffset:function(e,t,n){var o,r,i,s,a,l,c=C.css(e,"position"),u=C(e),d={};"static"===c&&(e.style.position="relative"),a=u.offset(),i=C.css(e,"top"),l=C.css(e,"left"),("absolute"===c||"fixed"===c)&&(i+l).indexOf("auto")>-1?(s=(o=u.position()).top,r=o.left):(s=parseFloat(i)||0,r=parseFloat(l)||0),v(t)&&(t=t.call(e,n,C.extend({},a))),null!=t.top&&(d.top=t.top-a.top+s),null!=t.left&&(d.left=t.left-a.left+r),"using"in t?t.using.call(e,d):u.css(d)}},C.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(t){C.offset.setOffset(this,e,t)}));var t,n,o=this[0];return o?o.getClientRects().length?(t=o.getBoundingClientRect(),n=o.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,o=this[0],r={top:0,left:0};if("fixed"===C.css(o,"position"))t=o.getBoundingClientRect();else{for(t=this.offset(),n=o.ownerDocument,e=o.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===C.css(e,"position");)e=e.parentNode;e&&e!==o&&1===e.nodeType&&((r=C(e).offset()).top+=C.css(e,"borderTopWidth",!0),r.left+=C.css(e,"borderLeftWidth",!0))}return{top:t.top-r.top-C.css(o,"marginTop",!0),left:t.left-r.left-C.css(o,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===C.css(e,"position");)e=e.offsetParent;return e||se}))}}),C.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,t){var n="pageYOffset"===t;C.fn[e]=function(o){return z(this,(function(e,o,r){var i;if(y(e)?i=e:9===e.nodeType&&(i=e.defaultView),void 0===r)return i?i[t]:e[o];i?i.scrollTo(n?i.pageXOffset:r,n?r:i.pageYOffset):e[o]=r}),e,o,arguments.length)}})),C.each(["top","left"],(function(e,t){C.cssHooks[t]=Je(g.pixelPosition,(function(e,n){if(n)return n=Ye(e,t),Le.test(n)?C(e).position()[t]+"px":n}))})),C.each({Height:"height",Width:"width"},(function(e,t){C.each({padding:"inner"+e,content:t,"":"outer"+e},(function(n,o){C.fn[o]=function(r,i){var s=arguments.length&&(n||"boolean"!=typeof r),a=n||(!0===r||!0===i?"margin":"border");return z(this,(function(t,n,r){var i;return y(t)?0===o.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(i=t.documentElement,Math.max(t.body["scroll"+e],i["scroll"+e],t.body["offset"+e],i["offset"+e],i["client"+e])):void 0===r?C.css(t,n,a):C.style(t,n,r,a)}),t,s?r:void 0,s)}}))})),C.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,t){C.fn[t]=function(e){return this.on(t,e)}})),C.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,o){return this.on(t,e,n,o)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),C.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,t){C.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}));var Xt=/^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;C.proxy=function(e,t){var n,o,r;if("string"==typeof t&&(n=e[t],t=e,e=n),v(e))return o=a.call(arguments,2),r=function(){return e.apply(t||this,o.concat(a.call(arguments)))},r.guid=e.guid=e.guid||C.guid++,r},C.holdReady=function(e){e?C.readyWait++:C.ready(!0)},C.isArray=Array.isArray,C.parseJSON=JSON.parse,C.nodeName=R,C.isFunction=v,C.isWindow=y,C.camelCase=K,C.type=x,C.now=Date.now,C.isNumeric=function(e){var t=C.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},C.trim=function(e){return null==e?"":(e+"").replace(Xt,"$1")},void 0===(n=function(){return C}.apply(t,[]))||(e.exports=n);var Qt=o.jQuery,Zt=o.$;return C.noConflict=function(e){return o.$===C&&(o.$=Zt),e&&o.jQuery===C&&(o.jQuery=Qt),C},void 0===r&&(o.jQuery=o.$=C),C}))},"./node_modules/vue-loader/dist/exportHelper.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=(e,t)=>{const n=e.__vccOpts||e;for(const[e,o]of t)n[e]=o;return n}},"./src/js-modules/Catalog-products.vue":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var o=n("./src/js-modules/Catalog-products.vue?vue&type=template&id=7f0766fb"),r=n("./src/js-modules/Catalog-products.vue?vue&type=script&lang=js");n("./src/js-modules/Catalog-products.vue?vue&type=style&index=0&id=7f0766fb&lang=scss");const i=(0,n("./node_modules/vue-loader/dist/exportHelper.js").default)(r.default,[["render",o.render],["__file","src/js-modules/Catalog-products.vue"]])},"./src/js-modules/Product-count.vue":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var o=n("./src/js-modules/Product-count.vue?vue&type=template&id=dc4a7e44"),r=n("./src/js-modules/Product-count.vue?vue&type=script&lang=js");n("./src/js-modules/Product-count.vue?vue&type=style&index=0&id=dc4a7e44&lang=scss");const i=(0,n("./node_modules/vue-loader/dist/exportHelper.js").default)(r.default,[["render",o.render],["__file","src/js-modules/Product-count.vue"]])},"./src/js-modules/Product-details.vue":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var o=n("./src/js-modules/Product-details.vue?vue&type=template&id=4dc3825e"),r=n("./src/js-modules/Product-details.vue?vue&type=script&lang=js");n("./src/js-modules/Product-details.vue?vue&type=style&index=0&id=4dc3825e&lang=scss");const i=(0,n("./node_modules/vue-loader/dist/exportHelper.js").default)(r.default,[["render",o.render],["__file","src/js-modules/Product-details.vue"]])},"./src/js-modules/Catalog-products.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o.default});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./src/js-modules/Catalog-products.vue?vue&type=script&lang=js")},"./src/js-modules/Product-count.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o.default});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./src/js-modules/Product-count.vue?vue&type=script&lang=js")},"./src/js-modules/Product-details.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o.default});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./src/js-modules/Product-details.vue?vue&type=script&lang=js")},"./src/js-modules/Catalog-products.vue?vue&type=template&id=7f0766fb":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>o.render});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[3]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./src/js-modules/Catalog-products.vue?vue&type=template&id=7f0766fb")},"./src/js-modules/Product-count.vue?vue&type=template&id=dc4a7e44":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>o.render});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[3]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./src/js-modules/Product-count.vue?vue&type=template&id=dc4a7e44")},"./src/js-modules/Product-details.vue?vue&type=template&id=4dc3825e":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>o.render});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[3]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./src/js-modules/Product-details.vue?vue&type=template&id=4dc3825e")},"./src/js-modules/Catalog-products.vue?vue&type=style&index=0&id=7f0766fb&lang=scss":(e,t,n)=>{"use strict";n.r(t);var o=n("./node_modules/vue-style-loader/index.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./src/js-modules/Catalog-products.vue?vue&type=style&index=0&id=7f0766fb&lang=scss"),r={};for(const e in o)"default"!==e&&(r[e]=()=>o[e]);n.d(t,r)},"./src/js-modules/Product-count.vue?vue&type=style&index=0&id=dc4a7e44&lang=scss":(e,t,n)=>{"use strict";n.r(t);var o=n("./node_modules/vue-style-loader/index.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./src/js-modules/Product-count.vue?vue&type=style&index=0&id=dc4a7e44&lang=scss"),r={};for(const e in o)"default"!==e&&(r[e]=()=>o[e]);n.d(t,r)},"./src/js-modules/Product-details.vue?vue&type=style&index=0&id=4dc3825e&lang=scss":(e,t,n)=>{"use strict";n.r(t);var o=n("./node_modules/vue-style-loader/index.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./src/js-modules/Product-details.vue?vue&type=style&index=0&id=4dc3825e&lang=scss"),r={};for(const e in o)"default"!==e&&(r[e]=()=>o[e]);n.d(t,r)},"./node_modules/vue-style-loader/index.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./src/js-modules/Catalog-products.vue?vue&type=style&index=0&id=7f0766fb&lang=scss":(e,t,n)=>{var o=n("./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./src/js-modules/Catalog-products.vue?vue&type=style&index=0&id=7f0766fb&lang=scss");o.__esModule&&(o=o.default),"string"==typeof o&&(o=[[e.id,o,""]]),o.locals&&(e.exports=o.locals);(0,n("./node_modules/vue-style-loader/lib/addStylesClient.js").default)("36c87d58",o,!1,{})},"./node_modules/vue-style-loader/index.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./src/js-modules/Product-count.vue?vue&type=style&index=0&id=dc4a7e44&lang=scss":(e,t,n)=>{var o=n("./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./src/js-modules/Product-count.vue?vue&type=style&index=0&id=dc4a7e44&lang=scss");o.__esModule&&(o=o.default),"string"==typeof o&&(o=[[e.id,o,""]]),o.locals&&(e.exports=o.locals);(0,n("./node_modules/vue-style-loader/lib/addStylesClient.js").default)("16abb71a",o,!1,{})},"./node_modules/vue-style-loader/index.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./src/js-modules/Product-details.vue?vue&type=style&index=0&id=4dc3825e&lang=scss":(e,t,n)=>{var o=n("./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[9].use[0]!./src/js-modules/Product-details.vue?vue&type=style&index=0&id=4dc3825e&lang=scss");o.__esModule&&(o=o.default),"string"==typeof o&&(o=[[e.id,o,""]]),o.locals&&(e.exports=o.locals);(0,n("./node_modules/vue-style-loader/lib/addStylesClient.js").default)("56ed3860",o,!1,{})},"./node_modules/vue-style-loader/lib/addStylesClient.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>h});var o=n("./node_modules/vue-style-loader/lib/listToStyles.js"),r="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!r)throw new Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var i={},s=r&&(document.head||document.getElementsByTagName("head")[0]),a=null,l=0,c=!1,u=function(){},d=null,p="data-vue-ssr-id",f="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());function h(e,t,n,r){c=n,d=r||{};var s=(0,o.default)(e,t);return m(s),function(t){for(var n=[],r=0;r<s.length;r++){var a=s[r];(l=i[a.id]).refs--,n.push(l)}t?m(s=(0,o.default)(e,t)):s=[];for(r=0;r<n.length;r++){var l;if(0===(l=n[r]).refs){for(var c=0;c<l.parts.length;c++)l.parts[c]();delete i[l.id]}}}}function m(e){for(var t=0;t<e.length;t++){var n=e[t],o=i[n.id];if(o){o.refs++;for(var r=0;r<o.parts.length;r++)o.parts[r](n.parts[r]);for(;r<n.parts.length;r++)o.parts.push(v(n.parts[r]));o.parts.length>n.parts.length&&(o.parts.length=n.parts.length)}else{var s=[];for(r=0;r<n.parts.length;r++)s.push(v(n.parts[r]));i[n.id]={id:n.id,refs:1,parts:s}}}}function g(){var e=document.createElement("style");return e.type="text/css",s.appendChild(e),e}function v(e){var t,n,o=document.querySelector("style["+p+'~="'+e.id+'"]');if(o){if(c)return u;o.parentNode.removeChild(o)}if(f){var r=l++;o=a||(a=g()),t=A.bind(null,o,r,!1),n=A.bind(null,o,r,!0)}else o=g(),t=_.bind(null,o),n=function(){o.parentNode.removeChild(o)};return t(e),function(o){if(o){if(o.css===e.css&&o.media===e.media&&o.sourceMap===e.sourceMap)return;t(e=o)}else n()}}var y,b=(y=[],function(e,t){return y[e]=t,y.filter(Boolean).join("\n")});function A(e,t,n,o){var r=n?"":o.css;if(e.styleSheet)e.styleSheet.cssText=b(t,r);else{var i=document.createTextNode(r),s=e.childNodes;s[t]&&e.removeChild(s[t]),s.length?e.insertBefore(i,s[t]):e.appendChild(i)}}function _(e,t){var n=t.css,o=t.media,r=t.sourceMap;if(o&&e.setAttribute("media",o),d.ssrId&&e.setAttribute(p,t.id),r&&(n+="\n/*# sourceURL="+r.sources[0]+" */",n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */"),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},"./node_modules/vue-style-loader/lib/listToStyles.js":(e,t,n)=>{"use strict";function o(e,t){for(var n=[],o={},r=0;r<t.length;r++){var i=t[r],s=i[0],a={id:e+":"+r,css:i[1],media:i[2],sourceMap:i[3]};o[s]?o[s].parts.push(a):n.push(o[s]={id:s,parts:[a]})}return n}n.r(t),n.d(t,{default:()=>o})},"./node_modules/vue/dist/vue.runtime.esm-bundler.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{BaseTransition:()=>r.BaseTransition,BaseTransitionPropsValidators:()=>r.BaseTransitionPropsValidators,Comment:()=>r.Comment,EffectScope:()=>r.EffectScope,Fragment:()=>r.Fragment,KeepAlive:()=>r.KeepAlive,ReactiveEffect:()=>r.ReactiveEffect,Static:()=>r.Static,Suspense:()=>r.Suspense,Teleport:()=>r.Teleport,Text:()=>r.Text,Transition:()=>r.Transition,TransitionGroup:()=>r.TransitionGroup,VueElement:()=>r.VueElement,assertNumber:()=>r.assertNumber,callWithAsyncErrorHandling:()=>r.callWithAsyncErrorHandling,callWithErrorHandling:()=>r.callWithErrorHandling,camelize:()=>r.camelize,capitalize:()=>r.capitalize,cloneVNode:()=>r.cloneVNode,compatUtils:()=>r.compatUtils,compile:()=>i,computed:()=>r.computed,createApp:()=>r.createApp,createBlock:()=>r.createBlock,createCommentVNode:()=>r.createCommentVNode,createElementBlock:()=>r.createElementBlock,createElementVNode:()=>r.createElementVNode,createHydrationRenderer:()=>r.createHydrationRenderer,createPropsRestProxy:()=>r.createPropsRestProxy,createRenderer:()=>r.createRenderer,createSSRApp:()=>r.createSSRApp,createSlots:()=>r.createSlots,createStaticVNode:()=>r.createStaticVNode,createTextVNode:()=>r.createTextVNode,createVNode:()=>r.createVNode,customRef:()=>r.customRef,defineAsyncComponent:()=>r.defineAsyncComponent,defineComponent:()=>r.defineComponent,defineCustomElement:()=>r.defineCustomElement,defineEmits:()=>r.defineEmits,defineExpose:()=>r.defineExpose,defineModel:()=>r.defineModel,defineOptions:()=>r.defineOptions,defineProps:()=>r.defineProps,defineSSRCustomElement:()=>r.defineSSRCustomElement,defineSlots:()=>r.defineSlots,devtools:()=>r.devtools,effect:()=>r.effect,effectScope:()=>r.effectScope,getCurrentInstance:()=>r.getCurrentInstance,getCurrentScope:()=>r.getCurrentScope,getTransitionRawChildren:()=>r.getTransitionRawChildren,guardReactiveProps:()=>r.guardReactiveProps,h:()=>r.h,handleError:()=>r.handleError,hasInjectionContext:()=>r.hasInjectionContext,hydrate:()=>r.hydrate,initCustomFormatter:()=>r.initCustomFormatter,initDirectivesForSSR:()=>r.initDirectivesForSSR,inject:()=>r.inject,isMemoSame:()=>r.isMemoSame,isProxy:()=>r.isProxy,isReactive:()=>r.isReactive,isReadonly:()=>r.isReadonly,isRef:()=>r.isRef,isRuntimeOnly:()=>r.isRuntimeOnly,isShallow:()=>r.isShallow,isVNode:()=>r.isVNode,markRaw:()=>r.markRaw,mergeDefaults:()=>r.mergeDefaults,mergeModels:()=>r.mergeModels,mergeProps:()=>r.mergeProps,nextTick:()=>r.nextTick,normalizeClass:()=>r.normalizeClass,normalizeProps:()=>r.normalizeProps,normalizeStyle:()=>r.normalizeStyle,onActivated:()=>r.onActivated,onBeforeMount:()=>r.onBeforeMount,onBeforeUnmount:()=>r.onBeforeUnmount,onBeforeUpdate:()=>r.onBeforeUpdate,onDeactivated:()=>r.onDeactivated,onErrorCaptured:()=>r.onErrorCaptured,onMounted:()=>r.onMounted,onRenderTracked:()=>r.onRenderTracked,onRenderTriggered:()=>r.onRenderTriggered,onScopeDispose:()=>r.onScopeDispose,onServerPrefetch:()=>r.onServerPrefetch,onUnmounted:()=>r.onUnmounted,onUpdated:()=>r.onUpdated,openBlock:()=>r.openBlock,popScopeId:()=>r.popScopeId,provide:()=>r.provide,proxyRefs:()=>r.proxyRefs,pushScopeId:()=>r.pushScopeId,queuePostFlushCb:()=>r.queuePostFlushCb,reactive:()=>r.reactive,readonly:()=>r.readonly,ref:()=>r.ref,registerRuntimeCompiler:()=>r.registerRuntimeCompiler,render:()=>r.render,renderList:()=>r.renderList,renderSlot:()=>r.renderSlot,resolveComponent:()=>r.resolveComponent,resolveDirective:()=>r.resolveDirective,resolveDynamicComponent:()=>r.resolveDynamicComponent,resolveFilter:()=>r.resolveFilter,resolveTransitionHooks:()=>r.resolveTransitionHooks,setBlockTracking:()=>r.setBlockTracking,setDevtoolsHook:()=>r.setDevtoolsHook,setTransitionHooks:()=>r.setTransitionHooks,shallowReactive:()=>r.shallowReactive,shallowReadonly:()=>r.shallowReadonly,shallowRef:()=>r.shallowRef,ssrContextKey:()=>r.ssrContextKey,ssrUtils:()=>r.ssrUtils,stop:()=>r.stop,toDisplayString:()=>r.toDisplayString,toHandlerKey:()=>r.toHandlerKey,toHandlers:()=>r.toHandlers,toRaw:()=>r.toRaw,toRef:()=>r.toRef,toRefs:()=>r.toRefs,toValue:()=>r.toValue,transformVNodeArgs:()=>r.transformVNodeArgs,triggerRef:()=>r.triggerRef,unref:()=>r.unref,useAttrs:()=>r.useAttrs,useCssModule:()=>r.useCssModule,useCssVars:()=>r.useCssVars,useModel:()=>r.useModel,useSSRContext:()=>r.useSSRContext,useSlots:()=>r.useSlots,useTransitionState:()=>r.useTransitionState,vModelCheckbox:()=>r.vModelCheckbox,vModelDynamic:()=>r.vModelDynamic,vModelRadio:()=>r.vModelRadio,vModelSelect:()=>r.vModelSelect,vModelText:()=>r.vModelText,vShow:()=>r.vShow,version:()=>r.version,warn:()=>r.warn,watch:()=>r.watch,watchEffect:()=>r.watchEffect,watchPostEffect:()=>r.watchPostEffect,watchSyncEffect:()=>r.watchSyncEffect,withAsyncContext:()=>r.withAsyncContext,withCtx:()=>r.withCtx,withDefaults:()=>r.withDefaults,withDirectives:()=>r.withDirectives,withKeys:()=>r.withKeys,withMemo:()=>r.withMemo,withModifiers:()=>r.withModifiers,withScopeId:()=>r.withScopeId});var o=n("./node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js"),r=n("./node_modules/@vue/runtime-dom/dist/runtime-dom.esm-bundler.js");(0,o.initCustomFormatter)();const i=()=>{(0,o.warn)('Runtime compilation is not supported in this build of Vue. Configure your bundler to alias "vue" to "vue/dist/vue.esm-bundler.js".')}},"data:image/svg+xml,%3Csvg xmlns=%27http://www.w3.org/2000/svg%27 viewBox=%270 0 80 80%27%3E%3Cpath d=%27M70.3 13.8L40 66.3 9.7 13.8z%27 fill=%27%23000%27%3E%3C/path%3E%3C/svg%3E":e=>{"use strict";e.exports="data:image/svg+xml,%3Csvg xmlns=%27http://www.w3.org/2000/svg%27 viewBox=%270 0 80 80%27%3E%3Cpath d=%27M70.3 13.8L40 66.3 9.7 13.8z%27 fill=%27%23000%27%3E%3C/path%3E%3C/svg%3E"},"./node_modules/pinia/dist/pinia.mjs":(e,t,n)=>{"use strict";n.r(t),n.d(t,{MutationType:()=>u,PiniaVuePlugin:()=>he,acceptHMRUpdate:()=>W,createPinia:()=>q,defineStore:()=>ie,getActivePinia:()=>a,mapActions:()=>de,mapGetters:()=>ue,mapState:()=>ce,mapStores:()=>le,mapWritableState:()=>pe,setActivePinia:()=>s,setMapStoreSuffix:()=>ae,skipHydrate:()=>ee,storeToRefs:()=>fe});var o=n("./node_modules/vue-demi/lib/index.mjs"),r=n("./node_modules/@vue/devtools-api/lib/esm/index.js");let i;const s=e=>i=e,a=()=>(0,o.hasInjectionContext)()&&(0,o.inject)(l)||i,l=Symbol("pinia");function c(e){return e&&"object"==typeof e&&"[object Object]"===Object.prototype.toString.call(e)&&"function"!=typeof e.toJSON}var u;!function(e){e.direct="direct",e.patchObject="patch object",e.patchFunction="patch function"}(u||(u={}));const d="undefined"!=typeof window,p=d,f=(()=>"object"==typeof window&&window.window===window?window:"object"==typeof self&&self.self===self?self:"object"==typeof global&&global.global===global?global:"object"==typeof globalThis?globalThis:{HTMLElement:null})();function h(e,t,n){const o=new XMLHttpRequest;o.open("GET",e),o.responseType="blob",o.onload=function(){b(o.response,t,n)},o.onerror=function(){console.error("could not download file")},o.send()}function m(e){const t=new XMLHttpRequest;t.open("HEAD",e,!1);try{t.send()}catch(e){}return t.status>=200&&t.status<=299}function g(e){try{e.dispatchEvent(new MouseEvent("click"))}catch(t){const n=document.createEvent("MouseEvents");n.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),e.dispatchEvent(n)}}const v="object"==typeof navigator?navigator:{userAgent:""},y=(()=>/Macintosh/.test(v.userAgent)&&/AppleWebKit/.test(v.userAgent)&&!/Safari/.test(v.userAgent))(),b=d?"undefined"!=typeof HTMLAnchorElement&&"download"in HTMLAnchorElement.prototype&&!y?function(e,t="download",n){const o=document.createElement("a");o.download=t,o.rel="noopener","string"==typeof e?(o.href=e,o.origin!==location.origin?m(o.href)?h(e,t,n):(o.target="_blank",g(o)):g(o)):(o.href=URL.createObjectURL(e),setTimeout((function(){URL.revokeObjectURL(o.href)}),4e4),setTimeout((function(){g(o)}),0))}:"msSaveOrOpenBlob"in v?function(e,t="download",n){if("string"==typeof e)if(m(e))h(e,t,n);else{const t=document.createElement("a");t.href=e,t.target="_blank",setTimeout((function(){g(t)}))}else navigator.msSaveOrOpenBlob(function(e,{autoBom:t=!1}={}){return t&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(e.type)?new Blob([String.fromCharCode(65279),e],{type:e.type}):e}(e,n),t)}:function(e,t,n,o){(o=o||open("","_blank"))&&(o.document.title=o.document.body.innerText="downloading...");if("string"==typeof e)return h(e,t,n);const r="application/octet-stream"===e.type,i=/constructor/i.test(String(f.HTMLElement))||"safari"in f,s=/CriOS\/[\d]+/.test(navigator.userAgent);if((s||r&&i||y)&&"undefined"!=typeof FileReader){const t=new FileReader;t.onloadend=function(){let e=t.result;if("string"!=typeof e)throw o=null,new Error("Wrong reader.result type");e=s?e:e.replace(/^data:[^;]*;/,"data:attachment/file;"),o?o.location.href=e:location.assign(e),o=null},t.readAsDataURL(e)}else{const t=URL.createObjectURL(e);o?o.location.assign(t):location.href=t,o=null,setTimeout((function(){URL.revokeObjectURL(t)}),4e4)}}:()=>{};function A(e,t){const n="🍍 "+e;"function"==typeof __VUE_DEVTOOLS_TOAST__?__VUE_DEVTOOLS_TOAST__(n,t):"error"===t?console.error(n):"warn"===t?console.warn(n):console.log(n)}function _(e){return"_a"in e&&"install"in e}function x(){if(!("clipboard"in navigator))return A("Your browser doesn't support the Clipboard API","error"),!0}function w(e){return!!(e instanceof Error&&e.message.toLowerCase().includes("document is not focused"))&&(A('You need to activate the "Emulate a focused page" setting in the "Rendering" panel of devtools.',"warn"),!0)}let C;async function S(e){try{const t=(C||(C=document.createElement("input"),C.type="file",C.accept=".json"),function(){return new Promise(((e,t)=>{C.onchange=async()=>{const t=C.files;if(!t)return e(null);const n=t.item(0);return e(n?{text:await n.text(),file:n}:null)},C.oncancel=()=>e(null),C.onerror=t,C.click()}))}),n=await t();if(!n)return;const{text:o,file:r}=n;E(e,JSON.parse(o)),A(`Global state imported from "${r.name}".`)}catch(e){A("Failed to import the state from JSON. Check the console for more details.","error"),console.error(e)}}function E(e,t){for(const n in t){const o=e.state.value[n];o&&Object.assign(o,t[n])}}function k(e){return{_custom:{display:e}}}const T="🍍 Pinia (root)",j="_root";function R(e){return _(e)?{id:j,label:T}:{id:e.$id,label:e.$id}}function P(e){return e?Array.isArray(e)?e.reduce(((e,t)=>(e.keys.push(t.key),e.operations.push(t.type),e.oldValue[t.key]=t.oldValue,e.newValue[t.key]=t.newValue,e)),{oldValue:{},keys:[],operations:[],newValue:{}}):{operation:k(e.type),key:k(e.key),oldValue:e.oldValue,newValue:e.newValue}:{}}function O(e){switch(e){case u.direct:return"mutation";case u.patchFunction:case u.patchObject:return"$patch";default:return"unknown"}}let N=!0;const B=[],D="pinia:mutations",M="pinia",{assign:F}=Object,I=e=>"🍍 "+e;function V(e,t){(0,r.setupDevtoolsPlugin)({id:"dev.esm.pinia",label:"Pinia 🍍",logo:"https://pinia.vuejs.org/logo.svg",packageName:"pinia",homepage:"https://pinia.vuejs.org",componentStateTypes:B,app:e},(n=>{"function"!=typeof n.now&&A("You seem to be using an outdated version of Vue Devtools. Are you still using the Beta release instead of the stable one? You can find the links at https://devtools.vuejs.org/guide/installation.html."),n.addTimelineLayer({id:D,label:"Pinia 🍍",color:15064968}),n.addInspector({id:M,label:"Pinia 🍍",icon:"storage",treeFilterPlaceholder:"Search stores",actions:[{icon:"content_copy",action:()=>{!async function(e){if(!x())try{await navigator.clipboard.writeText(JSON.stringify(e.state.value)),A("Global state copied to clipboard.")}catch(e){if(w(e))return;A("Failed to serialize the state. Check the console for more details.","error"),console.error(e)}}(t)},tooltip:"Serialize and copy the state"},{icon:"content_paste",action:async()=>{await async function(e){if(!x())try{E(e,JSON.parse(await navigator.clipboard.readText())),A("Global state pasted from clipboard.")}catch(e){if(w(e))return;A("Failed to deserialize the state from clipboard. Check the console for more details.","error"),console.error(e)}}(t),n.sendInspectorTree(M),n.sendInspectorState(M)},tooltip:"Replace the state with the content of your clipboard"},{icon:"save",action:()=>{!async function(e){try{b(new Blob([JSON.stringify(e.state.value)],{type:"text/plain;charset=utf-8"}),"pinia-state.json")}catch(e){A("Failed to export the state as JSON. Check the console for more details.","error"),console.error(e)}}(t)},tooltip:"Save the state as a JSON file"},{icon:"folder_open",action:async()=>{await S(t),n.sendInspectorTree(M),n.sendInspectorState(M)},tooltip:"Import the state from a JSON file"}],nodeActions:[{icon:"restore",tooltip:'Reset the state (with "$reset")',action:e=>{const n=t._s.get(e);n?"function"!=typeof n.$reset?A(`Cannot reset "${e}" store because it doesn't have a "$reset" method implemented.`,"warn"):(n.$reset(),A(`Store "${e}" reset.`)):A(`Cannot reset "${e}" store because it wasn't found.`,"warn")}}]}),n.on.inspectComponent(((e,t)=>{const n=e.componentInstance&&e.componentInstance.proxy;if(n&&n._pStores){const t=e.componentInstance.proxy._pStores;Object.values(t).forEach((t=>{e.instanceData.state.push({type:I(t.$id),key:"state",editable:!0,value:t._isOptionsAPI?{_custom:{value:(0,o.toRaw)(t.$state),actions:[{icon:"restore",tooltip:"Reset the state of this store",action:()=>t.$reset()}]}}:Object.keys(t.$state).reduce(((e,n)=>(e[n]=t.$state[n],e)),{})}),t._getters&&t._getters.length&&e.instanceData.state.push({type:I(t.$id),key:"getters",editable:!1,value:t._getters.reduce(((e,n)=>{try{e[n]=t[n]}catch(t){e[n]=t}return e}),{})})}))}})),n.on.getInspectorTree((n=>{if(n.app===e&&n.inspectorId===M){let e=[t];e=e.concat(Array.from(t._s.values())),n.rootNodes=(n.filter?e.filter((e=>"$id"in e?e.$id.toLowerCase().includes(n.filter.toLowerCase()):T.toLowerCase().includes(n.filter.toLowerCase()))):e).map(R)}})),n.on.getInspectorState((n=>{if(n.app===e&&n.inspectorId===M){const e=n.nodeId===j?t:t._s.get(n.nodeId);if(!e)return;e&&(n.state=function(e){if(_(e)){const t=Array.from(e._s.keys()),n=e._s,o={state:t.map((t=>({editable:!0,key:t,value:e.state.value[t]}))),getters:t.filter((e=>n.get(e)._getters)).map((e=>{const t=n.get(e);return{editable:!1,key:e,value:t._getters.reduce(((e,n)=>(e[n]=t[n],e)),{})}}))};return o}const t={state:Object.keys(e.$state).map((t=>({editable:!0,key:t,value:e.$state[t]})))};return e._getters&&e._getters.length&&(t.getters=e._getters.map((t=>({editable:!1,key:t,value:e[t]})))),e._customProperties.size&&(t.customProperties=Array.from(e._customProperties).map((t=>({editable:!0,key:t,value:e[t]})))),t}(e))}})),n.on.editInspectorState(((n,o)=>{if(n.app===e&&n.inspectorId===M){const e=n.nodeId===j?t:t._s.get(n.nodeId);if(!e)return A(`store "${n.nodeId}" not found`,"error");const{path:o}=n;_(e)?o.unshift("state"):1===o.length&&e._customProperties.has(o[0])&&!(o[0]in e.$state)||o.unshift("$state"),N=!1,n.set(e,o,n.state.value),N=!0}})),n.on.editComponentState((e=>{if(e.type.startsWith("🍍")){const n=e.type.replace(/^🍍\s*/,""),o=t._s.get(n);if(!o)return A(`store "${n}" not found`,"error");const{path:r}=e;if("state"!==r[0])return A(`Invalid path for store "${n}":\n${r}\nOnly state can be modified.`);r[0]="$state",N=!1,e.set(o,r,e.state.value),N=!0}}))}))}let L,$=0;function H(e,t,n){const r=t.reduce(((t,n)=>(t[n]=(0,o.toRaw)(e)[n],t)),{});for(const t in r)e[t]=function(){const o=$,i=n?new Proxy(e,{get:(...e)=>(L=o,Reflect.get(...e)),set:(...e)=>(L=o,Reflect.set(...e))}):e;L=o;const s=r[t].apply(i,arguments);return L=void 0,s}}function U({app:e,store:t,options:n}){if(t.$id.startsWith("__hot:"))return;t._isOptionsAPI=!!n.state,H(t,Object.keys(n.actions),t._isOptionsAPI);const i=t._hotUpdate;(0,o.toRaw)(t)._hotUpdate=function(e){i.apply(this,arguments),H(t,Object.keys(e._hmrPayload.actions),!!t._isOptionsAPI)},function(e,t){B.includes(I(t.$id))||B.push(I(t.$id)),(0,r.setupDevtoolsPlugin)({id:"dev.esm.pinia",label:"Pinia 🍍",logo:"https://pinia.vuejs.org/logo.svg",packageName:"pinia",homepage:"https://pinia.vuejs.org",componentStateTypes:B,app:e,settings:{logStoreChanges:{label:"Notify about new/deleted stores",type:"boolean",defaultValue:!0}}},(e=>{const n="function"==typeof e.now?e.now.bind(e):Date.now;t.$onAction((({after:o,onError:r,name:i,args:s})=>{const a=$++;e.addTimelineEvent({layerId:D,event:{time:n(),title:"🛫 "+i,subtitle:"start",data:{store:k(t.$id),action:k(i),args:s},groupId:a}}),o((o=>{L=void 0,e.addTimelineEvent({layerId:D,event:{time:n(),title:"🛬 "+i,subtitle:"end",data:{store:k(t.$id),action:k(i),args:s,result:o},groupId:a}})})),r((o=>{L=void 0,e.addTimelineEvent({layerId:D,event:{time:n(),logType:"error",title:"💥 "+i,subtitle:"end",data:{store:k(t.$id),action:k(i),args:s,error:o},groupId:a}})}))}),!0),t._customProperties.forEach((r=>{(0,o.watch)((()=>(0,o.unref)(t[r])),((t,o)=>{e.notifyComponentUpdate(),e.sendInspectorState(M),N&&e.addTimelineEvent({layerId:D,event:{time:n(),title:"Change",subtitle:r,data:{newValue:t,oldValue:o},groupId:L}})}),{deep:!0})})),t.$subscribe((({events:o,type:r},i)=>{if(e.notifyComponentUpdate(),e.sendInspectorState(M),!N)return;const s={time:n(),title:O(r),data:F({store:k(t.$id)},P(o)),groupId:L};r===u.patchFunction?s.subtitle="⤵️":r===u.patchObject?s.subtitle="🧩":o&&!Array.isArray(o)&&(s.subtitle=o.type),o&&(s.data["rawEvent(s)"]={_custom:{display:"DebuggerEvent",type:"object",tooltip:"raw DebuggerEvent[]",value:o}}),e.addTimelineEvent({layerId:D,event:s})}),{detached:!0,flush:"sync"});const r=t._hotUpdate;t._hotUpdate=(0,o.markRaw)((o=>{r(o),e.addTimelineEvent({layerId:D,event:{time:n(),title:"🔥 "+t.$id,subtitle:"HMR update",data:{store:k(t.$id),info:k("HMR update")}}}),e.notifyComponentUpdate(),e.sendInspectorTree(M),e.sendInspectorState(M)}));const{$dispose:i}=t;t.$dispose=()=>{i(),e.notifyComponentUpdate(),e.sendInspectorTree(M),e.sendInspectorState(M),e.getSettings().logStoreChanges&&A(`Disposed "${t.$id}" store 🗑`)},e.notifyComponentUpdate(),e.sendInspectorTree(M),e.sendInspectorState(M),e.getSettings().logStoreChanges&&A(`"${t.$id}" store installed 🆕`)}))}(e,t)}function q(){const e=(0,o.effectScope)(!0),t=e.run((()=>(0,o.ref)({})));let n=[],r=[];const i=(0,o.markRaw)({install(e){s(i),o.isVue2||(i._a=e,e.provide(l,i),e.config.globalProperties.$pinia=i,p&&V(e,i),r.forEach((e=>n.push(e))),r=[])},use(e){return this._a||o.isVue2?n.push(e):r.push(e),this},_p:n,_a:null,_e:e,_s:new Map,state:t});return p&&"undefined"!=typeof Proxy&&i.use(U),i}function z(e,t){for(const n in t){const r=t[n];if(!(n in e))continue;const i=e[n];c(i)&&c(r)&&!(0,o.isRef)(r)&&!(0,o.isReactive)(r)?e[n]=z(i,r):o.isVue2?(0,o.set)(e,n,r):e[n]=r}return e}function W(e,t){return n=>{const o=t.data.pinia||e._pinia;if(o){t.data.pinia=o;for(const i in n){const s=n[i];if("function"==typeof(r=s)&&"string"==typeof r.$id&&o._s.has(s.$id)){const n=s.$id;if(n!==e.$id)return console.warn(`The id of the store changed from "${e.$id}" to "${n}". Reloading.`),t.invalidate();const r=o._s.get(n);if(!r)return void console.log("[Pinia]: skipping hmr because store doesn't exist yet");s(o,r)}}var r}}}const Y=()=>{};function J(e,t,n,r=Y){e.push(t);const i=()=>{const n=e.indexOf(t);n>-1&&(e.splice(n,1),r())};return!n&&(0,o.getCurrentScope)()&&(0,o.onScopeDispose)(i),i}function K(e,...t){e.slice().forEach((e=>{e(...t)}))}const G=e=>e();function X(e,t){e instanceof Map&&t instanceof Map&&t.forEach(((t,n)=>e.set(n,t))),e instanceof Set&&t instanceof Set&&t.forEach(e.add,e);for(const n in t){if(!t.hasOwnProperty(n))continue;const r=t[n],i=e[n];c(i)&&c(r)&&e.hasOwnProperty(n)&&!(0,o.isRef)(r)&&!(0,o.isReactive)(r)?e[n]=X(i,r):e[n]=r}return e}const Q=Symbol("pinia:skipHydration"),Z=new WeakMap;function ee(e){return o.isVue2?Z.set(e,1)&&e:Object.defineProperty(e,Q,{})}const{assign:te}=Object;function ne(e){return!(!(0,o.isRef)(e)||!e.effect)}function oe(e,t,n,r){const{state:i,actions:a,getters:l}=t,c=n.state.value[e];let u;return u=re(e,(function(){c||r||(o.isVue2?(0,o.set)(n.state.value,e,i?i():{}):n.state.value[e]=i?i():{});const t=r?(0,o.toRefs)((0,o.ref)(i?i():{}).value):(0,o.toRefs)(n.state.value[e]);return te(t,a,Object.keys(l||{}).reduce(((r,i)=>(i in t&&console.warn(`[🍍]: A getter cannot have the same name as another state property. Rename one of them. Found with "${i}" in store "${e}".`),r[i]=(0,o.markRaw)((0,o.computed)((()=>{s(n);const t=n._s.get(e);if(!o.isVue2||t._r)return l[i].call(t,t)}))),r)),{}))}),t,n,r,!0),u}function re(e,t,n={},r,i,a){let l;const f=te({actions:{}},n);if(!r._e.active)throw new Error("Pinia destroyed");const h={deep:!0};let m,g;o.isVue2||(h.onTrigger=e=>{m?v=e:0!=m||T._hotUpdating||(Array.isArray(v)?v.push(e):console.error("🍍 debuggerEvents should be an array. This is most likely an internal Pinia bug."))});let v,y=[],b=[];const A=r.state.value[e];a||A||i||(o.isVue2?(0,o.set)(r.state.value,e,{}):r.state.value[e]={});const _=(0,o.ref)({});let x;function w(t){let n;m=g=!1,v=[],"function"==typeof t?(t(r.state.value[e]),n={type:u.patchFunction,storeId:e,events:v}):(X(r.state.value[e],t),n={type:u.patchObject,payload:t,storeId:e,events:v});const i=x=Symbol();(0,o.nextTick)().then((()=>{x===i&&(m=!0)})),g=!0,K(y,n,r.state.value[e])}const C=a?function(){const{state:e}=n,t=e?e():{};this.$patch((e=>{te(e,t)}))}:()=>{throw new Error(`🍍: Store "${e}" is built using the setup syntax and does not implement $reset().`)};function S(t,n){return function(){s(r);const o=Array.from(arguments),i=[],a=[];function l(e){i.push(e)}function c(e){a.push(e)}let u;K(b,{args:o,name:t,store:T,after:l,onError:c});try{u=n.apply(this&&this.$id===e?this:T,o)}catch(e){throw K(a,e),e}return u instanceof Promise?u.then((e=>(K(i,e),e))).catch((e=>(K(a,e),Promise.reject(e)))):(K(i,u),u)}}const E=(0,o.markRaw)({actions:{},getters:{},state:[],hotState:_}),k={_p:r,$id:e,$onAction:J.bind(null,b),$patch:w,$reset:C,$subscribe(t,n={}){const i=J(y,t,n.detached,(()=>s())),s=l.run((()=>(0,o.watch)((()=>r.state.value[e]),(o=>{("sync"===n.flush?g:m)&&t({storeId:e,type:u.direct,events:v},o)}),te({},h,n))));return i},$dispose:function(){l.stop(),y=[],b=[],r._s.delete(e)}};o.isVue2&&(k._r=!1);const T=(0,o.reactive)(te({_hmrPayload:E,_customProperties:(0,o.markRaw)(new Set)},k));r._s.set(e,T);const j=r._a&&r._a.runWithContext||G,R=r._e.run((()=>(l=(0,o.effectScope)(),j((()=>l.run(t))))));for(const t in R){const s=R[t];if((0,o.isRef)(s)&&!ne(s)||(0,o.isReactive)(s))i?(0,o.set)(_.value,t,(0,o.toRef)(R,t)):a||(!A||(P=s,o.isVue2?Z.has(P):c(P)&&P.hasOwnProperty(Q))||((0,o.isRef)(s)?s.value=A[t]:X(s,A[t])),o.isVue2?(0,o.set)(r.state.value[e],t,s):r.state.value[e][t]=s),E.state.push(t);else if("function"==typeof s){const e=i?s:S(t,s);o.isVue2?(0,o.set)(R,t,e):R[t]=e,E.actions[t]=s,f.actions[t]=s}else if(ne(s)&&(E.getters[t]=a?n.getters[t]:s,d)){(R._getters||(R._getters=(0,o.markRaw)([]))).push(t)}}var P;if(o.isVue2?Object.keys(R).forEach((e=>{(0,o.set)(T,e,R[e])})):(te(T,R),te((0,o.toRaw)(T),R)),Object.defineProperty(T,"$state",{get:()=>i?_.value:r.state.value[e],set:e=>{if(i)throw new Error("cannot set hotState");w((t=>{te(t,e)}))}}),T._hotUpdate=(0,o.markRaw)((t=>{T._hotUpdating=!0,t._hmrPayload.state.forEach((e=>{if(e in T.$state){const n=t.$state[e],o=T.$state[e];"object"==typeof n&&c(n)&&c(o)?z(n,o):t.$state[e]=o}(0,o.set)(T,e,(0,o.toRef)(t.$state,e))})),Object.keys(T.$state).forEach((e=>{e in t.$state||(0,o.del)(T,e)})),m=!1,g=!1,r.state.value[e]=(0,o.toRef)(t._hmrPayload,"hotState"),g=!0,(0,o.nextTick)().then((()=>{m=!0}));for(const e in t._hmrPayload.actions){const n=t[e];(0,o.set)(T,e,S(e,n))}for(const e in t._hmrPayload.getters){const n=t._hmrPayload.getters[e],i=a?(0,o.computed)((()=>(s(r),n.call(T,T)))):n;(0,o.set)(T,e,i)}Object.keys(T._hmrPayload.getters).forEach((e=>{e in t._hmrPayload.getters||(0,o.del)(T,e)})),Object.keys(T._hmrPayload.actions).forEach((e=>{e in t._hmrPayload.actions||(0,o.del)(T,e)})),T._hmrPayload=t._hmrPayload,T._getters=t._getters,T._hotUpdating=!1})),p){const e={writable:!0,configurable:!0,enumerable:!1};["_p","_hmrPayload","_getters","_customProperties"].forEach((t=>{Object.defineProperty(T,t,te({value:T[t]},e))}))}return o.isVue2&&(T._r=!0),r._p.forEach((e=>{if(p){const t=l.run((()=>e({store:T,app:r._a,pinia:r,options:f})));Object.keys(t||{}).forEach((e=>T._customProperties.add(e))),te(T,t)}else te(T,l.run((()=>e({store:T,app:r._a,pinia:r,options:f}))))})),T.$state&&"object"==typeof T.$state&&"function"==typeof T.$state.constructor&&!T.$state.constructor.toString().includes("[native code]")&&console.warn(`[🍍]: The "state" must be a plain object. It cannot be\n\tstate: () => new MyClass()\nFound in store "${T.$id}".`),A&&a&&n.hydrate&&n.hydrate(T.$state,A),m=!0,g=!0,T}function ie(e,t,n){let r,a;const c="function"==typeof t;if("string"==typeof e)r=e,a=c?n:t;else if(a=e,r=e.id,"string"!=typeof r)throw new Error('[🍍]: "defineStore()" must be passed a store id as its first argument.');function u(e,n){const p=(0,o.hasInjectionContext)();if((e=e||(p?(0,o.inject)(l,null):null))&&s(e),!i)throw new Error('[🍍]: "getActivePinia()" was called but there was no active Pinia. Did you forget to install pinia?\n\tconst pinia = createPinia()\n\tapp.use(pinia)\nThis will fail in production.');(e=i)._s.has(r)||(c?re(r,t,a,e):oe(r,a,e),u._pinia=e);const f=e._s.get(r);if(n){const o="__hot:"+r,i=c?re(o,t,a,e,!0):oe(o,te({},a),e,!0);n._hotUpdate(i),delete e.state.value[o],e._s.delete(o)}if(d){const e=(0,o.getCurrentInstance)();if(e&&e.proxy&&!n){const t=e.proxy;("_pStores"in t?t._pStores:t._pStores={})[r]=f}}return f}return u.$id=r,u}let se="Store";function ae(e){se=e}function le(...e){return Array.isArray(e[0])&&(console.warn('[🍍]: Directly pass all stores to "mapStores()" without putting them in an array:\nReplace\n\tmapStores([useAuthStore, useCartStore])\nwith\n\tmapStores(useAuthStore, useCartStore)\nThis will fail in production if not fixed.'),e=e[0]),e.reduce(((e,t)=>(e[t.$id+se]=function(){return t(this.$pinia)},e)),{})}function ce(e,t){return Array.isArray(t)?t.reduce(((t,n)=>(t[n]=function(){return e(this.$pinia)[n]},t)),{}):Object.keys(t).reduce(((n,o)=>(n[o]=function(){const n=e(this.$pinia),r=t[o];return"function"==typeof r?r.call(this,n):n[r]},n)),{})}const ue=ce;function de(e,t){return Array.isArray(t)?t.reduce(((t,n)=>(t[n]=function(...t){return e(this.$pinia)[n](...t)},t)),{}):Object.keys(t).reduce(((n,o)=>(n[o]=function(...n){return e(this.$pinia)[t[o]](...n)},n)),{})}function pe(e,t){return Array.isArray(t)?t.reduce(((t,n)=>(t[n]={get(){return e(this.$pinia)[n]},set(t){return e(this.$pinia)[n]=t}},t)),{}):Object.keys(t).reduce(((n,o)=>(n[o]={get(){return e(this.$pinia)[t[o]]},set(n){return e(this.$pinia)[t[o]]=n}},n)),{})}function fe(e){if(o.isVue2)return(0,o.toRefs)(e);{e=(0,o.toRaw)(e);const t={};for(const n in e){const r=e[n];((0,o.isRef)(r)||(0,o.isReactive)(r))&&(t[n]=(0,o.toRef)(e,n))}return t}}const he=function(e){e.mixin({beforeCreate(){const e=this.$options;if(e.pinia){const t=e.pinia;if(!this._provided){const e={};Object.defineProperty(this,"_provided",{get:()=>e,set:t=>Object.assign(e,t)})}this._provided[l]=t,this.$pinia||(this.$pinia=t),t._a=this,d&&s(t),p&&V(t._a,t)}else!this.$pinia&&e.parent&&e.parent.$pinia&&(this.$pinia=e.parent.$pinia)},destroyed(){delete this._pStores}})}},"./node_modules/vue-demi/lib/index.mjs":(e,t,n)=>{"use strict";n.r(t),n.d(t,{BaseTransition:()=>o.BaseTransition,BaseTransitionPropsValidators:()=>o.BaseTransitionPropsValidators,Comment:()=>o.Comment,EffectScope:()=>o.EffectScope,Fragment:()=>o.Fragment,KeepAlive:()=>o.KeepAlive,ReactiveEffect:()=>o.ReactiveEffect,Static:()=>o.Static,Suspense:()=>o.Suspense,Teleport:()=>o.Teleport,Text:()=>o.Text,Transition:()=>o.Transition,TransitionGroup:()=>o.TransitionGroup,Vue:()=>o,Vue2:()=>s,VueElement:()=>o.VueElement,assertNumber:()=>o.assertNumber,callWithAsyncErrorHandling:()=>o.callWithAsyncErrorHandling,callWithErrorHandling:()=>o.callWithErrorHandling,camelize:()=>o.camelize,capitalize:()=>o.capitalize,cloneVNode:()=>o.cloneVNode,compatUtils:()=>o.compatUtils,compile:()=>o.compile,computed:()=>o.computed,createApp:()=>o.createApp,createBlock:()=>o.createBlock,createCommentVNode:()=>o.createCommentVNode,createElementBlock:()=>o.createElementBlock,createElementVNode:()=>o.createElementVNode,createHydrationRenderer:()=>o.createHydrationRenderer,createPropsRestProxy:()=>o.createPropsRestProxy,createRenderer:()=>o.createRenderer,createSSRApp:()=>o.createSSRApp,createSlots:()=>o.createSlots,createStaticVNode:()=>o.createStaticVNode,createTextVNode:()=>o.createTextVNode,createVNode:()=>o.createVNode,customRef:()=>o.customRef,defineAsyncComponent:()=>o.defineAsyncComponent,defineComponent:()=>o.defineComponent,defineCustomElement:()=>o.defineCustomElement,defineEmits:()=>o.defineEmits,defineExpose:()=>o.defineExpose,defineModel:()=>o.defineModel,defineOptions:()=>o.defineOptions,defineProps:()=>o.defineProps,defineSSRCustomElement:()=>o.defineSSRCustomElement,defineSlots:()=>o.defineSlots,del:()=>c,devtools:()=>o.devtools,effect:()=>o.effect,effectScope:()=>o.effectScope,getCurrentInstance:()=>o.getCurrentInstance,getCurrentScope:()=>o.getCurrentScope,getTransitionRawChildren:()=>o.getTransitionRawChildren,guardReactiveProps:()=>o.guardReactiveProps,h:()=>o.h,handleError:()=>o.handleError,hasInjectionContext:()=>o.hasInjectionContext,hydrate:()=>o.hydrate,initCustomFormatter:()=>o.initCustomFormatter,initDirectivesForSSR:()=>o.initDirectivesForSSR,inject:()=>o.inject,install:()=>a,isMemoSame:()=>o.isMemoSame,isProxy:()=>o.isProxy,isReactive:()=>o.isReactive,isReadonly:()=>o.isReadonly,isRef:()=>o.isRef,isRuntimeOnly:()=>o.isRuntimeOnly,isShallow:()=>o.isShallow,isVNode:()=>o.isVNode,isVue2:()=>r,isVue3:()=>i,markRaw:()=>o.markRaw,mergeDefaults:()=>o.mergeDefaults,mergeModels:()=>o.mergeModels,mergeProps:()=>o.mergeProps,nextTick:()=>o.nextTick,normalizeClass:()=>o.normalizeClass,normalizeProps:()=>o.normalizeProps,normalizeStyle:()=>o.normalizeStyle,onActivated:()=>o.onActivated,onBeforeMount:()=>o.onBeforeMount,onBeforeUnmount:()=>o.onBeforeUnmount,onBeforeUpdate:()=>o.onBeforeUpdate,onDeactivated:()=>o.onDeactivated,onErrorCaptured:()=>o.onErrorCaptured,onMounted:()=>o.onMounted,onRenderTracked:()=>o.onRenderTracked,onRenderTriggered:()=>o.onRenderTriggered,onScopeDispose:()=>o.onScopeDispose,onServerPrefetch:()=>o.onServerPrefetch,onUnmounted:()=>o.onUnmounted,onUpdated:()=>o.onUpdated,openBlock:()=>o.openBlock,popScopeId:()=>o.popScopeId,provide:()=>o.provide,proxyRefs:()=>o.proxyRefs,pushScopeId:()=>o.pushScopeId,queuePostFlushCb:()=>o.queuePostFlushCb,reactive:()=>o.reactive,readonly:()=>o.readonly,ref:()=>o.ref,registerRuntimeCompiler:()=>o.registerRuntimeCompiler,render:()=>o.render,renderList:()=>o.renderList,renderSlot:()=>o.renderSlot,resolveComponent:()=>o.resolveComponent,resolveDirective:()=>o.resolveDirective,resolveDynamicComponent:()=>o.resolveDynamicComponent,resolveFilter:()=>o.resolveFilter,resolveTransitionHooks:()=>o.resolveTransitionHooks,set:()=>l,setBlockTracking:()=>o.setBlockTracking,setDevtoolsHook:()=>o.setDevtoolsHook,setTransitionHooks:()=>o.setTransitionHooks,shallowReactive:()=>o.shallowReactive,shallowReadonly:()=>o.shallowReadonly,shallowRef:()=>o.shallowRef,ssrContextKey:()=>o.ssrContextKey,ssrUtils:()=>o.ssrUtils,stop:()=>o.stop,toDisplayString:()=>o.toDisplayString,toHandlerKey:()=>o.toHandlerKey,toHandlers:()=>o.toHandlers,toRaw:()=>o.toRaw,toRef:()=>o.toRef,toRefs:()=>o.toRefs,toValue:()=>o.toValue,transformVNodeArgs:()=>o.transformVNodeArgs,triggerRef:()=>o.triggerRef,unref:()=>o.unref,useAttrs:()=>o.useAttrs,useCssModule:()=>o.useCssModule,useCssVars:()=>o.useCssVars,useModel:()=>o.useModel,useSSRContext:()=>o.useSSRContext,useSlots:()=>o.useSlots,useTransitionState:()=>o.useTransitionState,vModelCheckbox:()=>o.vModelCheckbox,vModelDynamic:()=>o.vModelDynamic,vModelRadio:()=>o.vModelRadio,vModelSelect:()=>o.vModelSelect,vModelText:()=>o.vModelText,vShow:()=>o.vShow,version:()=>o.version,warn:()=>o.warn,watch:()=>o.watch,watchEffect:()=>o.watchEffect,watchPostEffect:()=>o.watchPostEffect,watchSyncEffect:()=>o.watchSyncEffect,withAsyncContext:()=>o.withAsyncContext,withCtx:()=>o.withCtx,withDefaults:()=>o.withDefaults,withDirectives:()=>o.withDirectives,withKeys:()=>o.withKeys,withMemo:()=>o.withMemo,withModifiers:()=>o.withModifiers,withScopeId:()=>o.withScopeId});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js"),r=!1,i=!0,s=void 0;function a(){}function l(e,t,n){return Array.isArray(e)?(e.length=Math.max(e.length,t),e.splice(t,1,n),n):(e[t]=n,n)}function c(e,t){Array.isArray(e)?e.splice(t,1):delete e[t]}}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var i=t[o]={id:o,exports:{}};return e[o].call(i.exports,i,i.exports,n),i.exports}n.m=e,n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var o=t.getElementsByTagName("script");o.length&&(e=o[o.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.b=document.baseURI||self.location.href;var o={};(()=>{"use strict";n.r(o);var e=n("./node_modules/pinia/dist/pinia.mjs"),t=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js"),r=(n("./src/js-modules/header.js"),n("./src/js-modules/subsription.js"),n("./src/js-modules/info-banner.js"),n("./src/js-modules/Catalog-products.vue")),i=n("./src/js-modules/Product-details.vue"),s=n("./src/js-modules/Product-count.vue"),a=n("./node_modules/jquery/dist/jquery.js");(0,t.createApp)(r.default).mount("#catalog"),(0,t.createApp)(i.default).use((0,e.createPinia)()).mount("#product"),(0,t.createApp)(s.default).mount("#product-count"),a(window).on("load",(function(){var e=localStorage.getItem("infoBannerClosed");e&&"true"===e||(a(".info-banner").removeClass("hidden"),a("#header").addClass("header"));var t=localStorage.getItem("count");if(t){var n=document.querySelector(".wrapper__product-count");n.classList.add("wrapper__product-count-active"),n.classList.remove("wrapper__product-count-active-animation"),n.textContent=t}}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LFNBQU1saEUsTUFBTSxrQkFFdEJ6SSxFQUFFeDRCLFFBQVErQyxHQUFHLFFBQVEsV0FDbkIsSUFBTXEvRixFQUFtQmxnRyxhQUFhQyxRQUFRLG9CQUN4Q2lnRyxHQUF5QyxTQUFyQkEsSUFDeEI1cEUsRUFBRSxnQkFBZ0J3OUIsWUFBWSxVQUM5Qng5QixFQUFFLFdBQVcwOUIsU0FBUyxXQUd4QixJQUFNbXNDLEVBQVVuZ0csYUFBYUMsUUFBUSxTQUNyQyxHQUFJa2dHLEVBQVMsQ0FDWCxJQUFNQyxFQUFlNzdFLFNBQVN5c0IsY0FBYywyQkFDNUNvdkQsRUFBYTMvQyxVQUFVejVDLElBQUksaUNBQzNCbzVGLEVBQWEzL0MsVUFBVXY3QixPQUFPLDJDQUM5Qms3RSxFQUFhajZELFlBQWNnNkQsQ0FDN0IsQ0FDRiIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYnBhY2stcHJvamVjdC8uL25vZGVfbW9kdWxlcy9AdnVlL2RldnRvb2xzLWFwaS9saWIvZXNtL2NvbnN0LmpzIiwid2VicGFjazovL3dlYnBhY2stcHJvamVjdC8uL25vZGVfbW9kdWxlcy9AdnVlL2RldnRvb2xzLWFwaS9saWIvZXNtL2Vudi5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXByb2plY3QvLi9ub2RlX21vZHVsZXMvQHZ1ZS9kZXZ0b29scy1hcGkvbGliL2VzbS9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXByb2plY3QvLi9ub2RlX21vZHVsZXMvQHZ1ZS9kZXZ0b29scy1hcGkvbGliL2VzbS9wcm94eS5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXByb2plY3QvLi9ub2RlX21vZHVsZXMvQHZ1ZS9kZXZ0b29scy1hcGkvbGliL2VzbS90aW1lLmpzIiwid2VicGFjazovL3dlYnBhY2stcHJvamVjdC8uL25vZGVfbW9kdWxlcy9AdnVlL3JlYWN0aXZpdHkvZGlzdC9yZWFjdGl2aXR5LmVzbS1idW5kbGVyLmpzIiwid2VicGFjazovL3dlYnBhY2stcHJvamVjdC8uL25vZGVfbW9kdWxlcy9AdnVlL3J1bnRpbWUtY29yZS9kaXN0L3J1bnRpbWUtY29yZS5lc20tYnVuZGxlci5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXByb2plY3QvLi9ub2RlX21vZHVsZXMvQHZ1ZS9ydW50aW1lLWRvbS9kaXN0L3J1bnRpbWUtZG9tLmVzbS1idW5kbGVyLmpzIiwid2VicGFjazovL3dlYnBhY2stcHJvamVjdC8uL25vZGVfbW9kdWxlcy9AdnVlL3NoYXJlZC9kaXN0L3NoYXJlZC5lc20tYnVuZGxlci5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXByb2plY3QvLi9zcmMvanMtbW9kdWxlcy9DYXRhbG9nLXByb2R1Y3RzLnZ1ZSIsIndlYnBhY2s6Ly93ZWJwYWNrLXByb2plY3QvLi9zcmMvanMtbW9kdWxlcy9Qcm9kdWN0LWNvdW50LnZ1ZSIsIndlYnBhY2s6Ly93ZWJwYWNrLXByb2plY3QvLi9zcmMvanMtbW9kdWxlcy9Qcm9kdWN0LWRldGFpbHMudnVlIiwid2VicGFjazovL3dlYnBhY2stcHJvamVjdC8uL3NyYy9qcy1tb2R1bGVzL2hlYWRlci5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXByb2plY3QvLi9zcmMvanMtbW9kdWxlcy9pbmZvLWJhbm5lci5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXByb2plY3QvLi9zcmMvanMtbW9kdWxlcy9zdG9yZS5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXByb2plY3QvLi9zcmMvanMtbW9kdWxlcy9zdWJzcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXByb2plY3QvLi9zcmMvanMtbW9kdWxlcy9DYXRhbG9nLXByb2R1Y3RzLnZ1ZT9jMTY1Iiwid2VicGFjazovL3dlYnBhY2stcHJvamVjdC8uL3NyYy9qcy1tb2R1bGVzL1Byb2R1Y3QtY291bnQudnVlP2Q5YjgiLCJ3ZWJwYWNrOi8vd2VicGFjay1wcm9qZWN0Ly4vc3JjL2pzLW1vZHVsZXMvUHJvZHVjdC1kZXRhaWxzLnZ1ZT9iMjA4Iiwid2VicGFjazovL3dlYnBhY2stcHJvamVjdC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXByb2plY3QvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXByb2plY3QvLi9zcmMvaW1nL2NvbnRlbnQtaW1hZ2UvaW1hZ2UtZm91cnRlZW4ucG5nIiwid2VicGFjazovL3dlYnBhY2stcHJvamVjdC8uL25vZGVfbW9kdWxlcy9qcXVlcnkvZGlzdC9qcXVlcnkuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9leHBvcnRIZWxwZXIuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1wcm9qZWN0Ly4vc3JjL2pzLW1vZHVsZXMvQ2F0YWxvZy1wcm9kdWN0cy52dWU/YWU2YyIsIndlYnBhY2s6Ly93ZWJwYWNrLXByb2plY3QvLi9zcmMvanMtbW9kdWxlcy9Qcm9kdWN0LWNvdW50LnZ1ZT84ZThlIiwid2VicGFjazovL3dlYnBhY2stcHJvamVjdC8uL3NyYy9qcy1tb2R1bGVzL1Byb2R1Y3QtZGV0YWlscy52dWU/YWJkMiIsIndlYnBhY2s6Ly93ZWJwYWNrLXByb2plY3QvLi9zcmMvanMtbW9kdWxlcy9DYXRhbG9nLXByb2R1Y3RzLnZ1ZT82NGFlIiwid2VicGFjazovL3dlYnBhY2stcHJvamVjdC8uL3NyYy9qcy1tb2R1bGVzL1Byb2R1Y3QtY291bnQudnVlPzU2MjciLCJ3ZWJwYWNrOi8vd2VicGFjay1wcm9qZWN0Ly4vc3JjL2pzLW1vZHVsZXMvUHJvZHVjdC1kZXRhaWxzLnZ1ZT8yZDM2Iiwid2VicGFjazovL3dlYnBhY2stcHJvamVjdC8uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2xpc3RUb1N0eWxlcy5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXByb2plY3QvLi9ub2RlX21vZHVsZXMvdnVlL2Rpc3QvdnVlLnJ1bnRpbWUuZXNtLWJ1bmRsZXIuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL3BpbmlhL2Rpc3QvcGluaWEubWpzIiwid2VicGFjazovL3dlYnBhY2stcHJvamVjdC8uL25vZGVfbW9kdWxlcy92dWUtZGVtaS9saWIvaW5kZXgubWpzIiwid2VicGFjazovL3dlYnBhY2stcHJvamVjdC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly93ZWJwYWNrLXByb2plY3Qvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vd2VicGFjay1wcm9qZWN0L3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly93ZWJwYWNrLXByb2plY3Qvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly93ZWJwYWNrLXByb2plY3Qvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly93ZWJwYWNrLXByb2plY3Qvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly93ZWJwYWNrLXByb2plY3Qvd2VicGFjay9ydW50aW1lL3B1YmxpY1BhdGgiLCJ3ZWJwYWNrOi8vd2VicGFjay1wcm9qZWN0L3dlYnBhY2svcnVudGltZS9qc29ucCBjaHVuayBsb2FkaW5nIiwid2VicGFjazovL3dlYnBhY2stcHJvamVjdC8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgSE9PS19TRVRVUCA9ICdkZXZ0b29scy1wbHVnaW46c2V0dXAnO1xuZXhwb3J0IGNvbnN0IEhPT0tfUExVR0lOX1NFVFRJTkdTX1NFVCA9ICdwbHVnaW46c2V0dGluZ3M6c2V0JztcbiIsImV4cG9ydCBmdW5jdGlvbiBnZXREZXZ0b29sc0dsb2JhbEhvb2soKSB7XG4gICAgcmV0dXJuIGdldFRhcmdldCgpLl9fVlVFX0RFVlRPT0xTX0dMT0JBTF9IT09LX187XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0VGFyZ2V0KCkge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICByZXR1cm4gKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKVxuICAgICAgICA/IHdpbmRvd1xuICAgICAgICA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnXG4gICAgICAgICAgICA/IGdsb2JhbFxuICAgICAgICAgICAgOiB7fTtcbn1cbmV4cG9ydCBjb25zdCBpc1Byb3h5QXZhaWxhYmxlID0gdHlwZW9mIFByb3h5ID09PSAnZnVuY3Rpb24nO1xuIiwiaW1wb3J0IHsgZ2V0VGFyZ2V0LCBnZXREZXZ0b29sc0dsb2JhbEhvb2ssIGlzUHJveHlBdmFpbGFibGUgfSBmcm9tICcuL2Vudi5qcyc7XG5pbXBvcnQgeyBIT09LX1NFVFVQIH0gZnJvbSAnLi9jb25zdC5qcyc7XG5pbXBvcnQgeyBBcGlQcm94eSB9IGZyb20gJy4vcHJveHkuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9hcGkvaW5kZXguanMnO1xuZXhwb3J0ICogZnJvbSAnLi9wbHVnaW4uanMnO1xuZXhwb3J0ICogZnJvbSAnLi90aW1lLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBzZXR1cERldnRvb2xzUGx1Z2luKHBsdWdpbkRlc2NyaXB0b3IsIHNldHVwRm4pIHtcbiAgICBjb25zdCBkZXNjcmlwdG9yID0gcGx1Z2luRGVzY3JpcHRvcjtcbiAgICBjb25zdCB0YXJnZXQgPSBnZXRUYXJnZXQoKTtcbiAgICBjb25zdCBob29rID0gZ2V0RGV2dG9vbHNHbG9iYWxIb29rKCk7XG4gICAgY29uc3QgZW5hYmxlUHJveHkgPSBpc1Byb3h5QXZhaWxhYmxlICYmIGRlc2NyaXB0b3IuZW5hYmxlRWFybHlQcm94eTtcbiAgICBpZiAoaG9vayAmJiAodGFyZ2V0Ll9fVlVFX0RFVlRPT0xTX1BMVUdJTl9BUElfQVZBSUxBQkxFX18gfHwgIWVuYWJsZVByb3h5KSkge1xuICAgICAgICBob29rLmVtaXQoSE9PS19TRVRVUCwgcGx1Z2luRGVzY3JpcHRvciwgc2V0dXBGbik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBwcm94eSA9IGVuYWJsZVByb3h5ID8gbmV3IEFwaVByb3h5KGRlc2NyaXB0b3IsIGhvb2spIDogbnVsbDtcbiAgICAgICAgY29uc3QgbGlzdCA9IHRhcmdldC5fX1ZVRV9ERVZUT09MU19QTFVHSU5TX18gPSB0YXJnZXQuX19WVUVfREVWVE9PTFNfUExVR0lOU19fIHx8IFtdO1xuICAgICAgICBsaXN0LnB1c2goe1xuICAgICAgICAgICAgcGx1Z2luRGVzY3JpcHRvcjogZGVzY3JpcHRvcixcbiAgICAgICAgICAgIHNldHVwRm4sXG4gICAgICAgICAgICBwcm94eSxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChwcm94eSlcbiAgICAgICAgICAgIHNldHVwRm4ocHJveHkucHJveGllZFRhcmdldCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgSE9PS19QTFVHSU5fU0VUVElOR1NfU0VUIH0gZnJvbSAnLi9jb25zdC5qcyc7XG5pbXBvcnQgeyBub3cgfSBmcm9tICcuL3RpbWUuanMnO1xuZXhwb3J0IGNsYXNzIEFwaVByb3h5IHtcbiAgICBjb25zdHJ1Y3RvcihwbHVnaW4sIGhvb2spIHtcbiAgICAgICAgdGhpcy50YXJnZXQgPSBudWxsO1xuICAgICAgICB0aGlzLnRhcmdldFF1ZXVlID0gW107XG4gICAgICAgIHRoaXMub25RdWV1ZSA9IFtdO1xuICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcbiAgICAgICAgdGhpcy5ob29rID0gaG9vaztcbiAgICAgICAgY29uc3QgZGVmYXVsdFNldHRpbmdzID0ge307XG4gICAgICAgIGlmIChwbHVnaW4uc2V0dGluZ3MpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgaWQgaW4gcGx1Z2luLnNldHRpbmdzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaXRlbSA9IHBsdWdpbi5zZXR0aW5nc1tpZF07XG4gICAgICAgICAgICAgICAgZGVmYXVsdFNldHRpbmdzW2lkXSA9IGl0ZW0uZGVmYXVsdFZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxvY2FsU2V0dGluZ3NTYXZlSWQgPSBgX192dWUtZGV2dG9vbHMtcGx1Z2luLXNldHRpbmdzX18ke3BsdWdpbi5pZH1gO1xuICAgICAgICBsZXQgY3VycmVudFNldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdFNldHRpbmdzKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHJhdyA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKGxvY2FsU2V0dGluZ3NTYXZlSWQpO1xuICAgICAgICAgICAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2UocmF3KTtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oY3VycmVudFNldHRpbmdzLCBkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLy8gbm9vcFxuICAgICAgICB9XG4gICAgICAgIHRoaXMuZmFsbGJhY2tzID0ge1xuICAgICAgICAgICAgZ2V0U2V0dGluZ3MoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRTZXR0aW5ncztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXRTZXR0aW5ncyh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGxvY2FsU2V0dGluZ3NTYXZlSWQsIEpTT04uc3RyaW5naWZ5KHZhbHVlKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIG5vb3BcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY3VycmVudFNldHRpbmdzID0gdmFsdWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbm93KCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBub3coKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICAgIGlmIChob29rKSB7XG4gICAgICAgICAgICBob29rLm9uKEhPT0tfUExVR0lOX1NFVFRJTkdTX1NFVCwgKHBsdWdpbklkLCB2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChwbHVnaW5JZCA9PT0gdGhpcy5wbHVnaW4uaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mYWxsYmFja3Muc2V0U2V0dGluZ3ModmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucHJveGllZE9uID0gbmV3IFByb3h5KHt9LCB7XG4gICAgICAgICAgICBnZXQ6IChfdGFyZ2V0LCBwcm9wKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRhcmdldC5vbltwcm9wXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoLi4uYXJncykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vblF1ZXVlLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogcHJvcCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmdzLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucHJveGllZFRhcmdldCA9IG5ldyBQcm94eSh7fSwge1xuICAgICAgICAgICAgZ2V0OiAoX3RhcmdldCwgcHJvcCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50YXJnZXRbcHJvcF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHByb3AgPT09ICdvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJveGllZE9uO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChPYmplY3Qua2V5cyh0aGlzLmZhbGxiYWNrcykuaW5jbHVkZXMocHJvcCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICguLi5hcmdzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRhcmdldFF1ZXVlLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogcHJvcCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmdzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmU6ICgpID0+IHsgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmFsbGJhY2tzW3Byb3BdKC4uLmFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICguLi5hcmdzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50YXJnZXRRdWV1ZS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBwcm9wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmdzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFzeW5jIHNldFJlYWxUYXJnZXQodGFyZ2V0KSB7XG4gICAgICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgdGhpcy5vblF1ZXVlKSB7XG4gICAgICAgICAgICB0aGlzLnRhcmdldC5vbltpdGVtLm1ldGhvZF0oLi4uaXRlbS5hcmdzKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgdGhpcy50YXJnZXRRdWV1ZSkge1xuICAgICAgICAgICAgaXRlbS5yZXNvbHZlKGF3YWl0IHRoaXMudGFyZ2V0W2l0ZW0ubWV0aG9kXSguLi5pdGVtLmFyZ3MpKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImxldCBzdXBwb3J0ZWQ7XG5sZXQgcGVyZjtcbmV4cG9ydCBmdW5jdGlvbiBpc1BlcmZvcm1hbmNlU3VwcG9ydGVkKCkge1xuICAgIHZhciBfYTtcbiAgICBpZiAoc3VwcG9ydGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHN1cHBvcnRlZDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5wZXJmb3JtYW5jZSkge1xuICAgICAgICBzdXBwb3J0ZWQgPSB0cnVlO1xuICAgICAgICBwZXJmID0gd2luZG93LnBlcmZvcm1hbmNlO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyAmJiAoKF9hID0gZ2xvYmFsLnBlcmZfaG9va3MpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5wZXJmb3JtYW5jZSkpIHtcbiAgICAgICAgc3VwcG9ydGVkID0gdHJ1ZTtcbiAgICAgICAgcGVyZiA9IGdsb2JhbC5wZXJmX2hvb2tzLnBlcmZvcm1hbmNlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgc3VwcG9ydGVkID0gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBzdXBwb3J0ZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gbm93KCkge1xuICAgIHJldHVybiBpc1BlcmZvcm1hbmNlU3VwcG9ydGVkKCkgPyBwZXJmLm5vdygpIDogRGF0ZS5ub3coKTtcbn1cbiIsImltcG9ydCB7IGV4dGVuZCwgaXNBcnJheSwgaXNNYXAsIGlzSW50ZWdlcktleSwgaGFzT3duLCBpc1N5bWJvbCwgaXNPYmplY3QsIGhhc0NoYW5nZWQsIG1ha2VNYXAsIGNhcGl0YWxpemUsIHRvUmF3VHlwZSwgZGVmLCBpc0Z1bmN0aW9uLCBOT09QIH0gZnJvbSAnQHZ1ZS9zaGFyZWQnO1xuXG5mdW5jdGlvbiB3YXJuKG1zZywgLi4uYXJncykge1xuICBjb25zb2xlLndhcm4oYFtWdWUgd2Fybl0gJHttc2d9YCwgLi4uYXJncyk7XG59XG5cbmxldCBhY3RpdmVFZmZlY3RTY29wZTtcbmNsYXNzIEVmZmVjdFNjb3BlIHtcbiAgY29uc3RydWN0b3IoZGV0YWNoZWQgPSBmYWxzZSkge1xuICAgIHRoaXMuZGV0YWNoZWQgPSBkZXRhY2hlZDtcbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICB0aGlzLl9hY3RpdmUgPSB0cnVlO1xuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHRoaXMuZWZmZWN0cyA9IFtdO1xuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHRoaXMuY2xlYW51cHMgPSBbXTtcbiAgICB0aGlzLnBhcmVudCA9IGFjdGl2ZUVmZmVjdFNjb3BlO1xuICAgIGlmICghZGV0YWNoZWQgJiYgYWN0aXZlRWZmZWN0U2NvcGUpIHtcbiAgICAgIHRoaXMuaW5kZXggPSAoYWN0aXZlRWZmZWN0U2NvcGUuc2NvcGVzIHx8IChhY3RpdmVFZmZlY3RTY29wZS5zY29wZXMgPSBbXSkpLnB1c2goXG4gICAgICAgIHRoaXNcbiAgICAgICkgLSAxO1xuICAgIH1cbiAgfVxuICBnZXQgYWN0aXZlKCkge1xuICAgIHJldHVybiB0aGlzLl9hY3RpdmU7XG4gIH1cbiAgcnVuKGZuKSB7XG4gICAgaWYgKHRoaXMuX2FjdGl2ZSkge1xuICAgICAgY29uc3QgY3VycmVudEVmZmVjdFNjb3BlID0gYWN0aXZlRWZmZWN0U2NvcGU7XG4gICAgICB0cnkge1xuICAgICAgICBhY3RpdmVFZmZlY3RTY29wZSA9IHRoaXM7XG4gICAgICAgIHJldHVybiBmbigpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgYWN0aXZlRWZmZWN0U2NvcGUgPSBjdXJyZW50RWZmZWN0U2NvcGU7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIHdhcm4oYGNhbm5vdCBydW4gYW4gaW5hY3RpdmUgZWZmZWN0IHNjb3BlLmApO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogVGhpcyBzaG91bGQgb25seSBiZSBjYWxsZWQgb24gbm9uLWRldGFjaGVkIHNjb3Blc1xuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIG9uKCkge1xuICAgIGFjdGl2ZUVmZmVjdFNjb3BlID0gdGhpcztcbiAgfVxuICAvKipcbiAgICogVGhpcyBzaG91bGQgb25seSBiZSBjYWxsZWQgb24gbm9uLWRldGFjaGVkIHNjb3Blc1xuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIG9mZigpIHtcbiAgICBhY3RpdmVFZmZlY3RTY29wZSA9IHRoaXMucGFyZW50O1xuICB9XG4gIHN0b3AoZnJvbVBhcmVudCkge1xuICAgIGlmICh0aGlzLl9hY3RpdmUpIHtcbiAgICAgIGxldCBpLCBsO1xuICAgICAgZm9yIChpID0gMCwgbCA9IHRoaXMuZWZmZWN0cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdGhpcy5lZmZlY3RzW2ldLnN0b3AoKTtcbiAgICAgIH1cbiAgICAgIGZvciAoaSA9IDAsIGwgPSB0aGlzLmNsZWFudXBzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICB0aGlzLmNsZWFudXBzW2ldKCk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5zY29wZXMpIHtcbiAgICAgICAgZm9yIChpID0gMCwgbCA9IHRoaXMuc2NvcGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgIHRoaXMuc2NvcGVzW2ldLnN0b3AodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICghdGhpcy5kZXRhY2hlZCAmJiB0aGlzLnBhcmVudCAmJiAhZnJvbVBhcmVudCkge1xuICAgICAgICBjb25zdCBsYXN0ID0gdGhpcy5wYXJlbnQuc2NvcGVzLnBvcCgpO1xuICAgICAgICBpZiAobGFzdCAmJiBsYXN0ICE9PSB0aGlzKSB7XG4gICAgICAgICAgdGhpcy5wYXJlbnQuc2NvcGVzW3RoaXMuaW5kZXhdID0gbGFzdDtcbiAgICAgICAgICBsYXN0LmluZGV4ID0gdGhpcy5pbmRleDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5wYXJlbnQgPSB2b2lkIDA7XG4gICAgICB0aGlzLl9hY3RpdmUgPSBmYWxzZTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGVmZmVjdFNjb3BlKGRldGFjaGVkKSB7XG4gIHJldHVybiBuZXcgRWZmZWN0U2NvcGUoZGV0YWNoZWQpO1xufVxuZnVuY3Rpb24gcmVjb3JkRWZmZWN0U2NvcGUoZWZmZWN0LCBzY29wZSA9IGFjdGl2ZUVmZmVjdFNjb3BlKSB7XG4gIGlmIChzY29wZSAmJiBzY29wZS5hY3RpdmUpIHtcbiAgICBzY29wZS5lZmZlY3RzLnB1c2goZWZmZWN0KTtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0Q3VycmVudFNjb3BlKCkge1xuICByZXR1cm4gYWN0aXZlRWZmZWN0U2NvcGU7XG59XG5mdW5jdGlvbiBvblNjb3BlRGlzcG9zZShmbikge1xuICBpZiAoYWN0aXZlRWZmZWN0U2NvcGUpIHtcbiAgICBhY3RpdmVFZmZlY3RTY29wZS5jbGVhbnVwcy5wdXNoKGZuKTtcbiAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICB3YXJuKFxuICAgICAgYG9uU2NvcGVEaXNwb3NlKCkgaXMgY2FsbGVkIHdoZW4gdGhlcmUgaXMgbm8gYWN0aXZlIGVmZmVjdCBzY29wZSB0byBiZSBhc3NvY2lhdGVkIHdpdGguYFxuICAgICk7XG4gIH1cbn1cblxuY29uc3QgY3JlYXRlRGVwID0gKGVmZmVjdHMpID0+IHtcbiAgY29uc3QgZGVwID0gbmV3IFNldChlZmZlY3RzKTtcbiAgZGVwLncgPSAwO1xuICBkZXAubiA9IDA7XG4gIHJldHVybiBkZXA7XG59O1xuY29uc3Qgd2FzVHJhY2tlZCA9IChkZXApID0+IChkZXAudyAmIHRyYWNrT3BCaXQpID4gMDtcbmNvbnN0IG5ld1RyYWNrZWQgPSAoZGVwKSA9PiAoZGVwLm4gJiB0cmFja09wQml0KSA+IDA7XG5jb25zdCBpbml0RGVwTWFya2VycyA9ICh7IGRlcHMgfSkgPT4ge1xuICBpZiAoZGVwcy5sZW5ndGgpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRlcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGRlcHNbaV0udyB8PSB0cmFja09wQml0O1xuICAgIH1cbiAgfVxufTtcbmNvbnN0IGZpbmFsaXplRGVwTWFya2VycyA9IChlZmZlY3QpID0+IHtcbiAgY29uc3QgeyBkZXBzIH0gPSBlZmZlY3Q7XG4gIGlmIChkZXBzLmxlbmd0aCkge1xuICAgIGxldCBwdHIgPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGVwcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgZGVwID0gZGVwc1tpXTtcbiAgICAgIGlmICh3YXNUcmFja2VkKGRlcCkgJiYgIW5ld1RyYWNrZWQoZGVwKSkge1xuICAgICAgICBkZXAuZGVsZXRlKGVmZmVjdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZXBzW3B0cisrXSA9IGRlcDtcbiAgICAgIH1cbiAgICAgIGRlcC53ICY9IH50cmFja09wQml0O1xuICAgICAgZGVwLm4gJj0gfnRyYWNrT3BCaXQ7XG4gICAgfVxuICAgIGRlcHMubGVuZ3RoID0gcHRyO1xuICB9XG59O1xuXG5jb25zdCB0YXJnZXRNYXAgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKTtcbmxldCBlZmZlY3RUcmFja0RlcHRoID0gMDtcbmxldCB0cmFja09wQml0ID0gMTtcbmNvbnN0IG1heE1hcmtlckJpdHMgPSAzMDtcbmxldCBhY3RpdmVFZmZlY3Q7XG5jb25zdCBJVEVSQVRFX0tFWSA9IFN5bWJvbChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBcIml0ZXJhdGVcIiA6IFwiXCIpO1xuY29uc3QgTUFQX0tFWV9JVEVSQVRFX0tFWSA9IFN5bWJvbChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBcIk1hcCBrZXkgaXRlcmF0ZVwiIDogXCJcIik7XG5jbGFzcyBSZWFjdGl2ZUVmZmVjdCB7XG4gIGNvbnN0cnVjdG9yKGZuLCBzY2hlZHVsZXIgPSBudWxsLCBzY29wZSkge1xuICAgIHRoaXMuZm4gPSBmbjtcbiAgICB0aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICB0aGlzLmFjdGl2ZSA9IHRydWU7XG4gICAgdGhpcy5kZXBzID0gW107XG4gICAgdGhpcy5wYXJlbnQgPSB2b2lkIDA7XG4gICAgcmVjb3JkRWZmZWN0U2NvcGUodGhpcywgc2NvcGUpO1xuICB9XG4gIHJ1bigpIHtcbiAgICBpZiAoIXRoaXMuYWN0aXZlKSB7XG4gICAgICByZXR1cm4gdGhpcy5mbigpO1xuICAgIH1cbiAgICBsZXQgcGFyZW50ID0gYWN0aXZlRWZmZWN0O1xuICAgIGxldCBsYXN0U2hvdWxkVHJhY2sgPSBzaG91bGRUcmFjaztcbiAgICB3aGlsZSAocGFyZW50KSB7XG4gICAgICBpZiAocGFyZW50ID09PSB0aGlzKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICB0aGlzLnBhcmVudCA9IGFjdGl2ZUVmZmVjdDtcbiAgICAgIGFjdGl2ZUVmZmVjdCA9IHRoaXM7XG4gICAgICBzaG91bGRUcmFjayA9IHRydWU7XG4gICAgICB0cmFja09wQml0ID0gMSA8PCArK2VmZmVjdFRyYWNrRGVwdGg7XG4gICAgICBpZiAoZWZmZWN0VHJhY2tEZXB0aCA8PSBtYXhNYXJrZXJCaXRzKSB7XG4gICAgICAgIGluaXREZXBNYXJrZXJzKHRoaXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2xlYW51cEVmZmVjdCh0aGlzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLmZuKCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChlZmZlY3RUcmFja0RlcHRoIDw9IG1heE1hcmtlckJpdHMpIHtcbiAgICAgICAgZmluYWxpemVEZXBNYXJrZXJzKHRoaXMpO1xuICAgICAgfVxuICAgICAgdHJhY2tPcEJpdCA9IDEgPDwgLS1lZmZlY3RUcmFja0RlcHRoO1xuICAgICAgYWN0aXZlRWZmZWN0ID0gdGhpcy5wYXJlbnQ7XG4gICAgICBzaG91bGRUcmFjayA9IGxhc3RTaG91bGRUcmFjaztcbiAgICAgIHRoaXMucGFyZW50ID0gdm9pZCAwO1xuICAgICAgaWYgKHRoaXMuZGVmZXJTdG9wKSB7XG4gICAgICAgIHRoaXMuc3RvcCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBzdG9wKCkge1xuICAgIGlmIChhY3RpdmVFZmZlY3QgPT09IHRoaXMpIHtcbiAgICAgIHRoaXMuZGVmZXJTdG9wID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuYWN0aXZlKSB7XG4gICAgICBjbGVhbnVwRWZmZWN0KHRoaXMpO1xuICAgICAgaWYgKHRoaXMub25TdG9wKSB7XG4gICAgICAgIHRoaXMub25TdG9wKCk7XG4gICAgICB9XG4gICAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gY2xlYW51cEVmZmVjdChlZmZlY3QyKSB7XG4gIGNvbnN0IHsgZGVwcyB9ID0gZWZmZWN0MjtcbiAgaWYgKGRlcHMubGVuZ3RoKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkZXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBkZXBzW2ldLmRlbGV0ZShlZmZlY3QyKTtcbiAgICB9XG4gICAgZGVwcy5sZW5ndGggPSAwO1xuICB9XG59XG5mdW5jdGlvbiBlZmZlY3QoZm4sIG9wdGlvbnMpIHtcbiAgaWYgKGZuLmVmZmVjdCkge1xuICAgIGZuID0gZm4uZWZmZWN0LmZuO1xuICB9XG4gIGNvbnN0IF9lZmZlY3QgPSBuZXcgUmVhY3RpdmVFZmZlY3QoZm4pO1xuICBpZiAob3B0aW9ucykge1xuICAgIGV4dGVuZChfZWZmZWN0LCBvcHRpb25zKTtcbiAgICBpZiAob3B0aW9ucy5zY29wZSlcbiAgICAgIHJlY29yZEVmZmVjdFNjb3BlKF9lZmZlY3QsIG9wdGlvbnMuc2NvcGUpO1xuICB9XG4gIGlmICghb3B0aW9ucyB8fCAhb3B0aW9ucy5sYXp5KSB7XG4gICAgX2VmZmVjdC5ydW4oKTtcbiAgfVxuICBjb25zdCBydW5uZXIgPSBfZWZmZWN0LnJ1bi5iaW5kKF9lZmZlY3QpO1xuICBydW5uZXIuZWZmZWN0ID0gX2VmZmVjdDtcbiAgcmV0dXJuIHJ1bm5lcjtcbn1cbmZ1bmN0aW9uIHN0b3AocnVubmVyKSB7XG4gIHJ1bm5lci5lZmZlY3Quc3RvcCgpO1xufVxubGV0IHNob3VsZFRyYWNrID0gdHJ1ZTtcbmNvbnN0IHRyYWNrU3RhY2sgPSBbXTtcbmZ1bmN0aW9uIHBhdXNlVHJhY2tpbmcoKSB7XG4gIHRyYWNrU3RhY2sucHVzaChzaG91bGRUcmFjayk7XG4gIHNob3VsZFRyYWNrID0gZmFsc2U7XG59XG5mdW5jdGlvbiBlbmFibGVUcmFja2luZygpIHtcbiAgdHJhY2tTdGFjay5wdXNoKHNob3VsZFRyYWNrKTtcbiAgc2hvdWxkVHJhY2sgPSB0cnVlO1xufVxuZnVuY3Rpb24gcmVzZXRUcmFja2luZygpIHtcbiAgY29uc3QgbGFzdCA9IHRyYWNrU3RhY2sucG9wKCk7XG4gIHNob3VsZFRyYWNrID0gbGFzdCA9PT0gdm9pZCAwID8gdHJ1ZSA6IGxhc3Q7XG59XG5mdW5jdGlvbiB0cmFjayh0YXJnZXQsIHR5cGUsIGtleSkge1xuICBpZiAoc2hvdWxkVHJhY2sgJiYgYWN0aXZlRWZmZWN0KSB7XG4gICAgbGV0IGRlcHNNYXAgPSB0YXJnZXRNYXAuZ2V0KHRhcmdldCk7XG4gICAgaWYgKCFkZXBzTWFwKSB7XG4gICAgICB0YXJnZXRNYXAuc2V0KHRhcmdldCwgZGVwc01hcCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCkpO1xuICAgIH1cbiAgICBsZXQgZGVwID0gZGVwc01hcC5nZXQoa2V5KTtcbiAgICBpZiAoIWRlcCkge1xuICAgICAgZGVwc01hcC5zZXQoa2V5LCBkZXAgPSBjcmVhdGVEZXAoKSk7XG4gICAgfVxuICAgIGNvbnN0IGV2ZW50SW5mbyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHsgZWZmZWN0OiBhY3RpdmVFZmZlY3QsIHRhcmdldCwgdHlwZSwga2V5IH0gOiB2b2lkIDA7XG4gICAgdHJhY2tFZmZlY3RzKGRlcCwgZXZlbnRJbmZvKTtcbiAgfVxufVxuZnVuY3Rpb24gdHJhY2tFZmZlY3RzKGRlcCwgZGVidWdnZXJFdmVudEV4dHJhSW5mbykge1xuICBsZXQgc2hvdWxkVHJhY2syID0gZmFsc2U7XG4gIGlmIChlZmZlY3RUcmFja0RlcHRoIDw9IG1heE1hcmtlckJpdHMpIHtcbiAgICBpZiAoIW5ld1RyYWNrZWQoZGVwKSkge1xuICAgICAgZGVwLm4gfD0gdHJhY2tPcEJpdDtcbiAgICAgIHNob3VsZFRyYWNrMiA9ICF3YXNUcmFja2VkKGRlcCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHNob3VsZFRyYWNrMiA9ICFkZXAuaGFzKGFjdGl2ZUVmZmVjdCk7XG4gIH1cbiAgaWYgKHNob3VsZFRyYWNrMikge1xuICAgIGRlcC5hZGQoYWN0aXZlRWZmZWN0KTtcbiAgICBhY3RpdmVFZmZlY3QuZGVwcy5wdXNoKGRlcCk7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiBhY3RpdmVFZmZlY3Qub25UcmFjaykge1xuICAgICAgYWN0aXZlRWZmZWN0Lm9uVHJhY2soXG4gICAgICAgIGV4dGVuZChcbiAgICAgICAgICB7XG4gICAgICAgICAgICBlZmZlY3Q6IGFjdGl2ZUVmZmVjdFxuICAgICAgICAgIH0sXG4gICAgICAgICAgZGVidWdnZXJFdmVudEV4dHJhSW5mb1xuICAgICAgICApXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gdHJpZ2dlcih0YXJnZXQsIHR5cGUsIGtleSwgbmV3VmFsdWUsIG9sZFZhbHVlLCBvbGRUYXJnZXQpIHtcbiAgY29uc3QgZGVwc01hcCA9IHRhcmdldE1hcC5nZXQodGFyZ2V0KTtcbiAgaWYgKCFkZXBzTWFwKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGxldCBkZXBzID0gW107XG4gIGlmICh0eXBlID09PSBcImNsZWFyXCIpIHtcbiAgICBkZXBzID0gWy4uLmRlcHNNYXAudmFsdWVzKCldO1xuICB9IGVsc2UgaWYgKGtleSA9PT0gXCJsZW5ndGhcIiAmJiBpc0FycmF5KHRhcmdldCkpIHtcbiAgICBjb25zdCBuZXdMZW5ndGggPSBOdW1iZXIobmV3VmFsdWUpO1xuICAgIGRlcHNNYXAuZm9yRWFjaCgoZGVwLCBrZXkyKSA9PiB7XG4gICAgICBpZiAoa2V5MiA9PT0gXCJsZW5ndGhcIiB8fCBrZXkyID49IG5ld0xlbmd0aCkge1xuICAgICAgICBkZXBzLnB1c2goZGVwKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoa2V5ICE9PSB2b2lkIDApIHtcbiAgICAgIGRlcHMucHVzaChkZXBzTWFwLmdldChrZXkpKTtcbiAgICB9XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIFwiYWRkXCI6XG4gICAgICAgIGlmICghaXNBcnJheSh0YXJnZXQpKSB7XG4gICAgICAgICAgZGVwcy5wdXNoKGRlcHNNYXAuZ2V0KElURVJBVEVfS0VZKSk7XG4gICAgICAgICAgaWYgKGlzTWFwKHRhcmdldCkpIHtcbiAgICAgICAgICAgIGRlcHMucHVzaChkZXBzTWFwLmdldChNQVBfS0VZX0lURVJBVEVfS0VZKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGlzSW50ZWdlcktleShrZXkpKSB7XG4gICAgICAgICAgZGVwcy5wdXNoKGRlcHNNYXAuZ2V0KFwibGVuZ3RoXCIpKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJkZWxldGVcIjpcbiAgICAgICAgaWYgKCFpc0FycmF5KHRhcmdldCkpIHtcbiAgICAgICAgICBkZXBzLnB1c2goZGVwc01hcC5nZXQoSVRFUkFURV9LRVkpKTtcbiAgICAgICAgICBpZiAoaXNNYXAodGFyZ2V0KSkge1xuICAgICAgICAgICAgZGVwcy5wdXNoKGRlcHNNYXAuZ2V0KE1BUF9LRVlfSVRFUkFURV9LRVkpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwic2V0XCI6XG4gICAgICAgIGlmIChpc01hcCh0YXJnZXQpKSB7XG4gICAgICAgICAgZGVwcy5wdXNoKGRlcHNNYXAuZ2V0KElURVJBVEVfS0VZKSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIGNvbnN0IGV2ZW50SW5mbyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHsgdGFyZ2V0LCB0eXBlLCBrZXksIG5ld1ZhbHVlLCBvbGRWYWx1ZSwgb2xkVGFyZ2V0IH0gOiB2b2lkIDA7XG4gIGlmIChkZXBzLmxlbmd0aCA9PT0gMSkge1xuICAgIGlmIChkZXBzWzBdKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgIHRyaWdnZXJFZmZlY3RzKGRlcHNbMF0sIGV2ZW50SW5mbyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cmlnZ2VyRWZmZWN0cyhkZXBzWzBdKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgZWZmZWN0cyA9IFtdO1xuICAgIGZvciAoY29uc3QgZGVwIG9mIGRlcHMpIHtcbiAgICAgIGlmIChkZXApIHtcbiAgICAgICAgZWZmZWN0cy5wdXNoKC4uLmRlcCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIHRyaWdnZXJFZmZlY3RzKGNyZWF0ZURlcChlZmZlY3RzKSwgZXZlbnRJbmZvKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdHJpZ2dlckVmZmVjdHMoY3JlYXRlRGVwKGVmZmVjdHMpKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIHRyaWdnZXJFZmZlY3RzKGRlcCwgZGVidWdnZXJFdmVudEV4dHJhSW5mbykge1xuICBjb25zdCBlZmZlY3RzID0gaXNBcnJheShkZXApID8gZGVwIDogWy4uLmRlcF07XG4gIGZvciAoY29uc3QgZWZmZWN0MiBvZiBlZmZlY3RzKSB7XG4gICAgaWYgKGVmZmVjdDIuY29tcHV0ZWQpIHtcbiAgICAgIHRyaWdnZXJFZmZlY3QoZWZmZWN0MiwgZGVidWdnZXJFdmVudEV4dHJhSW5mbyk7XG4gICAgfVxuICB9XG4gIGZvciAoY29uc3QgZWZmZWN0MiBvZiBlZmZlY3RzKSB7XG4gICAgaWYgKCFlZmZlY3QyLmNvbXB1dGVkKSB7XG4gICAgICB0cmlnZ2VyRWZmZWN0KGVmZmVjdDIsIGRlYnVnZ2VyRXZlbnRFeHRyYUluZm8pO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gdHJpZ2dlckVmZmVjdChlZmZlY3QyLCBkZWJ1Z2dlckV2ZW50RXh0cmFJbmZvKSB7XG4gIGlmIChlZmZlY3QyICE9PSBhY3RpdmVFZmZlY3QgfHwgZWZmZWN0Mi5hbGxvd1JlY3Vyc2UpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmIGVmZmVjdDIub25UcmlnZ2VyKSB7XG4gICAgICBlZmZlY3QyLm9uVHJpZ2dlcihleHRlbmQoeyBlZmZlY3Q6IGVmZmVjdDIgfSwgZGVidWdnZXJFdmVudEV4dHJhSW5mbykpO1xuICAgIH1cbiAgICBpZiAoZWZmZWN0Mi5zY2hlZHVsZXIpIHtcbiAgICAgIGVmZmVjdDIuc2NoZWR1bGVyKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVmZmVjdDIucnVuKCk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBnZXREZXBGcm9tUmVhY3RpdmUob2JqZWN0LCBrZXkpIHtcbiAgdmFyIF9hO1xuICByZXR1cm4gKF9hID0gdGFyZ2V0TWFwLmdldChvYmplY3QpKSA9PSBudWxsID8gdm9pZCAwIDogX2EuZ2V0KGtleSk7XG59XG5cbmNvbnN0IGlzTm9uVHJhY2thYmxlS2V5cyA9IC8qIEBfX1BVUkVfXyAqLyBtYWtlTWFwKGBfX3Byb3RvX18sX192X2lzUmVmLF9faXNWdWVgKTtcbmNvbnN0IGJ1aWx0SW5TeW1ib2xzID0gbmV3IFNldChcbiAgLyogQF9fUFVSRV9fICovIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKFN5bWJvbCkuZmlsdGVyKChrZXkpID0+IGtleSAhPT0gXCJhcmd1bWVudHNcIiAmJiBrZXkgIT09IFwiY2FsbGVyXCIpLm1hcCgoa2V5KSA9PiBTeW1ib2xba2V5XSkuZmlsdGVyKGlzU3ltYm9sKVxuKTtcbmNvbnN0IGdldCQxID0gLyogQF9fUFVSRV9fICovIGNyZWF0ZUdldHRlcigpO1xuY29uc3Qgc2hhbGxvd0dldCA9IC8qIEBfX1BVUkVfXyAqLyBjcmVhdGVHZXR0ZXIoZmFsc2UsIHRydWUpO1xuY29uc3QgcmVhZG9ubHlHZXQgPSAvKiBAX19QVVJFX18gKi8gY3JlYXRlR2V0dGVyKHRydWUpO1xuY29uc3Qgc2hhbGxvd1JlYWRvbmx5R2V0ID0gLyogQF9fUFVSRV9fICovIGNyZWF0ZUdldHRlcih0cnVlLCB0cnVlKTtcbmNvbnN0IGFycmF5SW5zdHJ1bWVudGF0aW9ucyA9IC8qIEBfX1BVUkVfXyAqLyBjcmVhdGVBcnJheUluc3RydW1lbnRhdGlvbnMoKTtcbmZ1bmN0aW9uIGNyZWF0ZUFycmF5SW5zdHJ1bWVudGF0aW9ucygpIHtcbiAgY29uc3QgaW5zdHJ1bWVudGF0aW9ucyA9IHt9O1xuICBbXCJpbmNsdWRlc1wiLCBcImluZGV4T2ZcIiwgXCJsYXN0SW5kZXhPZlwiXS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICBpbnN0cnVtZW50YXRpb25zW2tleV0gPSBmdW5jdGlvbiguLi5hcmdzKSB7XG4gICAgICBjb25zdCBhcnIgPSB0b1Jhdyh0aGlzKTtcbiAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gdGhpcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdHJhY2soYXJyLCBcImdldFwiLCBpICsgXCJcIik7XG4gICAgICB9XG4gICAgICBjb25zdCByZXMgPSBhcnJba2V5XSguLi5hcmdzKTtcbiAgICAgIGlmIChyZXMgPT09IC0xIHx8IHJlcyA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIGFycltrZXldKC4uLmFyZ3MubWFwKHRvUmF3KSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgfVxuICAgIH07XG4gIH0pO1xuICBbXCJwdXNoXCIsIFwicG9wXCIsIFwic2hpZnRcIiwgXCJ1bnNoaWZ0XCIsIFwic3BsaWNlXCJdLmZvckVhY2goKGtleSkgPT4ge1xuICAgIGluc3RydW1lbnRhdGlvbnNba2V5XSA9IGZ1bmN0aW9uKC4uLmFyZ3MpIHtcbiAgICAgIHBhdXNlVHJhY2tpbmcoKTtcbiAgICAgIGNvbnN0IHJlcyA9IHRvUmF3KHRoaXMpW2tleV0uYXBwbHkodGhpcywgYXJncyk7XG4gICAgICByZXNldFRyYWNraW5nKCk7XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH07XG4gIH0pO1xuICByZXR1cm4gaW5zdHJ1bWVudGF0aW9ucztcbn1cbmZ1bmN0aW9uIGhhc093blByb3BlcnR5KGtleSkge1xuICBjb25zdCBvYmogPSB0b1Jhdyh0aGlzKTtcbiAgdHJhY2sob2JqLCBcImhhc1wiLCBrZXkpO1xuICByZXR1cm4gb2JqLmhhc093blByb3BlcnR5KGtleSk7XG59XG5mdW5jdGlvbiBjcmVhdGVHZXR0ZXIoaXNSZWFkb25seTIgPSBmYWxzZSwgc2hhbGxvdyA9IGZhbHNlKSB7XG4gIHJldHVybiBmdW5jdGlvbiBnZXQyKHRhcmdldCwga2V5LCByZWNlaXZlcikge1xuICAgIGlmIChrZXkgPT09IFwiX192X2lzUmVhY3RpdmVcIikge1xuICAgICAgcmV0dXJuICFpc1JlYWRvbmx5MjtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gXCJfX3ZfaXNSZWFkb25seVwiKSB7XG4gICAgICByZXR1cm4gaXNSZWFkb25seTI7XG4gICAgfSBlbHNlIGlmIChrZXkgPT09IFwiX192X2lzU2hhbGxvd1wiKSB7XG4gICAgICByZXR1cm4gc2hhbGxvdztcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gXCJfX3ZfcmF3XCIgJiYgcmVjZWl2ZXIgPT09IChpc1JlYWRvbmx5MiA/IHNoYWxsb3cgPyBzaGFsbG93UmVhZG9ubHlNYXAgOiByZWFkb25seU1hcCA6IHNoYWxsb3cgPyBzaGFsbG93UmVhY3RpdmVNYXAgOiByZWFjdGl2ZU1hcCkuZ2V0KHRhcmdldCkpIHtcbiAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuICAgIGNvbnN0IHRhcmdldElzQXJyYXkgPSBpc0FycmF5KHRhcmdldCk7XG4gICAgaWYgKCFpc1JlYWRvbmx5Mikge1xuICAgICAgaWYgKHRhcmdldElzQXJyYXkgJiYgaGFzT3duKGFycmF5SW5zdHJ1bWVudGF0aW9ucywga2V5KSkge1xuICAgICAgICByZXR1cm4gUmVmbGVjdC5nZXQoYXJyYXlJbnN0cnVtZW50YXRpb25zLCBrZXksIHJlY2VpdmVyKTtcbiAgICAgIH1cbiAgICAgIGlmIChrZXkgPT09IFwiaGFzT3duUHJvcGVydHlcIikge1xuICAgICAgICByZXR1cm4gaGFzT3duUHJvcGVydHk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHJlcyA9IFJlZmxlY3QuZ2V0KHRhcmdldCwga2V5LCByZWNlaXZlcik7XG4gICAgaWYgKGlzU3ltYm9sKGtleSkgPyBidWlsdEluU3ltYm9scy5oYXMoa2V5KSA6IGlzTm9uVHJhY2thYmxlS2V5cyhrZXkpKSB7XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgICBpZiAoIWlzUmVhZG9ubHkyKSB7XG4gICAgICB0cmFjayh0YXJnZXQsIFwiZ2V0XCIsIGtleSk7XG4gICAgfVxuICAgIGlmIChzaGFsbG93KSB7XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgICBpZiAoaXNSZWYocmVzKSkge1xuICAgICAgcmV0dXJuIHRhcmdldElzQXJyYXkgJiYgaXNJbnRlZ2VyS2V5KGtleSkgPyByZXMgOiByZXMudmFsdWU7XG4gICAgfVxuICAgIGlmIChpc09iamVjdChyZXMpKSB7XG4gICAgICByZXR1cm4gaXNSZWFkb25seTIgPyByZWFkb25seShyZXMpIDogcmVhY3RpdmUocmVzKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcbn1cbmNvbnN0IHNldCQxID0gLyogQF9fUFVSRV9fICovIGNyZWF0ZVNldHRlcigpO1xuY29uc3Qgc2hhbGxvd1NldCA9IC8qIEBfX1BVUkVfXyAqLyBjcmVhdGVTZXR0ZXIodHJ1ZSk7XG5mdW5jdGlvbiBjcmVhdGVTZXR0ZXIoc2hhbGxvdyA9IGZhbHNlKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzZXQyKHRhcmdldCwga2V5LCB2YWx1ZSwgcmVjZWl2ZXIpIHtcbiAgICBsZXQgb2xkVmFsdWUgPSB0YXJnZXRba2V5XTtcbiAgICBpZiAoaXNSZWFkb25seShvbGRWYWx1ZSkgJiYgaXNSZWYob2xkVmFsdWUpICYmICFpc1JlZih2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKCFzaGFsbG93KSB7XG4gICAgICBpZiAoIWlzU2hhbGxvdyh2YWx1ZSkgJiYgIWlzUmVhZG9ubHkodmFsdWUpKSB7XG4gICAgICAgIG9sZFZhbHVlID0gdG9SYXcob2xkVmFsdWUpO1xuICAgICAgICB2YWx1ZSA9IHRvUmF3KHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmICghaXNBcnJheSh0YXJnZXQpICYmIGlzUmVmKG9sZFZhbHVlKSAmJiAhaXNSZWYodmFsdWUpKSB7XG4gICAgICAgIG9sZFZhbHVlLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBoYWRLZXkgPSBpc0FycmF5KHRhcmdldCkgJiYgaXNJbnRlZ2VyS2V5KGtleSkgPyBOdW1iZXIoa2V5KSA8IHRhcmdldC5sZW5ndGggOiBoYXNPd24odGFyZ2V0LCBrZXkpO1xuICAgIGNvbnN0IHJlc3VsdCA9IFJlZmxlY3Quc2V0KHRhcmdldCwga2V5LCB2YWx1ZSwgcmVjZWl2ZXIpO1xuICAgIGlmICh0YXJnZXQgPT09IHRvUmF3KHJlY2VpdmVyKSkge1xuICAgICAgaWYgKCFoYWRLZXkpIHtcbiAgICAgICAgdHJpZ2dlcih0YXJnZXQsIFwiYWRkXCIsIGtleSwgdmFsdWUpO1xuICAgICAgfSBlbHNlIGlmIChoYXNDaGFuZ2VkKHZhbHVlLCBvbGRWYWx1ZSkpIHtcbiAgICAgICAgdHJpZ2dlcih0YXJnZXQsIFwic2V0XCIsIGtleSwgdmFsdWUsIG9sZFZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn1cbmZ1bmN0aW9uIGRlbGV0ZVByb3BlcnR5KHRhcmdldCwga2V5KSB7XG4gIGNvbnN0IGhhZEtleSA9IGhhc093bih0YXJnZXQsIGtleSk7XG4gIGNvbnN0IG9sZFZhbHVlID0gdGFyZ2V0W2tleV07XG4gIGNvbnN0IHJlc3VsdCA9IFJlZmxlY3QuZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBrZXkpO1xuICBpZiAocmVzdWx0ICYmIGhhZEtleSkge1xuICAgIHRyaWdnZXIodGFyZ2V0LCBcImRlbGV0ZVwiLCBrZXksIHZvaWQgMCwgb2xkVmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBoYXMkMSh0YXJnZXQsIGtleSkge1xuICBjb25zdCByZXN1bHQgPSBSZWZsZWN0Lmhhcyh0YXJnZXQsIGtleSk7XG4gIGlmICghaXNTeW1ib2woa2V5KSB8fCAhYnVpbHRJblN5bWJvbHMuaGFzKGtleSkpIHtcbiAgICB0cmFjayh0YXJnZXQsIFwiaGFzXCIsIGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIG93bktleXModGFyZ2V0KSB7XG4gIHRyYWNrKHRhcmdldCwgXCJpdGVyYXRlXCIsIGlzQXJyYXkodGFyZ2V0KSA/IFwibGVuZ3RoXCIgOiBJVEVSQVRFX0tFWSk7XG4gIHJldHVybiBSZWZsZWN0Lm93bktleXModGFyZ2V0KTtcbn1cbmNvbnN0IG11dGFibGVIYW5kbGVycyA9IHtcbiAgZ2V0OiBnZXQkMSxcbiAgc2V0OiBzZXQkMSxcbiAgZGVsZXRlUHJvcGVydHksXG4gIGhhczogaGFzJDEsXG4gIG93bktleXNcbn07XG5jb25zdCByZWFkb25seUhhbmRsZXJzID0ge1xuICBnZXQ6IHJlYWRvbmx5R2V0LFxuICBzZXQodGFyZ2V0LCBrZXkpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICB3YXJuKFxuICAgICAgICBgU2V0IG9wZXJhdGlvbiBvbiBrZXkgXCIke1N0cmluZyhrZXkpfVwiIGZhaWxlZDogdGFyZ2V0IGlzIHJlYWRvbmx5LmAsXG4gICAgICAgIHRhcmdldFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG4gIGRlbGV0ZVByb3BlcnR5KHRhcmdldCwga2V5KSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgd2FybihcbiAgICAgICAgYERlbGV0ZSBvcGVyYXRpb24gb24ga2V5IFwiJHtTdHJpbmcoa2V5KX1cIiBmYWlsZWQ6IHRhcmdldCBpcyByZWFkb25seS5gLFxuICAgICAgICB0YXJnZXRcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuY29uc3Qgc2hhbGxvd1JlYWN0aXZlSGFuZGxlcnMgPSAvKiBAX19QVVJFX18gKi8gZXh0ZW5kKFxuICB7fSxcbiAgbXV0YWJsZUhhbmRsZXJzLFxuICB7XG4gICAgZ2V0OiBzaGFsbG93R2V0LFxuICAgIHNldDogc2hhbGxvd1NldFxuICB9XG4pO1xuY29uc3Qgc2hhbGxvd1JlYWRvbmx5SGFuZGxlcnMgPSAvKiBAX19QVVJFX18gKi8gZXh0ZW5kKFxuICB7fSxcbiAgcmVhZG9ubHlIYW5kbGVycyxcbiAge1xuICAgIGdldDogc2hhbGxvd1JlYWRvbmx5R2V0XG4gIH1cbik7XG5cbmNvbnN0IHRvU2hhbGxvdyA9ICh2YWx1ZSkgPT4gdmFsdWU7XG5jb25zdCBnZXRQcm90byA9ICh2KSA9PiBSZWZsZWN0LmdldFByb3RvdHlwZU9mKHYpO1xuZnVuY3Rpb24gZ2V0KHRhcmdldCwga2V5LCBpc1JlYWRvbmx5ID0gZmFsc2UsIGlzU2hhbGxvdyA9IGZhbHNlKSB7XG4gIHRhcmdldCA9IHRhcmdldFtcIl9fdl9yYXdcIl07XG4gIGNvbnN0IHJhd1RhcmdldCA9IHRvUmF3KHRhcmdldCk7XG4gIGNvbnN0IHJhd0tleSA9IHRvUmF3KGtleSk7XG4gIGlmICghaXNSZWFkb25seSkge1xuICAgIGlmIChrZXkgIT09IHJhd0tleSkge1xuICAgICAgdHJhY2socmF3VGFyZ2V0LCBcImdldFwiLCBrZXkpO1xuICAgIH1cbiAgICB0cmFjayhyYXdUYXJnZXQsIFwiZ2V0XCIsIHJhd0tleSk7XG4gIH1cbiAgY29uc3QgeyBoYXM6IGhhczIgfSA9IGdldFByb3RvKHJhd1RhcmdldCk7XG4gIGNvbnN0IHdyYXAgPSBpc1NoYWxsb3cgPyB0b1NoYWxsb3cgOiBpc1JlYWRvbmx5ID8gdG9SZWFkb25seSA6IHRvUmVhY3RpdmU7XG4gIGlmIChoYXMyLmNhbGwocmF3VGFyZ2V0LCBrZXkpKSB7XG4gICAgcmV0dXJuIHdyYXAodGFyZ2V0LmdldChrZXkpKTtcbiAgfSBlbHNlIGlmIChoYXMyLmNhbGwocmF3VGFyZ2V0LCByYXdLZXkpKSB7XG4gICAgcmV0dXJuIHdyYXAodGFyZ2V0LmdldChyYXdLZXkpKTtcbiAgfSBlbHNlIGlmICh0YXJnZXQgIT09IHJhd1RhcmdldCkge1xuICAgIHRhcmdldC5nZXQoa2V5KTtcbiAgfVxufVxuZnVuY3Rpb24gaGFzKGtleSwgaXNSZWFkb25seSA9IGZhbHNlKSB7XG4gIGNvbnN0IHRhcmdldCA9IHRoaXNbXCJfX3ZfcmF3XCJdO1xuICBjb25zdCByYXdUYXJnZXQgPSB0b1Jhdyh0YXJnZXQpO1xuICBjb25zdCByYXdLZXkgPSB0b1JhdyhrZXkpO1xuICBpZiAoIWlzUmVhZG9ubHkpIHtcbiAgICBpZiAoa2V5ICE9PSByYXdLZXkpIHtcbiAgICAgIHRyYWNrKHJhd1RhcmdldCwgXCJoYXNcIiwga2V5KTtcbiAgICB9XG4gICAgdHJhY2socmF3VGFyZ2V0LCBcImhhc1wiLCByYXdLZXkpO1xuICB9XG4gIHJldHVybiBrZXkgPT09IHJhd0tleSA/IHRhcmdldC5oYXMoa2V5KSA6IHRhcmdldC5oYXMoa2V5KSB8fCB0YXJnZXQuaGFzKHJhd0tleSk7XG59XG5mdW5jdGlvbiBzaXplKHRhcmdldCwgaXNSZWFkb25seSA9IGZhbHNlKSB7XG4gIHRhcmdldCA9IHRhcmdldFtcIl9fdl9yYXdcIl07XG4gICFpc1JlYWRvbmx5ICYmIHRyYWNrKHRvUmF3KHRhcmdldCksIFwiaXRlcmF0ZVwiLCBJVEVSQVRFX0tFWSk7XG4gIHJldHVybiBSZWZsZWN0LmdldCh0YXJnZXQsIFwic2l6ZVwiLCB0YXJnZXQpO1xufVxuZnVuY3Rpb24gYWRkKHZhbHVlKSB7XG4gIHZhbHVlID0gdG9SYXcodmFsdWUpO1xuICBjb25zdCB0YXJnZXQgPSB0b1Jhdyh0aGlzKTtcbiAgY29uc3QgcHJvdG8gPSBnZXRQcm90byh0YXJnZXQpO1xuICBjb25zdCBoYWRLZXkgPSBwcm90by5oYXMuY2FsbCh0YXJnZXQsIHZhbHVlKTtcbiAgaWYgKCFoYWRLZXkpIHtcbiAgICB0YXJnZXQuYWRkKHZhbHVlKTtcbiAgICB0cmlnZ2VyKHRhcmdldCwgXCJhZGRcIiwgdmFsdWUsIHZhbHVlKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cbmZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gIHZhbHVlID0gdG9SYXcodmFsdWUpO1xuICBjb25zdCB0YXJnZXQgPSB0b1Jhdyh0aGlzKTtcbiAgY29uc3QgeyBoYXM6IGhhczIsIGdldDogZ2V0MiB9ID0gZ2V0UHJvdG8odGFyZ2V0KTtcbiAgbGV0IGhhZEtleSA9IGhhczIuY2FsbCh0YXJnZXQsIGtleSk7XG4gIGlmICghaGFkS2V5KSB7XG4gICAga2V5ID0gdG9SYXcoa2V5KTtcbiAgICBoYWRLZXkgPSBoYXMyLmNhbGwodGFyZ2V0LCBrZXkpO1xuICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIGNoZWNrSWRlbnRpdHlLZXlzKHRhcmdldCwgaGFzMiwga2V5KTtcbiAgfVxuICBjb25zdCBvbGRWYWx1ZSA9IGdldDIuY2FsbCh0YXJnZXQsIGtleSk7XG4gIHRhcmdldC5zZXQoa2V5LCB2YWx1ZSk7XG4gIGlmICghaGFkS2V5KSB7XG4gICAgdHJpZ2dlcih0YXJnZXQsIFwiYWRkXCIsIGtleSwgdmFsdWUpO1xuICB9IGVsc2UgaWYgKGhhc0NoYW5nZWQodmFsdWUsIG9sZFZhbHVlKSkge1xuICAgIHRyaWdnZXIodGFyZ2V0LCBcInNldFwiLCBrZXksIHZhbHVlLCBvbGRWYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5mdW5jdGlvbiBkZWxldGVFbnRyeShrZXkpIHtcbiAgY29uc3QgdGFyZ2V0ID0gdG9SYXcodGhpcyk7XG4gIGNvbnN0IHsgaGFzOiBoYXMyLCBnZXQ6IGdldDIgfSA9IGdldFByb3RvKHRhcmdldCk7XG4gIGxldCBoYWRLZXkgPSBoYXMyLmNhbGwodGFyZ2V0LCBrZXkpO1xuICBpZiAoIWhhZEtleSkge1xuICAgIGtleSA9IHRvUmF3KGtleSk7XG4gICAgaGFkS2V5ID0gaGFzMi5jYWxsKHRhcmdldCwga2V5KTtcbiAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBjaGVja0lkZW50aXR5S2V5cyh0YXJnZXQsIGhhczIsIGtleSk7XG4gIH1cbiAgY29uc3Qgb2xkVmFsdWUgPSBnZXQyID8gZ2V0Mi5jYWxsKHRhcmdldCwga2V5KSA6IHZvaWQgMDtcbiAgY29uc3QgcmVzdWx0ID0gdGFyZ2V0LmRlbGV0ZShrZXkpO1xuICBpZiAoaGFkS2V5KSB7XG4gICAgdHJpZ2dlcih0YXJnZXQsIFwiZGVsZXRlXCIsIGtleSwgdm9pZCAwLCBvbGRWYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGNsZWFyKCkge1xuICBjb25zdCB0YXJnZXQgPSB0b1Jhdyh0aGlzKTtcbiAgY29uc3QgaGFkSXRlbXMgPSB0YXJnZXQuc2l6ZSAhPT0gMDtcbiAgY29uc3Qgb2xkVGFyZ2V0ID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaXNNYXAodGFyZ2V0KSA/IG5ldyBNYXAodGFyZ2V0KSA6IG5ldyBTZXQodGFyZ2V0KSA6IHZvaWQgMDtcbiAgY29uc3QgcmVzdWx0ID0gdGFyZ2V0LmNsZWFyKCk7XG4gIGlmIChoYWRJdGVtcykge1xuICAgIHRyaWdnZXIodGFyZ2V0LCBcImNsZWFyXCIsIHZvaWQgMCwgdm9pZCAwLCBvbGRUYXJnZXQpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBjcmVhdGVGb3JFYWNoKGlzUmVhZG9ubHksIGlzU2hhbGxvdykge1xuICByZXR1cm4gZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFjaywgdGhpc0FyZykge1xuICAgIGNvbnN0IG9ic2VydmVkID0gdGhpcztcbiAgICBjb25zdCB0YXJnZXQgPSBvYnNlcnZlZFtcIl9fdl9yYXdcIl07XG4gICAgY29uc3QgcmF3VGFyZ2V0ID0gdG9SYXcodGFyZ2V0KTtcbiAgICBjb25zdCB3cmFwID0gaXNTaGFsbG93ID8gdG9TaGFsbG93IDogaXNSZWFkb25seSA/IHRvUmVhZG9ubHkgOiB0b1JlYWN0aXZlO1xuICAgICFpc1JlYWRvbmx5ICYmIHRyYWNrKHJhd1RhcmdldCwgXCJpdGVyYXRlXCIsIElURVJBVEVfS0VZKTtcbiAgICByZXR1cm4gdGFyZ2V0LmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgIHJldHVybiBjYWxsYmFjay5jYWxsKHRoaXNBcmcsIHdyYXAodmFsdWUpLCB3cmFwKGtleSksIG9ic2VydmVkKTtcbiAgICB9KTtcbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUl0ZXJhYmxlTWV0aG9kKG1ldGhvZCwgaXNSZWFkb25seSwgaXNTaGFsbG93KSB7XG4gIHJldHVybiBmdW5jdGlvbiguLi5hcmdzKSB7XG4gICAgY29uc3QgdGFyZ2V0ID0gdGhpc1tcIl9fdl9yYXdcIl07XG4gICAgY29uc3QgcmF3VGFyZ2V0ID0gdG9SYXcodGFyZ2V0KTtcbiAgICBjb25zdCB0YXJnZXRJc01hcCA9IGlzTWFwKHJhd1RhcmdldCk7XG4gICAgY29uc3QgaXNQYWlyID0gbWV0aG9kID09PSBcImVudHJpZXNcIiB8fCBtZXRob2QgPT09IFN5bWJvbC5pdGVyYXRvciAmJiB0YXJnZXRJc01hcDtcbiAgICBjb25zdCBpc0tleU9ubHkgPSBtZXRob2QgPT09IFwia2V5c1wiICYmIHRhcmdldElzTWFwO1xuICAgIGNvbnN0IGlubmVySXRlcmF0b3IgPSB0YXJnZXRbbWV0aG9kXSguLi5hcmdzKTtcbiAgICBjb25zdCB3cmFwID0gaXNTaGFsbG93ID8gdG9TaGFsbG93IDogaXNSZWFkb25seSA/IHRvUmVhZG9ubHkgOiB0b1JlYWN0aXZlO1xuICAgICFpc1JlYWRvbmx5ICYmIHRyYWNrKFxuICAgICAgcmF3VGFyZ2V0LFxuICAgICAgXCJpdGVyYXRlXCIsXG4gICAgICBpc0tleU9ubHkgPyBNQVBfS0VZX0lURVJBVEVfS0VZIDogSVRFUkFURV9LRVlcbiAgICApO1xuICAgIHJldHVybiB7XG4gICAgICAvLyBpdGVyYXRvciBwcm90b2NvbFxuICAgICAgbmV4dCgpIHtcbiAgICAgICAgY29uc3QgeyB2YWx1ZSwgZG9uZSB9ID0gaW5uZXJJdGVyYXRvci5uZXh0KCk7XG4gICAgICAgIHJldHVybiBkb25lID8geyB2YWx1ZSwgZG9uZSB9IDoge1xuICAgICAgICAgIHZhbHVlOiBpc1BhaXIgPyBbd3JhcCh2YWx1ZVswXSksIHdyYXAodmFsdWVbMV0pXSA6IHdyYXAodmFsdWUpLFxuICAgICAgICAgIGRvbmVcbiAgICAgICAgfTtcbiAgICAgIH0sXG4gICAgICAvLyBpdGVyYWJsZSBwcm90b2NvbFxuICAgICAgW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgIH07XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVSZWFkb25seU1ldGhvZCh0eXBlKSB7XG4gIHJldHVybiBmdW5jdGlvbiguLi5hcmdzKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgY29uc3Qga2V5ID0gYXJnc1swXSA/IGBvbiBrZXkgXCIke2FyZ3NbMF19XCIgYCA6IGBgO1xuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICBgJHtjYXBpdGFsaXplKHR5cGUpfSBvcGVyYXRpb24gJHtrZXl9ZmFpbGVkOiB0YXJnZXQgaXMgcmVhZG9ubHkuYCxcbiAgICAgICAgdG9SYXcodGhpcylcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB0eXBlID09PSBcImRlbGV0ZVwiID8gZmFsc2UgOiB0aGlzO1xuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlSW5zdHJ1bWVudGF0aW9ucygpIHtcbiAgY29uc3QgbXV0YWJsZUluc3RydW1lbnRhdGlvbnMyID0ge1xuICAgIGdldChrZXkpIHtcbiAgICAgIHJldHVybiBnZXQodGhpcywga2V5KTtcbiAgICB9LFxuICAgIGdldCBzaXplKCkge1xuICAgICAgcmV0dXJuIHNpemUodGhpcyk7XG4gICAgfSxcbiAgICBoYXMsXG4gICAgYWRkLFxuICAgIHNldCxcbiAgICBkZWxldGU6IGRlbGV0ZUVudHJ5LFxuICAgIGNsZWFyLFxuICAgIGZvckVhY2g6IGNyZWF0ZUZvckVhY2goZmFsc2UsIGZhbHNlKVxuICB9O1xuICBjb25zdCBzaGFsbG93SW5zdHJ1bWVudGF0aW9uczIgPSB7XG4gICAgZ2V0KGtleSkge1xuICAgICAgcmV0dXJuIGdldCh0aGlzLCBrZXksIGZhbHNlLCB0cnVlKTtcbiAgICB9LFxuICAgIGdldCBzaXplKCkge1xuICAgICAgcmV0dXJuIHNpemUodGhpcyk7XG4gICAgfSxcbiAgICBoYXMsXG4gICAgYWRkLFxuICAgIHNldCxcbiAgICBkZWxldGU6IGRlbGV0ZUVudHJ5LFxuICAgIGNsZWFyLFxuICAgIGZvckVhY2g6IGNyZWF0ZUZvckVhY2goZmFsc2UsIHRydWUpXG4gIH07XG4gIGNvbnN0IHJlYWRvbmx5SW5zdHJ1bWVudGF0aW9uczIgPSB7XG4gICAgZ2V0KGtleSkge1xuICAgICAgcmV0dXJuIGdldCh0aGlzLCBrZXksIHRydWUpO1xuICAgIH0sXG4gICAgZ2V0IHNpemUoKSB7XG4gICAgICByZXR1cm4gc2l6ZSh0aGlzLCB0cnVlKTtcbiAgICB9LFxuICAgIGhhcyhrZXkpIHtcbiAgICAgIHJldHVybiBoYXMuY2FsbCh0aGlzLCBrZXksIHRydWUpO1xuICAgIH0sXG4gICAgYWRkOiBjcmVhdGVSZWFkb25seU1ldGhvZChcImFkZFwiKSxcbiAgICBzZXQ6IGNyZWF0ZVJlYWRvbmx5TWV0aG9kKFwic2V0XCIpLFxuICAgIGRlbGV0ZTogY3JlYXRlUmVhZG9ubHlNZXRob2QoXCJkZWxldGVcIiksXG4gICAgY2xlYXI6IGNyZWF0ZVJlYWRvbmx5TWV0aG9kKFwiY2xlYXJcIiksXG4gICAgZm9yRWFjaDogY3JlYXRlRm9yRWFjaCh0cnVlLCBmYWxzZSlcbiAgfTtcbiAgY29uc3Qgc2hhbGxvd1JlYWRvbmx5SW5zdHJ1bWVudGF0aW9uczIgPSB7XG4gICAgZ2V0KGtleSkge1xuICAgICAgcmV0dXJuIGdldCh0aGlzLCBrZXksIHRydWUsIHRydWUpO1xuICAgIH0sXG4gICAgZ2V0IHNpemUoKSB7XG4gICAgICByZXR1cm4gc2l6ZSh0aGlzLCB0cnVlKTtcbiAgICB9LFxuICAgIGhhcyhrZXkpIHtcbiAgICAgIHJldHVybiBoYXMuY2FsbCh0aGlzLCBrZXksIHRydWUpO1xuICAgIH0sXG4gICAgYWRkOiBjcmVhdGVSZWFkb25seU1ldGhvZChcImFkZFwiKSxcbiAgICBzZXQ6IGNyZWF0ZVJlYWRvbmx5TWV0aG9kKFwic2V0XCIpLFxuICAgIGRlbGV0ZTogY3JlYXRlUmVhZG9ubHlNZXRob2QoXCJkZWxldGVcIiksXG4gICAgY2xlYXI6IGNyZWF0ZVJlYWRvbmx5TWV0aG9kKFwiY2xlYXJcIiksXG4gICAgZm9yRWFjaDogY3JlYXRlRm9yRWFjaCh0cnVlLCB0cnVlKVxuICB9O1xuICBjb25zdCBpdGVyYXRvck1ldGhvZHMgPSBbXCJrZXlzXCIsIFwidmFsdWVzXCIsIFwiZW50cmllc1wiLCBTeW1ib2wuaXRlcmF0b3JdO1xuICBpdGVyYXRvck1ldGhvZHMuZm9yRWFjaCgobWV0aG9kKSA9PiB7XG4gICAgbXV0YWJsZUluc3RydW1lbnRhdGlvbnMyW21ldGhvZF0gPSBjcmVhdGVJdGVyYWJsZU1ldGhvZChcbiAgICAgIG1ldGhvZCxcbiAgICAgIGZhbHNlLFxuICAgICAgZmFsc2VcbiAgICApO1xuICAgIHJlYWRvbmx5SW5zdHJ1bWVudGF0aW9uczJbbWV0aG9kXSA9IGNyZWF0ZUl0ZXJhYmxlTWV0aG9kKFxuICAgICAgbWV0aG9kLFxuICAgICAgdHJ1ZSxcbiAgICAgIGZhbHNlXG4gICAgKTtcbiAgICBzaGFsbG93SW5zdHJ1bWVudGF0aW9uczJbbWV0aG9kXSA9IGNyZWF0ZUl0ZXJhYmxlTWV0aG9kKFxuICAgICAgbWV0aG9kLFxuICAgICAgZmFsc2UsXG4gICAgICB0cnVlXG4gICAgKTtcbiAgICBzaGFsbG93UmVhZG9ubHlJbnN0cnVtZW50YXRpb25zMlttZXRob2RdID0gY3JlYXRlSXRlcmFibGVNZXRob2QoXG4gICAgICBtZXRob2QsXG4gICAgICB0cnVlLFxuICAgICAgdHJ1ZVxuICAgICk7XG4gIH0pO1xuICByZXR1cm4gW1xuICAgIG11dGFibGVJbnN0cnVtZW50YXRpb25zMixcbiAgICByZWFkb25seUluc3RydW1lbnRhdGlvbnMyLFxuICAgIHNoYWxsb3dJbnN0cnVtZW50YXRpb25zMixcbiAgICBzaGFsbG93UmVhZG9ubHlJbnN0cnVtZW50YXRpb25zMlxuICBdO1xufVxuY29uc3QgW1xuICBtdXRhYmxlSW5zdHJ1bWVudGF0aW9ucyxcbiAgcmVhZG9ubHlJbnN0cnVtZW50YXRpb25zLFxuICBzaGFsbG93SW5zdHJ1bWVudGF0aW9ucyxcbiAgc2hhbGxvd1JlYWRvbmx5SW5zdHJ1bWVudGF0aW9uc1xuXSA9IC8qIEBfX1BVUkVfXyAqLyBjcmVhdGVJbnN0cnVtZW50YXRpb25zKCk7XG5mdW5jdGlvbiBjcmVhdGVJbnN0cnVtZW50YXRpb25HZXR0ZXIoaXNSZWFkb25seSwgc2hhbGxvdykge1xuICBjb25zdCBpbnN0cnVtZW50YXRpb25zID0gc2hhbGxvdyA/IGlzUmVhZG9ubHkgPyBzaGFsbG93UmVhZG9ubHlJbnN0cnVtZW50YXRpb25zIDogc2hhbGxvd0luc3RydW1lbnRhdGlvbnMgOiBpc1JlYWRvbmx5ID8gcmVhZG9ubHlJbnN0cnVtZW50YXRpb25zIDogbXV0YWJsZUluc3RydW1lbnRhdGlvbnM7XG4gIHJldHVybiAodGFyZ2V0LCBrZXksIHJlY2VpdmVyKSA9PiB7XG4gICAgaWYgKGtleSA9PT0gXCJfX3ZfaXNSZWFjdGl2ZVwiKSB7XG4gICAgICByZXR1cm4gIWlzUmVhZG9ubHk7XG4gICAgfSBlbHNlIGlmIChrZXkgPT09IFwiX192X2lzUmVhZG9ubHlcIikge1xuICAgICAgcmV0dXJuIGlzUmVhZG9ubHk7XG4gICAgfSBlbHNlIGlmIChrZXkgPT09IFwiX192X3Jhd1wiKSB7XG4gICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cbiAgICByZXR1cm4gUmVmbGVjdC5nZXQoXG4gICAgICBoYXNPd24oaW5zdHJ1bWVudGF0aW9ucywga2V5KSAmJiBrZXkgaW4gdGFyZ2V0ID8gaW5zdHJ1bWVudGF0aW9ucyA6IHRhcmdldCxcbiAgICAgIGtleSxcbiAgICAgIHJlY2VpdmVyXG4gICAgKTtcbiAgfTtcbn1cbmNvbnN0IG11dGFibGVDb2xsZWN0aW9uSGFuZGxlcnMgPSB7XG4gIGdldDogLyogQF9fUFVSRV9fICovIGNyZWF0ZUluc3RydW1lbnRhdGlvbkdldHRlcihmYWxzZSwgZmFsc2UpXG59O1xuY29uc3Qgc2hhbGxvd0NvbGxlY3Rpb25IYW5kbGVycyA9IHtcbiAgZ2V0OiAvKiBAX19QVVJFX18gKi8gY3JlYXRlSW5zdHJ1bWVudGF0aW9uR2V0dGVyKGZhbHNlLCB0cnVlKVxufTtcbmNvbnN0IHJlYWRvbmx5Q29sbGVjdGlvbkhhbmRsZXJzID0ge1xuICBnZXQ6IC8qIEBfX1BVUkVfXyAqLyBjcmVhdGVJbnN0cnVtZW50YXRpb25HZXR0ZXIodHJ1ZSwgZmFsc2UpXG59O1xuY29uc3Qgc2hhbGxvd1JlYWRvbmx5Q29sbGVjdGlvbkhhbmRsZXJzID0ge1xuICBnZXQ6IC8qIEBfX1BVUkVfXyAqLyBjcmVhdGVJbnN0cnVtZW50YXRpb25HZXR0ZXIodHJ1ZSwgdHJ1ZSlcbn07XG5mdW5jdGlvbiBjaGVja0lkZW50aXR5S2V5cyh0YXJnZXQsIGhhczIsIGtleSkge1xuICBjb25zdCByYXdLZXkgPSB0b1JhdyhrZXkpO1xuICBpZiAocmF3S2V5ICE9PSBrZXkgJiYgaGFzMi5jYWxsKHRhcmdldCwgcmF3S2V5KSkge1xuICAgIGNvbnN0IHR5cGUgPSB0b1Jhd1R5cGUodGFyZ2V0KTtcbiAgICBjb25zb2xlLndhcm4oXG4gICAgICBgUmVhY3RpdmUgJHt0eXBlfSBjb250YWlucyBib3RoIHRoZSByYXcgYW5kIHJlYWN0aXZlIHZlcnNpb25zIG9mIHRoZSBzYW1lIG9iamVjdCR7dHlwZSA9PT0gYE1hcGAgPyBgIGFzIGtleXNgIDogYGB9LCB3aGljaCBjYW4gbGVhZCB0byBpbmNvbnNpc3RlbmNpZXMuIEF2b2lkIGRpZmZlcmVudGlhdGluZyBiZXR3ZWVuIHRoZSByYXcgYW5kIHJlYWN0aXZlIHZlcnNpb25zIG9mIGFuIG9iamVjdCBhbmQgb25seSB1c2UgdGhlIHJlYWN0aXZlIHZlcnNpb24gaWYgcG9zc2libGUuYFxuICAgICk7XG4gIH1cbn1cblxuY29uc3QgcmVhY3RpdmVNYXAgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IHNoYWxsb3dSZWFjdGl2ZU1hcCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpO1xuY29uc3QgcmVhZG9ubHlNYXAgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IHNoYWxsb3dSZWFkb25seU1hcCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpO1xuZnVuY3Rpb24gdGFyZ2V0VHlwZU1hcChyYXdUeXBlKSB7XG4gIHN3aXRjaCAocmF3VHlwZSkge1xuICAgIGNhc2UgXCJPYmplY3RcIjpcbiAgICBjYXNlIFwiQXJyYXlcIjpcbiAgICAgIHJldHVybiAxIC8qIENPTU1PTiAqLztcbiAgICBjYXNlIFwiTWFwXCI6XG4gICAgY2FzZSBcIlNldFwiOlxuICAgIGNhc2UgXCJXZWFrTWFwXCI6XG4gICAgY2FzZSBcIldlYWtTZXRcIjpcbiAgICAgIHJldHVybiAyIC8qIENPTExFQ1RJT04gKi87XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiAwIC8qIElOVkFMSUQgKi87XG4gIH1cbn1cbmZ1bmN0aW9uIGdldFRhcmdldFR5cGUodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlW1wiX192X3NraXBcIl0gfHwgIU9iamVjdC5pc0V4dGVuc2libGUodmFsdWUpID8gMCAvKiBJTlZBTElEICovIDogdGFyZ2V0VHlwZU1hcCh0b1Jhd1R5cGUodmFsdWUpKTtcbn1cbmZ1bmN0aW9uIHJlYWN0aXZlKHRhcmdldCkge1xuICBpZiAoaXNSZWFkb25seSh0YXJnZXQpKSB7XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfVxuICByZXR1cm4gY3JlYXRlUmVhY3RpdmVPYmplY3QoXG4gICAgdGFyZ2V0LFxuICAgIGZhbHNlLFxuICAgIG11dGFibGVIYW5kbGVycyxcbiAgICBtdXRhYmxlQ29sbGVjdGlvbkhhbmRsZXJzLFxuICAgIHJlYWN0aXZlTWFwXG4gICk7XG59XG5mdW5jdGlvbiBzaGFsbG93UmVhY3RpdmUodGFyZ2V0KSB7XG4gIHJldHVybiBjcmVhdGVSZWFjdGl2ZU9iamVjdChcbiAgICB0YXJnZXQsXG4gICAgZmFsc2UsXG4gICAgc2hhbGxvd1JlYWN0aXZlSGFuZGxlcnMsXG4gICAgc2hhbGxvd0NvbGxlY3Rpb25IYW5kbGVycyxcbiAgICBzaGFsbG93UmVhY3RpdmVNYXBcbiAgKTtcbn1cbmZ1bmN0aW9uIHJlYWRvbmx5KHRhcmdldCkge1xuICByZXR1cm4gY3JlYXRlUmVhY3RpdmVPYmplY3QoXG4gICAgdGFyZ2V0LFxuICAgIHRydWUsXG4gICAgcmVhZG9ubHlIYW5kbGVycyxcbiAgICByZWFkb25seUNvbGxlY3Rpb25IYW5kbGVycyxcbiAgICByZWFkb25seU1hcFxuICApO1xufVxuZnVuY3Rpb24gc2hhbGxvd1JlYWRvbmx5KHRhcmdldCkge1xuICByZXR1cm4gY3JlYXRlUmVhY3RpdmVPYmplY3QoXG4gICAgdGFyZ2V0LFxuICAgIHRydWUsXG4gICAgc2hhbGxvd1JlYWRvbmx5SGFuZGxlcnMsXG4gICAgc2hhbGxvd1JlYWRvbmx5Q29sbGVjdGlvbkhhbmRsZXJzLFxuICAgIHNoYWxsb3dSZWFkb25seU1hcFxuICApO1xufVxuZnVuY3Rpb24gY3JlYXRlUmVhY3RpdmVPYmplY3QodGFyZ2V0LCBpc1JlYWRvbmx5MiwgYmFzZUhhbmRsZXJzLCBjb2xsZWN0aW9uSGFuZGxlcnMsIHByb3h5TWFwKSB7XG4gIGlmICghaXNPYmplY3QodGFyZ2V0KSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIGNvbnNvbGUud2FybihgdmFsdWUgY2Fubm90IGJlIG1hZGUgcmVhY3RpdmU6ICR7U3RyaW5nKHRhcmdldCl9YCk7XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH1cbiAgaWYgKHRhcmdldFtcIl9fdl9yYXdcIl0gJiYgIShpc1JlYWRvbmx5MiAmJiB0YXJnZXRbXCJfX3ZfaXNSZWFjdGl2ZVwiXSkpIHtcbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9XG4gIGNvbnN0IGV4aXN0aW5nUHJveHkgPSBwcm94eU1hcC5nZXQodGFyZ2V0KTtcbiAgaWYgKGV4aXN0aW5nUHJveHkpIHtcbiAgICByZXR1cm4gZXhpc3RpbmdQcm94eTtcbiAgfVxuICBjb25zdCB0YXJnZXRUeXBlID0gZ2V0VGFyZ2V0VHlwZSh0YXJnZXQpO1xuICBpZiAodGFyZ2V0VHlwZSA9PT0gMCAvKiBJTlZBTElEICovKSB7XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfVxuICBjb25zdCBwcm94eSA9IG5ldyBQcm94eShcbiAgICB0YXJnZXQsXG4gICAgdGFyZ2V0VHlwZSA9PT0gMiAvKiBDT0xMRUNUSU9OICovID8gY29sbGVjdGlvbkhhbmRsZXJzIDogYmFzZUhhbmRsZXJzXG4gICk7XG4gIHByb3h5TWFwLnNldCh0YXJnZXQsIHByb3h5KTtcbiAgcmV0dXJuIHByb3h5O1xufVxuZnVuY3Rpb24gaXNSZWFjdGl2ZSh2YWx1ZSkge1xuICBpZiAoaXNSZWFkb25seSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gaXNSZWFjdGl2ZSh2YWx1ZVtcIl9fdl9yYXdcIl0pO1xuICB9XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZVtcIl9fdl9pc1JlYWN0aXZlXCJdKTtcbn1cbmZ1bmN0aW9uIGlzUmVhZG9ubHkodmFsdWUpIHtcbiAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlW1wiX192X2lzUmVhZG9ubHlcIl0pO1xufVxuZnVuY3Rpb24gaXNTaGFsbG93KHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZVtcIl9fdl9pc1NoYWxsb3dcIl0pO1xufVxuZnVuY3Rpb24gaXNQcm94eSh2YWx1ZSkge1xuICByZXR1cm4gaXNSZWFjdGl2ZSh2YWx1ZSkgfHwgaXNSZWFkb25seSh2YWx1ZSk7XG59XG5mdW5jdGlvbiB0b1JhdyhvYnNlcnZlZCkge1xuICBjb25zdCByYXcgPSBvYnNlcnZlZCAmJiBvYnNlcnZlZFtcIl9fdl9yYXdcIl07XG4gIHJldHVybiByYXcgPyB0b1JhdyhyYXcpIDogb2JzZXJ2ZWQ7XG59XG5mdW5jdGlvbiBtYXJrUmF3KHZhbHVlKSB7XG4gIGRlZih2YWx1ZSwgXCJfX3Zfc2tpcFwiLCB0cnVlKTtcbiAgcmV0dXJuIHZhbHVlO1xufVxuY29uc3QgdG9SZWFjdGl2ZSA9ICh2YWx1ZSkgPT4gaXNPYmplY3QodmFsdWUpID8gcmVhY3RpdmUodmFsdWUpIDogdmFsdWU7XG5jb25zdCB0b1JlYWRvbmx5ID0gKHZhbHVlKSA9PiBpc09iamVjdCh2YWx1ZSkgPyByZWFkb25seSh2YWx1ZSkgOiB2YWx1ZTtcblxuZnVuY3Rpb24gdHJhY2tSZWZWYWx1ZShyZWYyKSB7XG4gIGlmIChzaG91bGRUcmFjayAmJiBhY3RpdmVFZmZlY3QpIHtcbiAgICByZWYyID0gdG9SYXcocmVmMik7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgdHJhY2tFZmZlY3RzKHJlZjIuZGVwIHx8IChyZWYyLmRlcCA9IGNyZWF0ZURlcCgpKSwge1xuICAgICAgICB0YXJnZXQ6IHJlZjIsXG4gICAgICAgIHR5cGU6IFwiZ2V0XCIsXG4gICAgICAgIGtleTogXCJ2YWx1ZVwiXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdHJhY2tFZmZlY3RzKHJlZjIuZGVwIHx8IChyZWYyLmRlcCA9IGNyZWF0ZURlcCgpKSk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiB0cmlnZ2VyUmVmVmFsdWUocmVmMiwgbmV3VmFsKSB7XG4gIHJlZjIgPSB0b1JhdyhyZWYyKTtcbiAgY29uc3QgZGVwID0gcmVmMi5kZXA7XG4gIGlmIChkZXApIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICB0cmlnZ2VyRWZmZWN0cyhkZXAsIHtcbiAgICAgICAgdGFyZ2V0OiByZWYyLFxuICAgICAgICB0eXBlOiBcInNldFwiLFxuICAgICAgICBrZXk6IFwidmFsdWVcIixcbiAgICAgICAgbmV3VmFsdWU6IG5ld1ZhbFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyaWdnZXJFZmZlY3RzKGRlcCk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBpc1JlZihyKSB7XG4gIHJldHVybiAhIShyICYmIHIuX192X2lzUmVmID09PSB0cnVlKTtcbn1cbmZ1bmN0aW9uIHJlZih2YWx1ZSkge1xuICByZXR1cm4gY3JlYXRlUmVmKHZhbHVlLCBmYWxzZSk7XG59XG5mdW5jdGlvbiBzaGFsbG93UmVmKHZhbHVlKSB7XG4gIHJldHVybiBjcmVhdGVSZWYodmFsdWUsIHRydWUpO1xufVxuZnVuY3Rpb24gY3JlYXRlUmVmKHJhd1ZhbHVlLCBzaGFsbG93KSB7XG4gIGlmIChpc1JlZihyYXdWYWx1ZSkpIHtcbiAgICByZXR1cm4gcmF3VmFsdWU7XG4gIH1cbiAgcmV0dXJuIG5ldyBSZWZJbXBsKHJhd1ZhbHVlLCBzaGFsbG93KTtcbn1cbmNsYXNzIFJlZkltcGwge1xuICBjb25zdHJ1Y3Rvcih2YWx1ZSwgX192X2lzU2hhbGxvdykge1xuICAgIHRoaXMuX192X2lzU2hhbGxvdyA9IF9fdl9pc1NoYWxsb3c7XG4gICAgdGhpcy5kZXAgPSB2b2lkIDA7XG4gICAgdGhpcy5fX3ZfaXNSZWYgPSB0cnVlO1xuICAgIHRoaXMuX3Jhd1ZhbHVlID0gX192X2lzU2hhbGxvdyA/IHZhbHVlIDogdG9SYXcodmFsdWUpO1xuICAgIHRoaXMuX3ZhbHVlID0gX192X2lzU2hhbGxvdyA/IHZhbHVlIDogdG9SZWFjdGl2ZSh2YWx1ZSk7XG4gIH1cbiAgZ2V0IHZhbHVlKCkge1xuICAgIHRyYWNrUmVmVmFsdWUodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICB9XG4gIHNldCB2YWx1ZShuZXdWYWwpIHtcbiAgICBjb25zdCB1c2VEaXJlY3RWYWx1ZSA9IHRoaXMuX192X2lzU2hhbGxvdyB8fCBpc1NoYWxsb3cobmV3VmFsKSB8fCBpc1JlYWRvbmx5KG5ld1ZhbCk7XG4gICAgbmV3VmFsID0gdXNlRGlyZWN0VmFsdWUgPyBuZXdWYWwgOiB0b1JhdyhuZXdWYWwpO1xuICAgIGlmIChoYXNDaGFuZ2VkKG5ld1ZhbCwgdGhpcy5fcmF3VmFsdWUpKSB7XG4gICAgICB0aGlzLl9yYXdWYWx1ZSA9IG5ld1ZhbDtcbiAgICAgIHRoaXMuX3ZhbHVlID0gdXNlRGlyZWN0VmFsdWUgPyBuZXdWYWwgOiB0b1JlYWN0aXZlKG5ld1ZhbCk7XG4gICAgICB0cmlnZ2VyUmVmVmFsdWUodGhpcywgbmV3VmFsKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIHRyaWdnZXJSZWYocmVmMikge1xuICB0cmlnZ2VyUmVmVmFsdWUocmVmMiwgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gcmVmMi52YWx1ZSA6IHZvaWQgMCk7XG59XG5mdW5jdGlvbiB1bnJlZihyZWYyKSB7XG4gIHJldHVybiBpc1JlZihyZWYyKSA/IHJlZjIudmFsdWUgOiByZWYyO1xufVxuZnVuY3Rpb24gdG9WYWx1ZShzb3VyY2UpIHtcbiAgcmV0dXJuIGlzRnVuY3Rpb24oc291cmNlKSA/IHNvdXJjZSgpIDogdW5yZWYoc291cmNlKTtcbn1cbmNvbnN0IHNoYWxsb3dVbndyYXBIYW5kbGVycyA9IHtcbiAgZ2V0OiAodGFyZ2V0LCBrZXksIHJlY2VpdmVyKSA9PiB1bnJlZihSZWZsZWN0LmdldCh0YXJnZXQsIGtleSwgcmVjZWl2ZXIpKSxcbiAgc2V0OiAodGFyZ2V0LCBrZXksIHZhbHVlLCByZWNlaXZlcikgPT4ge1xuICAgIGNvbnN0IG9sZFZhbHVlID0gdGFyZ2V0W2tleV07XG4gICAgaWYgKGlzUmVmKG9sZFZhbHVlKSAmJiAhaXNSZWYodmFsdWUpKSB7XG4gICAgICBvbGRWYWx1ZS52YWx1ZSA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBSZWZsZWN0LnNldCh0YXJnZXQsIGtleSwgdmFsdWUsIHJlY2VpdmVyKTtcbiAgICB9XG4gIH1cbn07XG5mdW5jdGlvbiBwcm94eVJlZnMob2JqZWN0V2l0aFJlZnMpIHtcbiAgcmV0dXJuIGlzUmVhY3RpdmUob2JqZWN0V2l0aFJlZnMpID8gb2JqZWN0V2l0aFJlZnMgOiBuZXcgUHJveHkob2JqZWN0V2l0aFJlZnMsIHNoYWxsb3dVbndyYXBIYW5kbGVycyk7XG59XG5jbGFzcyBDdXN0b21SZWZJbXBsIHtcbiAgY29uc3RydWN0b3IoZmFjdG9yeSkge1xuICAgIHRoaXMuZGVwID0gdm9pZCAwO1xuICAgIHRoaXMuX192X2lzUmVmID0gdHJ1ZTtcbiAgICBjb25zdCB7IGdldCwgc2V0IH0gPSBmYWN0b3J5KFxuICAgICAgKCkgPT4gdHJhY2tSZWZWYWx1ZSh0aGlzKSxcbiAgICAgICgpID0+IHRyaWdnZXJSZWZWYWx1ZSh0aGlzKVxuICAgICk7XG4gICAgdGhpcy5fZ2V0ID0gZ2V0O1xuICAgIHRoaXMuX3NldCA9IHNldDtcbiAgfVxuICBnZXQgdmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dldCgpO1xuICB9XG4gIHNldCB2YWx1ZShuZXdWYWwpIHtcbiAgICB0aGlzLl9zZXQobmV3VmFsKTtcbiAgfVxufVxuZnVuY3Rpb24gY3VzdG9tUmVmKGZhY3RvcnkpIHtcbiAgcmV0dXJuIG5ldyBDdXN0b21SZWZJbXBsKGZhY3RvcnkpO1xufVxuZnVuY3Rpb24gdG9SZWZzKG9iamVjdCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmICFpc1Byb3h5KG9iamVjdCkpIHtcbiAgICBjb25zb2xlLndhcm4oYHRvUmVmcygpIGV4cGVjdHMgYSByZWFjdGl2ZSBvYmplY3QgYnV0IHJlY2VpdmVkIGEgcGxhaW4gb25lLmApO1xuICB9XG4gIGNvbnN0IHJldCA9IGlzQXJyYXkob2JqZWN0KSA/IG5ldyBBcnJheShvYmplY3QubGVuZ3RoKSA6IHt9O1xuICBmb3IgKGNvbnN0IGtleSBpbiBvYmplY3QpIHtcbiAgICByZXRba2V5XSA9IHByb3BlcnR5VG9SZWYob2JqZWN0LCBrZXkpO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG5jbGFzcyBPYmplY3RSZWZJbXBsIHtcbiAgY29uc3RydWN0b3IoX29iamVjdCwgX2tleSwgX2RlZmF1bHRWYWx1ZSkge1xuICAgIHRoaXMuX29iamVjdCA9IF9vYmplY3Q7XG4gICAgdGhpcy5fa2V5ID0gX2tleTtcbiAgICB0aGlzLl9kZWZhdWx0VmFsdWUgPSBfZGVmYXVsdFZhbHVlO1xuICAgIHRoaXMuX192X2lzUmVmID0gdHJ1ZTtcbiAgfVxuICBnZXQgdmFsdWUoKSB7XG4gICAgY29uc3QgdmFsID0gdGhpcy5fb2JqZWN0W3RoaXMuX2tleV07XG4gICAgcmV0dXJuIHZhbCA9PT0gdm9pZCAwID8gdGhpcy5fZGVmYXVsdFZhbHVlIDogdmFsO1xuICB9XG4gIHNldCB2YWx1ZShuZXdWYWwpIHtcbiAgICB0aGlzLl9vYmplY3RbdGhpcy5fa2V5XSA9IG5ld1ZhbDtcbiAgfVxuICBnZXQgZGVwKCkge1xuICAgIHJldHVybiBnZXREZXBGcm9tUmVhY3RpdmUodG9SYXcodGhpcy5fb2JqZWN0KSwgdGhpcy5fa2V5KTtcbiAgfVxufVxuY2xhc3MgR2V0dGVyUmVmSW1wbCB7XG4gIGNvbnN0cnVjdG9yKF9nZXR0ZXIpIHtcbiAgICB0aGlzLl9nZXR0ZXIgPSBfZ2V0dGVyO1xuICAgIHRoaXMuX192X2lzUmVmID0gdHJ1ZTtcbiAgICB0aGlzLl9fdl9pc1JlYWRvbmx5ID0gdHJ1ZTtcbiAgfVxuICBnZXQgdmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dldHRlcigpO1xuICB9XG59XG5mdW5jdGlvbiB0b1JlZihzb3VyY2UsIGtleSwgZGVmYXVsdFZhbHVlKSB7XG4gIGlmIChpc1JlZihzb3VyY2UpKSB7XG4gICAgcmV0dXJuIHNvdXJjZTtcbiAgfSBlbHNlIGlmIChpc0Z1bmN0aW9uKHNvdXJjZSkpIHtcbiAgICByZXR1cm4gbmV3IEdldHRlclJlZkltcGwoc291cmNlKTtcbiAgfSBlbHNlIGlmIChpc09iamVjdChzb3VyY2UpICYmIGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgcmV0dXJuIHByb3BlcnR5VG9SZWYoc291cmNlLCBrZXksIGRlZmF1bHRWYWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHJlZihzb3VyY2UpO1xuICB9XG59XG5mdW5jdGlvbiBwcm9wZXJ0eVRvUmVmKHNvdXJjZSwga2V5LCBkZWZhdWx0VmFsdWUpIHtcbiAgY29uc3QgdmFsID0gc291cmNlW2tleV07XG4gIHJldHVybiBpc1JlZih2YWwpID8gdmFsIDogbmV3IE9iamVjdFJlZkltcGwoXG4gICAgc291cmNlLFxuICAgIGtleSxcbiAgICBkZWZhdWx0VmFsdWVcbiAgKTtcbn1cblxuY2xhc3MgQ29tcHV0ZWRSZWZJbXBsIHtcbiAgY29uc3RydWN0b3IoZ2V0dGVyLCBfc2V0dGVyLCBpc1JlYWRvbmx5LCBpc1NTUikge1xuICAgIHRoaXMuX3NldHRlciA9IF9zZXR0ZXI7XG4gICAgdGhpcy5kZXAgPSB2b2lkIDA7XG4gICAgdGhpcy5fX3ZfaXNSZWYgPSB0cnVlO1xuICAgIHRoaXNbXCJfX3ZfaXNSZWFkb25seVwiXSA9IGZhbHNlO1xuICAgIHRoaXMuX2RpcnR5ID0gdHJ1ZTtcbiAgICB0aGlzLmVmZmVjdCA9IG5ldyBSZWFjdGl2ZUVmZmVjdChnZXR0ZXIsICgpID0+IHtcbiAgICAgIGlmICghdGhpcy5fZGlydHkpIHtcbiAgICAgICAgdGhpcy5fZGlydHkgPSB0cnVlO1xuICAgICAgICB0cmlnZ2VyUmVmVmFsdWUodGhpcyk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy5lZmZlY3QuY29tcHV0ZWQgPSB0aGlzO1xuICAgIHRoaXMuZWZmZWN0LmFjdGl2ZSA9IHRoaXMuX2NhY2hlYWJsZSA9ICFpc1NTUjtcbiAgICB0aGlzW1wiX192X2lzUmVhZG9ubHlcIl0gPSBpc1JlYWRvbmx5O1xuICB9XG4gIGdldCB2YWx1ZSgpIHtcbiAgICBjb25zdCBzZWxmID0gdG9SYXcodGhpcyk7XG4gICAgdHJhY2tSZWZWYWx1ZShzZWxmKTtcbiAgICBpZiAoc2VsZi5fZGlydHkgfHwgIXNlbGYuX2NhY2hlYWJsZSkge1xuICAgICAgc2VsZi5fZGlydHkgPSBmYWxzZTtcbiAgICAgIHNlbGYuX3ZhbHVlID0gc2VsZi5lZmZlY3QucnVuKCk7XG4gICAgfVxuICAgIHJldHVybiBzZWxmLl92YWx1ZTtcbiAgfVxuICBzZXQgdmFsdWUobmV3VmFsdWUpIHtcbiAgICB0aGlzLl9zZXR0ZXIobmV3VmFsdWUpO1xuICB9XG59XG5mdW5jdGlvbiBjb21wdXRlZChnZXR0ZXJPck9wdGlvbnMsIGRlYnVnT3B0aW9ucywgaXNTU1IgPSBmYWxzZSkge1xuICBsZXQgZ2V0dGVyO1xuICBsZXQgc2V0dGVyO1xuICBjb25zdCBvbmx5R2V0dGVyID0gaXNGdW5jdGlvbihnZXR0ZXJPck9wdGlvbnMpO1xuICBpZiAob25seUdldHRlcikge1xuICAgIGdldHRlciA9IGdldHRlck9yT3B0aW9ucztcbiAgICBzZXR0ZXIgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoKSA9PiB7XG4gICAgICBjb25zb2xlLndhcm4oXCJXcml0ZSBvcGVyYXRpb24gZmFpbGVkOiBjb21wdXRlZCB2YWx1ZSBpcyByZWFkb25seVwiKTtcbiAgICB9IDogTk9PUDtcbiAgfSBlbHNlIHtcbiAgICBnZXR0ZXIgPSBnZXR0ZXJPck9wdGlvbnMuZ2V0O1xuICAgIHNldHRlciA9IGdldHRlck9yT3B0aW9ucy5zZXQ7XG4gIH1cbiAgY29uc3QgY1JlZiA9IG5ldyBDb21wdXRlZFJlZkltcGwoZ2V0dGVyLCBzZXR0ZXIsIG9ubHlHZXR0ZXIgfHwgIXNldHRlciwgaXNTU1IpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmIGRlYnVnT3B0aW9ucyAmJiAhaXNTU1IpIHtcbiAgICBjUmVmLmVmZmVjdC5vblRyYWNrID0gZGVidWdPcHRpb25zLm9uVHJhY2s7XG4gICAgY1JlZi5lZmZlY3Qub25UcmlnZ2VyID0gZGVidWdPcHRpb25zLm9uVHJpZ2dlcjtcbiAgfVxuICByZXR1cm4gY1JlZjtcbn1cblxuY29uc3QgdGljayA9IC8qIEBfX1BVUkVfXyAqLyBQcm9taXNlLnJlc29sdmUoKTtcbmNvbnN0IHF1ZXVlID0gW107XG5sZXQgcXVldWVkID0gZmFsc2U7XG5jb25zdCBzY2hlZHVsZXIgPSAoZm4pID0+IHtcbiAgcXVldWUucHVzaChmbik7XG4gIGlmICghcXVldWVkKSB7XG4gICAgcXVldWVkID0gdHJ1ZTtcbiAgICB0aWNrLnRoZW4oZmx1c2gpO1xuICB9XG59O1xuY29uc3QgZmx1c2ggPSAoKSA9PiB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyBpKyspIHtcbiAgICBxdWV1ZVtpXSgpO1xuICB9XG4gIHF1ZXVlLmxlbmd0aCA9IDA7XG4gIHF1ZXVlZCA9IGZhbHNlO1xufTtcbmNsYXNzIERlZmVycmVkQ29tcHV0ZWRSZWZJbXBsIHtcbiAgY29uc3RydWN0b3IoZ2V0dGVyKSB7XG4gICAgdGhpcy5kZXAgPSB2b2lkIDA7XG4gICAgdGhpcy5fZGlydHkgPSB0cnVlO1xuICAgIHRoaXMuX192X2lzUmVmID0gdHJ1ZTtcbiAgICB0aGlzW1wiX192X2lzUmVhZG9ubHlcIl0gPSB0cnVlO1xuICAgIGxldCBjb21wYXJlVGFyZ2V0O1xuICAgIGxldCBoYXNDb21wYXJlVGFyZ2V0ID0gZmFsc2U7XG4gICAgbGV0IHNjaGVkdWxlZCA9IGZhbHNlO1xuICAgIHRoaXMuZWZmZWN0ID0gbmV3IFJlYWN0aXZlRWZmZWN0KGdldHRlciwgKGNvbXB1dGVkVHJpZ2dlcikgPT4ge1xuICAgICAgaWYgKHRoaXMuZGVwKSB7XG4gICAgICAgIGlmIChjb21wdXRlZFRyaWdnZXIpIHtcbiAgICAgICAgICBjb21wYXJlVGFyZ2V0ID0gdGhpcy5fdmFsdWU7XG4gICAgICAgICAgaGFzQ29tcGFyZVRhcmdldCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAoIXNjaGVkdWxlZCkge1xuICAgICAgICAgIGNvbnN0IHZhbHVlVG9Db21wYXJlID0gaGFzQ29tcGFyZVRhcmdldCA/IGNvbXBhcmVUYXJnZXQgOiB0aGlzLl92YWx1ZTtcbiAgICAgICAgICBzY2hlZHVsZWQgPSB0cnVlO1xuICAgICAgICAgIGhhc0NvbXBhcmVUYXJnZXQgPSBmYWxzZTtcbiAgICAgICAgICBzY2hlZHVsZXIoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuZWZmZWN0LmFjdGl2ZSAmJiB0aGlzLl9nZXQoKSAhPT0gdmFsdWVUb0NvbXBhcmUpIHtcbiAgICAgICAgICAgICAgdHJpZ2dlclJlZlZhbHVlKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2NoZWR1bGVkID0gZmFsc2U7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBlIG9mIHRoaXMuZGVwKSB7XG4gICAgICAgICAgaWYgKGUuY29tcHV0ZWQgaW5zdGFuY2VvZiBEZWZlcnJlZENvbXB1dGVkUmVmSW1wbCkge1xuICAgICAgICAgICAgZS5zY2hlZHVsZXIoXG4gICAgICAgICAgICAgIHRydWVcbiAgICAgICAgICAgICAgLyogY29tcHV0ZWRUcmlnZ2VyICovXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5fZGlydHkgPSB0cnVlO1xuICAgIH0pO1xuICAgIHRoaXMuZWZmZWN0LmNvbXB1dGVkID0gdGhpcztcbiAgfVxuICBfZ2V0KCkge1xuICAgIGlmICh0aGlzLl9kaXJ0eSkge1xuICAgICAgdGhpcy5fZGlydHkgPSBmYWxzZTtcbiAgICAgIHJldHVybiB0aGlzLl92YWx1ZSA9IHRoaXMuZWZmZWN0LnJ1bigpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gIH1cbiAgZ2V0IHZhbHVlKCkge1xuICAgIHRyYWNrUmVmVmFsdWUodGhpcyk7XG4gICAgcmV0dXJuIHRvUmF3KHRoaXMpLl9nZXQoKTtcbiAgfVxufVxuZnVuY3Rpb24gZGVmZXJyZWRDb21wdXRlZChnZXR0ZXIpIHtcbiAgcmV0dXJuIG5ldyBEZWZlcnJlZENvbXB1dGVkUmVmSW1wbChnZXR0ZXIpO1xufVxuXG5leHBvcnQgeyBFZmZlY3RTY29wZSwgSVRFUkFURV9LRVksIFJlYWN0aXZlRWZmZWN0LCBjb21wdXRlZCwgY3VzdG9tUmVmLCBkZWZlcnJlZENvbXB1dGVkLCBlZmZlY3QsIGVmZmVjdFNjb3BlLCBlbmFibGVUcmFja2luZywgZ2V0Q3VycmVudFNjb3BlLCBpc1Byb3h5LCBpc1JlYWN0aXZlLCBpc1JlYWRvbmx5LCBpc1JlZiwgaXNTaGFsbG93LCBtYXJrUmF3LCBvblNjb3BlRGlzcG9zZSwgcGF1c2VUcmFja2luZywgcHJveHlSZWZzLCByZWFjdGl2ZSwgcmVhZG9ubHksIHJlZiwgcmVzZXRUcmFja2luZywgc2hhbGxvd1JlYWN0aXZlLCBzaGFsbG93UmVhZG9ubHksIHNoYWxsb3dSZWYsIHN0b3AsIHRvUmF3LCB0b1JlZiwgdG9SZWZzLCB0b1ZhbHVlLCB0cmFjaywgdHJpZ2dlciwgdHJpZ2dlclJlZiwgdW5yZWYgfTtcbiIsImltcG9ydCB7IHBhdXNlVHJhY2tpbmcsIHJlc2V0VHJhY2tpbmcsIGlzUmVmLCB0b1JhdywgZ2V0Q3VycmVudFNjb3BlLCBpc1NoYWxsb3cgYXMgaXNTaGFsbG93JDEsIGlzUmVhY3RpdmUsIFJlYWN0aXZlRWZmZWN0LCByZWYsIHNoYWxsb3dSZWFkb25seSwgdHJhY2ssIHJlYWN0aXZlLCBzaGFsbG93UmVhY3RpdmUsIHRyaWdnZXIsIGlzUHJveHksIHByb3h5UmVmcywgbWFya1JhdywgRWZmZWN0U2NvcGUsIGNvbXB1dGVkIGFzIGNvbXB1dGVkJDEsIGlzUmVhZG9ubHkgfSBmcm9tICdAdnVlL3JlYWN0aXZpdHknO1xuZXhwb3J0IHsgRWZmZWN0U2NvcGUsIFJlYWN0aXZlRWZmZWN0LCBjdXN0b21SZWYsIGVmZmVjdCwgZWZmZWN0U2NvcGUsIGdldEN1cnJlbnRTY29wZSwgaXNQcm94eSwgaXNSZWFjdGl2ZSwgaXNSZWFkb25seSwgaXNSZWYsIGlzU2hhbGxvdywgbWFya1Jhdywgb25TY29wZURpc3Bvc2UsIHByb3h5UmVmcywgcmVhY3RpdmUsIHJlYWRvbmx5LCByZWYsIHNoYWxsb3dSZWFjdGl2ZSwgc2hhbGxvd1JlYWRvbmx5LCBzaGFsbG93UmVmLCBzdG9wLCB0b1JhdywgdG9SZWYsIHRvUmVmcywgdG9WYWx1ZSwgdHJpZ2dlclJlZiwgdW5yZWYgfSBmcm9tICdAdnVlL3JlYWN0aXZpdHknO1xuaW1wb3J0IHsgaXNTdHJpbmcsIGlzRnVuY3Rpb24sIGlzUHJvbWlzZSwgaXNBcnJheSwgTk9PUCwgZ2V0R2xvYmFsVGhpcywgZXh0ZW5kLCBFTVBUWV9PQkosIHRvSGFuZGxlcktleSwgbG9vc2VUb051bWJlciwgaHlwaGVuYXRlLCBjYW1lbGl6ZSwgaXNPYmplY3QsIGlzT24sIGhhc093biwgaXNNb2RlbExpc3RlbmVyLCB0b051bWJlciwgaGFzQ2hhbmdlZCwgcmVtb3ZlLCBpc1NldCwgaXNNYXAsIGlzUGxhaW5PYmplY3QsIGlzQnVpbHRJbkRpcmVjdGl2ZSwgaW52b2tlQXJyYXlGbnMsIGlzUmVnRXhwLCBjYXBpdGFsaXplLCBpc0dsb2JhbGx5V2hpdGVsaXN0ZWQsIE5PLCBkZWYsIGlzUmVzZXJ2ZWRQcm9wLCBFTVBUWV9BUlIsIHRvUmF3VHlwZSwgbWFrZU1hcCwgbm9ybWFsaXplQ2xhc3MsIG5vcm1hbGl6ZVN0eWxlIH0gZnJvbSAnQHZ1ZS9zaGFyZWQnO1xuZXhwb3J0IHsgY2FtZWxpemUsIGNhcGl0YWxpemUsIG5vcm1hbGl6ZUNsYXNzLCBub3JtYWxpemVQcm9wcywgbm9ybWFsaXplU3R5bGUsIHRvRGlzcGxheVN0cmluZywgdG9IYW5kbGVyS2V5IH0gZnJvbSAnQHZ1ZS9zaGFyZWQnO1xuXG5jb25zdCBzdGFjayA9IFtdO1xuZnVuY3Rpb24gcHVzaFdhcm5pbmdDb250ZXh0KHZub2RlKSB7XG4gIHN0YWNrLnB1c2godm5vZGUpO1xufVxuZnVuY3Rpb24gcG9wV2FybmluZ0NvbnRleHQoKSB7XG4gIHN0YWNrLnBvcCgpO1xufVxuZnVuY3Rpb24gd2Fybihtc2csIC4uLmFyZ3MpIHtcbiAgaWYgKCFwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpXG4gICAgcmV0dXJuO1xuICBwYXVzZVRyYWNraW5nKCk7XG4gIGNvbnN0IGluc3RhbmNlID0gc3RhY2subGVuZ3RoID8gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV0uY29tcG9uZW50IDogbnVsbDtcbiAgY29uc3QgYXBwV2FybkhhbmRsZXIgPSBpbnN0YW5jZSAmJiBpbnN0YW5jZS5hcHBDb250ZXh0LmNvbmZpZy53YXJuSGFuZGxlcjtcbiAgY29uc3QgdHJhY2UgPSBnZXRDb21wb25lbnRUcmFjZSgpO1xuICBpZiAoYXBwV2FybkhhbmRsZXIpIHtcbiAgICBjYWxsV2l0aEVycm9ySGFuZGxpbmcoXG4gICAgICBhcHBXYXJuSGFuZGxlcixcbiAgICAgIGluc3RhbmNlLFxuICAgICAgMTEsXG4gICAgICBbXG4gICAgICAgIG1zZyArIGFyZ3Muam9pbihcIlwiKSxcbiAgICAgICAgaW5zdGFuY2UgJiYgaW5zdGFuY2UucHJveHksXG4gICAgICAgIHRyYWNlLm1hcChcbiAgICAgICAgICAoeyB2bm9kZSB9KSA9PiBgYXQgPCR7Zm9ybWF0Q29tcG9uZW50TmFtZShpbnN0YW5jZSwgdm5vZGUudHlwZSl9PmBcbiAgICAgICAgKS5qb2luKFwiXFxuXCIpLFxuICAgICAgICB0cmFjZVxuICAgICAgXVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3Qgd2FybkFyZ3MgPSBbYFtWdWUgd2Fybl06ICR7bXNnfWAsIC4uLmFyZ3NdO1xuICAgIGlmICh0cmFjZS5sZW5ndGggJiYgLy8gYXZvaWQgc3BhbW1pbmcgY29uc29sZSBkdXJpbmcgdGVzdHNcbiAgICB0cnVlKSB7XG4gICAgICB3YXJuQXJncy5wdXNoKGBcbmAsIC4uLmZvcm1hdFRyYWNlKHRyYWNlKSk7XG4gICAgfVxuICAgIGNvbnNvbGUud2FybiguLi53YXJuQXJncyk7XG4gIH1cbiAgcmVzZXRUcmFja2luZygpO1xufVxuZnVuY3Rpb24gZ2V0Q29tcG9uZW50VHJhY2UoKSB7XG4gIGxldCBjdXJyZW50Vk5vZGUgPSBzdGFja1tzdGFjay5sZW5ndGggLSAxXTtcbiAgaWYgKCFjdXJyZW50Vk5vZGUpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgY29uc3Qgbm9ybWFsaXplZFN0YWNrID0gW107XG4gIHdoaWxlIChjdXJyZW50Vk5vZGUpIHtcbiAgICBjb25zdCBsYXN0ID0gbm9ybWFsaXplZFN0YWNrWzBdO1xuICAgIGlmIChsYXN0ICYmIGxhc3Qudm5vZGUgPT09IGN1cnJlbnRWTm9kZSkge1xuICAgICAgbGFzdC5yZWN1cnNlQ291bnQrKztcbiAgICB9IGVsc2Uge1xuICAgICAgbm9ybWFsaXplZFN0YWNrLnB1c2goe1xuICAgICAgICB2bm9kZTogY3VycmVudFZOb2RlLFxuICAgICAgICByZWN1cnNlQ291bnQ6IDBcbiAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCBwYXJlbnRJbnN0YW5jZSA9IGN1cnJlbnRWTm9kZS5jb21wb25lbnQgJiYgY3VycmVudFZOb2RlLmNvbXBvbmVudC5wYXJlbnQ7XG4gICAgY3VycmVudFZOb2RlID0gcGFyZW50SW5zdGFuY2UgJiYgcGFyZW50SW5zdGFuY2Uudm5vZGU7XG4gIH1cbiAgcmV0dXJuIG5vcm1hbGl6ZWRTdGFjaztcbn1cbmZ1bmN0aW9uIGZvcm1hdFRyYWNlKHRyYWNlKSB7XG4gIGNvbnN0IGxvZ3MgPSBbXTtcbiAgdHJhY2UuZm9yRWFjaCgoZW50cnksIGkpID0+IHtcbiAgICBsb2dzLnB1c2goLi4uaSA9PT0gMCA/IFtdIDogW2BcbmBdLCAuLi5mb3JtYXRUcmFjZUVudHJ5KGVudHJ5KSk7XG4gIH0pO1xuICByZXR1cm4gbG9ncztcbn1cbmZ1bmN0aW9uIGZvcm1hdFRyYWNlRW50cnkoeyB2bm9kZSwgcmVjdXJzZUNvdW50IH0pIHtcbiAgY29uc3QgcG9zdGZpeCA9IHJlY3Vyc2VDb3VudCA+IDAgPyBgLi4uICgke3JlY3Vyc2VDb3VudH0gcmVjdXJzaXZlIGNhbGxzKWAgOiBgYDtcbiAgY29uc3QgaXNSb290ID0gdm5vZGUuY29tcG9uZW50ID8gdm5vZGUuY29tcG9uZW50LnBhcmVudCA9PSBudWxsIDogZmFsc2U7XG4gIGNvbnN0IG9wZW4gPSBgIGF0IDwke2Zvcm1hdENvbXBvbmVudE5hbWUoXG4gICAgdm5vZGUuY29tcG9uZW50LFxuICAgIHZub2RlLnR5cGUsXG4gICAgaXNSb290XG4gICl9YDtcbiAgY29uc3QgY2xvc2UgPSBgPmAgKyBwb3N0Zml4O1xuICByZXR1cm4gdm5vZGUucHJvcHMgPyBbb3BlbiwgLi4uZm9ybWF0UHJvcHModm5vZGUucHJvcHMpLCBjbG9zZV0gOiBbb3BlbiArIGNsb3NlXTtcbn1cbmZ1bmN0aW9uIGZvcm1hdFByb3BzKHByb3BzKSB7XG4gIGNvbnN0IHJlcyA9IFtdO1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMocHJvcHMpO1xuICBrZXlzLnNsaWNlKDAsIDMpLmZvckVhY2goKGtleSkgPT4ge1xuICAgIHJlcy5wdXNoKC4uLmZvcm1hdFByb3Aoa2V5LCBwcm9wc1trZXldKSk7XG4gIH0pO1xuICBpZiAoa2V5cy5sZW5ndGggPiAzKSB7XG4gICAgcmVzLnB1c2goYCAuLi5gKTtcbiAgfVxuICByZXR1cm4gcmVzO1xufVxuZnVuY3Rpb24gZm9ybWF0UHJvcChrZXksIHZhbHVlLCByYXcpIHtcbiAgaWYgKGlzU3RyaW5nKHZhbHVlKSkge1xuICAgIHZhbHVlID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICAgIHJldHVybiByYXcgPyB2YWx1ZSA6IFtgJHtrZXl9PSR7dmFsdWV9YF07XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiIHx8IHR5cGVvZiB2YWx1ZSA9PT0gXCJib29sZWFuXCIgfHwgdmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiByYXcgPyB2YWx1ZSA6IFtgJHtrZXl9PSR7dmFsdWV9YF07XG4gIH0gZWxzZSBpZiAoaXNSZWYodmFsdWUpKSB7XG4gICAgdmFsdWUgPSBmb3JtYXRQcm9wKGtleSwgdG9SYXcodmFsdWUudmFsdWUpLCB0cnVlKTtcbiAgICByZXR1cm4gcmF3ID8gdmFsdWUgOiBbYCR7a2V5fT1SZWY8YCwgdmFsdWUsIGA+YF07XG4gIH0gZWxzZSBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICByZXR1cm4gW2Ake2tleX09Zm4ke3ZhbHVlLm5hbWUgPyBgPCR7dmFsdWUubmFtZX0+YCA6IGBgfWBdO1xuICB9IGVsc2Uge1xuICAgIHZhbHVlID0gdG9SYXcodmFsdWUpO1xuICAgIHJldHVybiByYXcgPyB2YWx1ZSA6IFtgJHtrZXl9PWAsIHZhbHVlXTtcbiAgfVxufVxuZnVuY3Rpb24gYXNzZXJ0TnVtYmVyKHZhbCwgdHlwZSkge1xuICBpZiAoIXByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIilcbiAgICByZXR1cm47XG4gIGlmICh2YWwgPT09IHZvaWQgMCkge1xuICAgIHJldHVybjtcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsICE9PSBcIm51bWJlclwiKSB7XG4gICAgd2FybihgJHt0eXBlfSBpcyBub3QgYSB2YWxpZCBudW1iZXIgLSBnb3QgJHtKU09OLnN0cmluZ2lmeSh2YWwpfS5gKTtcbiAgfSBlbHNlIGlmIChpc05hTih2YWwpKSB7XG4gICAgd2FybihgJHt0eXBlfSBpcyBOYU4gLSB0aGUgZHVyYXRpb24gZXhwcmVzc2lvbiBtaWdodCBiZSBpbmNvcnJlY3QuYCk7XG4gIH1cbn1cblxuY29uc3QgRXJyb3JUeXBlU3RyaW5ncyA9IHtcbiAgW1wic3BcIl06IFwic2VydmVyUHJlZmV0Y2ggaG9va1wiLFxuICBbXCJiY1wiXTogXCJiZWZvcmVDcmVhdGUgaG9va1wiLFxuICBbXCJjXCJdOiBcImNyZWF0ZWQgaG9va1wiLFxuICBbXCJibVwiXTogXCJiZWZvcmVNb3VudCBob29rXCIsXG4gIFtcIm1cIl06IFwibW91bnRlZCBob29rXCIsXG4gIFtcImJ1XCJdOiBcImJlZm9yZVVwZGF0ZSBob29rXCIsXG4gIFtcInVcIl06IFwidXBkYXRlZFwiLFxuICBbXCJidW1cIl06IFwiYmVmb3JlVW5tb3VudCBob29rXCIsXG4gIFtcInVtXCJdOiBcInVubW91bnRlZCBob29rXCIsXG4gIFtcImFcIl06IFwiYWN0aXZhdGVkIGhvb2tcIixcbiAgW1wiZGFcIl06IFwiZGVhY3RpdmF0ZWQgaG9va1wiLFxuICBbXCJlY1wiXTogXCJlcnJvckNhcHR1cmVkIGhvb2tcIixcbiAgW1wicnRjXCJdOiBcInJlbmRlclRyYWNrZWQgaG9va1wiLFxuICBbXCJydGdcIl06IFwicmVuZGVyVHJpZ2dlcmVkIGhvb2tcIixcbiAgWzBdOiBcInNldHVwIGZ1bmN0aW9uXCIsXG4gIFsxXTogXCJyZW5kZXIgZnVuY3Rpb25cIixcbiAgWzJdOiBcIndhdGNoZXIgZ2V0dGVyXCIsXG4gIFszXTogXCJ3YXRjaGVyIGNhbGxiYWNrXCIsXG4gIFs0XTogXCJ3YXRjaGVyIGNsZWFudXAgZnVuY3Rpb25cIixcbiAgWzVdOiBcIm5hdGl2ZSBldmVudCBoYW5kbGVyXCIsXG4gIFs2XTogXCJjb21wb25lbnQgZXZlbnQgaGFuZGxlclwiLFxuICBbN106IFwidm5vZGUgaG9va1wiLFxuICBbOF06IFwiZGlyZWN0aXZlIGhvb2tcIixcbiAgWzldOiBcInRyYW5zaXRpb24gaG9va1wiLFxuICBbMTBdOiBcImFwcCBlcnJvckhhbmRsZXJcIixcbiAgWzExXTogXCJhcHAgd2FybkhhbmRsZXJcIixcbiAgWzEyXTogXCJyZWYgZnVuY3Rpb25cIixcbiAgWzEzXTogXCJhc3luYyBjb21wb25lbnQgbG9hZGVyXCIsXG4gIFsxNF06IFwic2NoZWR1bGVyIGZsdXNoLiBUaGlzIGlzIGxpa2VseSBhIFZ1ZSBpbnRlcm5hbHMgYnVnLiBQbGVhc2Ugb3BlbiBhbiBpc3N1ZSBhdCBodHRwczovL25ldy1pc3N1ZS52dWVqcy5vcmcvP3JlcG89dnVlanMvY29yZVwiXG59O1xuZnVuY3Rpb24gY2FsbFdpdGhFcnJvckhhbmRsaW5nKGZuLCBpbnN0YW5jZSwgdHlwZSwgYXJncykge1xuICBsZXQgcmVzO1xuICB0cnkge1xuICAgIHJlcyA9IGFyZ3MgPyBmbiguLi5hcmdzKSA6IGZuKCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGhhbmRsZUVycm9yKGVyciwgaW5zdGFuY2UsIHR5cGUpO1xuICB9XG4gIHJldHVybiByZXM7XG59XG5mdW5jdGlvbiBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyhmbiwgaW5zdGFuY2UsIHR5cGUsIGFyZ3MpIHtcbiAgaWYgKGlzRnVuY3Rpb24oZm4pKSB7XG4gICAgY29uc3QgcmVzID0gY2FsbFdpdGhFcnJvckhhbmRsaW5nKGZuLCBpbnN0YW5jZSwgdHlwZSwgYXJncyk7XG4gICAgaWYgKHJlcyAmJiBpc1Byb21pc2UocmVzKSkge1xuICAgICAgcmVzLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgaGFuZGxlRXJyb3IoZXJyLCBpbnN0YW5jZSwgdHlwZSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfVxuICBjb25zdCB2YWx1ZXMgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBmbi5sZW5ndGg7IGkrKykge1xuICAgIHZhbHVlcy5wdXNoKGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKGZuW2ldLCBpbnN0YW5jZSwgdHlwZSwgYXJncykpO1xuICB9XG4gIHJldHVybiB2YWx1ZXM7XG59XG5mdW5jdGlvbiBoYW5kbGVFcnJvcihlcnIsIGluc3RhbmNlLCB0eXBlLCB0aHJvd0luRGV2ID0gdHJ1ZSkge1xuICBjb25zdCBjb250ZXh0Vk5vZGUgPSBpbnN0YW5jZSA/IGluc3RhbmNlLnZub2RlIDogbnVsbDtcbiAgaWYgKGluc3RhbmNlKSB7XG4gICAgbGV0IGN1ciA9IGluc3RhbmNlLnBhcmVudDtcbiAgICBjb25zdCBleHBvc2VkSW5zdGFuY2UgPSBpbnN0YW5jZS5wcm94eTtcbiAgICBjb25zdCBlcnJvckluZm8gPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBFcnJvclR5cGVTdHJpbmdzW3R5cGVdIDogdHlwZTtcbiAgICB3aGlsZSAoY3VyKSB7XG4gICAgICBjb25zdCBlcnJvckNhcHR1cmVkSG9va3MgPSBjdXIuZWM7XG4gICAgICBpZiAoZXJyb3JDYXB0dXJlZEhvb2tzKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZXJyb3JDYXB0dXJlZEhvb2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKGVycm9yQ2FwdHVyZWRIb29rc1tpXShlcnIsIGV4cG9zZWRJbnN0YW5jZSwgZXJyb3JJbmZvKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGN1ciA9IGN1ci5wYXJlbnQ7XG4gICAgfVxuICAgIGNvbnN0IGFwcEVycm9ySGFuZGxlciA9IGluc3RhbmNlLmFwcENvbnRleHQuY29uZmlnLmVycm9ySGFuZGxlcjtcbiAgICBpZiAoYXBwRXJyb3JIYW5kbGVyKSB7XG4gICAgICBjYWxsV2l0aEVycm9ySGFuZGxpbmcoXG4gICAgICAgIGFwcEVycm9ySGFuZGxlcixcbiAgICAgICAgbnVsbCxcbiAgICAgICAgMTAsXG4gICAgICAgIFtlcnIsIGV4cG9zZWRJbnN0YW5jZSwgZXJyb3JJbmZvXVxuICAgICAgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbiAgbG9nRXJyb3IoZXJyLCB0eXBlLCBjb250ZXh0Vk5vZGUsIHRocm93SW5EZXYpO1xufVxuZnVuY3Rpb24gbG9nRXJyb3IoZXJyLCB0eXBlLCBjb250ZXh0Vk5vZGUsIHRocm93SW5EZXYgPSB0cnVlKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBjb25zdCBpbmZvID0gRXJyb3JUeXBlU3RyaW5nc1t0eXBlXTtcbiAgICBpZiAoY29udGV4dFZOb2RlKSB7XG4gICAgICBwdXNoV2FybmluZ0NvbnRleHQoY29udGV4dFZOb2RlKTtcbiAgICB9XG4gICAgd2FybihgVW5oYW5kbGVkIGVycm9yJHtpbmZvID8gYCBkdXJpbmcgZXhlY3V0aW9uIG9mICR7aW5mb31gIDogYGB9YCk7XG4gICAgaWYgKGNvbnRleHRWTm9kZSkge1xuICAgICAgcG9wV2FybmluZ0NvbnRleHQoKTtcbiAgICB9XG4gICAgaWYgKHRocm93SW5EZXYpIHtcbiAgICAgIHRocm93IGVycjtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxubGV0IGlzRmx1c2hpbmcgPSBmYWxzZTtcbmxldCBpc0ZsdXNoUGVuZGluZyA9IGZhbHNlO1xuY29uc3QgcXVldWUgPSBbXTtcbmxldCBmbHVzaEluZGV4ID0gMDtcbmNvbnN0IHBlbmRpbmdQb3N0Rmx1c2hDYnMgPSBbXTtcbmxldCBhY3RpdmVQb3N0Rmx1c2hDYnMgPSBudWxsO1xubGV0IHBvc3RGbHVzaEluZGV4ID0gMDtcbmNvbnN0IHJlc29sdmVkUHJvbWlzZSA9IC8qIEBfX1BVUkVfXyAqLyBQcm9taXNlLnJlc29sdmUoKTtcbmxldCBjdXJyZW50Rmx1c2hQcm9taXNlID0gbnVsbDtcbmNvbnN0IFJFQ1VSU0lPTl9MSU1JVCA9IDEwMDtcbmZ1bmN0aW9uIG5leHRUaWNrKGZuKSB7XG4gIGNvbnN0IHAgPSBjdXJyZW50Rmx1c2hQcm9taXNlIHx8IHJlc29sdmVkUHJvbWlzZTtcbiAgcmV0dXJuIGZuID8gcC50aGVuKHRoaXMgPyBmbi5iaW5kKHRoaXMpIDogZm4pIDogcDtcbn1cbmZ1bmN0aW9uIGZpbmRJbnNlcnRpb25JbmRleChpZCkge1xuICBsZXQgc3RhcnQgPSBmbHVzaEluZGV4ICsgMTtcbiAgbGV0IGVuZCA9IHF1ZXVlLmxlbmd0aDtcbiAgd2hpbGUgKHN0YXJ0IDwgZW5kKSB7XG4gICAgY29uc3QgbWlkZGxlID0gc3RhcnQgKyBlbmQgPj4+IDE7XG4gICAgY29uc3QgbWlkZGxlSm9iSWQgPSBnZXRJZChxdWV1ZVttaWRkbGVdKTtcbiAgICBtaWRkbGVKb2JJZCA8IGlkID8gc3RhcnQgPSBtaWRkbGUgKyAxIDogZW5kID0gbWlkZGxlO1xuICB9XG4gIHJldHVybiBzdGFydDtcbn1cbmZ1bmN0aW9uIHF1ZXVlSm9iKGpvYikge1xuICBpZiAoIXF1ZXVlLmxlbmd0aCB8fCAhcXVldWUuaW5jbHVkZXMoXG4gICAgam9iLFxuICAgIGlzRmx1c2hpbmcgJiYgam9iLmFsbG93UmVjdXJzZSA/IGZsdXNoSW5kZXggKyAxIDogZmx1c2hJbmRleFxuICApKSB7XG4gICAgaWYgKGpvYi5pZCA9PSBudWxsKSB7XG4gICAgICBxdWV1ZS5wdXNoKGpvYik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHF1ZXVlLnNwbGljZShmaW5kSW5zZXJ0aW9uSW5kZXgoam9iLmlkKSwgMCwgam9iKTtcbiAgICB9XG4gICAgcXVldWVGbHVzaCgpO1xuICB9XG59XG5mdW5jdGlvbiBxdWV1ZUZsdXNoKCkge1xuICBpZiAoIWlzRmx1c2hpbmcgJiYgIWlzRmx1c2hQZW5kaW5nKSB7XG4gICAgaXNGbHVzaFBlbmRpbmcgPSB0cnVlO1xuICAgIGN1cnJlbnRGbHVzaFByb21pc2UgPSByZXNvbHZlZFByb21pc2UudGhlbihmbHVzaEpvYnMpO1xuICB9XG59XG5mdW5jdGlvbiBpbnZhbGlkYXRlSm9iKGpvYikge1xuICBjb25zdCBpID0gcXVldWUuaW5kZXhPZihqb2IpO1xuICBpZiAoaSA+IGZsdXNoSW5kZXgpIHtcbiAgICBxdWV1ZS5zcGxpY2UoaSwgMSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHF1ZXVlUG9zdEZsdXNoQ2IoY2IpIHtcbiAgaWYgKCFpc0FycmF5KGNiKSkge1xuICAgIGlmICghYWN0aXZlUG9zdEZsdXNoQ2JzIHx8ICFhY3RpdmVQb3N0Rmx1c2hDYnMuaW5jbHVkZXMoXG4gICAgICBjYixcbiAgICAgIGNiLmFsbG93UmVjdXJzZSA/IHBvc3RGbHVzaEluZGV4ICsgMSA6IHBvc3RGbHVzaEluZGV4XG4gICAgKSkge1xuICAgICAgcGVuZGluZ1Bvc3RGbHVzaENicy5wdXNoKGNiKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcGVuZGluZ1Bvc3RGbHVzaENicy5wdXNoKC4uLmNiKTtcbiAgfVxuICBxdWV1ZUZsdXNoKCk7XG59XG5mdW5jdGlvbiBmbHVzaFByZUZsdXNoQ2JzKHNlZW4sIGkgPSBpc0ZsdXNoaW5nID8gZmx1c2hJbmRleCArIDEgOiAwKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBzZWVuID0gc2VlbiB8fCAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICB9XG4gIGZvciAoOyBpIDwgcXVldWUubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBjYiA9IHF1ZXVlW2ldO1xuICAgIGlmIChjYiAmJiBjYi5wcmUpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgY2hlY2tSZWN1cnNpdmVVcGRhdGVzKHNlZW4sIGNiKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHF1ZXVlLnNwbGljZShpLCAxKTtcbiAgICAgIGktLTtcbiAgICAgIGNiKCk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBmbHVzaFBvc3RGbHVzaENicyhzZWVuKSB7XG4gIGlmIChwZW5kaW5nUG9zdEZsdXNoQ2JzLmxlbmd0aCkge1xuICAgIGNvbnN0IGRlZHVwZWQgPSBbLi4ubmV3IFNldChwZW5kaW5nUG9zdEZsdXNoQ2JzKV07XG4gICAgcGVuZGluZ1Bvc3RGbHVzaENicy5sZW5ndGggPSAwO1xuICAgIGlmIChhY3RpdmVQb3N0Rmx1c2hDYnMpIHtcbiAgICAgIGFjdGl2ZVBvc3RGbHVzaENicy5wdXNoKC4uLmRlZHVwZWQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBhY3RpdmVQb3N0Rmx1c2hDYnMgPSBkZWR1cGVkO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIHNlZW4gPSBzZWVuIHx8IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gICAgfVxuICAgIGFjdGl2ZVBvc3RGbHVzaENicy5zb3J0KChhLCBiKSA9PiBnZXRJZChhKSAtIGdldElkKGIpKTtcbiAgICBmb3IgKHBvc3RGbHVzaEluZGV4ID0gMDsgcG9zdEZsdXNoSW5kZXggPCBhY3RpdmVQb3N0Rmx1c2hDYnMubGVuZ3RoOyBwb3N0Rmx1c2hJbmRleCsrKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmIGNoZWNrUmVjdXJzaXZlVXBkYXRlcyhzZWVuLCBhY3RpdmVQb3N0Rmx1c2hDYnNbcG9zdEZsdXNoSW5kZXhdKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGFjdGl2ZVBvc3RGbHVzaENic1twb3N0Rmx1c2hJbmRleF0oKTtcbiAgICB9XG4gICAgYWN0aXZlUG9zdEZsdXNoQ2JzID0gbnVsbDtcbiAgICBwb3N0Rmx1c2hJbmRleCA9IDA7XG4gIH1cbn1cbmNvbnN0IGdldElkID0gKGpvYikgPT4gam9iLmlkID09IG51bGwgPyBJbmZpbml0eSA6IGpvYi5pZDtcbmNvbnN0IGNvbXBhcmF0b3IgPSAoYSwgYikgPT4ge1xuICBjb25zdCBkaWZmID0gZ2V0SWQoYSkgLSBnZXRJZChiKTtcbiAgaWYgKGRpZmYgPT09IDApIHtcbiAgICBpZiAoYS5wcmUgJiYgIWIucHJlKVxuICAgICAgcmV0dXJuIC0xO1xuICAgIGlmIChiLnByZSAmJiAhYS5wcmUpXG4gICAgICByZXR1cm4gMTtcbiAgfVxuICByZXR1cm4gZGlmZjtcbn07XG5mdW5jdGlvbiBmbHVzaEpvYnMoc2Vlbikge1xuICBpc0ZsdXNoUGVuZGluZyA9IGZhbHNlO1xuICBpc0ZsdXNoaW5nID0gdHJ1ZTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIHNlZW4gPSBzZWVuIHx8IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gIH1cbiAgcXVldWUuc29ydChjb21wYXJhdG9yKTtcbiAgY29uc3QgY2hlY2sgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoam9iKSA9PiBjaGVja1JlY3Vyc2l2ZVVwZGF0ZXMoc2Vlbiwgam9iKSA6IE5PT1A7XG4gIHRyeSB7XG4gICAgZm9yIChmbHVzaEluZGV4ID0gMDsgZmx1c2hJbmRleCA8IHF1ZXVlLmxlbmd0aDsgZmx1c2hJbmRleCsrKSB7XG4gICAgICBjb25zdCBqb2IgPSBxdWV1ZVtmbHVzaEluZGV4XTtcbiAgICAgIGlmIChqb2IgJiYgam9iLmFjdGl2ZSAhPT0gZmFsc2UpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiBjaGVjayhqb2IpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY2FsbFdpdGhFcnJvckhhbmRsaW5nKGpvYiwgbnVsbCwgMTQpO1xuICAgICAgfVxuICAgIH1cbiAgfSBmaW5hbGx5IHtcbiAgICBmbHVzaEluZGV4ID0gMDtcbiAgICBxdWV1ZS5sZW5ndGggPSAwO1xuICAgIGZsdXNoUG9zdEZsdXNoQ2JzKHNlZW4pO1xuICAgIGlzRmx1c2hpbmcgPSBmYWxzZTtcbiAgICBjdXJyZW50Rmx1c2hQcm9taXNlID0gbnVsbDtcbiAgICBpZiAocXVldWUubGVuZ3RoIHx8IHBlbmRpbmdQb3N0Rmx1c2hDYnMubGVuZ3RoKSB7XG4gICAgICBmbHVzaEpvYnMoc2Vlbik7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBjaGVja1JlY3Vyc2l2ZVVwZGF0ZXMoc2VlbiwgZm4pIHtcbiAgaWYgKCFzZWVuLmhhcyhmbikpIHtcbiAgICBzZWVuLnNldChmbiwgMSk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgY291bnQgPSBzZWVuLmdldChmbik7XG4gICAgaWYgKGNvdW50ID4gUkVDVVJTSU9OX0xJTUlUKSB7XG4gICAgICBjb25zdCBpbnN0YW5jZSA9IGZuLm93bmVySW5zdGFuY2U7XG4gICAgICBjb25zdCBjb21wb25lbnROYW1lID0gaW5zdGFuY2UgJiYgZ2V0Q29tcG9uZW50TmFtZShpbnN0YW5jZS50eXBlKTtcbiAgICAgIHdhcm4oXG4gICAgICAgIGBNYXhpbXVtIHJlY3Vyc2l2ZSB1cGRhdGVzIGV4Y2VlZGVkJHtjb21wb25lbnROYW1lID8gYCBpbiBjb21wb25lbnQgPCR7Y29tcG9uZW50TmFtZX0+YCA6IGBgfS4gVGhpcyBtZWFucyB5b3UgaGF2ZSBhIHJlYWN0aXZlIGVmZmVjdCB0aGF0IGlzIG11dGF0aW5nIGl0cyBvd24gZGVwZW5kZW5jaWVzIGFuZCB0aHVzIHJlY3Vyc2l2ZWx5IHRyaWdnZXJpbmcgaXRzZWxmLiBQb3NzaWJsZSBzb3VyY2VzIGluY2x1ZGUgY29tcG9uZW50IHRlbXBsYXRlLCByZW5kZXIgZnVuY3Rpb24sIHVwZGF0ZWQgaG9vayBvciB3YXRjaGVyIHNvdXJjZSBmdW5jdGlvbi5gXG4gICAgICApO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlZW4uc2V0KGZuLCBjb3VudCArIDEpO1xuICAgIH1cbiAgfVxufVxuXG5sZXQgaXNIbXJVcGRhdGluZyA9IGZhbHNlO1xuY29uc3QgaG1yRGlydHlDb21wb25lbnRzID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgZ2V0R2xvYmFsVGhpcygpLl9fVlVFX0hNUl9SVU5USU1FX18gPSB7XG4gICAgY3JlYXRlUmVjb3JkOiB0cnlXcmFwKGNyZWF0ZVJlY29yZCksXG4gICAgcmVyZW5kZXI6IHRyeVdyYXAocmVyZW5kZXIpLFxuICAgIHJlbG9hZDogdHJ5V3JhcChyZWxvYWQpXG4gIH07XG59XG5jb25zdCBtYXAgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuZnVuY3Rpb24gcmVnaXN0ZXJITVIoaW5zdGFuY2UpIHtcbiAgY29uc3QgaWQgPSBpbnN0YW5jZS50eXBlLl9faG1ySWQ7XG4gIGxldCByZWNvcmQgPSBtYXAuZ2V0KGlkKTtcbiAgaWYgKCFyZWNvcmQpIHtcbiAgICBjcmVhdGVSZWNvcmQoaWQsIGluc3RhbmNlLnR5cGUpO1xuICAgIHJlY29yZCA9IG1hcC5nZXQoaWQpO1xuICB9XG4gIHJlY29yZC5pbnN0YW5jZXMuYWRkKGluc3RhbmNlKTtcbn1cbmZ1bmN0aW9uIHVucmVnaXN0ZXJITVIoaW5zdGFuY2UpIHtcbiAgbWFwLmdldChpbnN0YW5jZS50eXBlLl9faG1ySWQpLmluc3RhbmNlcy5kZWxldGUoaW5zdGFuY2UpO1xufVxuZnVuY3Rpb24gY3JlYXRlUmVjb3JkKGlkLCBpbml0aWFsRGVmKSB7XG4gIGlmIChtYXAuaGFzKGlkKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBtYXAuc2V0KGlkLCB7XG4gICAgaW5pdGlhbERlZjogbm9ybWFsaXplQ2xhc3NDb21wb25lbnQoaW5pdGlhbERlZiksXG4gICAgaW5zdGFuY2VzOiAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpXG4gIH0pO1xuICByZXR1cm4gdHJ1ZTtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZUNsYXNzQ29tcG9uZW50KGNvbXBvbmVudCkge1xuICByZXR1cm4gaXNDbGFzc0NvbXBvbmVudChjb21wb25lbnQpID8gY29tcG9uZW50Ll9fdmNjT3B0cyA6IGNvbXBvbmVudDtcbn1cbmZ1bmN0aW9uIHJlcmVuZGVyKGlkLCBuZXdSZW5kZXIpIHtcbiAgY29uc3QgcmVjb3JkID0gbWFwLmdldChpZCk7XG4gIGlmICghcmVjb3JkKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHJlY29yZC5pbml0aWFsRGVmLnJlbmRlciA9IG5ld1JlbmRlcjtcbiAgWy4uLnJlY29yZC5pbnN0YW5jZXNdLmZvckVhY2goKGluc3RhbmNlKSA9PiB7XG4gICAgaWYgKG5ld1JlbmRlcikge1xuICAgICAgaW5zdGFuY2UucmVuZGVyID0gbmV3UmVuZGVyO1xuICAgICAgbm9ybWFsaXplQ2xhc3NDb21wb25lbnQoaW5zdGFuY2UudHlwZSkucmVuZGVyID0gbmV3UmVuZGVyO1xuICAgIH1cbiAgICBpbnN0YW5jZS5yZW5kZXJDYWNoZSA9IFtdO1xuICAgIGlzSG1yVXBkYXRpbmcgPSB0cnVlO1xuICAgIGluc3RhbmNlLnVwZGF0ZSgpO1xuICAgIGlzSG1yVXBkYXRpbmcgPSBmYWxzZTtcbiAgfSk7XG59XG5mdW5jdGlvbiByZWxvYWQoaWQsIG5ld0NvbXApIHtcbiAgY29uc3QgcmVjb3JkID0gbWFwLmdldChpZCk7XG4gIGlmICghcmVjb3JkKVxuICAgIHJldHVybjtcbiAgbmV3Q29tcCA9IG5vcm1hbGl6ZUNsYXNzQ29tcG9uZW50KG5ld0NvbXApO1xuICB1cGRhdGVDb21wb25lbnREZWYocmVjb3JkLmluaXRpYWxEZWYsIG5ld0NvbXApO1xuICBjb25zdCBpbnN0YW5jZXMgPSBbLi4ucmVjb3JkLmluc3RhbmNlc107XG4gIGZvciAoY29uc3QgaW5zdGFuY2Ugb2YgaW5zdGFuY2VzKSB7XG4gICAgY29uc3Qgb2xkQ29tcCA9IG5vcm1hbGl6ZUNsYXNzQ29tcG9uZW50KGluc3RhbmNlLnR5cGUpO1xuICAgIGlmICghaG1yRGlydHlDb21wb25lbnRzLmhhcyhvbGRDb21wKSkge1xuICAgICAgaWYgKG9sZENvbXAgIT09IHJlY29yZC5pbml0aWFsRGVmKSB7XG4gICAgICAgIHVwZGF0ZUNvbXBvbmVudERlZihvbGRDb21wLCBuZXdDb21wKTtcbiAgICAgIH1cbiAgICAgIGhtckRpcnR5Q29tcG9uZW50cy5hZGQob2xkQ29tcCk7XG4gICAgfVxuICAgIGluc3RhbmNlLmFwcENvbnRleHQucHJvcHNDYWNoZS5kZWxldGUoaW5zdGFuY2UudHlwZSk7XG4gICAgaW5zdGFuY2UuYXBwQ29udGV4dC5lbWl0c0NhY2hlLmRlbGV0ZShpbnN0YW5jZS50eXBlKTtcbiAgICBpbnN0YW5jZS5hcHBDb250ZXh0Lm9wdGlvbnNDYWNoZS5kZWxldGUoaW5zdGFuY2UudHlwZSk7XG4gICAgaWYgKGluc3RhbmNlLmNlUmVsb2FkKSB7XG4gICAgICBobXJEaXJ0eUNvbXBvbmVudHMuYWRkKG9sZENvbXApO1xuICAgICAgaW5zdGFuY2UuY2VSZWxvYWQobmV3Q29tcC5zdHlsZXMpO1xuICAgICAgaG1yRGlydHlDb21wb25lbnRzLmRlbGV0ZShvbGRDb21wKTtcbiAgICB9IGVsc2UgaWYgKGluc3RhbmNlLnBhcmVudCkge1xuICAgICAgcXVldWVKb2IoaW5zdGFuY2UucGFyZW50LnVwZGF0ZSk7XG4gICAgfSBlbHNlIGlmIChpbnN0YW5jZS5hcHBDb250ZXh0LnJlbG9hZCkge1xuICAgICAgaW5zdGFuY2UuYXBwQ29udGV4dC5yZWxvYWQoKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICBcIltITVJdIFJvb3Qgb3IgbWFudWFsbHkgbW91bnRlZCBpbnN0YW5jZSBtb2RpZmllZC4gRnVsbCByZWxvYWQgcmVxdWlyZWQuXCJcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHF1ZXVlUG9zdEZsdXNoQ2IoKCkgPT4ge1xuICAgIGZvciAoY29uc3QgaW5zdGFuY2Ugb2YgaW5zdGFuY2VzKSB7XG4gICAgICBobXJEaXJ0eUNvbXBvbmVudHMuZGVsZXRlKFxuICAgICAgICBub3JtYWxpemVDbGFzc0NvbXBvbmVudChpbnN0YW5jZS50eXBlKVxuICAgICAgKTtcbiAgICB9XG4gIH0pO1xufVxuZnVuY3Rpb24gdXBkYXRlQ29tcG9uZW50RGVmKG9sZENvbXAsIG5ld0NvbXApIHtcbiAgZXh0ZW5kKG9sZENvbXAsIG5ld0NvbXApO1xuICBmb3IgKGNvbnN0IGtleSBpbiBvbGRDb21wKSB7XG4gICAgaWYgKGtleSAhPT0gXCJfX2ZpbGVcIiAmJiAhKGtleSBpbiBuZXdDb21wKSkge1xuICAgICAgZGVsZXRlIG9sZENvbXBba2V5XTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIHRyeVdyYXAoZm4pIHtcbiAgcmV0dXJuIChpZCwgYXJnKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBmbihpZCwgYXJnKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICBgW0hNUl0gU29tZXRoaW5nIHdlbnQgd3JvbmcgZHVyaW5nIFZ1ZSBjb21wb25lbnQgaG90LXJlbG9hZC4gRnVsbCByZWxvYWQgcmVxdWlyZWQuYFxuICAgICAgKTtcbiAgICB9XG4gIH07XG59XG5cbmxldCBkZXZ0b29scztcbmxldCBidWZmZXIgPSBbXTtcbmxldCBkZXZ0b29sc05vdEluc3RhbGxlZCA9IGZhbHNlO1xuZnVuY3Rpb24gZW1pdCQxKGV2ZW50LCAuLi5hcmdzKSB7XG4gIGlmIChkZXZ0b29scykge1xuICAgIGRldnRvb2xzLmVtaXQoZXZlbnQsIC4uLmFyZ3MpO1xuICB9IGVsc2UgaWYgKCFkZXZ0b29sc05vdEluc3RhbGxlZCkge1xuICAgIGJ1ZmZlci5wdXNoKHsgZXZlbnQsIGFyZ3MgfSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHNldERldnRvb2xzSG9vayhob29rLCB0YXJnZXQpIHtcbiAgdmFyIF9hLCBfYjtcbiAgZGV2dG9vbHMgPSBob29rO1xuICBpZiAoZGV2dG9vbHMpIHtcbiAgICBkZXZ0b29scy5lbmFibGVkID0gdHJ1ZTtcbiAgICBidWZmZXIuZm9yRWFjaCgoeyBldmVudCwgYXJncyB9KSA9PiBkZXZ0b29scy5lbWl0KGV2ZW50LCAuLi5hcmdzKSk7XG4gICAgYnVmZmVyID0gW107XG4gIH0gZWxzZSBpZiAoXG4gICAgLy8gaGFuZGxlIGxhdGUgZGV2dG9vbHMgaW5qZWN0aW9uIC0gb25seSBkbyB0aGlzIGlmIHdlIGFyZSBpbiBhbiBhY3R1YWxcbiAgICAvLyBicm93c2VyIGVudmlyb25tZW50IHRvIGF2b2lkIHRoZSB0aW1lciBoYW5kbGUgc3RhbGxpbmcgdGVzdCBydW5uZXIgZXhpdFxuICAgIC8vICgjNDgxNSlcbiAgICB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIC8vIHNvbWUgZW52cyBtb2NrIHdpbmRvdyBidXQgbm90IGZ1bGx5XG4gICAgd2luZG93LkhUTUxFbGVtZW50ICYmIC8vIGFsc28gZXhjbHVkZSBqc2RvbVxuICAgICEoKF9iID0gKF9hID0gd2luZG93Lm5hdmlnYXRvcikgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLnVzZXJBZ2VudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLmluY2x1ZGVzKFwianNkb21cIikpXG4gICkge1xuICAgIGNvbnN0IHJlcGxheSA9IHRhcmdldC5fX1ZVRV9ERVZUT09MU19IT09LX1JFUExBWV9fID0gdGFyZ2V0Ll9fVlVFX0RFVlRPT0xTX0hPT0tfUkVQTEFZX18gfHwgW107XG4gICAgcmVwbGF5LnB1c2goKG5ld0hvb2spID0+IHtcbiAgICAgIHNldERldnRvb2xzSG9vayhuZXdIb29rLCB0YXJnZXQpO1xuICAgIH0pO1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgaWYgKCFkZXZ0b29scykge1xuICAgICAgICB0YXJnZXQuX19WVUVfREVWVE9PTFNfSE9PS19SRVBMQVlfXyA9IG51bGw7XG4gICAgICAgIGRldnRvb2xzTm90SW5zdGFsbGVkID0gdHJ1ZTtcbiAgICAgICAgYnVmZmVyID0gW107XG4gICAgICB9XG4gICAgfSwgM2UzKTtcbiAgfSBlbHNlIHtcbiAgICBkZXZ0b29sc05vdEluc3RhbGxlZCA9IHRydWU7XG4gICAgYnVmZmVyID0gW107XG4gIH1cbn1cbmZ1bmN0aW9uIGRldnRvb2xzSW5pdEFwcChhcHAsIHZlcnNpb24pIHtcbiAgZW1pdCQxKFwiYXBwOmluaXRcIiAvKiBBUFBfSU5JVCAqLywgYXBwLCB2ZXJzaW9uLCB7XG4gICAgRnJhZ21lbnQsXG4gICAgVGV4dCxcbiAgICBDb21tZW50LFxuICAgIFN0YXRpY1xuICB9KTtcbn1cbmZ1bmN0aW9uIGRldnRvb2xzVW5tb3VudEFwcChhcHApIHtcbiAgZW1pdCQxKFwiYXBwOnVubW91bnRcIiAvKiBBUFBfVU5NT1VOVCAqLywgYXBwKTtcbn1cbmNvbnN0IGRldnRvb2xzQ29tcG9uZW50QWRkZWQgPSAvKiBAX19QVVJFX18gKi8gY3JlYXRlRGV2dG9vbHNDb21wb25lbnRIb29rKFxuICBcImNvbXBvbmVudDphZGRlZFwiIC8qIENPTVBPTkVOVF9BRERFRCAqL1xuKTtcbmNvbnN0IGRldnRvb2xzQ29tcG9uZW50VXBkYXRlZCA9IC8qIEBfX1BVUkVfXyAqLyBjcmVhdGVEZXZ0b29sc0NvbXBvbmVudEhvb2soXCJjb21wb25lbnQ6dXBkYXRlZFwiIC8qIENPTVBPTkVOVF9VUERBVEVEICovKTtcbmNvbnN0IF9kZXZ0b29sc0NvbXBvbmVudFJlbW92ZWQgPSAvKiBAX19QVVJFX18gKi8gY3JlYXRlRGV2dG9vbHNDb21wb25lbnRIb29rKFxuICBcImNvbXBvbmVudDpyZW1vdmVkXCIgLyogQ09NUE9ORU5UX1JFTU9WRUQgKi9cbik7XG5jb25zdCBkZXZ0b29sc0NvbXBvbmVudFJlbW92ZWQgPSAoY29tcG9uZW50KSA9PiB7XG4gIGlmIChkZXZ0b29scyAmJiB0eXBlb2YgZGV2dG9vbHMuY2xlYW51cEJ1ZmZlciA9PT0gXCJmdW5jdGlvblwiICYmIC8vIHJlbW92ZSB0aGUgY29tcG9uZW50IGlmIGl0IHdhc24ndCBidWZmZXJlZFxuICAhZGV2dG9vbHMuY2xlYW51cEJ1ZmZlcihjb21wb25lbnQpKSB7XG4gICAgX2RldnRvb2xzQ29tcG9uZW50UmVtb3ZlZChjb21wb25lbnQpO1xuICB9XG59O1xuZnVuY3Rpb24gY3JlYXRlRGV2dG9vbHNDb21wb25lbnRIb29rKGhvb2spIHtcbiAgcmV0dXJuIChjb21wb25lbnQpID0+IHtcbiAgICBlbWl0JDEoXG4gICAgICBob29rLFxuICAgICAgY29tcG9uZW50LmFwcENvbnRleHQuYXBwLFxuICAgICAgY29tcG9uZW50LnVpZCxcbiAgICAgIGNvbXBvbmVudC5wYXJlbnQgPyBjb21wb25lbnQucGFyZW50LnVpZCA6IHZvaWQgMCxcbiAgICAgIGNvbXBvbmVudFxuICAgICk7XG4gIH07XG59XG5jb25zdCBkZXZ0b29sc1BlcmZTdGFydCA9IC8qIEBfX1BVUkVfXyAqLyBjcmVhdGVEZXZ0b29sc1BlcmZvcm1hbmNlSG9vayhcbiAgXCJwZXJmOnN0YXJ0XCIgLyogUEVSRk9STUFOQ0VfU1RBUlQgKi9cbik7XG5jb25zdCBkZXZ0b29sc1BlcmZFbmQgPSAvKiBAX19QVVJFX18gKi8gY3JlYXRlRGV2dG9vbHNQZXJmb3JtYW5jZUhvb2soXG4gIFwicGVyZjplbmRcIiAvKiBQRVJGT1JNQU5DRV9FTkQgKi9cbik7XG5mdW5jdGlvbiBjcmVhdGVEZXZ0b29sc1BlcmZvcm1hbmNlSG9vayhob29rKSB7XG4gIHJldHVybiAoY29tcG9uZW50LCB0eXBlLCB0aW1lKSA9PiB7XG4gICAgZW1pdCQxKGhvb2ssIGNvbXBvbmVudC5hcHBDb250ZXh0LmFwcCwgY29tcG9uZW50LnVpZCwgY29tcG9uZW50LCB0eXBlLCB0aW1lKTtcbiAgfTtcbn1cbmZ1bmN0aW9uIGRldnRvb2xzQ29tcG9uZW50RW1pdChjb21wb25lbnQsIGV2ZW50LCBwYXJhbXMpIHtcbiAgZW1pdCQxKFxuICAgIFwiY29tcG9uZW50OmVtaXRcIiAvKiBDT01QT05FTlRfRU1JVCAqLyxcbiAgICBjb21wb25lbnQuYXBwQ29udGV4dC5hcHAsXG4gICAgY29tcG9uZW50LFxuICAgIGV2ZW50LFxuICAgIHBhcmFtc1xuICApO1xufVxuXG5mdW5jdGlvbiBlbWl0KGluc3RhbmNlLCBldmVudCwgLi4ucmF3QXJncykge1xuICBpZiAoaW5zdGFuY2UuaXNVbm1vdW50ZWQpXG4gICAgcmV0dXJuO1xuICBjb25zdCBwcm9wcyA9IGluc3RhbmNlLnZub2RlLnByb3BzIHx8IEVNUFRZX09CSjtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIGNvbnN0IHtcbiAgICAgIGVtaXRzT3B0aW9ucyxcbiAgICAgIHByb3BzT3B0aW9uczogW3Byb3BzT3B0aW9uc11cbiAgICB9ID0gaW5zdGFuY2U7XG4gICAgaWYgKGVtaXRzT3B0aW9ucykge1xuICAgICAgaWYgKCEoZXZlbnQgaW4gZW1pdHNPcHRpb25zKSAmJiB0cnVlKSB7XG4gICAgICAgIGlmICghcHJvcHNPcHRpb25zIHx8ICEodG9IYW5kbGVyS2V5KGV2ZW50KSBpbiBwcm9wc09wdGlvbnMpKSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgIGBDb21wb25lbnQgZW1pdHRlZCBldmVudCBcIiR7ZXZlbnR9XCIgYnV0IGl0IGlzIG5laXRoZXIgZGVjbGFyZWQgaW4gdGhlIGVtaXRzIG9wdGlvbiBub3IgYXMgYW4gXCIke3RvSGFuZGxlcktleShldmVudCl9XCIgcHJvcC5gXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgdmFsaWRhdG9yID0gZW1pdHNPcHRpb25zW2V2ZW50XTtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24odmFsaWRhdG9yKSkge1xuICAgICAgICAgIGNvbnN0IGlzVmFsaWQgPSB2YWxpZGF0b3IoLi4ucmF3QXJncyk7XG4gICAgICAgICAgaWYgKCFpc1ZhbGlkKSB7XG4gICAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgICBgSW52YWxpZCBldmVudCBhcmd1bWVudHM6IGV2ZW50IHZhbGlkYXRpb24gZmFpbGVkIGZvciBldmVudCBcIiR7ZXZlbnR9XCIuYFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgbGV0IGFyZ3MgPSByYXdBcmdzO1xuICBjb25zdCBpc01vZGVsTGlzdGVuZXIgPSBldmVudC5zdGFydHNXaXRoKFwidXBkYXRlOlwiKTtcbiAgY29uc3QgbW9kZWxBcmcgPSBpc01vZGVsTGlzdGVuZXIgJiYgZXZlbnQuc2xpY2UoNyk7XG4gIGlmIChtb2RlbEFyZyAmJiBtb2RlbEFyZyBpbiBwcm9wcykge1xuICAgIGNvbnN0IG1vZGlmaWVyc0tleSA9IGAke21vZGVsQXJnID09PSBcIm1vZGVsVmFsdWVcIiA/IFwibW9kZWxcIiA6IG1vZGVsQXJnfU1vZGlmaWVyc2A7XG4gICAgY29uc3QgeyBudW1iZXIsIHRyaW0gfSA9IHByb3BzW21vZGlmaWVyc0tleV0gfHwgRU1QVFlfT0JKO1xuICAgIGlmICh0cmltKSB7XG4gICAgICBhcmdzID0gcmF3QXJncy5tYXAoKGEpID0+IGlzU3RyaW5nKGEpID8gYS50cmltKCkgOiBhKTtcbiAgICB9XG4gICAgaWYgKG51bWJlcikge1xuICAgICAgYXJncyA9IHJhd0FyZ3MubWFwKGxvb3NlVG9OdW1iZXIpO1xuICAgIH1cbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xuICAgIGRldnRvb2xzQ29tcG9uZW50RW1pdChpbnN0YW5jZSwgZXZlbnQsIGFyZ3MpO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBjb25zdCBsb3dlckNhc2VFdmVudCA9IGV2ZW50LnRvTG93ZXJDYXNlKCk7XG4gICAgaWYgKGxvd2VyQ2FzZUV2ZW50ICE9PSBldmVudCAmJiBwcm9wc1t0b0hhbmRsZXJLZXkobG93ZXJDYXNlRXZlbnQpXSkge1xuICAgICAgd2FybihcbiAgICAgICAgYEV2ZW50IFwiJHtsb3dlckNhc2VFdmVudH1cIiBpcyBlbWl0dGVkIGluIGNvbXBvbmVudCAke2Zvcm1hdENvbXBvbmVudE5hbWUoXG4gICAgICAgICAgaW5zdGFuY2UsXG4gICAgICAgICAgaW5zdGFuY2UudHlwZVxuICAgICAgICApfSBidXQgdGhlIGhhbmRsZXIgaXMgcmVnaXN0ZXJlZCBmb3IgXCIke2V2ZW50fVwiLiBOb3RlIHRoYXQgSFRNTCBhdHRyaWJ1dGVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlIGFuZCB5b3UgY2Fubm90IHVzZSB2LW9uIHRvIGxpc3RlbiB0byBjYW1lbENhc2UgZXZlbnRzIHdoZW4gdXNpbmcgaW4tRE9NIHRlbXBsYXRlcy4gWW91IHNob3VsZCBwcm9iYWJseSB1c2UgXCIke2h5cGhlbmF0ZShldmVudCl9XCIgaW5zdGVhZCBvZiBcIiR7ZXZlbnR9XCIuYFxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgbGV0IGhhbmRsZXJOYW1lO1xuICBsZXQgaGFuZGxlciA9IHByb3BzW2hhbmRsZXJOYW1lID0gdG9IYW5kbGVyS2V5KGV2ZW50KV0gfHwgLy8gYWxzbyB0cnkgY2FtZWxDYXNlIGV2ZW50IGhhbmRsZXIgKCMyMjQ5KVxuICBwcm9wc1toYW5kbGVyTmFtZSA9IHRvSGFuZGxlcktleShjYW1lbGl6ZShldmVudCkpXTtcbiAgaWYgKCFoYW5kbGVyICYmIGlzTW9kZWxMaXN0ZW5lcikge1xuICAgIGhhbmRsZXIgPSBwcm9wc1toYW5kbGVyTmFtZSA9IHRvSGFuZGxlcktleShoeXBoZW5hdGUoZXZlbnQpKV07XG4gIH1cbiAgaWYgKGhhbmRsZXIpIHtcbiAgICBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyhcbiAgICAgIGhhbmRsZXIsXG4gICAgICBpbnN0YW5jZSxcbiAgICAgIDYsXG4gICAgICBhcmdzXG4gICAgKTtcbiAgfVxuICBjb25zdCBvbmNlSGFuZGxlciA9IHByb3BzW2hhbmRsZXJOYW1lICsgYE9uY2VgXTtcbiAgaWYgKG9uY2VIYW5kbGVyKSB7XG4gICAgaWYgKCFpbnN0YW5jZS5lbWl0dGVkKSB7XG4gICAgICBpbnN0YW5jZS5lbWl0dGVkID0ge307XG4gICAgfSBlbHNlIGlmIChpbnN0YW5jZS5lbWl0dGVkW2hhbmRsZXJOYW1lXSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpbnN0YW5jZS5lbWl0dGVkW2hhbmRsZXJOYW1lXSA9IHRydWU7XG4gICAgY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcoXG4gICAgICBvbmNlSGFuZGxlcixcbiAgICAgIGluc3RhbmNlLFxuICAgICAgNixcbiAgICAgIGFyZ3NcbiAgICApO1xuICB9XG59XG5mdW5jdGlvbiBub3JtYWxpemVFbWl0c09wdGlvbnMoY29tcCwgYXBwQ29udGV4dCwgYXNNaXhpbiA9IGZhbHNlKSB7XG4gIGNvbnN0IGNhY2hlID0gYXBwQ29udGV4dC5lbWl0c0NhY2hlO1xuICBjb25zdCBjYWNoZWQgPSBjYWNoZS5nZXQoY29tcCk7XG4gIGlmIChjYWNoZWQgIT09IHZvaWQgMCkge1xuICAgIHJldHVybiBjYWNoZWQ7XG4gIH1cbiAgY29uc3QgcmF3ID0gY29tcC5lbWl0cztcbiAgbGV0IG5vcm1hbGl6ZWQgPSB7fTtcbiAgbGV0IGhhc0V4dGVuZHMgPSBmYWxzZTtcbiAgaWYgKF9fVlVFX09QVElPTlNfQVBJX18gJiYgIWlzRnVuY3Rpb24oY29tcCkpIHtcbiAgICBjb25zdCBleHRlbmRFbWl0cyA9IChyYXcyKSA9PiB7XG4gICAgICBjb25zdCBub3JtYWxpemVkRnJvbUV4dGVuZCA9IG5vcm1hbGl6ZUVtaXRzT3B0aW9ucyhyYXcyLCBhcHBDb250ZXh0LCB0cnVlKTtcbiAgICAgIGlmIChub3JtYWxpemVkRnJvbUV4dGVuZCkge1xuICAgICAgICBoYXNFeHRlbmRzID0gdHJ1ZTtcbiAgICAgICAgZXh0ZW5kKG5vcm1hbGl6ZWQsIG5vcm1hbGl6ZWRGcm9tRXh0ZW5kKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGlmICghYXNNaXhpbiAmJiBhcHBDb250ZXh0Lm1peGlucy5sZW5ndGgpIHtcbiAgICAgIGFwcENvbnRleHQubWl4aW5zLmZvckVhY2goZXh0ZW5kRW1pdHMpO1xuICAgIH1cbiAgICBpZiAoY29tcC5leHRlbmRzKSB7XG4gICAgICBleHRlbmRFbWl0cyhjb21wLmV4dGVuZHMpO1xuICAgIH1cbiAgICBpZiAoY29tcC5taXhpbnMpIHtcbiAgICAgIGNvbXAubWl4aW5zLmZvckVhY2goZXh0ZW5kRW1pdHMpO1xuICAgIH1cbiAgfVxuICBpZiAoIXJhdyAmJiAhaGFzRXh0ZW5kcykge1xuICAgIGlmIChpc09iamVjdChjb21wKSkge1xuICAgICAgY2FjaGUuc2V0KGNvbXAsIG51bGwpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBpZiAoaXNBcnJheShyYXcpKSB7XG4gICAgcmF3LmZvckVhY2goKGtleSkgPT4gbm9ybWFsaXplZFtrZXldID0gbnVsbCk7XG4gIH0gZWxzZSB7XG4gICAgZXh0ZW5kKG5vcm1hbGl6ZWQsIHJhdyk7XG4gIH1cbiAgaWYgKGlzT2JqZWN0KGNvbXApKSB7XG4gICAgY2FjaGUuc2V0KGNvbXAsIG5vcm1hbGl6ZWQpO1xuICB9XG4gIHJldHVybiBub3JtYWxpemVkO1xufVxuZnVuY3Rpb24gaXNFbWl0TGlzdGVuZXIob3B0aW9ucywga2V5KSB7XG4gIGlmICghb3B0aW9ucyB8fCAhaXNPbihrZXkpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGtleSA9IGtleS5zbGljZSgyKS5yZXBsYWNlKC9PbmNlJC8sIFwiXCIpO1xuICByZXR1cm4gaGFzT3duKG9wdGlvbnMsIGtleVswXS50b0xvd2VyQ2FzZSgpICsga2V5LnNsaWNlKDEpKSB8fCBoYXNPd24ob3B0aW9ucywgaHlwaGVuYXRlKGtleSkpIHx8IGhhc093bihvcHRpb25zLCBrZXkpO1xufVxuXG5sZXQgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID0gbnVsbDtcbmxldCBjdXJyZW50U2NvcGVJZCA9IG51bGw7XG5mdW5jdGlvbiBzZXRDdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UoaW5zdGFuY2UpIHtcbiAgY29uc3QgcHJldiA9IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZTtcbiAgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID0gaW5zdGFuY2U7XG4gIGN1cnJlbnRTY29wZUlkID0gaW5zdGFuY2UgJiYgaW5zdGFuY2UudHlwZS5fX3Njb3BlSWQgfHwgbnVsbDtcbiAgcmV0dXJuIHByZXY7XG59XG5mdW5jdGlvbiBwdXNoU2NvcGVJZChpZCkge1xuICBjdXJyZW50U2NvcGVJZCA9IGlkO1xufVxuZnVuY3Rpb24gcG9wU2NvcGVJZCgpIHtcbiAgY3VycmVudFNjb3BlSWQgPSBudWxsO1xufVxuY29uc3Qgd2l0aFNjb3BlSWQgPSAoX2lkKSA9PiB3aXRoQ3R4O1xuZnVuY3Rpb24gd2l0aEN0eChmbiwgY3R4ID0gY3VycmVudFJlbmRlcmluZ0luc3RhbmNlLCBpc05vblNjb3BlZFNsb3QpIHtcbiAgaWYgKCFjdHgpXG4gICAgcmV0dXJuIGZuO1xuICBpZiAoZm4uX24pIHtcbiAgICByZXR1cm4gZm47XG4gIH1cbiAgY29uc3QgcmVuZGVyRm5XaXRoQ29udGV4dCA9ICguLi5hcmdzKSA9PiB7XG4gICAgaWYgKHJlbmRlckZuV2l0aENvbnRleHQuX2QpIHtcbiAgICAgIHNldEJsb2NrVHJhY2tpbmcoLTEpO1xuICAgIH1cbiAgICBjb25zdCBwcmV2SW5zdGFuY2UgPSBzZXRDdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UoY3R4KTtcbiAgICBsZXQgcmVzO1xuICAgIHRyeSB7XG4gICAgICByZXMgPSBmbiguLi5hcmdzKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgc2V0Q3VycmVudFJlbmRlcmluZ0luc3RhbmNlKHByZXZJbnN0YW5jZSk7XG4gICAgICBpZiAocmVuZGVyRm5XaXRoQ29udGV4dC5fZCkge1xuICAgICAgICBzZXRCbG9ja1RyYWNraW5nKDEpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xuICAgICAgZGV2dG9vbHNDb21wb25lbnRVcGRhdGVkKGN0eCk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH07XG4gIHJlbmRlckZuV2l0aENvbnRleHQuX24gPSB0cnVlO1xuICByZW5kZXJGbldpdGhDb250ZXh0Ll9jID0gdHJ1ZTtcbiAgcmVuZGVyRm5XaXRoQ29udGV4dC5fZCA9IHRydWU7XG4gIHJldHVybiByZW5kZXJGbldpdGhDb250ZXh0O1xufVxuXG5sZXQgYWNjZXNzZWRBdHRycyA9IGZhbHNlO1xuZnVuY3Rpb24gbWFya0F0dHJzQWNjZXNzZWQoKSB7XG4gIGFjY2Vzc2VkQXR0cnMgPSB0cnVlO1xufVxuZnVuY3Rpb24gcmVuZGVyQ29tcG9uZW50Um9vdChpbnN0YW5jZSkge1xuICBjb25zdCB7XG4gICAgdHlwZTogQ29tcG9uZW50LFxuICAgIHZub2RlLFxuICAgIHByb3h5LFxuICAgIHdpdGhQcm94eSxcbiAgICBwcm9wcyxcbiAgICBwcm9wc09wdGlvbnM6IFtwcm9wc09wdGlvbnNdLFxuICAgIHNsb3RzLFxuICAgIGF0dHJzLFxuICAgIGVtaXQsXG4gICAgcmVuZGVyLFxuICAgIHJlbmRlckNhY2hlLFxuICAgIGRhdGEsXG4gICAgc2V0dXBTdGF0ZSxcbiAgICBjdHgsXG4gICAgaW5oZXJpdEF0dHJzXG4gIH0gPSBpbnN0YW5jZTtcbiAgbGV0IHJlc3VsdDtcbiAgbGV0IGZhbGx0aHJvdWdoQXR0cnM7XG4gIGNvbnN0IHByZXYgPSBzZXRDdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UoaW5zdGFuY2UpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgYWNjZXNzZWRBdHRycyA9IGZhbHNlO1xuICB9XG4gIHRyeSB7XG4gICAgaWYgKHZub2RlLnNoYXBlRmxhZyAmIDQpIHtcbiAgICAgIGNvbnN0IHByb3h5VG9Vc2UgPSB3aXRoUHJveHkgfHwgcHJveHk7XG4gICAgICByZXN1bHQgPSBub3JtYWxpemVWTm9kZShcbiAgICAgICAgcmVuZGVyLmNhbGwoXG4gICAgICAgICAgcHJveHlUb1VzZSxcbiAgICAgICAgICBwcm94eVRvVXNlLFxuICAgICAgICAgIHJlbmRlckNhY2hlLFxuICAgICAgICAgIHByb3BzLFxuICAgICAgICAgIHNldHVwU3RhdGUsXG4gICAgICAgICAgZGF0YSxcbiAgICAgICAgICBjdHhcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICAgIGZhbGx0aHJvdWdoQXR0cnMgPSBhdHRycztcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgcmVuZGVyMiA9IENvbXBvbmVudDtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgYXR0cnMgPT09IHByb3BzKSB7XG4gICAgICAgIG1hcmtBdHRyc0FjY2Vzc2VkKCk7XG4gICAgICB9XG4gICAgICByZXN1bHQgPSBub3JtYWxpemVWTm9kZShcbiAgICAgICAgcmVuZGVyMi5sZW5ndGggPiAxID8gcmVuZGVyMihcbiAgICAgICAgICBwcm9wcyxcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gICAgICAgICAgICBnZXQgYXR0cnMoKSB7XG4gICAgICAgICAgICAgIG1hcmtBdHRyc0FjY2Vzc2VkKCk7XG4gICAgICAgICAgICAgIHJldHVybiBhdHRycztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzbG90cyxcbiAgICAgICAgICAgIGVtaXRcbiAgICAgICAgICB9IDogeyBhdHRycywgc2xvdHMsIGVtaXQgfVxuICAgICAgICApIDogcmVuZGVyMihcbiAgICAgICAgICBwcm9wcyxcbiAgICAgICAgICBudWxsXG4gICAgICAgICAgLyogd2Uga25vdyBpdCBkb2Vzbid0IG5lZWQgaXQgKi9cbiAgICAgICAgKVxuICAgICAgKTtcbiAgICAgIGZhbGx0aHJvdWdoQXR0cnMgPSBDb21wb25lbnQucHJvcHMgPyBhdHRycyA6IGdldEZ1bmN0aW9uYWxGYWxsdGhyb3VnaChhdHRycyk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBibG9ja1N0YWNrLmxlbmd0aCA9IDA7XG4gICAgaGFuZGxlRXJyb3IoZXJyLCBpbnN0YW5jZSwgMSk7XG4gICAgcmVzdWx0ID0gY3JlYXRlVk5vZGUoQ29tbWVudCk7XG4gIH1cbiAgbGV0IHJvb3QgPSByZXN1bHQ7XG4gIGxldCBzZXRSb290ID0gdm9pZCAwO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmIHJlc3VsdC5wYXRjaEZsYWcgPiAwICYmIHJlc3VsdC5wYXRjaEZsYWcgJiAyMDQ4KSB7XG4gICAgW3Jvb3QsIHNldFJvb3RdID0gZ2V0Q2hpbGRSb290KHJlc3VsdCk7XG4gIH1cbiAgaWYgKGZhbGx0aHJvdWdoQXR0cnMgJiYgaW5oZXJpdEF0dHJzICE9PSBmYWxzZSkge1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhmYWxsdGhyb3VnaEF0dHJzKTtcbiAgICBjb25zdCB7IHNoYXBlRmxhZyB9ID0gcm9vdDtcbiAgICBpZiAoa2V5cy5sZW5ndGgpIHtcbiAgICAgIGlmIChzaGFwZUZsYWcgJiAoMSB8IDYpKSB7XG4gICAgICAgIGlmIChwcm9wc09wdGlvbnMgJiYga2V5cy5zb21lKGlzTW9kZWxMaXN0ZW5lcikpIHtcbiAgICAgICAgICBmYWxsdGhyb3VnaEF0dHJzID0gZmlsdGVyTW9kZWxMaXN0ZW5lcnMoXG4gICAgICAgICAgICBmYWxsdGhyb3VnaEF0dHJzLFxuICAgICAgICAgICAgcHJvcHNPcHRpb25zXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICByb290ID0gY2xvbmVWTm9kZShyb290LCBmYWxsdGhyb3VnaEF0dHJzKTtcbiAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmICFhY2Nlc3NlZEF0dHJzICYmIHJvb3QudHlwZSAhPT0gQ29tbWVudCkge1xuICAgICAgICBjb25zdCBhbGxBdHRycyA9IE9iamVjdC5rZXlzKGF0dHJzKTtcbiAgICAgICAgY29uc3QgZXZlbnRBdHRycyA9IFtdO1xuICAgICAgICBjb25zdCBleHRyYUF0dHJzID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gYWxsQXR0cnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgY29uc3Qga2V5ID0gYWxsQXR0cnNbaV07XG4gICAgICAgICAgaWYgKGlzT24oa2V5KSkge1xuICAgICAgICAgICAgaWYgKCFpc01vZGVsTGlzdGVuZXIoa2V5KSkge1xuICAgICAgICAgICAgICBldmVudEF0dHJzLnB1c2goa2V5WzJdLnRvTG93ZXJDYXNlKCkgKyBrZXkuc2xpY2UoMykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBleHRyYUF0dHJzLnB1c2goa2V5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV4dHJhQXR0cnMubGVuZ3RoKSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgIGBFeHRyYW5lb3VzIG5vbi1wcm9wcyBhdHRyaWJ1dGVzICgke2V4dHJhQXR0cnMuam9pbihcIiwgXCIpfSkgd2VyZSBwYXNzZWQgdG8gY29tcG9uZW50IGJ1dCBjb3VsZCBub3QgYmUgYXV0b21hdGljYWxseSBpbmhlcml0ZWQgYmVjYXVzZSBjb21wb25lbnQgcmVuZGVycyBmcmFnbWVudCBvciB0ZXh0IHJvb3Qgbm9kZXMuYFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV2ZW50QXR0cnMubGVuZ3RoKSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgIGBFeHRyYW5lb3VzIG5vbi1lbWl0cyBldmVudCBsaXN0ZW5lcnMgKCR7ZXZlbnRBdHRycy5qb2luKFwiLCBcIil9KSB3ZXJlIHBhc3NlZCB0byBjb21wb25lbnQgYnV0IGNvdWxkIG5vdCBiZSBhdXRvbWF0aWNhbGx5IGluaGVyaXRlZCBiZWNhdXNlIGNvbXBvbmVudCByZW5kZXJzIGZyYWdtZW50IG9yIHRleHQgcm9vdCBub2Rlcy4gSWYgdGhlIGxpc3RlbmVyIGlzIGludGVuZGVkIHRvIGJlIGEgY29tcG9uZW50IGN1c3RvbSBldmVudCBsaXN0ZW5lciBvbmx5LCBkZWNsYXJlIGl0IHVzaW5nIHRoZSBcImVtaXRzXCIgb3B0aW9uLmBcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmICh2bm9kZS5kaXJzKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiAhaXNFbGVtZW50Um9vdChyb290KSkge1xuICAgICAgd2FybihcbiAgICAgICAgYFJ1bnRpbWUgZGlyZWN0aXZlIHVzZWQgb24gY29tcG9uZW50IHdpdGggbm9uLWVsZW1lbnQgcm9vdCBub2RlLiBUaGUgZGlyZWN0aXZlcyB3aWxsIG5vdCBmdW5jdGlvbiBhcyBpbnRlbmRlZC5gXG4gICAgICApO1xuICAgIH1cbiAgICByb290ID0gY2xvbmVWTm9kZShyb290KTtcbiAgICByb290LmRpcnMgPSByb290LmRpcnMgPyByb290LmRpcnMuY29uY2F0KHZub2RlLmRpcnMpIDogdm5vZGUuZGlycztcbiAgfVxuICBpZiAodm5vZGUudHJhbnNpdGlvbikge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgIWlzRWxlbWVudFJvb3Qocm9vdCkpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIGBDb21wb25lbnQgaW5zaWRlIDxUcmFuc2l0aW9uPiByZW5kZXJzIG5vbi1lbGVtZW50IHJvb3Qgbm9kZSB0aGF0IGNhbm5vdCBiZSBhbmltYXRlZC5gXG4gICAgICApO1xuICAgIH1cbiAgICByb290LnRyYW5zaXRpb24gPSB2bm9kZS50cmFuc2l0aW9uO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgc2V0Um9vdCkge1xuICAgIHNldFJvb3Qocm9vdCk7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gcm9vdDtcbiAgfVxuICBzZXRDdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UocHJldik7XG4gIHJldHVybiByZXN1bHQ7XG59XG5jb25zdCBnZXRDaGlsZFJvb3QgPSAodm5vZGUpID0+IHtcbiAgY29uc3QgcmF3Q2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbjtcbiAgY29uc3QgZHluYW1pY0NoaWxkcmVuID0gdm5vZGUuZHluYW1pY0NoaWxkcmVuO1xuICBjb25zdCBjaGlsZFJvb3QgPSBmaWx0ZXJTaW5nbGVSb290KHJhd0NoaWxkcmVuKTtcbiAgaWYgKCFjaGlsZFJvb3QpIHtcbiAgICByZXR1cm4gW3Zub2RlLCB2b2lkIDBdO1xuICB9XG4gIGNvbnN0IGluZGV4ID0gcmF3Q2hpbGRyZW4uaW5kZXhPZihjaGlsZFJvb3QpO1xuICBjb25zdCBkeW5hbWljSW5kZXggPSBkeW5hbWljQ2hpbGRyZW4gPyBkeW5hbWljQ2hpbGRyZW4uaW5kZXhPZihjaGlsZFJvb3QpIDogLTE7XG4gIGNvbnN0IHNldFJvb3QgPSAodXBkYXRlZFJvb3QpID0+IHtcbiAgICByYXdDaGlsZHJlbltpbmRleF0gPSB1cGRhdGVkUm9vdDtcbiAgICBpZiAoZHluYW1pY0NoaWxkcmVuKSB7XG4gICAgICBpZiAoZHluYW1pY0luZGV4ID4gLTEpIHtcbiAgICAgICAgZHluYW1pY0NoaWxkcmVuW2R5bmFtaWNJbmRleF0gPSB1cGRhdGVkUm9vdDtcbiAgICAgIH0gZWxzZSBpZiAodXBkYXRlZFJvb3QucGF0Y2hGbGFnID4gMCkge1xuICAgICAgICB2bm9kZS5keW5hbWljQ2hpbGRyZW4gPSBbLi4uZHluYW1pY0NoaWxkcmVuLCB1cGRhdGVkUm9vdF07XG4gICAgICB9XG4gICAgfVxuICB9O1xuICByZXR1cm4gW25vcm1hbGl6ZVZOb2RlKGNoaWxkUm9vdCksIHNldFJvb3RdO1xufTtcbmZ1bmN0aW9uIGZpbHRlclNpbmdsZVJvb3QoY2hpbGRyZW4pIHtcbiAgbGV0IHNpbmdsZVJvb3Q7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgIGlmIChpc1ZOb2RlKGNoaWxkKSkge1xuICAgICAgaWYgKGNoaWxkLnR5cGUgIT09IENvbW1lbnQgfHwgY2hpbGQuY2hpbGRyZW4gPT09IFwidi1pZlwiKSB7XG4gICAgICAgIGlmIChzaW5nbGVSb290KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNpbmdsZVJvb3QgPSBjaGlsZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG4gIHJldHVybiBzaW5nbGVSb290O1xufVxuY29uc3QgZ2V0RnVuY3Rpb25hbEZhbGx0aHJvdWdoID0gKGF0dHJzKSA9PiB7XG4gIGxldCByZXM7XG4gIGZvciAoY29uc3Qga2V5IGluIGF0dHJzKSB7XG4gICAgaWYgKGtleSA9PT0gXCJjbGFzc1wiIHx8IGtleSA9PT0gXCJzdHlsZVwiIHx8IGlzT24oa2V5KSkge1xuICAgICAgKHJlcyB8fCAocmVzID0ge30pKVtrZXldID0gYXR0cnNba2V5XTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlcztcbn07XG5jb25zdCBmaWx0ZXJNb2RlbExpc3RlbmVycyA9IChhdHRycywgcHJvcHMpID0+IHtcbiAgY29uc3QgcmVzID0ge307XG4gIGZvciAoY29uc3Qga2V5IGluIGF0dHJzKSB7XG4gICAgaWYgKCFpc01vZGVsTGlzdGVuZXIoa2V5KSB8fCAhKGtleS5zbGljZSg5KSBpbiBwcm9wcykpIHtcbiAgICAgIHJlc1trZXldID0gYXR0cnNba2V5XTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlcztcbn07XG5jb25zdCBpc0VsZW1lbnRSb290ID0gKHZub2RlKSA9PiB7XG4gIHJldHVybiB2bm9kZS5zaGFwZUZsYWcgJiAoNiB8IDEpIHx8IHZub2RlLnR5cGUgPT09IENvbW1lbnQ7XG59O1xuZnVuY3Rpb24gc2hvdWxkVXBkYXRlQ29tcG9uZW50KHByZXZWTm9kZSwgbmV4dFZOb2RlLCBvcHRpbWl6ZWQpIHtcbiAgY29uc3QgeyBwcm9wczogcHJldlByb3BzLCBjaGlsZHJlbjogcHJldkNoaWxkcmVuLCBjb21wb25lbnQgfSA9IHByZXZWTm9kZTtcbiAgY29uc3QgeyBwcm9wczogbmV4dFByb3BzLCBjaGlsZHJlbjogbmV4dENoaWxkcmVuLCBwYXRjaEZsYWcgfSA9IG5leHRWTm9kZTtcbiAgY29uc3QgZW1pdHMgPSBjb21wb25lbnQuZW1pdHNPcHRpb25zO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmIChwcmV2Q2hpbGRyZW4gfHwgbmV4dENoaWxkcmVuKSAmJiBpc0htclVwZGF0aW5nKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKG5leHRWTm9kZS5kaXJzIHx8IG5leHRWTm9kZS50cmFuc2l0aW9uKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKG9wdGltaXplZCAmJiBwYXRjaEZsYWcgPj0gMCkge1xuICAgIGlmIChwYXRjaEZsYWcgJiAxMDI0KSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHBhdGNoRmxhZyAmIDE2KSB7XG4gICAgICBpZiAoIXByZXZQcm9wcykge1xuICAgICAgICByZXR1cm4gISFuZXh0UHJvcHM7XG4gICAgICB9XG4gICAgICByZXR1cm4gaGFzUHJvcHNDaGFuZ2VkKHByZXZQcm9wcywgbmV4dFByb3BzLCBlbWl0cyk7XG4gICAgfSBlbHNlIGlmIChwYXRjaEZsYWcgJiA4KSB7XG4gICAgICBjb25zdCBkeW5hbWljUHJvcHMgPSBuZXh0Vk5vZGUuZHluYW1pY1Byb3BzO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkeW5hbWljUHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3Qga2V5ID0gZHluYW1pY1Byb3BzW2ldO1xuICAgICAgICBpZiAobmV4dFByb3BzW2tleV0gIT09IHByZXZQcm9wc1trZXldICYmICFpc0VtaXRMaXN0ZW5lcihlbWl0cywga2V5KSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChwcmV2Q2hpbGRyZW4gfHwgbmV4dENoaWxkcmVuKSB7XG4gICAgICBpZiAoIW5leHRDaGlsZHJlbiB8fCAhbmV4dENoaWxkcmVuLiRzdGFibGUpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwcmV2UHJvcHMgPT09IG5leHRQcm9wcykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoIXByZXZQcm9wcykge1xuICAgICAgcmV0dXJuICEhbmV4dFByb3BzO1xuICAgIH1cbiAgICBpZiAoIW5leHRQcm9wcykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBoYXNQcm9wc0NoYW5nZWQocHJldlByb3BzLCBuZXh0UHJvcHMsIGVtaXRzKTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBoYXNQcm9wc0NoYW5nZWQocHJldlByb3BzLCBuZXh0UHJvcHMsIGVtaXRzT3B0aW9ucykge1xuICBjb25zdCBuZXh0S2V5cyA9IE9iamVjdC5rZXlzKG5leHRQcm9wcyk7XG4gIGlmIChuZXh0S2V5cy5sZW5ndGggIT09IE9iamVjdC5rZXlzKHByZXZQcm9wcykubGVuZ3RoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBuZXh0S2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGtleSA9IG5leHRLZXlzW2ldO1xuICAgIGlmIChuZXh0UHJvcHNba2V5XSAhPT0gcHJldlByb3BzW2tleV0gJiYgIWlzRW1pdExpc3RlbmVyKGVtaXRzT3B0aW9ucywga2V5KSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUhPQ0hvc3RFbCh7IHZub2RlLCBwYXJlbnQgfSwgZWwpIHtcbiAgd2hpbGUgKHBhcmVudCAmJiBwYXJlbnQuc3ViVHJlZSA9PT0gdm5vZGUpIHtcbiAgICAodm5vZGUgPSBwYXJlbnQudm5vZGUpLmVsID0gZWw7XG4gICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgfVxufVxuXG5jb25zdCBpc1N1c3BlbnNlID0gKHR5cGUpID0+IHR5cGUuX19pc1N1c3BlbnNlO1xuY29uc3QgU3VzcGVuc2VJbXBsID0ge1xuICBuYW1lOiBcIlN1c3BlbnNlXCIsXG4gIC8vIEluIG9yZGVyIHRvIG1ha2UgU3VzcGVuc2UgdHJlZS1zaGFrYWJsZSwgd2UgbmVlZCB0byBhdm9pZCBpbXBvcnRpbmcgaXRcbiAgLy8gZGlyZWN0bHkgaW4gdGhlIHJlbmRlcmVyLiBUaGUgcmVuZGVyZXIgY2hlY2tzIGZvciB0aGUgX19pc1N1c3BlbnNlIGZsYWdcbiAgLy8gb24gYSB2bm9kZSdzIHR5cGUgYW5kIGNhbGxzIHRoZSBgcHJvY2Vzc2AgbWV0aG9kLCBwYXNzaW5nIGluIHJlbmRlcmVyXG4gIC8vIGludGVybmFscy5cbiAgX19pc1N1c3BlbnNlOiB0cnVlLFxuICBwcm9jZXNzKG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCwgcmVuZGVyZXJJbnRlcm5hbHMpIHtcbiAgICBpZiAobjEgPT0gbnVsbCkge1xuICAgICAgbW91bnRTdXNwZW5zZShcbiAgICAgICAgbjIsXG4gICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgYW5jaG9yLFxuICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICBpc1NWRyxcbiAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICBvcHRpbWl6ZWQsXG4gICAgICAgIHJlbmRlcmVySW50ZXJuYWxzXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXRjaFN1c3BlbnNlKFxuICAgICAgICBuMSxcbiAgICAgICAgbjIsXG4gICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgYW5jaG9yLFxuICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgIGlzU1ZHLFxuICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgIG9wdGltaXplZCxcbiAgICAgICAgcmVuZGVyZXJJbnRlcm5hbHNcbiAgICAgICk7XG4gICAgfVxuICB9LFxuICBoeWRyYXRlOiBoeWRyYXRlU3VzcGVuc2UsXG4gIGNyZWF0ZTogY3JlYXRlU3VzcGVuc2VCb3VuZGFyeSxcbiAgbm9ybWFsaXplOiBub3JtYWxpemVTdXNwZW5zZUNoaWxkcmVuXG59O1xuY29uc3QgU3VzcGVuc2UgPSBTdXNwZW5zZUltcGwgO1xuZnVuY3Rpb24gdHJpZ2dlckV2ZW50KHZub2RlLCBuYW1lKSB7XG4gIGNvbnN0IGV2ZW50TGlzdGVuZXIgPSB2bm9kZS5wcm9wcyAmJiB2bm9kZS5wcm9wc1tuYW1lXTtcbiAgaWYgKGlzRnVuY3Rpb24oZXZlbnRMaXN0ZW5lcikpIHtcbiAgICBldmVudExpc3RlbmVyKCk7XG4gIH1cbn1cbmZ1bmN0aW9uIG1vdW50U3VzcGVuc2Uodm5vZGUsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQsIHJlbmRlcmVySW50ZXJuYWxzKSB7XG4gIGNvbnN0IHtcbiAgICBwOiBwYXRjaCxcbiAgICBvOiB7IGNyZWF0ZUVsZW1lbnQgfVxuICB9ID0gcmVuZGVyZXJJbnRlcm5hbHM7XG4gIGNvbnN0IGhpZGRlbkNvbnRhaW5lciA9IGNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGNvbnN0IHN1c3BlbnNlID0gdm5vZGUuc3VzcGVuc2UgPSBjcmVhdGVTdXNwZW5zZUJvdW5kYXJ5KFxuICAgIHZub2RlLFxuICAgIHBhcmVudFN1c3BlbnNlLFxuICAgIHBhcmVudENvbXBvbmVudCxcbiAgICBjb250YWluZXIsXG4gICAgaGlkZGVuQ29udGFpbmVyLFxuICAgIGFuY2hvcixcbiAgICBpc1NWRyxcbiAgICBzbG90U2NvcGVJZHMsXG4gICAgb3B0aW1pemVkLFxuICAgIHJlbmRlcmVySW50ZXJuYWxzXG4gICk7XG4gIHBhdGNoKFxuICAgIG51bGwsXG4gICAgc3VzcGVuc2UucGVuZGluZ0JyYW5jaCA9IHZub2RlLnNzQ29udGVudCxcbiAgICBoaWRkZW5Db250YWluZXIsXG4gICAgbnVsbCxcbiAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgc3VzcGVuc2UsXG4gICAgaXNTVkcsXG4gICAgc2xvdFNjb3BlSWRzXG4gICk7XG4gIGlmIChzdXNwZW5zZS5kZXBzID4gMCkge1xuICAgIHRyaWdnZXJFdmVudCh2bm9kZSwgXCJvblBlbmRpbmdcIik7XG4gICAgdHJpZ2dlckV2ZW50KHZub2RlLCBcIm9uRmFsbGJhY2tcIik7XG4gICAgcGF0Y2goXG4gICAgICBudWxsLFxuICAgICAgdm5vZGUuc3NGYWxsYmFjayxcbiAgICAgIGNvbnRhaW5lcixcbiAgICAgIGFuY2hvcixcbiAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgIG51bGwsXG4gICAgICAvLyBmYWxsYmFjayB0cmVlIHdpbGwgbm90IGhhdmUgc3VzcGVuc2UgY29udGV4dFxuICAgICAgaXNTVkcsXG4gICAgICBzbG90U2NvcGVJZHNcbiAgICApO1xuICAgIHNldEFjdGl2ZUJyYW5jaChzdXNwZW5zZSwgdm5vZGUuc3NGYWxsYmFjayk7XG4gIH0gZWxzZSB7XG4gICAgc3VzcGVuc2UucmVzb2x2ZShmYWxzZSwgdHJ1ZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHBhdGNoU3VzcGVuc2UobjEsIG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQsIHsgcDogcGF0Y2gsIHVtOiB1bm1vdW50LCBvOiB7IGNyZWF0ZUVsZW1lbnQgfSB9KSB7XG4gIGNvbnN0IHN1c3BlbnNlID0gbjIuc3VzcGVuc2UgPSBuMS5zdXNwZW5zZTtcbiAgc3VzcGVuc2Uudm5vZGUgPSBuMjtcbiAgbjIuZWwgPSBuMS5lbDtcbiAgY29uc3QgbmV3QnJhbmNoID0gbjIuc3NDb250ZW50O1xuICBjb25zdCBuZXdGYWxsYmFjayA9IG4yLnNzRmFsbGJhY2s7XG4gIGNvbnN0IHsgYWN0aXZlQnJhbmNoLCBwZW5kaW5nQnJhbmNoLCBpc0luRmFsbGJhY2ssIGlzSHlkcmF0aW5nIH0gPSBzdXNwZW5zZTtcbiAgaWYgKHBlbmRpbmdCcmFuY2gpIHtcbiAgICBzdXNwZW5zZS5wZW5kaW5nQnJhbmNoID0gbmV3QnJhbmNoO1xuICAgIGlmIChpc1NhbWVWTm9kZVR5cGUobmV3QnJhbmNoLCBwZW5kaW5nQnJhbmNoKSkge1xuICAgICAgcGF0Y2goXG4gICAgICAgIHBlbmRpbmdCcmFuY2gsXG4gICAgICAgIG5ld0JyYW5jaCxcbiAgICAgICAgc3VzcGVuc2UuaGlkZGVuQ29udGFpbmVyLFxuICAgICAgICBudWxsLFxuICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgIHN1c3BlbnNlLFxuICAgICAgICBpc1NWRyxcbiAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICBvcHRpbWl6ZWRcbiAgICAgICk7XG4gICAgICBpZiAoc3VzcGVuc2UuZGVwcyA8PSAwKSB7XG4gICAgICAgIHN1c3BlbnNlLnJlc29sdmUoKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNJbkZhbGxiYWNrKSB7XG4gICAgICAgIHBhdGNoKFxuICAgICAgICAgIGFjdGl2ZUJyYW5jaCxcbiAgICAgICAgICBuZXdGYWxsYmFjayxcbiAgICAgICAgICBjb250YWluZXIsXG4gICAgICAgICAgYW5jaG9yLFxuICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIC8vIGZhbGxiYWNrIHRyZWUgd2lsbCBub3QgaGF2ZSBzdXNwZW5zZSBjb250ZXh0XG4gICAgICAgICAgaXNTVkcsXG4gICAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICAgIG9wdGltaXplZFxuICAgICAgICApO1xuICAgICAgICBzZXRBY3RpdmVCcmFuY2goc3VzcGVuc2UsIG5ld0ZhbGxiYWNrKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3VzcGVuc2UucGVuZGluZ0lkKys7XG4gICAgICBpZiAoaXNIeWRyYXRpbmcpIHtcbiAgICAgICAgc3VzcGVuc2UuaXNIeWRyYXRpbmcgPSBmYWxzZTtcbiAgICAgICAgc3VzcGVuc2UuYWN0aXZlQnJhbmNoID0gcGVuZGluZ0JyYW5jaDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVubW91bnQocGVuZGluZ0JyYW5jaCwgcGFyZW50Q29tcG9uZW50LCBzdXNwZW5zZSk7XG4gICAgICB9XG4gICAgICBzdXNwZW5zZS5kZXBzID0gMDtcbiAgICAgIHN1c3BlbnNlLmVmZmVjdHMubGVuZ3RoID0gMDtcbiAgICAgIHN1c3BlbnNlLmhpZGRlbkNvbnRhaW5lciA9IGNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBpZiAoaXNJbkZhbGxiYWNrKSB7XG4gICAgICAgIHBhdGNoKFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgbmV3QnJhbmNoLFxuICAgICAgICAgIHN1c3BlbnNlLmhpZGRlbkNvbnRhaW5lcixcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICBzdXNwZW5zZSxcbiAgICAgICAgICBpc1NWRyxcbiAgICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgICAgb3B0aW1pemVkXG4gICAgICAgICk7XG4gICAgICAgIGlmIChzdXNwZW5zZS5kZXBzIDw9IDApIHtcbiAgICAgICAgICBzdXNwZW5zZS5yZXNvbHZlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGF0Y2goXG4gICAgICAgICAgICBhY3RpdmVCcmFuY2gsXG4gICAgICAgICAgICBuZXdGYWxsYmFjayxcbiAgICAgICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgICAgIGFuY2hvcixcbiAgICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAvLyBmYWxsYmFjayB0cmVlIHdpbGwgbm90IGhhdmUgc3VzcGVuc2UgY29udGV4dFxuICAgICAgICAgICAgaXNTVkcsXG4gICAgICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgICAgICBvcHRpbWl6ZWRcbiAgICAgICAgICApO1xuICAgICAgICAgIHNldEFjdGl2ZUJyYW5jaChzdXNwZW5zZSwgbmV3RmFsbGJhY2spO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGFjdGl2ZUJyYW5jaCAmJiBpc1NhbWVWTm9kZVR5cGUobmV3QnJhbmNoLCBhY3RpdmVCcmFuY2gpKSB7XG4gICAgICAgIHBhdGNoKFxuICAgICAgICAgIGFjdGl2ZUJyYW5jaCxcbiAgICAgICAgICBuZXdCcmFuY2gsXG4gICAgICAgICAgY29udGFpbmVyLFxuICAgICAgICAgIGFuY2hvcixcbiAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgc3VzcGVuc2UsXG4gICAgICAgICAgaXNTVkcsXG4gICAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICAgIG9wdGltaXplZFxuICAgICAgICApO1xuICAgICAgICBzdXNwZW5zZS5yZXNvbHZlKHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGF0Y2goXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICBuZXdCcmFuY2gsXG4gICAgICAgICAgc3VzcGVuc2UuaGlkZGVuQ29udGFpbmVyLFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICAgIHN1c3BlbnNlLFxuICAgICAgICAgIGlzU1ZHLFxuICAgICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgICBvcHRpbWl6ZWRcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKHN1c3BlbnNlLmRlcHMgPD0gMCkge1xuICAgICAgICAgIHN1c3BlbnNlLnJlc29sdmUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoYWN0aXZlQnJhbmNoICYmIGlzU2FtZVZOb2RlVHlwZShuZXdCcmFuY2gsIGFjdGl2ZUJyYW5jaCkpIHtcbiAgICAgIHBhdGNoKFxuICAgICAgICBhY3RpdmVCcmFuY2gsXG4gICAgICAgIG5ld0JyYW5jaCxcbiAgICAgICAgY29udGFpbmVyLFxuICAgICAgICBhbmNob3IsXG4gICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgc3VzcGVuc2UsXG4gICAgICAgIGlzU1ZHLFxuICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgIG9wdGltaXplZFxuICAgICAgKTtcbiAgICAgIHNldEFjdGl2ZUJyYW5jaChzdXNwZW5zZSwgbmV3QnJhbmNoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdHJpZ2dlckV2ZW50KG4yLCBcIm9uUGVuZGluZ1wiKTtcbiAgICAgIHN1c3BlbnNlLnBlbmRpbmdCcmFuY2ggPSBuZXdCcmFuY2g7XG4gICAgICBzdXNwZW5zZS5wZW5kaW5nSWQrKztcbiAgICAgIHBhdGNoKFxuICAgICAgICBudWxsLFxuICAgICAgICBuZXdCcmFuY2gsXG4gICAgICAgIHN1c3BlbnNlLmhpZGRlbkNvbnRhaW5lcixcbiAgICAgICAgbnVsbCxcbiAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICBzdXNwZW5zZSxcbiAgICAgICAgaXNTVkcsXG4gICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgb3B0aW1pemVkXG4gICAgICApO1xuICAgICAgaWYgKHN1c3BlbnNlLmRlcHMgPD0gMCkge1xuICAgICAgICBzdXNwZW5zZS5yZXNvbHZlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCB7IHRpbWVvdXQsIHBlbmRpbmdJZCB9ID0gc3VzcGVuc2U7XG4gICAgICAgIGlmICh0aW1lb3V0ID4gMCkge1xuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHN1c3BlbnNlLnBlbmRpbmdJZCA9PT0gcGVuZGluZ0lkKSB7XG4gICAgICAgICAgICAgIHN1c3BlbnNlLmZhbGxiYWNrKG5ld0ZhbGxiYWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCB0aW1lb3V0KTtcbiAgICAgICAgfSBlbHNlIGlmICh0aW1lb3V0ID09PSAwKSB7XG4gICAgICAgICAgc3VzcGVuc2UuZmFsbGJhY2sobmV3RmFsbGJhY2spO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5sZXQgaGFzV2FybmVkID0gZmFsc2U7XG5mdW5jdGlvbiBjcmVhdGVTdXNwZW5zZUJvdW5kYXJ5KHZub2RlLCBwYXJlbnRTdXNwZW5zZSwgcGFyZW50Q29tcG9uZW50LCBjb250YWluZXIsIGhpZGRlbkNvbnRhaW5lciwgYW5jaG9yLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQsIHJlbmRlcmVySW50ZXJuYWxzLCBpc0h5ZHJhdGluZyA9IGZhbHNlKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgdHJ1ZSAmJiAhaGFzV2FybmVkKSB7XG4gICAgaGFzV2FybmVkID0gdHJ1ZTtcbiAgICBjb25zb2xlW2NvbnNvbGUuaW5mbyA/IFwiaW5mb1wiIDogXCJsb2dcIl0oXG4gICAgICBgPFN1c3BlbnNlPiBpcyBhbiBleHBlcmltZW50YWwgZmVhdHVyZSBhbmQgaXRzIEFQSSB3aWxsIGxpa2VseSBjaGFuZ2UuYFxuICAgICk7XG4gIH1cbiAgY29uc3Qge1xuICAgIHA6IHBhdGNoLFxuICAgIG06IG1vdmUsXG4gICAgdW06IHVubW91bnQsXG4gICAgbjogbmV4dCxcbiAgICBvOiB7IHBhcmVudE5vZGUsIHJlbW92ZSB9XG4gIH0gPSByZW5kZXJlckludGVybmFscztcbiAgbGV0IHBhcmVudFN1c3BlbnNlSWQ7XG4gIGNvbnN0IGlzU3VzcGVuc2libGUgPSBpc1ZOb2RlU3VzcGVuc2libGUodm5vZGUpO1xuICBpZiAoaXNTdXNwZW5zaWJsZSkge1xuICAgIGlmIChwYXJlbnRTdXNwZW5zZSA9PSBudWxsID8gdm9pZCAwIDogcGFyZW50U3VzcGVuc2UucGVuZGluZ0JyYW5jaCkge1xuICAgICAgcGFyZW50U3VzcGVuc2VJZCA9IHBhcmVudFN1c3BlbnNlLnBlbmRpbmdJZDtcbiAgICAgIHBhcmVudFN1c3BlbnNlLmRlcHMrKztcbiAgICB9XG4gIH1cbiAgY29uc3QgdGltZW91dCA9IHZub2RlLnByb3BzID8gdG9OdW1iZXIodm5vZGUucHJvcHMudGltZW91dCkgOiB2b2lkIDA7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBhc3NlcnROdW1iZXIodGltZW91dCwgYFN1c3BlbnNlIHRpbWVvdXRgKTtcbiAgfVxuICBjb25zdCBzdXNwZW5zZSA9IHtcbiAgICB2bm9kZSxcbiAgICBwYXJlbnQ6IHBhcmVudFN1c3BlbnNlLFxuICAgIHBhcmVudENvbXBvbmVudCxcbiAgICBpc1NWRyxcbiAgICBjb250YWluZXIsXG4gICAgaGlkZGVuQ29udGFpbmVyLFxuICAgIGFuY2hvcixcbiAgICBkZXBzOiAwLFxuICAgIHBlbmRpbmdJZDogMCxcbiAgICB0aW1lb3V0OiB0eXBlb2YgdGltZW91dCA9PT0gXCJudW1iZXJcIiA/IHRpbWVvdXQgOiAtMSxcbiAgICBhY3RpdmVCcmFuY2g6IG51bGwsXG4gICAgcGVuZGluZ0JyYW5jaDogbnVsbCxcbiAgICBpc0luRmFsbGJhY2s6IHRydWUsXG4gICAgaXNIeWRyYXRpbmcsXG4gICAgaXNVbm1vdW50ZWQ6IGZhbHNlLFxuICAgIGVmZmVjdHM6IFtdLFxuICAgIHJlc29sdmUocmVzdW1lID0gZmFsc2UsIHN5bmMgPSBmYWxzZSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICBpZiAoIXJlc3VtZSAmJiAhc3VzcGVuc2UucGVuZGluZ0JyYW5jaCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgIGBzdXNwZW5zZS5yZXNvbHZlKCkgaXMgY2FsbGVkIHdpdGhvdXQgYSBwZW5kaW5nIGJyYW5jaC5gXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3VzcGVuc2UuaXNVbm1vdW50ZWQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICBgc3VzcGVuc2UucmVzb2x2ZSgpIGlzIGNhbGxlZCBvbiBhbiBhbHJlYWR5IHVubW91bnRlZCBzdXNwZW5zZSBib3VuZGFyeS5gXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29uc3Qge1xuICAgICAgICB2bm9kZTogdm5vZGUyLFxuICAgICAgICBhY3RpdmVCcmFuY2gsXG4gICAgICAgIHBlbmRpbmdCcmFuY2gsXG4gICAgICAgIHBlbmRpbmdJZCxcbiAgICAgICAgZWZmZWN0cyxcbiAgICAgICAgcGFyZW50Q29tcG9uZW50OiBwYXJlbnRDb21wb25lbnQyLFxuICAgICAgICBjb250YWluZXI6IGNvbnRhaW5lcjJcbiAgICAgIH0gPSBzdXNwZW5zZTtcbiAgICAgIGlmIChzdXNwZW5zZS5pc0h5ZHJhdGluZykge1xuICAgICAgICBzdXNwZW5zZS5pc0h5ZHJhdGluZyA9IGZhbHNlO1xuICAgICAgfSBlbHNlIGlmICghcmVzdW1lKSB7XG4gICAgICAgIGNvbnN0IGRlbGF5RW50ZXIgPSBhY3RpdmVCcmFuY2ggJiYgcGVuZGluZ0JyYW5jaC50cmFuc2l0aW9uICYmIHBlbmRpbmdCcmFuY2gudHJhbnNpdGlvbi5tb2RlID09PSBcIm91dC1pblwiO1xuICAgICAgICBpZiAoZGVsYXlFbnRlcikge1xuICAgICAgICAgIGFjdGl2ZUJyYW5jaC50cmFuc2l0aW9uLmFmdGVyTGVhdmUgPSAoKSA9PiB7XG4gICAgICAgICAgICBpZiAocGVuZGluZ0lkID09PSBzdXNwZW5zZS5wZW5kaW5nSWQpIHtcbiAgICAgICAgICAgICAgbW92ZShwZW5kaW5nQnJhbmNoLCBjb250YWluZXIyLCBhbmNob3IyLCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGxldCB7IGFuY2hvcjogYW5jaG9yMiB9ID0gc3VzcGVuc2U7XG4gICAgICAgIGlmIChhY3RpdmVCcmFuY2gpIHtcbiAgICAgICAgICBhbmNob3IyID0gbmV4dChhY3RpdmVCcmFuY2gpO1xuICAgICAgICAgIHVubW91bnQoYWN0aXZlQnJhbmNoLCBwYXJlbnRDb21wb25lbnQyLCBzdXNwZW5zZSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFkZWxheUVudGVyKSB7XG4gICAgICAgICAgbW92ZShwZW5kaW5nQnJhbmNoLCBjb250YWluZXIyLCBhbmNob3IyLCAwKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc2V0QWN0aXZlQnJhbmNoKHN1c3BlbnNlLCBwZW5kaW5nQnJhbmNoKTtcbiAgICAgIHN1c3BlbnNlLnBlbmRpbmdCcmFuY2ggPSBudWxsO1xuICAgICAgc3VzcGVuc2UuaXNJbkZhbGxiYWNrID0gZmFsc2U7XG4gICAgICBsZXQgcGFyZW50ID0gc3VzcGVuc2UucGFyZW50O1xuICAgICAgbGV0IGhhc1VucmVzb2x2ZWRBbmNlc3RvciA9IGZhbHNlO1xuICAgICAgd2hpbGUgKHBhcmVudCkge1xuICAgICAgICBpZiAocGFyZW50LnBlbmRpbmdCcmFuY2gpIHtcbiAgICAgICAgICBwYXJlbnQuZWZmZWN0cy5wdXNoKC4uLmVmZmVjdHMpO1xuICAgICAgICAgIGhhc1VucmVzb2x2ZWRBbmNlc3RvciA9IHRydWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgICAgIH1cbiAgICAgIGlmICghaGFzVW5yZXNvbHZlZEFuY2VzdG9yKSB7XG4gICAgICAgIHF1ZXVlUG9zdEZsdXNoQ2IoZWZmZWN0cyk7XG4gICAgICB9XG4gICAgICBzdXNwZW5zZS5lZmZlY3RzID0gW107XG4gICAgICBpZiAoaXNTdXNwZW5zaWJsZSkge1xuICAgICAgICBpZiAocGFyZW50U3VzcGVuc2UgJiYgcGFyZW50U3VzcGVuc2UucGVuZGluZ0JyYW5jaCAmJiBwYXJlbnRTdXNwZW5zZUlkID09PSBwYXJlbnRTdXNwZW5zZS5wZW5kaW5nSWQpIHtcbiAgICAgICAgICBwYXJlbnRTdXNwZW5zZS5kZXBzLS07XG4gICAgICAgICAgaWYgKHBhcmVudFN1c3BlbnNlLmRlcHMgPT09IDAgJiYgIXN5bmMpIHtcbiAgICAgICAgICAgIHBhcmVudFN1c3BlbnNlLnJlc29sdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRyaWdnZXJFdmVudCh2bm9kZTIsIFwib25SZXNvbHZlXCIpO1xuICAgIH0sXG4gICAgZmFsbGJhY2soZmFsbGJhY2tWTm9kZSkge1xuICAgICAgaWYgKCFzdXNwZW5zZS5wZW5kaW5nQnJhbmNoKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHsgdm5vZGU6IHZub2RlMiwgYWN0aXZlQnJhbmNoLCBwYXJlbnRDb21wb25lbnQ6IHBhcmVudENvbXBvbmVudDIsIGNvbnRhaW5lcjogY29udGFpbmVyMiwgaXNTVkc6IGlzU1ZHMiB9ID0gc3VzcGVuc2U7XG4gICAgICB0cmlnZ2VyRXZlbnQodm5vZGUyLCBcIm9uRmFsbGJhY2tcIik7XG4gICAgICBjb25zdCBhbmNob3IyID0gbmV4dChhY3RpdmVCcmFuY2gpO1xuICAgICAgY29uc3QgbW91bnRGYWxsYmFjayA9ICgpID0+IHtcbiAgICAgICAgaWYgKCFzdXNwZW5zZS5pc0luRmFsbGJhY2spIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcGF0Y2goXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICBmYWxsYmFja1ZOb2RlLFxuICAgICAgICAgIGNvbnRhaW5lcjIsXG4gICAgICAgICAgYW5jaG9yMixcbiAgICAgICAgICBwYXJlbnRDb21wb25lbnQyLFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgLy8gZmFsbGJhY2sgdHJlZSB3aWxsIG5vdCBoYXZlIHN1c3BlbnNlIGNvbnRleHRcbiAgICAgICAgICBpc1NWRzIsXG4gICAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICAgIG9wdGltaXplZFxuICAgICAgICApO1xuICAgICAgICBzZXRBY3RpdmVCcmFuY2goc3VzcGVuc2UsIGZhbGxiYWNrVk5vZGUpO1xuICAgICAgfTtcbiAgICAgIGNvbnN0IGRlbGF5RW50ZXIgPSBmYWxsYmFja1ZOb2RlLnRyYW5zaXRpb24gJiYgZmFsbGJhY2tWTm9kZS50cmFuc2l0aW9uLm1vZGUgPT09IFwib3V0LWluXCI7XG4gICAgICBpZiAoZGVsYXlFbnRlcikge1xuICAgICAgICBhY3RpdmVCcmFuY2gudHJhbnNpdGlvbi5hZnRlckxlYXZlID0gbW91bnRGYWxsYmFjaztcbiAgICAgIH1cbiAgICAgIHN1c3BlbnNlLmlzSW5GYWxsYmFjayA9IHRydWU7XG4gICAgICB1bm1vdW50KFxuICAgICAgICBhY3RpdmVCcmFuY2gsXG4gICAgICAgIHBhcmVudENvbXBvbmVudDIsXG4gICAgICAgIG51bGwsXG4gICAgICAgIC8vIG5vIHN1c3BlbnNlIHNvIHVubW91bnQgaG9va3MgZmlyZSBub3dcbiAgICAgICAgdHJ1ZVxuICAgICAgICAvLyBzaG91bGRSZW1vdmVcbiAgICAgICk7XG4gICAgICBpZiAoIWRlbGF5RW50ZXIpIHtcbiAgICAgICAgbW91bnRGYWxsYmFjaygpO1xuICAgICAgfVxuICAgIH0sXG4gICAgbW92ZShjb250YWluZXIyLCBhbmNob3IyLCB0eXBlKSB7XG4gICAgICBzdXNwZW5zZS5hY3RpdmVCcmFuY2ggJiYgbW92ZShzdXNwZW5zZS5hY3RpdmVCcmFuY2gsIGNvbnRhaW5lcjIsIGFuY2hvcjIsIHR5cGUpO1xuICAgICAgc3VzcGVuc2UuY29udGFpbmVyID0gY29udGFpbmVyMjtcbiAgICB9LFxuICAgIG5leHQoKSB7XG4gICAgICByZXR1cm4gc3VzcGVuc2UuYWN0aXZlQnJhbmNoICYmIG5leHQoc3VzcGVuc2UuYWN0aXZlQnJhbmNoKTtcbiAgICB9LFxuICAgIHJlZ2lzdGVyRGVwKGluc3RhbmNlLCBzZXR1cFJlbmRlckVmZmVjdCkge1xuICAgICAgY29uc3QgaXNJblBlbmRpbmdTdXNwZW5zZSA9ICEhc3VzcGVuc2UucGVuZGluZ0JyYW5jaDtcbiAgICAgIGlmIChpc0luUGVuZGluZ1N1c3BlbnNlKSB7XG4gICAgICAgIHN1c3BlbnNlLmRlcHMrKztcbiAgICAgIH1cbiAgICAgIGNvbnN0IGh5ZHJhdGVkRWwgPSBpbnN0YW5jZS52bm9kZS5lbDtcbiAgICAgIGluc3RhbmNlLmFzeW5jRGVwLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgaGFuZGxlRXJyb3IoZXJyLCBpbnN0YW5jZSwgMCk7XG4gICAgICB9KS50aGVuKChhc3luY1NldHVwUmVzdWx0KSA9PiB7XG4gICAgICAgIGlmIChpbnN0YW5jZS5pc1VubW91bnRlZCB8fCBzdXNwZW5zZS5pc1VubW91bnRlZCB8fCBzdXNwZW5zZS5wZW5kaW5nSWQgIT09IGluc3RhbmNlLnN1c3BlbnNlSWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaW5zdGFuY2UuYXN5bmNSZXNvbHZlZCA9IHRydWU7XG4gICAgICAgIGNvbnN0IHsgdm5vZGU6IHZub2RlMiB9ID0gaW5zdGFuY2U7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICBwdXNoV2FybmluZ0NvbnRleHQodm5vZGUyKTtcbiAgICAgICAgfVxuICAgICAgICBoYW5kbGVTZXR1cFJlc3VsdChpbnN0YW5jZSwgYXN5bmNTZXR1cFJlc3VsdCwgZmFsc2UpO1xuICAgICAgICBpZiAoaHlkcmF0ZWRFbCkge1xuICAgICAgICAgIHZub2RlMi5lbCA9IGh5ZHJhdGVkRWw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGxhY2Vob2xkZXIgPSAhaHlkcmF0ZWRFbCAmJiBpbnN0YW5jZS5zdWJUcmVlLmVsO1xuICAgICAgICBzZXR1cFJlbmRlckVmZmVjdChcbiAgICAgICAgICBpbnN0YW5jZSxcbiAgICAgICAgICB2bm9kZTIsXG4gICAgICAgICAgLy8gY29tcG9uZW50IG1heSBoYXZlIGJlZW4gbW92ZWQgYmVmb3JlIHJlc29sdmUuXG4gICAgICAgICAgLy8gaWYgdGhpcyBpcyBub3QgYSBoeWRyYXRpb24sIGluc3RhbmNlLnN1YlRyZWUgd2lsbCBiZSB0aGUgY29tbWVudFxuICAgICAgICAgIC8vIHBsYWNlaG9sZGVyLlxuICAgICAgICAgIHBhcmVudE5vZGUoaHlkcmF0ZWRFbCB8fCBpbnN0YW5jZS5zdWJUcmVlLmVsKSxcbiAgICAgICAgICAvLyBhbmNob3Igd2lsbCBub3QgYmUgdXNlZCBpZiB0aGlzIGlzIGh5ZHJhdGlvbiwgc28gb25seSBuZWVkIHRvXG4gICAgICAgICAgLy8gY29uc2lkZXIgdGhlIGNvbW1lbnQgcGxhY2Vob2xkZXIgY2FzZS5cbiAgICAgICAgICBoeWRyYXRlZEVsID8gbnVsbCA6IG5leHQoaW5zdGFuY2Uuc3ViVHJlZSksXG4gICAgICAgICAgc3VzcGVuc2UsXG4gICAgICAgICAgaXNTVkcsXG4gICAgICAgICAgb3B0aW1pemVkXG4gICAgICAgICk7XG4gICAgICAgIGlmIChwbGFjZWhvbGRlcikge1xuICAgICAgICAgIHJlbW92ZShwbGFjZWhvbGRlcik7XG4gICAgICAgIH1cbiAgICAgICAgdXBkYXRlSE9DSG9zdEVsKGluc3RhbmNlLCB2bm9kZTIuZWwpO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgcG9wV2FybmluZ0NvbnRleHQoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNJblBlbmRpbmdTdXNwZW5zZSAmJiAtLXN1c3BlbnNlLmRlcHMgPT09IDApIHtcbiAgICAgICAgICBzdXNwZW5zZS5yZXNvbHZlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG4gICAgdW5tb3VudChwYXJlbnRTdXNwZW5zZTIsIGRvUmVtb3ZlKSB7XG4gICAgICBzdXNwZW5zZS5pc1VubW91bnRlZCA9IHRydWU7XG4gICAgICBpZiAoc3VzcGVuc2UuYWN0aXZlQnJhbmNoKSB7XG4gICAgICAgIHVubW91bnQoXG4gICAgICAgICAgc3VzcGVuc2UuYWN0aXZlQnJhbmNoLFxuICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICBwYXJlbnRTdXNwZW5zZTIsXG4gICAgICAgICAgZG9SZW1vdmVcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChzdXNwZW5zZS5wZW5kaW5nQnJhbmNoKSB7XG4gICAgICAgIHVubW91bnQoXG4gICAgICAgICAgc3VzcGVuc2UucGVuZGluZ0JyYW5jaCxcbiAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgcGFyZW50U3VzcGVuc2UyLFxuICAgICAgICAgIGRvUmVtb3ZlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICByZXR1cm4gc3VzcGVuc2U7XG59XG5mdW5jdGlvbiBoeWRyYXRlU3VzcGVuc2Uobm9kZSwgdm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCwgcmVuZGVyZXJJbnRlcm5hbHMsIGh5ZHJhdGVOb2RlKSB7XG4gIGNvbnN0IHN1c3BlbnNlID0gdm5vZGUuc3VzcGVuc2UgPSBjcmVhdGVTdXNwZW5zZUJvdW5kYXJ5KFxuICAgIHZub2RlLFxuICAgIHBhcmVudFN1c3BlbnNlLFxuICAgIHBhcmVudENvbXBvbmVudCxcbiAgICBub2RlLnBhcmVudE5vZGUsXG4gICAgZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxcbiAgICBudWxsLFxuICAgIGlzU1ZHLFxuICAgIHNsb3RTY29wZUlkcyxcbiAgICBvcHRpbWl6ZWQsXG4gICAgcmVuZGVyZXJJbnRlcm5hbHMsXG4gICAgdHJ1ZVxuICAgIC8qIGh5ZHJhdGluZyAqL1xuICApO1xuICBjb25zdCByZXN1bHQgPSBoeWRyYXRlTm9kZShcbiAgICBub2RlLFxuICAgIHN1c3BlbnNlLnBlbmRpbmdCcmFuY2ggPSB2bm9kZS5zc0NvbnRlbnQsXG4gICAgcGFyZW50Q29tcG9uZW50LFxuICAgIHN1c3BlbnNlLFxuICAgIHNsb3RTY29wZUlkcyxcbiAgICBvcHRpbWl6ZWRcbiAgKTtcbiAgaWYgKHN1c3BlbnNlLmRlcHMgPT09IDApIHtcbiAgICBzdXNwZW5zZS5yZXNvbHZlKCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZVN1c3BlbnNlQ2hpbGRyZW4odm5vZGUpIHtcbiAgY29uc3QgeyBzaGFwZUZsYWcsIGNoaWxkcmVuIH0gPSB2bm9kZTtcbiAgY29uc3QgaXNTbG90Q2hpbGRyZW4gPSBzaGFwZUZsYWcgJiAzMjtcbiAgdm5vZGUuc3NDb250ZW50ID0gbm9ybWFsaXplU3VzcGVuc2VTbG90KFxuICAgIGlzU2xvdENoaWxkcmVuID8gY2hpbGRyZW4uZGVmYXVsdCA6IGNoaWxkcmVuXG4gICk7XG4gIHZub2RlLnNzRmFsbGJhY2sgPSBpc1Nsb3RDaGlsZHJlbiA/IG5vcm1hbGl6ZVN1c3BlbnNlU2xvdChjaGlsZHJlbi5mYWxsYmFjaykgOiBjcmVhdGVWTm9kZShDb21tZW50KTtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZVN1c3BlbnNlU2xvdChzKSB7XG4gIGxldCBibG9jaztcbiAgaWYgKGlzRnVuY3Rpb24ocykpIHtcbiAgICBjb25zdCB0cmFja0Jsb2NrID0gaXNCbG9ja1RyZWVFbmFibGVkICYmIHMuX2M7XG4gICAgaWYgKHRyYWNrQmxvY2spIHtcbiAgICAgIHMuX2QgPSBmYWxzZTtcbiAgICAgIG9wZW5CbG9jaygpO1xuICAgIH1cbiAgICBzID0gcygpO1xuICAgIGlmICh0cmFja0Jsb2NrKSB7XG4gICAgICBzLl9kID0gdHJ1ZTtcbiAgICAgIGJsb2NrID0gY3VycmVudEJsb2NrO1xuICAgICAgY2xvc2VCbG9jaygpO1xuICAgIH1cbiAgfVxuICBpZiAoaXNBcnJheShzKSkge1xuICAgIGNvbnN0IHNpbmdsZUNoaWxkID0gZmlsdGVyU2luZ2xlUm9vdChzKTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmICFzaW5nbGVDaGlsZCkge1xuICAgICAgd2FybihgPFN1c3BlbnNlPiBzbG90cyBleHBlY3QgYSBzaW5nbGUgcm9vdCBub2RlLmApO1xuICAgIH1cbiAgICBzID0gc2luZ2xlQ2hpbGQ7XG4gIH1cbiAgcyA9IG5vcm1hbGl6ZVZOb2RlKHMpO1xuICBpZiAoYmxvY2sgJiYgIXMuZHluYW1pY0NoaWxkcmVuKSB7XG4gICAgcy5keW5hbWljQ2hpbGRyZW4gPSBibG9jay5maWx0ZXIoKGMpID0+IGMgIT09IHMpO1xuICB9XG4gIHJldHVybiBzO1xufVxuZnVuY3Rpb24gcXVldWVFZmZlY3RXaXRoU3VzcGVuc2UoZm4sIHN1c3BlbnNlKSB7XG4gIGlmIChzdXNwZW5zZSAmJiBzdXNwZW5zZS5wZW5kaW5nQnJhbmNoKSB7XG4gICAgaWYgKGlzQXJyYXkoZm4pKSB7XG4gICAgICBzdXNwZW5zZS5lZmZlY3RzLnB1c2goLi4uZm4pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdXNwZW5zZS5lZmZlY3RzLnB1c2goZm4pO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBxdWV1ZVBvc3RGbHVzaENiKGZuKTtcbiAgfVxufVxuZnVuY3Rpb24gc2V0QWN0aXZlQnJhbmNoKHN1c3BlbnNlLCBicmFuY2gpIHtcbiAgc3VzcGVuc2UuYWN0aXZlQnJhbmNoID0gYnJhbmNoO1xuICBjb25zdCB7IHZub2RlLCBwYXJlbnRDb21wb25lbnQgfSA9IHN1c3BlbnNlO1xuICBjb25zdCBlbCA9IHZub2RlLmVsID0gYnJhbmNoLmVsO1xuICBpZiAocGFyZW50Q29tcG9uZW50ICYmIHBhcmVudENvbXBvbmVudC5zdWJUcmVlID09PSB2bm9kZSkge1xuICAgIHBhcmVudENvbXBvbmVudC52bm9kZS5lbCA9IGVsO1xuICAgIHVwZGF0ZUhPQ0hvc3RFbChwYXJlbnRDb21wb25lbnQsIGVsKTtcbiAgfVxufVxuZnVuY3Rpb24gaXNWTm9kZVN1c3BlbnNpYmxlKHZub2RlKSB7XG4gIHZhciBfYTtcbiAgcmV0dXJuICgoX2EgPSB2bm9kZS5wcm9wcykgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLnN1c3BlbnNpYmxlKSAhPSBudWxsICYmIHZub2RlLnByb3BzLnN1c3BlbnNpYmxlICE9PSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gd2F0Y2hFZmZlY3QoZWZmZWN0LCBvcHRpb25zKSB7XG4gIHJldHVybiBkb1dhdGNoKGVmZmVjdCwgbnVsbCwgb3B0aW9ucyk7XG59XG5mdW5jdGlvbiB3YXRjaFBvc3RFZmZlY3QoZWZmZWN0LCBvcHRpb25zKSB7XG4gIHJldHVybiBkb1dhdGNoKFxuICAgIGVmZmVjdCxcbiAgICBudWxsLFxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGV4dGVuZCh7fSwgb3B0aW9ucywgeyBmbHVzaDogXCJwb3N0XCIgfSkgOiB7IGZsdXNoOiBcInBvc3RcIiB9XG4gICk7XG59XG5mdW5jdGlvbiB3YXRjaFN5bmNFZmZlY3QoZWZmZWN0LCBvcHRpb25zKSB7XG4gIHJldHVybiBkb1dhdGNoKFxuICAgIGVmZmVjdCxcbiAgICBudWxsLFxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGV4dGVuZCh7fSwgb3B0aW9ucywgeyBmbHVzaDogXCJzeW5jXCIgfSkgOiB7IGZsdXNoOiBcInN5bmNcIiB9XG4gICk7XG59XG5jb25zdCBJTklUSUFMX1dBVENIRVJfVkFMVUUgPSB7fTtcbmZ1bmN0aW9uIHdhdGNoKHNvdXJjZSwgY2IsIG9wdGlvbnMpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiAhaXNGdW5jdGlvbihjYikpIHtcbiAgICB3YXJuKFxuICAgICAgYFxcYHdhdGNoKGZuLCBvcHRpb25zPylcXGAgc2lnbmF0dXJlIGhhcyBiZWVuIG1vdmVkIHRvIGEgc2VwYXJhdGUgQVBJLiBVc2UgXFxgd2F0Y2hFZmZlY3QoZm4sIG9wdGlvbnM/KVxcYCBpbnN0ZWFkLiBcXGB3YXRjaFxcYCBub3cgb25seSBzdXBwb3J0cyBcXGB3YXRjaChzb3VyY2UsIGNiLCBvcHRpb25zPykgc2lnbmF0dXJlLmBcbiAgICApO1xuICB9XG4gIHJldHVybiBkb1dhdGNoKHNvdXJjZSwgY2IsIG9wdGlvbnMpO1xufVxuZnVuY3Rpb24gZG9XYXRjaChzb3VyY2UsIGNiLCB7IGltbWVkaWF0ZSwgZGVlcCwgZmx1c2gsIG9uVHJhY2ssIG9uVHJpZ2dlciB9ID0gRU1QVFlfT0JKKSB7XG4gIHZhciBfYTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiAhY2IpIHtcbiAgICBpZiAoaW1tZWRpYXRlICE9PSB2b2lkIDApIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIGB3YXRjaCgpIFwiaW1tZWRpYXRlXCIgb3B0aW9uIGlzIG9ubHkgcmVzcGVjdGVkIHdoZW4gdXNpbmcgdGhlIHdhdGNoKHNvdXJjZSwgY2FsbGJhY2ssIG9wdGlvbnM/KSBzaWduYXR1cmUuYFxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKGRlZXAgIT09IHZvaWQgMCkge1xuICAgICAgd2FybihcbiAgICAgICAgYHdhdGNoKCkgXCJkZWVwXCIgb3B0aW9uIGlzIG9ubHkgcmVzcGVjdGVkIHdoZW4gdXNpbmcgdGhlIHdhdGNoKHNvdXJjZSwgY2FsbGJhY2ssIG9wdGlvbnM/KSBzaWduYXR1cmUuYFxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgY29uc3Qgd2FybkludmFsaWRTb3VyY2UgPSAocykgPT4ge1xuICAgIHdhcm4oXG4gICAgICBgSW52YWxpZCB3YXRjaCBzb3VyY2U6IGAsXG4gICAgICBzLFxuICAgICAgYEEgd2F0Y2ggc291cmNlIGNhbiBvbmx5IGJlIGEgZ2V0dGVyL2VmZmVjdCBmdW5jdGlvbiwgYSByZWYsIGEgcmVhY3RpdmUgb2JqZWN0LCBvciBhbiBhcnJheSBvZiB0aGVzZSB0eXBlcy5gXG4gICAgKTtcbiAgfTtcbiAgY29uc3QgaW5zdGFuY2UgPSBnZXRDdXJyZW50U2NvcGUoKSA9PT0gKChfYSA9IGN1cnJlbnRJbnN0YW5jZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLnNjb3BlKSA/IGN1cnJlbnRJbnN0YW5jZSA6IG51bGw7XG4gIGxldCBnZXR0ZXI7XG4gIGxldCBmb3JjZVRyaWdnZXIgPSBmYWxzZTtcbiAgbGV0IGlzTXVsdGlTb3VyY2UgPSBmYWxzZTtcbiAgaWYgKGlzUmVmKHNvdXJjZSkpIHtcbiAgICBnZXR0ZXIgPSAoKSA9PiBzb3VyY2UudmFsdWU7XG4gICAgZm9yY2VUcmlnZ2VyID0gaXNTaGFsbG93JDEoc291cmNlKTtcbiAgfSBlbHNlIGlmIChpc1JlYWN0aXZlKHNvdXJjZSkpIHtcbiAgICBnZXR0ZXIgPSAoKSA9PiBzb3VyY2U7XG4gICAgZGVlcCA9IHRydWU7XG4gIH0gZWxzZSBpZiAoaXNBcnJheShzb3VyY2UpKSB7XG4gICAgaXNNdWx0aVNvdXJjZSA9IHRydWU7XG4gICAgZm9yY2VUcmlnZ2VyID0gc291cmNlLnNvbWUoKHMpID0+IGlzUmVhY3RpdmUocykgfHwgaXNTaGFsbG93JDEocykpO1xuICAgIGdldHRlciA9ICgpID0+IHNvdXJjZS5tYXAoKHMpID0+IHtcbiAgICAgIGlmIChpc1JlZihzKSkge1xuICAgICAgICByZXR1cm4gcy52YWx1ZTtcbiAgICAgIH0gZWxzZSBpZiAoaXNSZWFjdGl2ZShzKSkge1xuICAgICAgICByZXR1cm4gdHJhdmVyc2Uocyk7XG4gICAgICB9IGVsc2UgaWYgKGlzRnVuY3Rpb24ocykpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxXaXRoRXJyb3JIYW5kbGluZyhzLCBpbnN0YW5jZSwgMik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgd2FybkludmFsaWRTb3VyY2Uocyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoaXNGdW5jdGlvbihzb3VyY2UpKSB7XG4gICAgaWYgKGNiKSB7XG4gICAgICBnZXR0ZXIgPSAoKSA9PiBjYWxsV2l0aEVycm9ySGFuZGxpbmcoc291cmNlLCBpbnN0YW5jZSwgMik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdldHRlciA9ICgpID0+IHtcbiAgICAgICAgaWYgKGluc3RhbmNlICYmIGluc3RhbmNlLmlzVW5tb3VudGVkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjbGVhbnVwKSB7XG4gICAgICAgICAgY2xlYW51cCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyhcbiAgICAgICAgICBzb3VyY2UsXG4gICAgICAgICAgaW5zdGFuY2UsXG4gICAgICAgICAgMyxcbiAgICAgICAgICBbb25DbGVhbnVwXVxuICAgICAgICApO1xuICAgICAgfTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZ2V0dGVyID0gTk9PUDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgd2FybkludmFsaWRTb3VyY2Uoc291cmNlKTtcbiAgfVxuICBpZiAoY2IgJiYgZGVlcCkge1xuICAgIGNvbnN0IGJhc2VHZXR0ZXIgPSBnZXR0ZXI7XG4gICAgZ2V0dGVyID0gKCkgPT4gdHJhdmVyc2UoYmFzZUdldHRlcigpKTtcbiAgfVxuICBsZXQgY2xlYW51cDtcbiAgbGV0IG9uQ2xlYW51cCA9IChmbikgPT4ge1xuICAgIGNsZWFudXAgPSBlZmZlY3Qub25TdG9wID0gKCkgPT4ge1xuICAgICAgY2FsbFdpdGhFcnJvckhhbmRsaW5nKGZuLCBpbnN0YW5jZSwgNCk7XG4gICAgfTtcbiAgfTtcbiAgbGV0IHNzckNsZWFudXA7XG4gIGlmIChpc0luU1NSQ29tcG9uZW50U2V0dXApIHtcbiAgICBvbkNsZWFudXAgPSBOT09QO1xuICAgIGlmICghY2IpIHtcbiAgICAgIGdldHRlcigpO1xuICAgIH0gZWxzZSBpZiAoaW1tZWRpYXRlKSB7XG4gICAgICBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyhjYiwgaW5zdGFuY2UsIDMsIFtcbiAgICAgICAgZ2V0dGVyKCksXG4gICAgICAgIGlzTXVsdGlTb3VyY2UgPyBbXSA6IHZvaWQgMCxcbiAgICAgICAgb25DbGVhbnVwXG4gICAgICBdKTtcbiAgICB9XG4gICAgaWYgKGZsdXNoID09PSBcInN5bmNcIikge1xuICAgICAgY29uc3QgY3R4ID0gdXNlU1NSQ29udGV4dCgpO1xuICAgICAgc3NyQ2xlYW51cCA9IGN0eC5fX3dhdGNoZXJIYW5kbGVzIHx8IChjdHguX193YXRjaGVySGFuZGxlcyA9IFtdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIE5PT1A7XG4gICAgfVxuICB9XG4gIGxldCBvbGRWYWx1ZSA9IGlzTXVsdGlTb3VyY2UgPyBuZXcgQXJyYXkoc291cmNlLmxlbmd0aCkuZmlsbChJTklUSUFMX1dBVENIRVJfVkFMVUUpIDogSU5JVElBTF9XQVRDSEVSX1ZBTFVFO1xuICBjb25zdCBqb2IgPSAoKSA9PiB7XG4gICAgaWYgKCFlZmZlY3QuYWN0aXZlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChjYikge1xuICAgICAgY29uc3QgbmV3VmFsdWUgPSBlZmZlY3QucnVuKCk7XG4gICAgICBpZiAoZGVlcCB8fCBmb3JjZVRyaWdnZXIgfHwgKGlzTXVsdGlTb3VyY2UgPyBuZXdWYWx1ZS5zb21lKFxuICAgICAgICAodiwgaSkgPT4gaGFzQ2hhbmdlZCh2LCBvbGRWYWx1ZVtpXSlcbiAgICAgICkgOiBoYXNDaGFuZ2VkKG5ld1ZhbHVlLCBvbGRWYWx1ZSkpIHx8IGZhbHNlKSB7XG4gICAgICAgIGlmIChjbGVhbnVwKSB7XG4gICAgICAgICAgY2xlYW51cCgpO1xuICAgICAgICB9XG4gICAgICAgIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKGNiLCBpbnN0YW5jZSwgMywgW1xuICAgICAgICAgIG5ld1ZhbHVlLFxuICAgICAgICAgIC8vIHBhc3MgdW5kZWZpbmVkIGFzIHRoZSBvbGQgdmFsdWUgd2hlbiBpdCdzIGNoYW5nZWQgZm9yIHRoZSBmaXJzdCB0aW1lXG4gICAgICAgICAgb2xkVmFsdWUgPT09IElOSVRJQUxfV0FUQ0hFUl9WQUxVRSA/IHZvaWQgMCA6IGlzTXVsdGlTb3VyY2UgJiYgb2xkVmFsdWVbMF0gPT09IElOSVRJQUxfV0FUQ0hFUl9WQUxVRSA/IFtdIDogb2xkVmFsdWUsXG4gICAgICAgICAgb25DbGVhbnVwXG4gICAgICAgIF0pO1xuICAgICAgICBvbGRWYWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBlZmZlY3QucnVuKCk7XG4gICAgfVxuICB9O1xuICBqb2IuYWxsb3dSZWN1cnNlID0gISFjYjtcbiAgbGV0IHNjaGVkdWxlcjtcbiAgaWYgKGZsdXNoID09PSBcInN5bmNcIikge1xuICAgIHNjaGVkdWxlciA9IGpvYjtcbiAgfSBlbHNlIGlmIChmbHVzaCA9PT0gXCJwb3N0XCIpIHtcbiAgICBzY2hlZHVsZXIgPSAoKSA9PiBxdWV1ZVBvc3RSZW5kZXJFZmZlY3Qoam9iLCBpbnN0YW5jZSAmJiBpbnN0YW5jZS5zdXNwZW5zZSk7XG4gIH0gZWxzZSB7XG4gICAgam9iLnByZSA9IHRydWU7XG4gICAgaWYgKGluc3RhbmNlKVxuICAgICAgam9iLmlkID0gaW5zdGFuY2UudWlkO1xuICAgIHNjaGVkdWxlciA9ICgpID0+IHF1ZXVlSm9iKGpvYik7XG4gIH1cbiAgY29uc3QgZWZmZWN0ID0gbmV3IFJlYWN0aXZlRWZmZWN0KGdldHRlciwgc2NoZWR1bGVyKTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIGVmZmVjdC5vblRyYWNrID0gb25UcmFjaztcbiAgICBlZmZlY3Qub25UcmlnZ2VyID0gb25UcmlnZ2VyO1xuICB9XG4gIGlmIChjYikge1xuICAgIGlmIChpbW1lZGlhdGUpIHtcbiAgICAgIGpvYigpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvbGRWYWx1ZSA9IGVmZmVjdC5ydW4oKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZmx1c2ggPT09IFwicG9zdFwiKSB7XG4gICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KFxuICAgICAgZWZmZWN0LnJ1bi5iaW5kKGVmZmVjdCksXG4gICAgICBpbnN0YW5jZSAmJiBpbnN0YW5jZS5zdXNwZW5zZVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgZWZmZWN0LnJ1bigpO1xuICB9XG4gIGNvbnN0IHVud2F0Y2ggPSAoKSA9PiB7XG4gICAgZWZmZWN0LnN0b3AoKTtcbiAgICBpZiAoaW5zdGFuY2UgJiYgaW5zdGFuY2Uuc2NvcGUpIHtcbiAgICAgIHJlbW92ZShpbnN0YW5jZS5zY29wZS5lZmZlY3RzLCBlZmZlY3QpO1xuICAgIH1cbiAgfTtcbiAgaWYgKHNzckNsZWFudXApXG4gICAgc3NyQ2xlYW51cC5wdXNoKHVud2F0Y2gpO1xuICByZXR1cm4gdW53YXRjaDtcbn1cbmZ1bmN0aW9uIGluc3RhbmNlV2F0Y2goc291cmNlLCB2YWx1ZSwgb3B0aW9ucykge1xuICBjb25zdCBwdWJsaWNUaGlzID0gdGhpcy5wcm94eTtcbiAgY29uc3QgZ2V0dGVyID0gaXNTdHJpbmcoc291cmNlKSA/IHNvdXJjZS5pbmNsdWRlcyhcIi5cIikgPyBjcmVhdGVQYXRoR2V0dGVyKHB1YmxpY1RoaXMsIHNvdXJjZSkgOiAoKSA9PiBwdWJsaWNUaGlzW3NvdXJjZV0gOiBzb3VyY2UuYmluZChwdWJsaWNUaGlzLCBwdWJsaWNUaGlzKTtcbiAgbGV0IGNiO1xuICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICBjYiA9IHZhbHVlO1xuICB9IGVsc2Uge1xuICAgIGNiID0gdmFsdWUuaGFuZGxlcjtcbiAgICBvcHRpb25zID0gdmFsdWU7XG4gIH1cbiAgY29uc3QgY3VyID0gY3VycmVudEluc3RhbmNlO1xuICBzZXRDdXJyZW50SW5zdGFuY2UodGhpcyk7XG4gIGNvbnN0IHJlcyA9IGRvV2F0Y2goZ2V0dGVyLCBjYi5iaW5kKHB1YmxpY1RoaXMpLCBvcHRpb25zKTtcbiAgaWYgKGN1cikge1xuICAgIHNldEN1cnJlbnRJbnN0YW5jZShjdXIpO1xuICB9IGVsc2Uge1xuICAgIHVuc2V0Q3VycmVudEluc3RhbmNlKCk7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn1cbmZ1bmN0aW9uIGNyZWF0ZVBhdGhHZXR0ZXIoY3R4LCBwYXRoKSB7XG4gIGNvbnN0IHNlZ21lbnRzID0gcGF0aC5zcGxpdChcIi5cIik7XG4gIHJldHVybiAoKSA9PiB7XG4gICAgbGV0IGN1ciA9IGN0eDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlZ21lbnRzLmxlbmd0aCAmJiBjdXI7IGkrKykge1xuICAgICAgY3VyID0gY3VyW3NlZ21lbnRzW2ldXTtcbiAgICB9XG4gICAgcmV0dXJuIGN1cjtcbiAgfTtcbn1cbmZ1bmN0aW9uIHRyYXZlcnNlKHZhbHVlLCBzZWVuKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpIHx8IHZhbHVlW1wiX192X3NraXBcIl0pIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgc2VlbiA9IHNlZW4gfHwgLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKTtcbiAgaWYgKHNlZW4uaGFzKHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBzZWVuLmFkZCh2YWx1ZSk7XG4gIGlmIChpc1JlZih2YWx1ZSkpIHtcbiAgICB0cmF2ZXJzZSh2YWx1ZS52YWx1ZSwgc2Vlbik7XG4gIH0gZWxzZSBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0cmF2ZXJzZSh2YWx1ZVtpXSwgc2Vlbik7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzU2V0KHZhbHVlKSB8fCBpc01hcCh2YWx1ZSkpIHtcbiAgICB2YWx1ZS5mb3JFYWNoKCh2KSA9PiB7XG4gICAgICB0cmF2ZXJzZSh2LCBzZWVuKTtcbiAgICB9KTtcbiAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHZhbHVlKSkge1xuICAgIGZvciAoY29uc3Qga2V5IGluIHZhbHVlKSB7XG4gICAgICB0cmF2ZXJzZSh2YWx1ZVtrZXldLCBzZWVuKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZURpcmVjdGl2ZU5hbWUobmFtZSkge1xuICBpZiAoaXNCdWlsdEluRGlyZWN0aXZlKG5hbWUpKSB7XG4gICAgd2FybihcIkRvIG5vdCB1c2UgYnVpbHQtaW4gZGlyZWN0aXZlIGlkcyBhcyBjdXN0b20gZGlyZWN0aXZlIGlkOiBcIiArIG5hbWUpO1xuICB9XG59XG5mdW5jdGlvbiB3aXRoRGlyZWN0aXZlcyh2bm9kZSwgZGlyZWN0aXZlcykge1xuICBjb25zdCBpbnRlcm5hbEluc3RhbmNlID0gY3VycmVudFJlbmRlcmluZ0luc3RhbmNlO1xuICBpZiAoaW50ZXJuYWxJbnN0YW5jZSA9PT0gbnVsbCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiB3YXJuKGB3aXRoRGlyZWN0aXZlcyBjYW4gb25seSBiZSB1c2VkIGluc2lkZSByZW5kZXIgZnVuY3Rpb25zLmApO1xuICAgIHJldHVybiB2bm9kZTtcbiAgfVxuICBjb25zdCBpbnN0YW5jZSA9IGdldEV4cG9zZVByb3h5KGludGVybmFsSW5zdGFuY2UpIHx8IGludGVybmFsSW5zdGFuY2UucHJveHk7XG4gIGNvbnN0IGJpbmRpbmdzID0gdm5vZGUuZGlycyB8fCAodm5vZGUuZGlycyA9IFtdKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBkaXJlY3RpdmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IFtkaXIsIHZhbHVlLCBhcmcsIG1vZGlmaWVycyA9IEVNUFRZX09CSl0gPSBkaXJlY3RpdmVzW2ldO1xuICAgIGlmIChkaXIpIHtcbiAgICAgIGlmIChpc0Z1bmN0aW9uKGRpcikpIHtcbiAgICAgICAgZGlyID0ge1xuICAgICAgICAgIG1vdW50ZWQ6IGRpcixcbiAgICAgICAgICB1cGRhdGVkOiBkaXJcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGlmIChkaXIuZGVlcCkge1xuICAgICAgICB0cmF2ZXJzZSh2YWx1ZSk7XG4gICAgICB9XG4gICAgICBiaW5kaW5ncy5wdXNoKHtcbiAgICAgICAgZGlyLFxuICAgICAgICBpbnN0YW5jZSxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIG9sZFZhbHVlOiB2b2lkIDAsXG4gICAgICAgIGFyZyxcbiAgICAgICAgbW9kaWZpZXJzXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHZub2RlO1xufVxuZnVuY3Rpb24gaW52b2tlRGlyZWN0aXZlSG9vayh2bm9kZSwgcHJldlZOb2RlLCBpbnN0YW5jZSwgbmFtZSkge1xuICBjb25zdCBiaW5kaW5ncyA9IHZub2RlLmRpcnM7XG4gIGNvbnN0IG9sZEJpbmRpbmdzID0gcHJldlZOb2RlICYmIHByZXZWTm9kZS5kaXJzO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGJpbmRpbmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgYmluZGluZyA9IGJpbmRpbmdzW2ldO1xuICAgIGlmIChvbGRCaW5kaW5ncykge1xuICAgICAgYmluZGluZy5vbGRWYWx1ZSA9IG9sZEJpbmRpbmdzW2ldLnZhbHVlO1xuICAgIH1cbiAgICBsZXQgaG9vayA9IGJpbmRpbmcuZGlyW25hbWVdO1xuICAgIGlmIChob29rKSB7XG4gICAgICBwYXVzZVRyYWNraW5nKCk7XG4gICAgICBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyhob29rLCBpbnN0YW5jZSwgOCwgW1xuICAgICAgICB2bm9kZS5lbCxcbiAgICAgICAgYmluZGluZyxcbiAgICAgICAgdm5vZGUsXG4gICAgICAgIHByZXZWTm9kZVxuICAgICAgXSk7XG4gICAgICByZXNldFRyYWNraW5nKCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHVzZVRyYW5zaXRpb25TdGF0ZSgpIHtcbiAgY29uc3Qgc3RhdGUgPSB7XG4gICAgaXNNb3VudGVkOiBmYWxzZSxcbiAgICBpc0xlYXZpbmc6IGZhbHNlLFxuICAgIGlzVW5tb3VudGluZzogZmFsc2UsXG4gICAgbGVhdmluZ1ZOb2RlczogLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKVxuICB9O1xuICBvbk1vdW50ZWQoKCkgPT4ge1xuICAgIHN0YXRlLmlzTW91bnRlZCA9IHRydWU7XG4gIH0pO1xuICBvbkJlZm9yZVVubW91bnQoKCkgPT4ge1xuICAgIHN0YXRlLmlzVW5tb3VudGluZyA9IHRydWU7XG4gIH0pO1xuICByZXR1cm4gc3RhdGU7XG59XG5jb25zdCBUcmFuc2l0aW9uSG9va1ZhbGlkYXRvciA9IFtGdW5jdGlvbiwgQXJyYXldO1xuY29uc3QgQmFzZVRyYW5zaXRpb25Qcm9wc1ZhbGlkYXRvcnMgPSB7XG4gIG1vZGU6IFN0cmluZyxcbiAgYXBwZWFyOiBCb29sZWFuLFxuICBwZXJzaXN0ZWQ6IEJvb2xlYW4sXG4gIC8vIGVudGVyXG4gIG9uQmVmb3JlRW50ZXI6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxuICBvbkVudGVyOiBUcmFuc2l0aW9uSG9va1ZhbGlkYXRvcixcbiAgb25BZnRlckVudGVyOiBUcmFuc2l0aW9uSG9va1ZhbGlkYXRvcixcbiAgb25FbnRlckNhbmNlbGxlZDogVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IsXG4gIC8vIGxlYXZlXG4gIG9uQmVmb3JlTGVhdmU6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxuICBvbkxlYXZlOiBUcmFuc2l0aW9uSG9va1ZhbGlkYXRvcixcbiAgb25BZnRlckxlYXZlOiBUcmFuc2l0aW9uSG9va1ZhbGlkYXRvcixcbiAgb25MZWF2ZUNhbmNlbGxlZDogVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IsXG4gIC8vIGFwcGVhclxuICBvbkJlZm9yZUFwcGVhcjogVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IsXG4gIG9uQXBwZWFyOiBUcmFuc2l0aW9uSG9va1ZhbGlkYXRvcixcbiAgb25BZnRlckFwcGVhcjogVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IsXG4gIG9uQXBwZWFyQ2FuY2VsbGVkOiBUcmFuc2l0aW9uSG9va1ZhbGlkYXRvclxufTtcbmNvbnN0IEJhc2VUcmFuc2l0aW9uSW1wbCA9IHtcbiAgbmFtZTogYEJhc2VUcmFuc2l0aW9uYCxcbiAgcHJvcHM6IEJhc2VUcmFuc2l0aW9uUHJvcHNWYWxpZGF0b3JzLFxuICBzZXR1cChwcm9wcywgeyBzbG90cyB9KSB7XG4gICAgY29uc3QgaW5zdGFuY2UgPSBnZXRDdXJyZW50SW5zdGFuY2UoKTtcbiAgICBjb25zdCBzdGF0ZSA9IHVzZVRyYW5zaXRpb25TdGF0ZSgpO1xuICAgIGxldCBwcmV2VHJhbnNpdGlvbktleTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgY29uc3QgY2hpbGRyZW4gPSBzbG90cy5kZWZhdWx0ICYmIGdldFRyYW5zaXRpb25SYXdDaGlsZHJlbihzbG90cy5kZWZhdWx0KCksIHRydWUpO1xuICAgICAgaWYgKCFjaGlsZHJlbiB8fCAhY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGxldCBjaGlsZCA9IGNoaWxkcmVuWzBdO1xuICAgICAgaWYgKGNoaWxkcmVuLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgbGV0IGhhc0ZvdW5kID0gZmFsc2U7XG4gICAgICAgIGZvciAoY29uc3QgYyBvZiBjaGlsZHJlbikge1xuICAgICAgICAgIGlmIChjLnR5cGUgIT09IENvbW1lbnQpIHtcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgaGFzRm91bmQpIHtcbiAgICAgICAgICAgICAgd2FybihcbiAgICAgICAgICAgICAgICBcIjx0cmFuc2l0aW9uPiBjYW4gb25seSBiZSB1c2VkIG9uIGEgc2luZ2xlIGVsZW1lbnQgb3IgY29tcG9uZW50LiBVc2UgPHRyYW5zaXRpb24tZ3JvdXA+IGZvciBsaXN0cy5cIlxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNoaWxkID0gYztcbiAgICAgICAgICAgIGhhc0ZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmICghcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKVxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvbnN0IHJhd1Byb3BzID0gdG9SYXcocHJvcHMpO1xuICAgICAgY29uc3QgeyBtb2RlIH0gPSByYXdQcm9wcztcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgbW9kZSAmJiBtb2RlICE9PSBcImluLW91dFwiICYmIG1vZGUgIT09IFwib3V0LWluXCIgJiYgbW9kZSAhPT0gXCJkZWZhdWx0XCIpIHtcbiAgICAgICAgd2FybihgaW52YWxpZCA8dHJhbnNpdGlvbj4gbW9kZTogJHttb2RlfWApO1xuICAgICAgfVxuICAgICAgaWYgKHN0YXRlLmlzTGVhdmluZykge1xuICAgICAgICByZXR1cm4gZW1wdHlQbGFjZWhvbGRlcihjaGlsZCk7XG4gICAgICB9XG4gICAgICBjb25zdCBpbm5lckNoaWxkID0gZ2V0S2VlcEFsaXZlQ2hpbGQoY2hpbGQpO1xuICAgICAgaWYgKCFpbm5lckNoaWxkKSB7XG4gICAgICAgIHJldHVybiBlbXB0eVBsYWNlaG9sZGVyKGNoaWxkKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGVudGVySG9va3MgPSByZXNvbHZlVHJhbnNpdGlvbkhvb2tzKFxuICAgICAgICBpbm5lckNoaWxkLFxuICAgICAgICByYXdQcm9wcyxcbiAgICAgICAgc3RhdGUsXG4gICAgICAgIGluc3RhbmNlXG4gICAgICApO1xuICAgICAgc2V0VHJhbnNpdGlvbkhvb2tzKGlubmVyQ2hpbGQsIGVudGVySG9va3MpO1xuICAgICAgY29uc3Qgb2xkQ2hpbGQgPSBpbnN0YW5jZS5zdWJUcmVlO1xuICAgICAgY29uc3Qgb2xkSW5uZXJDaGlsZCA9IG9sZENoaWxkICYmIGdldEtlZXBBbGl2ZUNoaWxkKG9sZENoaWxkKTtcbiAgICAgIGxldCB0cmFuc2l0aW9uS2V5Q2hhbmdlZCA9IGZhbHNlO1xuICAgICAgY29uc3QgeyBnZXRUcmFuc2l0aW9uS2V5IH0gPSBpbm5lckNoaWxkLnR5cGU7XG4gICAgICBpZiAoZ2V0VHJhbnNpdGlvbktleSkge1xuICAgICAgICBjb25zdCBrZXkgPSBnZXRUcmFuc2l0aW9uS2V5KCk7XG4gICAgICAgIGlmIChwcmV2VHJhbnNpdGlvbktleSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgcHJldlRyYW5zaXRpb25LZXkgPSBrZXk7XG4gICAgICAgIH0gZWxzZSBpZiAoa2V5ICE9PSBwcmV2VHJhbnNpdGlvbktleSkge1xuICAgICAgICAgIHByZXZUcmFuc2l0aW9uS2V5ID0ga2V5O1xuICAgICAgICAgIHRyYW5zaXRpb25LZXlDaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG9sZElubmVyQ2hpbGQgJiYgb2xkSW5uZXJDaGlsZC50eXBlICE9PSBDb21tZW50ICYmICghaXNTYW1lVk5vZGVUeXBlKGlubmVyQ2hpbGQsIG9sZElubmVyQ2hpbGQpIHx8IHRyYW5zaXRpb25LZXlDaGFuZ2VkKSkge1xuICAgICAgICBjb25zdCBsZWF2aW5nSG9va3MgPSByZXNvbHZlVHJhbnNpdGlvbkhvb2tzKFxuICAgICAgICAgIG9sZElubmVyQ2hpbGQsXG4gICAgICAgICAgcmF3UHJvcHMsXG4gICAgICAgICAgc3RhdGUsXG4gICAgICAgICAgaW5zdGFuY2VcbiAgICAgICAgKTtcbiAgICAgICAgc2V0VHJhbnNpdGlvbkhvb2tzKG9sZElubmVyQ2hpbGQsIGxlYXZpbmdIb29rcyk7XG4gICAgICAgIGlmIChtb2RlID09PSBcIm91dC1pblwiKSB7XG4gICAgICAgICAgc3RhdGUuaXNMZWF2aW5nID0gdHJ1ZTtcbiAgICAgICAgICBsZWF2aW5nSG9va3MuYWZ0ZXJMZWF2ZSA9ICgpID0+IHtcbiAgICAgICAgICAgIHN0YXRlLmlzTGVhdmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKGluc3RhbmNlLnVwZGF0ZS5hY3RpdmUgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgIGluc3RhbmNlLnVwZGF0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgICAgcmV0dXJuIGVtcHR5UGxhY2Vob2xkZXIoY2hpbGQpO1xuICAgICAgICB9IGVsc2UgaWYgKG1vZGUgPT09IFwiaW4tb3V0XCIgJiYgaW5uZXJDaGlsZC50eXBlICE9PSBDb21tZW50KSB7XG4gICAgICAgICAgbGVhdmluZ0hvb2tzLmRlbGF5TGVhdmUgPSAoZWwsIGVhcmx5UmVtb3ZlLCBkZWxheWVkTGVhdmUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxlYXZpbmdWTm9kZXNDYWNoZSA9IGdldExlYXZpbmdOb2Rlc0ZvclR5cGUoXG4gICAgICAgICAgICAgIHN0YXRlLFxuICAgICAgICAgICAgICBvbGRJbm5lckNoaWxkXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgbGVhdmluZ1ZOb2Rlc0NhY2hlW1N0cmluZyhvbGRJbm5lckNoaWxkLmtleSldID0gb2xkSW5uZXJDaGlsZDtcbiAgICAgICAgICAgIGVsLl9sZWF2ZUNiID0gKCkgPT4ge1xuICAgICAgICAgICAgICBlYXJseVJlbW92ZSgpO1xuICAgICAgICAgICAgICBlbC5fbGVhdmVDYiA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgZGVsZXRlIGVudGVySG9va3MuZGVsYXllZExlYXZlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGVudGVySG9va3MuZGVsYXllZExlYXZlID0gZGVsYXllZExlYXZlO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBjaGlsZDtcbiAgICB9O1xuICB9XG59O1xuY29uc3QgQmFzZVRyYW5zaXRpb24gPSBCYXNlVHJhbnNpdGlvbkltcGw7XG5mdW5jdGlvbiBnZXRMZWF2aW5nTm9kZXNGb3JUeXBlKHN0YXRlLCB2bm9kZSkge1xuICBjb25zdCB7IGxlYXZpbmdWTm9kZXMgfSA9IHN0YXRlO1xuICBsZXQgbGVhdmluZ1ZOb2Rlc0NhY2hlID0gbGVhdmluZ1ZOb2Rlcy5nZXQodm5vZGUudHlwZSk7XG4gIGlmICghbGVhdmluZ1ZOb2Rlc0NhY2hlKSB7XG4gICAgbGVhdmluZ1ZOb2Rlc0NhY2hlID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgbGVhdmluZ1ZOb2Rlcy5zZXQodm5vZGUudHlwZSwgbGVhdmluZ1ZOb2Rlc0NhY2hlKTtcbiAgfVxuICByZXR1cm4gbGVhdmluZ1ZOb2Rlc0NhY2hlO1xufVxuZnVuY3Rpb24gcmVzb2x2ZVRyYW5zaXRpb25Ib29rcyh2bm9kZSwgcHJvcHMsIHN0YXRlLCBpbnN0YW5jZSkge1xuICBjb25zdCB7XG4gICAgYXBwZWFyLFxuICAgIG1vZGUsXG4gICAgcGVyc2lzdGVkID0gZmFsc2UsXG4gICAgb25CZWZvcmVFbnRlcixcbiAgICBvbkVudGVyLFxuICAgIG9uQWZ0ZXJFbnRlcixcbiAgICBvbkVudGVyQ2FuY2VsbGVkLFxuICAgIG9uQmVmb3JlTGVhdmUsXG4gICAgb25MZWF2ZSxcbiAgICBvbkFmdGVyTGVhdmUsXG4gICAgb25MZWF2ZUNhbmNlbGxlZCxcbiAgICBvbkJlZm9yZUFwcGVhcixcbiAgICBvbkFwcGVhcixcbiAgICBvbkFmdGVyQXBwZWFyLFxuICAgIG9uQXBwZWFyQ2FuY2VsbGVkXG4gIH0gPSBwcm9wcztcbiAgY29uc3Qga2V5ID0gU3RyaW5nKHZub2RlLmtleSk7XG4gIGNvbnN0IGxlYXZpbmdWTm9kZXNDYWNoZSA9IGdldExlYXZpbmdOb2Rlc0ZvclR5cGUoc3RhdGUsIHZub2RlKTtcbiAgY29uc3QgY2FsbEhvb2sgPSAoaG9vaywgYXJncykgPT4ge1xuICAgIGhvb2sgJiYgY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcoXG4gICAgICBob29rLFxuICAgICAgaW5zdGFuY2UsXG4gICAgICA5LFxuICAgICAgYXJnc1xuICAgICk7XG4gIH07XG4gIGNvbnN0IGNhbGxBc3luY0hvb2sgPSAoaG9vaywgYXJncykgPT4ge1xuICAgIGNvbnN0IGRvbmUgPSBhcmdzWzFdO1xuICAgIGNhbGxIb29rKGhvb2ssIGFyZ3MpO1xuICAgIGlmIChpc0FycmF5KGhvb2spKSB7XG4gICAgICBpZiAoaG9vay5ldmVyeSgoaG9vazIpID0+IGhvb2syLmxlbmd0aCA8PSAxKSlcbiAgICAgICAgZG9uZSgpO1xuICAgIH0gZWxzZSBpZiAoaG9vay5sZW5ndGggPD0gMSkge1xuICAgICAgZG9uZSgpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgaG9va3MgPSB7XG4gICAgbW9kZSxcbiAgICBwZXJzaXN0ZWQsXG4gICAgYmVmb3JlRW50ZXIoZWwpIHtcbiAgICAgIGxldCBob29rID0gb25CZWZvcmVFbnRlcjtcbiAgICAgIGlmICghc3RhdGUuaXNNb3VudGVkKSB7XG4gICAgICAgIGlmIChhcHBlYXIpIHtcbiAgICAgICAgICBob29rID0gb25CZWZvcmVBcHBlYXIgfHwgb25CZWZvcmVFbnRlcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChlbC5fbGVhdmVDYikge1xuICAgICAgICBlbC5fbGVhdmVDYihcbiAgICAgICAgICB0cnVlXG4gICAgICAgICAgLyogY2FuY2VsbGVkICovXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBjb25zdCBsZWF2aW5nVk5vZGUgPSBsZWF2aW5nVk5vZGVzQ2FjaGVba2V5XTtcbiAgICAgIGlmIChsZWF2aW5nVk5vZGUgJiYgaXNTYW1lVk5vZGVUeXBlKHZub2RlLCBsZWF2aW5nVk5vZGUpICYmIGxlYXZpbmdWTm9kZS5lbC5fbGVhdmVDYikge1xuICAgICAgICBsZWF2aW5nVk5vZGUuZWwuX2xlYXZlQ2IoKTtcbiAgICAgIH1cbiAgICAgIGNhbGxIb29rKGhvb2ssIFtlbF0pO1xuICAgIH0sXG4gICAgZW50ZXIoZWwpIHtcbiAgICAgIGxldCBob29rID0gb25FbnRlcjtcbiAgICAgIGxldCBhZnRlckhvb2sgPSBvbkFmdGVyRW50ZXI7XG4gICAgICBsZXQgY2FuY2VsSG9vayA9IG9uRW50ZXJDYW5jZWxsZWQ7XG4gICAgICBpZiAoIXN0YXRlLmlzTW91bnRlZCkge1xuICAgICAgICBpZiAoYXBwZWFyKSB7XG4gICAgICAgICAgaG9vayA9IG9uQXBwZWFyIHx8IG9uRW50ZXI7XG4gICAgICAgICAgYWZ0ZXJIb29rID0gb25BZnRlckFwcGVhciB8fCBvbkFmdGVyRW50ZXI7XG4gICAgICAgICAgY2FuY2VsSG9vayA9IG9uQXBwZWFyQ2FuY2VsbGVkIHx8IG9uRW50ZXJDYW5jZWxsZWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsZXQgY2FsbGVkID0gZmFsc2U7XG4gICAgICBjb25zdCBkb25lID0gZWwuX2VudGVyQ2IgPSAoY2FuY2VsbGVkKSA9PiB7XG4gICAgICAgIGlmIChjYWxsZWQpXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjYWxsZWQgPSB0cnVlO1xuICAgICAgICBpZiAoY2FuY2VsbGVkKSB7XG4gICAgICAgICAgY2FsbEhvb2soY2FuY2VsSG9vaywgW2VsXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2FsbEhvb2soYWZ0ZXJIb29rLCBbZWxdKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaG9va3MuZGVsYXllZExlYXZlKSB7XG4gICAgICAgICAgaG9va3MuZGVsYXllZExlYXZlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWwuX2VudGVyQ2IgPSB2b2lkIDA7XG4gICAgICB9O1xuICAgICAgaWYgKGhvb2spIHtcbiAgICAgICAgY2FsbEFzeW5jSG9vayhob29rLCBbZWwsIGRvbmVdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGxlYXZlKGVsLCByZW1vdmUpIHtcbiAgICAgIGNvbnN0IGtleTIgPSBTdHJpbmcodm5vZGUua2V5KTtcbiAgICAgIGlmIChlbC5fZW50ZXJDYikge1xuICAgICAgICBlbC5fZW50ZXJDYihcbiAgICAgICAgICB0cnVlXG4gICAgICAgICAgLyogY2FuY2VsbGVkICovXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoc3RhdGUuaXNVbm1vdW50aW5nKSB7XG4gICAgICAgIHJldHVybiByZW1vdmUoKTtcbiAgICAgIH1cbiAgICAgIGNhbGxIb29rKG9uQmVmb3JlTGVhdmUsIFtlbF0pO1xuICAgICAgbGV0IGNhbGxlZCA9IGZhbHNlO1xuICAgICAgY29uc3QgZG9uZSA9IGVsLl9sZWF2ZUNiID0gKGNhbmNlbGxlZCkgPT4ge1xuICAgICAgICBpZiAoY2FsbGVkKVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgcmVtb3ZlKCk7XG4gICAgICAgIGlmIChjYW5jZWxsZWQpIHtcbiAgICAgICAgICBjYWxsSG9vayhvbkxlYXZlQ2FuY2VsbGVkLCBbZWxdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYWxsSG9vayhvbkFmdGVyTGVhdmUsIFtlbF0pO1xuICAgICAgICB9XG4gICAgICAgIGVsLl9sZWF2ZUNiID0gdm9pZCAwO1xuICAgICAgICBpZiAobGVhdmluZ1ZOb2Rlc0NhY2hlW2tleTJdID09PSB2bm9kZSkge1xuICAgICAgICAgIGRlbGV0ZSBsZWF2aW5nVk5vZGVzQ2FjaGVba2V5Ml07XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBsZWF2aW5nVk5vZGVzQ2FjaGVba2V5Ml0gPSB2bm9kZTtcbiAgICAgIGlmIChvbkxlYXZlKSB7XG4gICAgICAgIGNhbGxBc3luY0hvb2sob25MZWF2ZSwgW2VsLCBkb25lXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkb25lKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBjbG9uZSh2bm9kZTIpIHtcbiAgICAgIHJldHVybiByZXNvbHZlVHJhbnNpdGlvbkhvb2tzKHZub2RlMiwgcHJvcHMsIHN0YXRlLCBpbnN0YW5jZSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gaG9va3M7XG59XG5mdW5jdGlvbiBlbXB0eVBsYWNlaG9sZGVyKHZub2RlKSB7XG4gIGlmIChpc0tlZXBBbGl2ZSh2bm9kZSkpIHtcbiAgICB2bm9kZSA9IGNsb25lVk5vZGUodm5vZGUpO1xuICAgIHZub2RlLmNoaWxkcmVuID0gbnVsbDtcbiAgICByZXR1cm4gdm5vZGU7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldEtlZXBBbGl2ZUNoaWxkKHZub2RlKSB7XG4gIHJldHVybiBpc0tlZXBBbGl2ZSh2bm9kZSkgPyB2bm9kZS5jaGlsZHJlbiA/IHZub2RlLmNoaWxkcmVuWzBdIDogdm9pZCAwIDogdm5vZGU7XG59XG5mdW5jdGlvbiBzZXRUcmFuc2l0aW9uSG9va3Modm5vZGUsIGhvb2tzKSB7XG4gIGlmICh2bm9kZS5zaGFwZUZsYWcgJiA2ICYmIHZub2RlLmNvbXBvbmVudCkge1xuICAgIHNldFRyYW5zaXRpb25Ib29rcyh2bm9kZS5jb21wb25lbnQuc3ViVHJlZSwgaG9va3MpO1xuICB9IGVsc2UgaWYgKHZub2RlLnNoYXBlRmxhZyAmIDEyOCkge1xuICAgIHZub2RlLnNzQ29udGVudC50cmFuc2l0aW9uID0gaG9va3MuY2xvbmUodm5vZGUuc3NDb250ZW50KTtcbiAgICB2bm9kZS5zc0ZhbGxiYWNrLnRyYW5zaXRpb24gPSBob29rcy5jbG9uZSh2bm9kZS5zc0ZhbGxiYWNrKTtcbiAgfSBlbHNlIHtcbiAgICB2bm9kZS50cmFuc2l0aW9uID0gaG9va3M7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldFRyYW5zaXRpb25SYXdDaGlsZHJlbihjaGlsZHJlbiwga2VlcENvbW1lbnQgPSBmYWxzZSwgcGFyZW50S2V5KSB7XG4gIGxldCByZXQgPSBbXTtcbiAgbGV0IGtleWVkRnJhZ21lbnRDb3VudCA9IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICBjb25zdCBrZXkgPSBwYXJlbnRLZXkgPT0gbnVsbCA/IGNoaWxkLmtleSA6IFN0cmluZyhwYXJlbnRLZXkpICsgU3RyaW5nKGNoaWxkLmtleSAhPSBudWxsID8gY2hpbGQua2V5IDogaSk7XG4gICAgaWYgKGNoaWxkLnR5cGUgPT09IEZyYWdtZW50KSB7XG4gICAgICBpZiAoY2hpbGQucGF0Y2hGbGFnICYgMTI4KVxuICAgICAgICBrZXllZEZyYWdtZW50Q291bnQrKztcbiAgICAgIHJldCA9IHJldC5jb25jYXQoXG4gICAgICAgIGdldFRyYW5zaXRpb25SYXdDaGlsZHJlbihjaGlsZC5jaGlsZHJlbiwga2VlcENvbW1lbnQsIGtleSlcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmIChrZWVwQ29tbWVudCB8fCBjaGlsZC50eXBlICE9PSBDb21tZW50KSB7XG4gICAgICByZXQucHVzaChrZXkgIT0gbnVsbCA/IGNsb25lVk5vZGUoY2hpbGQsIHsga2V5IH0pIDogY2hpbGQpO1xuICAgIH1cbiAgfVxuICBpZiAoa2V5ZWRGcmFnbWVudENvdW50ID4gMSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmV0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICByZXRbaV0ucGF0Y2hGbGFnID0gLTI7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIGRlZmluZUNvbXBvbmVudChvcHRpb25zLCBleHRyYU9wdGlvbnMpIHtcbiAgcmV0dXJuIGlzRnVuY3Rpb24ob3B0aW9ucykgPyAoXG4gICAgLy8gIzgzMjY6IGV4dGVuZCBjYWxsIGFuZCBvcHRpb25zLm5hbWUgYWNjZXNzIGFyZSBjb25zaWRlcmVkIHNpZGUtZWZmZWN0c1xuICAgIC8vIGJ5IFJvbGx1cCwgc28gd2UgaGF2ZSB0byB3cmFwIGl0IGluIGEgcHVyZS1hbm5vdGF0ZWQgSUlGRS5cbiAgICAvKiBAX19QVVJFX18gKi8gKCgpID0+IGV4dGVuZCh7IG5hbWU6IG9wdGlvbnMubmFtZSB9LCBleHRyYU9wdGlvbnMsIHsgc2V0dXA6IG9wdGlvbnMgfSkpKClcbiAgKSA6IG9wdGlvbnM7XG59XG5cbmNvbnN0IGlzQXN5bmNXcmFwcGVyID0gKGkpID0+ICEhaS50eXBlLl9fYXN5bmNMb2FkZXI7XG5mdW5jdGlvbiBkZWZpbmVBc3luY0NvbXBvbmVudChzb3VyY2UpIHtcbiAgaWYgKGlzRnVuY3Rpb24oc291cmNlKSkge1xuICAgIHNvdXJjZSA9IHsgbG9hZGVyOiBzb3VyY2UgfTtcbiAgfVxuICBjb25zdCB7XG4gICAgbG9hZGVyLFxuICAgIGxvYWRpbmdDb21wb25lbnQsXG4gICAgZXJyb3JDb21wb25lbnQsXG4gICAgZGVsYXkgPSAyMDAsXG4gICAgdGltZW91dCxcbiAgICAvLyB1bmRlZmluZWQgPSBuZXZlciB0aW1lcyBvdXRcbiAgICBzdXNwZW5zaWJsZSA9IHRydWUsXG4gICAgb25FcnJvcjogdXNlck9uRXJyb3JcbiAgfSA9IHNvdXJjZTtcbiAgbGV0IHBlbmRpbmdSZXF1ZXN0ID0gbnVsbDtcbiAgbGV0IHJlc29sdmVkQ29tcDtcbiAgbGV0IHJldHJpZXMgPSAwO1xuICBjb25zdCByZXRyeSA9ICgpID0+IHtcbiAgICByZXRyaWVzKys7XG4gICAgcGVuZGluZ1JlcXVlc3QgPSBudWxsO1xuICAgIHJldHVybiBsb2FkKCk7XG4gIH07XG4gIGNvbnN0IGxvYWQgPSAoKSA9PiB7XG4gICAgbGV0IHRoaXNSZXF1ZXN0O1xuICAgIHJldHVybiBwZW5kaW5nUmVxdWVzdCB8fCAodGhpc1JlcXVlc3QgPSBwZW5kaW5nUmVxdWVzdCA9IGxvYWRlcigpLmNhdGNoKChlcnIpID0+IHtcbiAgICAgIGVyciA9IGVyciBpbnN0YW5jZW9mIEVycm9yID8gZXJyIDogbmV3IEVycm9yKFN0cmluZyhlcnIpKTtcbiAgICAgIGlmICh1c2VyT25FcnJvcikge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHVzZXJSZXRyeSA9ICgpID0+IHJlc29sdmUocmV0cnkoKSk7XG4gICAgICAgICAgY29uc3QgdXNlckZhaWwgPSAoKSA9PiByZWplY3QoZXJyKTtcbiAgICAgICAgICB1c2VyT25FcnJvcihlcnIsIHVzZXJSZXRyeSwgdXNlckZhaWwsIHJldHJpZXMgKyAxKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBlcnI7XG4gICAgICB9XG4gICAgfSkudGhlbigoY29tcCkgPT4ge1xuICAgICAgaWYgKHRoaXNSZXF1ZXN0ICE9PSBwZW5kaW5nUmVxdWVzdCAmJiBwZW5kaW5nUmVxdWVzdCkge1xuICAgICAgICByZXR1cm4gcGVuZGluZ1JlcXVlc3Q7XG4gICAgICB9XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmICFjb21wKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgYEFzeW5jIGNvbXBvbmVudCBsb2FkZXIgcmVzb2x2ZWQgdG8gdW5kZWZpbmVkLiBJZiB5b3UgYXJlIHVzaW5nIHJldHJ5KCksIG1ha2Ugc3VyZSB0byByZXR1cm4gaXRzIHJldHVybiB2YWx1ZS5gXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoY29tcCAmJiAoY29tcC5fX2VzTW9kdWxlIHx8IGNvbXBbU3ltYm9sLnRvU3RyaW5nVGFnXSA9PT0gXCJNb2R1bGVcIikpIHtcbiAgICAgICAgY29tcCA9IGNvbXAuZGVmYXVsdDtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgY29tcCAmJiAhaXNPYmplY3QoY29tcCkgJiYgIWlzRnVuY3Rpb24oY29tcCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGFzeW5jIGNvbXBvbmVudCBsb2FkIHJlc3VsdDogJHtjb21wfWApO1xuICAgICAgfVxuICAgICAgcmVzb2x2ZWRDb21wID0gY29tcDtcbiAgICAgIHJldHVybiBjb21wO1xuICAgIH0pKTtcbiAgfTtcbiAgcmV0dXJuIGRlZmluZUNvbXBvbmVudCh7XG4gICAgbmFtZTogXCJBc3luY0NvbXBvbmVudFdyYXBwZXJcIixcbiAgICBfX2FzeW5jTG9hZGVyOiBsb2FkLFxuICAgIGdldCBfX2FzeW5jUmVzb2x2ZWQoKSB7XG4gICAgICByZXR1cm4gcmVzb2x2ZWRDb21wO1xuICAgIH0sXG4gICAgc2V0dXAoKSB7XG4gICAgICBjb25zdCBpbnN0YW5jZSA9IGN1cnJlbnRJbnN0YW5jZTtcbiAgICAgIGlmIChyZXNvbHZlZENvbXApIHtcbiAgICAgICAgcmV0dXJuICgpID0+IGNyZWF0ZUlubmVyQ29tcChyZXNvbHZlZENvbXAsIGluc3RhbmNlKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG9uRXJyb3IgPSAoZXJyKSA9PiB7XG4gICAgICAgIHBlbmRpbmdSZXF1ZXN0ID0gbnVsbDtcbiAgICAgICAgaGFuZGxlRXJyb3IoXG4gICAgICAgICAgZXJyLFxuICAgICAgICAgIGluc3RhbmNlLFxuICAgICAgICAgIDEzLFxuICAgICAgICAgICFlcnJvckNvbXBvbmVudFxuICAgICAgICAgIC8qIGRvIG5vdCB0aHJvdyBpbiBkZXYgaWYgdXNlciBwcm92aWRlZCBlcnJvciBjb21wb25lbnQgKi9cbiAgICAgICAgKTtcbiAgICAgIH07XG4gICAgICBpZiAoc3VzcGVuc2libGUgJiYgaW5zdGFuY2Uuc3VzcGVuc2UgfHwgaXNJblNTUkNvbXBvbmVudFNldHVwKSB7XG4gICAgICAgIHJldHVybiBsb2FkKCkudGhlbigoY29tcCkgPT4ge1xuICAgICAgICAgIHJldHVybiAoKSA9PiBjcmVhdGVJbm5lckNvbXAoY29tcCwgaW5zdGFuY2UpO1xuICAgICAgICB9KS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgb25FcnJvcihlcnIpO1xuICAgICAgICAgIHJldHVybiAoKSA9PiBlcnJvckNvbXBvbmVudCA/IGNyZWF0ZVZOb2RlKGVycm9yQ29tcG9uZW50LCB7XG4gICAgICAgICAgICBlcnJvcjogZXJyXG4gICAgICAgICAgfSkgOiBudWxsO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGxvYWRlZCA9IHJlZihmYWxzZSk7XG4gICAgICBjb25zdCBlcnJvciA9IHJlZigpO1xuICAgICAgY29uc3QgZGVsYXllZCA9IHJlZighIWRlbGF5KTtcbiAgICAgIGlmIChkZWxheSkge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICBkZWxheWVkLnZhbHVlID0gZmFsc2U7XG4gICAgICAgIH0sIGRlbGF5KTtcbiAgICAgIH1cbiAgICAgIGlmICh0aW1lb3V0ICE9IG51bGwpIHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgaWYgKCFsb2FkZWQudmFsdWUgJiYgIWVycm9yLnZhbHVlKSB7XG4gICAgICAgICAgICBjb25zdCBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgIGBBc3luYyBjb21wb25lbnQgdGltZWQgb3V0IGFmdGVyICR7dGltZW91dH1tcy5gXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgb25FcnJvcihlcnIpO1xuICAgICAgICAgICAgZXJyb3IudmFsdWUgPSBlcnI7XG4gICAgICAgICAgfVxuICAgICAgICB9LCB0aW1lb3V0KTtcbiAgICAgIH1cbiAgICAgIGxvYWQoKS50aGVuKCgpID0+IHtcbiAgICAgICAgbG9hZGVkLnZhbHVlID0gdHJ1ZTtcbiAgICAgICAgaWYgKGluc3RhbmNlLnBhcmVudCAmJiBpc0tlZXBBbGl2ZShpbnN0YW5jZS5wYXJlbnQudm5vZGUpKSB7XG4gICAgICAgICAgcXVldWVKb2IoaW5zdGFuY2UucGFyZW50LnVwZGF0ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgb25FcnJvcihlcnIpO1xuICAgICAgICBlcnJvci52YWx1ZSA9IGVycjtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgaWYgKGxvYWRlZC52YWx1ZSAmJiByZXNvbHZlZENvbXApIHtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlSW5uZXJDb21wKHJlc29sdmVkQ29tcCwgaW5zdGFuY2UpO1xuICAgICAgICB9IGVsc2UgaWYgKGVycm9yLnZhbHVlICYmIGVycm9yQ29tcG9uZW50KSB7XG4gICAgICAgICAgcmV0dXJuIGNyZWF0ZVZOb2RlKGVycm9yQ29tcG9uZW50LCB7XG4gICAgICAgICAgICBlcnJvcjogZXJyb3IudmFsdWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmIChsb2FkaW5nQ29tcG9uZW50ICYmICFkZWxheWVkLnZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGNyZWF0ZVZOb2RlKGxvYWRpbmdDb21wb25lbnQpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfSk7XG59XG5mdW5jdGlvbiBjcmVhdGVJbm5lckNvbXAoY29tcCwgcGFyZW50KSB7XG4gIGNvbnN0IHsgcmVmOiByZWYyLCBwcm9wcywgY2hpbGRyZW4sIGNlIH0gPSBwYXJlbnQudm5vZGU7XG4gIGNvbnN0IHZub2RlID0gY3JlYXRlVk5vZGUoY29tcCwgcHJvcHMsIGNoaWxkcmVuKTtcbiAgdm5vZGUucmVmID0gcmVmMjtcbiAgdm5vZGUuY2UgPSBjZTtcbiAgZGVsZXRlIHBhcmVudC52bm9kZS5jZTtcbiAgcmV0dXJuIHZub2RlO1xufVxuXG5jb25zdCBpc0tlZXBBbGl2ZSA9ICh2bm9kZSkgPT4gdm5vZGUudHlwZS5fX2lzS2VlcEFsaXZlO1xuY29uc3QgS2VlcEFsaXZlSW1wbCA9IHtcbiAgbmFtZTogYEtlZXBBbGl2ZWAsXG4gIC8vIE1hcmtlciBmb3Igc3BlY2lhbCBoYW5kbGluZyBpbnNpZGUgdGhlIHJlbmRlcmVyLiBXZSBhcmUgbm90IHVzaW5nIGEgPT09XG4gIC8vIGNoZWNrIGRpcmVjdGx5IG9uIEtlZXBBbGl2ZSBpbiB0aGUgcmVuZGVyZXIsIGJlY2F1c2UgaW1wb3J0aW5nIGl0IGRpcmVjdGx5XG4gIC8vIHdvdWxkIHByZXZlbnQgaXQgZnJvbSBiZWluZyB0cmVlLXNoYWtlbi5cbiAgX19pc0tlZXBBbGl2ZTogdHJ1ZSxcbiAgcHJvcHM6IHtcbiAgICBpbmNsdWRlOiBbU3RyaW5nLCBSZWdFeHAsIEFycmF5XSxcbiAgICBleGNsdWRlOiBbU3RyaW5nLCBSZWdFeHAsIEFycmF5XSxcbiAgICBtYXg6IFtTdHJpbmcsIE51bWJlcl1cbiAgfSxcbiAgc2V0dXAocHJvcHMsIHsgc2xvdHMgfSkge1xuICAgIGNvbnN0IGluc3RhbmNlID0gZ2V0Q3VycmVudEluc3RhbmNlKCk7XG4gICAgY29uc3Qgc2hhcmVkQ29udGV4dCA9IGluc3RhbmNlLmN0eDtcbiAgICBpZiAoIXNoYXJlZENvbnRleHQucmVuZGVyZXIpIHtcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGNoaWxkcmVuID0gc2xvdHMuZGVmYXVsdCAmJiBzbG90cy5kZWZhdWx0KCk7XG4gICAgICAgIHJldHVybiBjaGlsZHJlbiAmJiBjaGlsZHJlbi5sZW5ndGggPT09IDEgPyBjaGlsZHJlblswXSA6IGNoaWxkcmVuO1xuICAgICAgfTtcbiAgICB9XG4gICAgY29uc3QgY2FjaGUgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICAgIGNvbnN0IGtleXMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpO1xuICAgIGxldCBjdXJyZW50ID0gbnVsbDtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xuICAgICAgaW5zdGFuY2UuX192X2NhY2hlID0gY2FjaGU7XG4gICAgfVxuICAgIGNvbnN0IHBhcmVudFN1c3BlbnNlID0gaW5zdGFuY2Uuc3VzcGVuc2U7XG4gICAgY29uc3Qge1xuICAgICAgcmVuZGVyZXI6IHtcbiAgICAgICAgcDogcGF0Y2gsXG4gICAgICAgIG06IG1vdmUsXG4gICAgICAgIHVtOiBfdW5tb3VudCxcbiAgICAgICAgbzogeyBjcmVhdGVFbGVtZW50IH1cbiAgICAgIH1cbiAgICB9ID0gc2hhcmVkQ29udGV4dDtcbiAgICBjb25zdCBzdG9yYWdlQ29udGFpbmVyID0gY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBzaGFyZWRDb250ZXh0LmFjdGl2YXRlID0gKHZub2RlLCBjb250YWluZXIsIGFuY2hvciwgaXNTVkcsIG9wdGltaXplZCkgPT4ge1xuICAgICAgY29uc3QgaW5zdGFuY2UyID0gdm5vZGUuY29tcG9uZW50O1xuICAgICAgbW92ZSh2bm9kZSwgY29udGFpbmVyLCBhbmNob3IsIDAsIHBhcmVudFN1c3BlbnNlKTtcbiAgICAgIHBhdGNoKFxuICAgICAgICBpbnN0YW5jZTIudm5vZGUsXG4gICAgICAgIHZub2RlLFxuICAgICAgICBjb250YWluZXIsXG4gICAgICAgIGFuY2hvcixcbiAgICAgICAgaW5zdGFuY2UyLFxuICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgaXNTVkcsXG4gICAgICAgIHZub2RlLnNsb3RTY29wZUlkcyxcbiAgICAgICAgb3B0aW1pemVkXG4gICAgICApO1xuICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaW5zdGFuY2UyLmlzRGVhY3RpdmF0ZWQgPSBmYWxzZTtcbiAgICAgICAgaWYgKGluc3RhbmNlMi5hKSB7XG4gICAgICAgICAgaW52b2tlQXJyYXlGbnMoaW5zdGFuY2UyLmEpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHZub2RlSG9vayA9IHZub2RlLnByb3BzICYmIHZub2RlLnByb3BzLm9uVm5vZGVNb3VudGVkO1xuICAgICAgICBpZiAodm5vZGVIb29rKSB7XG4gICAgICAgICAgaW52b2tlVk5vZGVIb29rKHZub2RlSG9vaywgaW5zdGFuY2UyLnBhcmVudCwgdm5vZGUpO1xuICAgICAgICB9XG4gICAgICB9LCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xuICAgICAgICBkZXZ0b29sc0NvbXBvbmVudEFkZGVkKGluc3RhbmNlMik7XG4gICAgICB9XG4gICAgfTtcbiAgICBzaGFyZWRDb250ZXh0LmRlYWN0aXZhdGUgPSAodm5vZGUpID0+IHtcbiAgICAgIGNvbnN0IGluc3RhbmNlMiA9IHZub2RlLmNvbXBvbmVudDtcbiAgICAgIG1vdmUodm5vZGUsIHN0b3JhZ2VDb250YWluZXIsIG51bGwsIDEsIHBhcmVudFN1c3BlbnNlKTtcbiAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmIChpbnN0YW5jZTIuZGEpIHtcbiAgICAgICAgICBpbnZva2VBcnJheUZucyhpbnN0YW5jZTIuZGEpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHZub2RlSG9vayA9IHZub2RlLnByb3BzICYmIHZub2RlLnByb3BzLm9uVm5vZGVVbm1vdW50ZWQ7XG4gICAgICAgIGlmICh2bm9kZUhvb2spIHtcbiAgICAgICAgICBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBpbnN0YW5jZTIucGFyZW50LCB2bm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgaW5zdGFuY2UyLmlzRGVhY3RpdmF0ZWQgPSB0cnVlO1xuICAgICAgfSwgcGFyZW50U3VzcGVuc2UpO1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiB8fCBfX1ZVRV9QUk9EX0RFVlRPT0xTX18pIHtcbiAgICAgICAgZGV2dG9vbHNDb21wb25lbnRBZGRlZChpbnN0YW5jZTIpO1xuICAgICAgfVxuICAgIH07XG4gICAgZnVuY3Rpb24gdW5tb3VudCh2bm9kZSkge1xuICAgICAgcmVzZXRTaGFwZUZsYWcodm5vZGUpO1xuICAgICAgX3VubW91bnQodm5vZGUsIGluc3RhbmNlLCBwYXJlbnRTdXNwZW5zZSwgdHJ1ZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBydW5lQ2FjaGUoZmlsdGVyKSB7XG4gICAgICBjYWNoZS5mb3JFYWNoKCh2bm9kZSwga2V5KSA9PiB7XG4gICAgICAgIGNvbnN0IG5hbWUgPSBnZXRDb21wb25lbnROYW1lKHZub2RlLnR5cGUpO1xuICAgICAgICBpZiAobmFtZSAmJiAoIWZpbHRlciB8fCAhZmlsdGVyKG5hbWUpKSkge1xuICAgICAgICAgIHBydW5lQ2FjaGVFbnRyeShrZXkpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcHJ1bmVDYWNoZUVudHJ5KGtleSkge1xuICAgICAgY29uc3QgY2FjaGVkID0gY2FjaGUuZ2V0KGtleSk7XG4gICAgICBpZiAoIWN1cnJlbnQgfHwgIWlzU2FtZVZOb2RlVHlwZShjYWNoZWQsIGN1cnJlbnQpKSB7XG4gICAgICAgIHVubW91bnQoY2FjaGVkKTtcbiAgICAgIH0gZWxzZSBpZiAoY3VycmVudCkge1xuICAgICAgICByZXNldFNoYXBlRmxhZyhjdXJyZW50KTtcbiAgICAgIH1cbiAgICAgIGNhY2hlLmRlbGV0ZShrZXkpO1xuICAgICAga2V5cy5kZWxldGUoa2V5KTtcbiAgICB9XG4gICAgd2F0Y2goXG4gICAgICAoKSA9PiBbcHJvcHMuaW5jbHVkZSwgcHJvcHMuZXhjbHVkZV0sXG4gICAgICAoW2luY2x1ZGUsIGV4Y2x1ZGVdKSA9PiB7XG4gICAgICAgIGluY2x1ZGUgJiYgcHJ1bmVDYWNoZSgobmFtZSkgPT4gbWF0Y2hlcyhpbmNsdWRlLCBuYW1lKSk7XG4gICAgICAgIGV4Y2x1ZGUgJiYgcHJ1bmVDYWNoZSgobmFtZSkgPT4gIW1hdGNoZXMoZXhjbHVkZSwgbmFtZSkpO1xuICAgICAgfSxcbiAgICAgIC8vIHBydW5lIHBvc3QtcmVuZGVyIGFmdGVyIGBjdXJyZW50YCBoYXMgYmVlbiB1cGRhdGVkXG4gICAgICB7IGZsdXNoOiBcInBvc3RcIiwgZGVlcDogdHJ1ZSB9XG4gICAgKTtcbiAgICBsZXQgcGVuZGluZ0NhY2hlS2V5ID0gbnVsbDtcbiAgICBjb25zdCBjYWNoZVN1YnRyZWUgPSAoKSA9PiB7XG4gICAgICBpZiAocGVuZGluZ0NhY2hlS2V5ICE9IG51bGwpIHtcbiAgICAgICAgY2FjaGUuc2V0KHBlbmRpbmdDYWNoZUtleSwgZ2V0SW5uZXJDaGlsZChpbnN0YW5jZS5zdWJUcmVlKSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBvbk1vdW50ZWQoY2FjaGVTdWJ0cmVlKTtcbiAgICBvblVwZGF0ZWQoY2FjaGVTdWJ0cmVlKTtcbiAgICBvbkJlZm9yZVVubW91bnQoKCkgPT4ge1xuICAgICAgY2FjaGUuZm9yRWFjaCgoY2FjaGVkKSA9PiB7XG4gICAgICAgIGNvbnN0IHsgc3ViVHJlZSwgc3VzcGVuc2UgfSA9IGluc3RhbmNlO1xuICAgICAgICBjb25zdCB2bm9kZSA9IGdldElubmVyQ2hpbGQoc3ViVHJlZSk7XG4gICAgICAgIGlmIChjYWNoZWQudHlwZSA9PT0gdm5vZGUudHlwZSAmJiBjYWNoZWQua2V5ID09PSB2bm9kZS5rZXkpIHtcbiAgICAgICAgICByZXNldFNoYXBlRmxhZyh2bm9kZSk7XG4gICAgICAgICAgY29uc3QgZGEgPSB2bm9kZS5jb21wb25lbnQuZGE7XG4gICAgICAgICAgZGEgJiYgcXVldWVQb3N0UmVuZGVyRWZmZWN0KGRhLCBzdXNwZW5zZSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHVubW91bnQoY2FjaGVkKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBwZW5kaW5nQ2FjaGVLZXkgPSBudWxsO1xuICAgICAgaWYgKCFzbG90cy5kZWZhdWx0KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgY29uc3QgY2hpbGRyZW4gPSBzbG90cy5kZWZhdWx0KCk7XG4gICAgICBjb25zdCByYXdWTm9kZSA9IGNoaWxkcmVuWzBdO1xuICAgICAgaWYgKGNoaWxkcmVuLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgIHdhcm4oYEtlZXBBbGl2ZSBzaG91bGQgY29udGFpbiBleGFjdGx5IG9uZSBjb21wb25lbnQgY2hpbGQuYCk7XG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudCA9IG51bGw7XG4gICAgICAgIHJldHVybiBjaGlsZHJlbjtcbiAgICAgIH0gZWxzZSBpZiAoIWlzVk5vZGUocmF3Vk5vZGUpIHx8ICEocmF3Vk5vZGUuc2hhcGVGbGFnICYgNCkgJiYgIShyYXdWTm9kZS5zaGFwZUZsYWcgJiAxMjgpKSB7XG4gICAgICAgIGN1cnJlbnQgPSBudWxsO1xuICAgICAgICByZXR1cm4gcmF3Vk5vZGU7XG4gICAgICB9XG4gICAgICBsZXQgdm5vZGUgPSBnZXRJbm5lckNoaWxkKHJhd1ZOb2RlKTtcbiAgICAgIGNvbnN0IGNvbXAgPSB2bm9kZS50eXBlO1xuICAgICAgY29uc3QgbmFtZSA9IGdldENvbXBvbmVudE5hbWUoXG4gICAgICAgIGlzQXN5bmNXcmFwcGVyKHZub2RlKSA/IHZub2RlLnR5cGUuX19hc3luY1Jlc29sdmVkIHx8IHt9IDogY29tcFxuICAgICAgKTtcbiAgICAgIGNvbnN0IHsgaW5jbHVkZSwgZXhjbHVkZSwgbWF4IH0gPSBwcm9wcztcbiAgICAgIGlmIChpbmNsdWRlICYmICghbmFtZSB8fCAhbWF0Y2hlcyhpbmNsdWRlLCBuYW1lKSkgfHwgZXhjbHVkZSAmJiBuYW1lICYmIG1hdGNoZXMoZXhjbHVkZSwgbmFtZSkpIHtcbiAgICAgICAgY3VycmVudCA9IHZub2RlO1xuICAgICAgICByZXR1cm4gcmF3Vk5vZGU7XG4gICAgICB9XG4gICAgICBjb25zdCBrZXkgPSB2bm9kZS5rZXkgPT0gbnVsbCA/IGNvbXAgOiB2bm9kZS5rZXk7XG4gICAgICBjb25zdCBjYWNoZWRWTm9kZSA9IGNhY2hlLmdldChrZXkpO1xuICAgICAgaWYgKHZub2RlLmVsKSB7XG4gICAgICAgIHZub2RlID0gY2xvbmVWTm9kZSh2bm9kZSk7XG4gICAgICAgIGlmIChyYXdWTm9kZS5zaGFwZUZsYWcgJiAxMjgpIHtcbiAgICAgICAgICByYXdWTm9kZS5zc0NvbnRlbnQgPSB2bm9kZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcGVuZGluZ0NhY2hlS2V5ID0ga2V5O1xuICAgICAgaWYgKGNhY2hlZFZOb2RlKSB7XG4gICAgICAgIHZub2RlLmVsID0gY2FjaGVkVk5vZGUuZWw7XG4gICAgICAgIHZub2RlLmNvbXBvbmVudCA9IGNhY2hlZFZOb2RlLmNvbXBvbmVudDtcbiAgICAgICAgaWYgKHZub2RlLnRyYW5zaXRpb24pIHtcbiAgICAgICAgICBzZXRUcmFuc2l0aW9uSG9va3Modm5vZGUsIHZub2RlLnRyYW5zaXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIHZub2RlLnNoYXBlRmxhZyB8PSA1MTI7XG4gICAgICAgIGtleXMuZGVsZXRlKGtleSk7XG4gICAgICAgIGtleXMuYWRkKGtleSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBrZXlzLmFkZChrZXkpO1xuICAgICAgICBpZiAobWF4ICYmIGtleXMuc2l6ZSA+IHBhcnNlSW50KG1heCwgMTApKSB7XG4gICAgICAgICAgcHJ1bmVDYWNoZUVudHJ5KGtleXMudmFsdWVzKCkubmV4dCgpLnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdm5vZGUuc2hhcGVGbGFnIHw9IDI1NjtcbiAgICAgIGN1cnJlbnQgPSB2bm9kZTtcbiAgICAgIHJldHVybiBpc1N1c3BlbnNlKHJhd1ZOb2RlLnR5cGUpID8gcmF3Vk5vZGUgOiB2bm9kZTtcbiAgICB9O1xuICB9XG59O1xuY29uc3QgS2VlcEFsaXZlID0gS2VlcEFsaXZlSW1wbDtcbmZ1bmN0aW9uIG1hdGNoZXMocGF0dGVybiwgbmFtZSkge1xuICBpZiAoaXNBcnJheShwYXR0ZXJuKSkge1xuICAgIHJldHVybiBwYXR0ZXJuLnNvbWUoKHApID0+IG1hdGNoZXMocCwgbmFtZSkpO1xuICB9IGVsc2UgaWYgKGlzU3RyaW5nKHBhdHRlcm4pKSB7XG4gICAgcmV0dXJuIHBhdHRlcm4uc3BsaXQoXCIsXCIpLmluY2x1ZGVzKG5hbWUpO1xuICB9IGVsc2UgaWYgKGlzUmVnRXhwKHBhdHRlcm4pKSB7XG4gICAgcmV0dXJuIHBhdHRlcm4udGVzdChuYW1lKTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBvbkFjdGl2YXRlZChob29rLCB0YXJnZXQpIHtcbiAgcmVnaXN0ZXJLZWVwQWxpdmVIb29rKGhvb2ssIFwiYVwiLCB0YXJnZXQpO1xufVxuZnVuY3Rpb24gb25EZWFjdGl2YXRlZChob29rLCB0YXJnZXQpIHtcbiAgcmVnaXN0ZXJLZWVwQWxpdmVIb29rKGhvb2ssIFwiZGFcIiwgdGFyZ2V0KTtcbn1cbmZ1bmN0aW9uIHJlZ2lzdGVyS2VlcEFsaXZlSG9vayhob29rLCB0eXBlLCB0YXJnZXQgPSBjdXJyZW50SW5zdGFuY2UpIHtcbiAgY29uc3Qgd3JhcHBlZEhvb2sgPSBob29rLl9fd2RjIHx8IChob29rLl9fd2RjID0gKCkgPT4ge1xuICAgIGxldCBjdXJyZW50ID0gdGFyZ2V0O1xuICAgIHdoaWxlIChjdXJyZW50KSB7XG4gICAgICBpZiAoY3VycmVudC5pc0RlYWN0aXZhdGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGN1cnJlbnQgPSBjdXJyZW50LnBhcmVudDtcbiAgICB9XG4gICAgcmV0dXJuIGhvb2soKTtcbiAgfSk7XG4gIGluamVjdEhvb2sodHlwZSwgd3JhcHBlZEhvb2ssIHRhcmdldCk7XG4gIGlmICh0YXJnZXQpIHtcbiAgICBsZXQgY3VycmVudCA9IHRhcmdldC5wYXJlbnQ7XG4gICAgd2hpbGUgKGN1cnJlbnQgJiYgY3VycmVudC5wYXJlbnQpIHtcbiAgICAgIGlmIChpc0tlZXBBbGl2ZShjdXJyZW50LnBhcmVudC52bm9kZSkpIHtcbiAgICAgICAgaW5qZWN0VG9LZWVwQWxpdmVSb290KHdyYXBwZWRIb29rLCB0eXBlLCB0YXJnZXQsIGN1cnJlbnQpO1xuICAgICAgfVxuICAgICAgY3VycmVudCA9IGN1cnJlbnQucGFyZW50O1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gaW5qZWN0VG9LZWVwQWxpdmVSb290KGhvb2ssIHR5cGUsIHRhcmdldCwga2VlcEFsaXZlUm9vdCkge1xuICBjb25zdCBpbmplY3RlZCA9IGluamVjdEhvb2soXG4gICAgdHlwZSxcbiAgICBob29rLFxuICAgIGtlZXBBbGl2ZVJvb3QsXG4gICAgdHJ1ZVxuICAgIC8qIHByZXBlbmQgKi9cbiAgKTtcbiAgb25Vbm1vdW50ZWQoKCkgPT4ge1xuICAgIHJlbW92ZShrZWVwQWxpdmVSb290W3R5cGVdLCBpbmplY3RlZCk7XG4gIH0sIHRhcmdldCk7XG59XG5mdW5jdGlvbiByZXNldFNoYXBlRmxhZyh2bm9kZSkge1xuICB2bm9kZS5zaGFwZUZsYWcgJj0gfjI1NjtcbiAgdm5vZGUuc2hhcGVGbGFnICY9IH41MTI7XG59XG5mdW5jdGlvbiBnZXRJbm5lckNoaWxkKHZub2RlKSB7XG4gIHJldHVybiB2bm9kZS5zaGFwZUZsYWcgJiAxMjggPyB2bm9kZS5zc0NvbnRlbnQgOiB2bm9kZTtcbn1cblxuZnVuY3Rpb24gaW5qZWN0SG9vayh0eXBlLCBob29rLCB0YXJnZXQgPSBjdXJyZW50SW5zdGFuY2UsIHByZXBlbmQgPSBmYWxzZSkge1xuICBpZiAodGFyZ2V0KSB7XG4gICAgY29uc3QgaG9va3MgPSB0YXJnZXRbdHlwZV0gfHwgKHRhcmdldFt0eXBlXSA9IFtdKTtcbiAgICBjb25zdCB3cmFwcGVkSG9vayA9IGhvb2suX193ZWggfHwgKGhvb2suX193ZWggPSAoLi4uYXJncykgPT4ge1xuICAgICAgaWYgKHRhcmdldC5pc1VubW91bnRlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBwYXVzZVRyYWNraW5nKCk7XG4gICAgICBzZXRDdXJyZW50SW5zdGFuY2UodGFyZ2V0KTtcbiAgICAgIGNvbnN0IHJlcyA9IGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKGhvb2ssIHRhcmdldCwgdHlwZSwgYXJncyk7XG4gICAgICB1bnNldEN1cnJlbnRJbnN0YW5jZSgpO1xuICAgICAgcmVzZXRUcmFja2luZygpO1xuICAgICAgcmV0dXJuIHJlcztcbiAgICB9KTtcbiAgICBpZiAocHJlcGVuZCkge1xuICAgICAgaG9va3MudW5zaGlmdCh3cmFwcGVkSG9vayk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhvb2tzLnB1c2god3JhcHBlZEhvb2spO1xuICAgIH1cbiAgICByZXR1cm4gd3JhcHBlZEhvb2s7XG4gIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgY29uc3QgYXBpTmFtZSA9IHRvSGFuZGxlcktleShFcnJvclR5cGVTdHJpbmdzW3R5cGVdLnJlcGxhY2UoLyBob29rJC8sIFwiXCIpKTtcbiAgICB3YXJuKFxuICAgICAgYCR7YXBpTmFtZX0gaXMgY2FsbGVkIHdoZW4gdGhlcmUgaXMgbm8gYWN0aXZlIGNvbXBvbmVudCBpbnN0YW5jZSB0byBiZSBhc3NvY2lhdGVkIHdpdGguIExpZmVjeWNsZSBpbmplY3Rpb24gQVBJcyBjYW4gb25seSBiZSB1c2VkIGR1cmluZyBleGVjdXRpb24gb2Ygc2V0dXAoKS5gICsgKGAgSWYgeW91IGFyZSB1c2luZyBhc3luYyBzZXR1cCgpLCBtYWtlIHN1cmUgdG8gcmVnaXN0ZXIgbGlmZWN5Y2xlIGhvb2tzIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQgc3RhdGVtZW50LmAgKVxuICAgICk7XG4gIH1cbn1cbmNvbnN0IGNyZWF0ZUhvb2sgPSAobGlmZWN5Y2xlKSA9PiAoaG9vaywgdGFyZ2V0ID0gY3VycmVudEluc3RhbmNlKSA9PiAoXG4gIC8vIHBvc3QtY3JlYXRlIGxpZmVjeWNsZSByZWdpc3RyYXRpb25zIGFyZSBub29wcyBkdXJpbmcgU1NSIChleGNlcHQgZm9yIHNlcnZlclByZWZldGNoKVxuICAoIWlzSW5TU1JDb21wb25lbnRTZXR1cCB8fCBsaWZlY3ljbGUgPT09IFwic3BcIikgJiYgaW5qZWN0SG9vayhsaWZlY3ljbGUsICguLi5hcmdzKSA9PiBob29rKC4uLmFyZ3MpLCB0YXJnZXQpXG4pO1xuY29uc3Qgb25CZWZvcmVNb3VudCA9IGNyZWF0ZUhvb2soXCJibVwiKTtcbmNvbnN0IG9uTW91bnRlZCA9IGNyZWF0ZUhvb2soXCJtXCIpO1xuY29uc3Qgb25CZWZvcmVVcGRhdGUgPSBjcmVhdGVIb29rKFwiYnVcIik7XG5jb25zdCBvblVwZGF0ZWQgPSBjcmVhdGVIb29rKFwidVwiKTtcbmNvbnN0IG9uQmVmb3JlVW5tb3VudCA9IGNyZWF0ZUhvb2soXCJidW1cIik7XG5jb25zdCBvblVubW91bnRlZCA9IGNyZWF0ZUhvb2soXCJ1bVwiKTtcbmNvbnN0IG9uU2VydmVyUHJlZmV0Y2ggPSBjcmVhdGVIb29rKFwic3BcIik7XG5jb25zdCBvblJlbmRlclRyaWdnZXJlZCA9IGNyZWF0ZUhvb2soXG4gIFwicnRnXCJcbik7XG5jb25zdCBvblJlbmRlclRyYWNrZWQgPSBjcmVhdGVIb29rKFxuICBcInJ0Y1wiXG4pO1xuZnVuY3Rpb24gb25FcnJvckNhcHR1cmVkKGhvb2ssIHRhcmdldCA9IGN1cnJlbnRJbnN0YW5jZSkge1xuICBpbmplY3RIb29rKFwiZWNcIiwgaG9vaywgdGFyZ2V0KTtcbn1cblxuY29uc3QgQ09NUE9ORU5UUyA9IFwiY29tcG9uZW50c1wiO1xuY29uc3QgRElSRUNUSVZFUyA9IFwiZGlyZWN0aXZlc1wiO1xuZnVuY3Rpb24gcmVzb2x2ZUNvbXBvbmVudChuYW1lLCBtYXliZVNlbGZSZWZlcmVuY2UpIHtcbiAgcmV0dXJuIHJlc29sdmVBc3NldChDT01QT05FTlRTLCBuYW1lLCB0cnVlLCBtYXliZVNlbGZSZWZlcmVuY2UpIHx8IG5hbWU7XG59XG5jb25zdCBOVUxMX0RZTkFNSUNfQ09NUE9ORU5UID0gU3ltYm9sLmZvcihcInYtbmRjXCIpO1xuZnVuY3Rpb24gcmVzb2x2ZUR5bmFtaWNDb21wb25lbnQoY29tcG9uZW50KSB7XG4gIGlmIChpc1N0cmluZyhjb21wb25lbnQpKSB7XG4gICAgcmV0dXJuIHJlc29sdmVBc3NldChDT01QT05FTlRTLCBjb21wb25lbnQsIGZhbHNlKSB8fCBjb21wb25lbnQ7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGNvbXBvbmVudCB8fCBOVUxMX0RZTkFNSUNfQ09NUE9ORU5UO1xuICB9XG59XG5mdW5jdGlvbiByZXNvbHZlRGlyZWN0aXZlKG5hbWUpIHtcbiAgcmV0dXJuIHJlc29sdmVBc3NldChESVJFQ1RJVkVTLCBuYW1lKTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVBc3NldCh0eXBlLCBuYW1lLCB3YXJuTWlzc2luZyA9IHRydWUsIG1heWJlU2VsZlJlZmVyZW5jZSA9IGZhbHNlKSB7XG4gIGNvbnN0IGluc3RhbmNlID0gY3VycmVudFJlbmRlcmluZ0luc3RhbmNlIHx8IGN1cnJlbnRJbnN0YW5jZTtcbiAgaWYgKGluc3RhbmNlKSB7XG4gICAgY29uc3QgQ29tcG9uZW50ID0gaW5zdGFuY2UudHlwZTtcbiAgICBpZiAodHlwZSA9PT0gQ09NUE9ORU5UUykge1xuICAgICAgY29uc3Qgc2VsZk5hbWUgPSBnZXRDb21wb25lbnROYW1lKFxuICAgICAgICBDb21wb25lbnQsXG4gICAgICAgIGZhbHNlXG4gICAgICAgIC8qIGRvIG5vdCBpbmNsdWRlIGluZmVycmVkIG5hbWUgdG8gYXZvaWQgYnJlYWtpbmcgZXhpc3RpbmcgY29kZSAqL1xuICAgICAgKTtcbiAgICAgIGlmIChzZWxmTmFtZSAmJiAoc2VsZk5hbWUgPT09IG5hbWUgfHwgc2VsZk5hbWUgPT09IGNhbWVsaXplKG5hbWUpIHx8IHNlbGZOYW1lID09PSBjYXBpdGFsaXplKGNhbWVsaXplKG5hbWUpKSkpIHtcbiAgICAgICAgcmV0dXJuIENvbXBvbmVudDtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgcmVzID0gKFxuICAgICAgLy8gbG9jYWwgcmVnaXN0cmF0aW9uXG4gICAgICAvLyBjaGVjayBpbnN0YW5jZVt0eXBlXSBmaXJzdCB3aGljaCBpcyByZXNvbHZlZCBmb3Igb3B0aW9ucyBBUElcbiAgICAgIHJlc29sdmUoaW5zdGFuY2VbdHlwZV0gfHwgQ29tcG9uZW50W3R5cGVdLCBuYW1lKSB8fCAvLyBnbG9iYWwgcmVnaXN0cmF0aW9uXG4gICAgICByZXNvbHZlKGluc3RhbmNlLmFwcENvbnRleHRbdHlwZV0sIG5hbWUpXG4gICAgKTtcbiAgICBpZiAoIXJlcyAmJiBtYXliZVNlbGZSZWZlcmVuY2UpIHtcbiAgICAgIHJldHVybiBDb21wb25lbnQ7XG4gICAgfVxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgd2Fybk1pc3NpbmcgJiYgIXJlcykge1xuICAgICAgY29uc3QgZXh0cmEgPSB0eXBlID09PSBDT01QT05FTlRTID8gYFxuSWYgdGhpcyBpcyBhIG5hdGl2ZSBjdXN0b20gZWxlbWVudCwgbWFrZSBzdXJlIHRvIGV4Y2x1ZGUgaXQgZnJvbSBjb21wb25lbnQgcmVzb2x1dGlvbiB2aWEgY29tcGlsZXJPcHRpb25zLmlzQ3VzdG9tRWxlbWVudC5gIDogYGA7XG4gICAgICB3YXJuKGBGYWlsZWQgdG8gcmVzb2x2ZSAke3R5cGUuc2xpY2UoMCwgLTEpfTogJHtuYW1lfSR7ZXh0cmF9YCk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgd2FybihcbiAgICAgIGByZXNvbHZlJHtjYXBpdGFsaXplKHR5cGUuc2xpY2UoMCwgLTEpKX0gY2FuIG9ubHkgYmUgdXNlZCBpbiByZW5kZXIoKSBvciBzZXR1cCgpLmBcbiAgICApO1xuICB9XG59XG5mdW5jdGlvbiByZXNvbHZlKHJlZ2lzdHJ5LCBuYW1lKSB7XG4gIHJldHVybiByZWdpc3RyeSAmJiAocmVnaXN0cnlbbmFtZV0gfHwgcmVnaXN0cnlbY2FtZWxpemUobmFtZSldIHx8IHJlZ2lzdHJ5W2NhcGl0YWxpemUoY2FtZWxpemUobmFtZSkpXSk7XG59XG5cbmZ1bmN0aW9uIHJlbmRlckxpc3Qoc291cmNlLCByZW5kZXJJdGVtLCBjYWNoZSwgaW5kZXgpIHtcbiAgbGV0IHJldDtcbiAgY29uc3QgY2FjaGVkID0gY2FjaGUgJiYgY2FjaGVbaW5kZXhdO1xuICBpZiAoaXNBcnJheShzb3VyY2UpIHx8IGlzU3RyaW5nKHNvdXJjZSkpIHtcbiAgICByZXQgPSBuZXcgQXJyYXkoc291cmNlLmxlbmd0aCk7XG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSBzb3VyY2UubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICByZXRbaV0gPSByZW5kZXJJdGVtKHNvdXJjZVtpXSwgaSwgdm9pZCAwLCBjYWNoZWQgJiYgY2FjaGVkW2ldKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHNvdXJjZSA9PT0gXCJudW1iZXJcIikge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgIU51bWJlci5pc0ludGVnZXIoc291cmNlKSkge1xuICAgICAgd2FybihgVGhlIHYtZm9yIHJhbmdlIGV4cGVjdCBhbiBpbnRlZ2VyIHZhbHVlIGJ1dCBnb3QgJHtzb3VyY2V9LmApO1xuICAgIH1cbiAgICByZXQgPSBuZXcgQXJyYXkoc291cmNlKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNvdXJjZTsgaSsrKSB7XG4gICAgICByZXRbaV0gPSByZW5kZXJJdGVtKGkgKyAxLCBpLCB2b2lkIDAsIGNhY2hlZCAmJiBjYWNoZWRbaV0pO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc09iamVjdChzb3VyY2UpKSB7XG4gICAgaWYgKHNvdXJjZVtTeW1ib2wuaXRlcmF0b3JdKSB7XG4gICAgICByZXQgPSBBcnJheS5mcm9tKFxuICAgICAgICBzb3VyY2UsXG4gICAgICAgIChpdGVtLCBpKSA9PiByZW5kZXJJdGVtKGl0ZW0sIGksIHZvaWQgMCwgY2FjaGVkICYmIGNhY2hlZFtpXSlcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICAgICAgcmV0ID0gbmV3IEFycmF5KGtleXMubGVuZ3RoKTtcbiAgICAgIGZvciAobGV0IGkgPSAwLCBsID0ga2V5cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgY29uc3Qga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgcmV0W2ldID0gcmVuZGVySXRlbShzb3VyY2Vba2V5XSwga2V5LCBpLCBjYWNoZWQgJiYgY2FjaGVkW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0ID0gW107XG4gIH1cbiAgaWYgKGNhY2hlKSB7XG4gICAgY2FjaGVbaW5kZXhdID0gcmV0O1xuICB9XG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVNsb3RzKHNsb3RzLCBkeW5hbWljU2xvdHMpIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBkeW5hbWljU2xvdHMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBzbG90ID0gZHluYW1pY1Nsb3RzW2ldO1xuICAgIGlmIChpc0FycmF5KHNsb3QpKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHNsb3QubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgc2xvdHNbc2xvdFtqXS5uYW1lXSA9IHNsb3Rbal0uZm47XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzbG90KSB7XG4gICAgICBzbG90c1tzbG90Lm5hbWVdID0gc2xvdC5rZXkgPyAoLi4uYXJncykgPT4ge1xuICAgICAgICBjb25zdCByZXMgPSBzbG90LmZuKC4uLmFyZ3MpO1xuICAgICAgICBpZiAocmVzKVxuICAgICAgICAgIHJlcy5rZXkgPSBzbG90LmtleTtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgIH0gOiBzbG90LmZuO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc2xvdHM7XG59XG5cbmZ1bmN0aW9uIHJlbmRlclNsb3Qoc2xvdHMsIG5hbWUsIHByb3BzID0ge30sIGZhbGxiYWNrLCBub1Nsb3R0ZWQpIHtcbiAgaWYgKGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZS5pc0NFIHx8IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZS5wYXJlbnQgJiYgaXNBc3luY1dyYXBwZXIoY3VycmVudFJlbmRlcmluZ0luc3RhbmNlLnBhcmVudCkgJiYgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlLnBhcmVudC5pc0NFKSB7XG4gICAgaWYgKG5hbWUgIT09IFwiZGVmYXVsdFwiKVxuICAgICAgcHJvcHMubmFtZSA9IG5hbWU7XG4gICAgcmV0dXJuIGNyZWF0ZVZOb2RlKFwic2xvdFwiLCBwcm9wcywgZmFsbGJhY2sgJiYgZmFsbGJhY2soKSk7XG4gIH1cbiAgbGV0IHNsb3QgPSBzbG90c1tuYW1lXTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiBzbG90ICYmIHNsb3QubGVuZ3RoID4gMSkge1xuICAgIHdhcm4oXG4gICAgICBgU1NSLW9wdGltaXplZCBzbG90IGZ1bmN0aW9uIGRldGVjdGVkIGluIGEgbm9uLVNTUi1vcHRpbWl6ZWQgcmVuZGVyIGZ1bmN0aW9uLiBZb3UgbmVlZCB0byBtYXJrIHRoaXMgY29tcG9uZW50IHdpdGggJGR5bmFtaWMtc2xvdHMgaW4gdGhlIHBhcmVudCB0ZW1wbGF0ZS5gXG4gICAgKTtcbiAgICBzbG90ID0gKCkgPT4gW107XG4gIH1cbiAgaWYgKHNsb3QgJiYgc2xvdC5fYykge1xuICAgIHNsb3QuX2QgPSBmYWxzZTtcbiAgfVxuICBvcGVuQmxvY2soKTtcbiAgY29uc3QgdmFsaWRTbG90Q29udGVudCA9IHNsb3QgJiYgZW5zdXJlVmFsaWRWTm9kZShzbG90KHByb3BzKSk7XG4gIGNvbnN0IHJlbmRlcmVkID0gY3JlYXRlQmxvY2soXG4gICAgRnJhZ21lbnQsXG4gICAge1xuICAgICAga2V5OiBwcm9wcy5rZXkgfHwgLy8gc2xvdCBjb250ZW50IGFycmF5IG9mIGEgZHluYW1pYyBjb25kaXRpb25hbCBzbG90IG1heSBoYXZlIGEgYnJhbmNoXG4gICAgICAvLyBrZXkgYXR0YWNoZWQgaW4gdGhlIGBjcmVhdGVTbG90c2AgaGVscGVyLCByZXNwZWN0IHRoYXRcbiAgICAgIHZhbGlkU2xvdENvbnRlbnQgJiYgdmFsaWRTbG90Q29udGVudC5rZXkgfHwgYF8ke25hbWV9YFxuICAgIH0sXG4gICAgdmFsaWRTbG90Q29udGVudCB8fCAoZmFsbGJhY2sgPyBmYWxsYmFjaygpIDogW10pLFxuICAgIHZhbGlkU2xvdENvbnRlbnQgJiYgc2xvdHMuXyA9PT0gMSA/IDY0IDogLTJcbiAgKTtcbiAgaWYgKCFub1Nsb3R0ZWQgJiYgcmVuZGVyZWQuc2NvcGVJZCkge1xuICAgIHJlbmRlcmVkLnNsb3RTY29wZUlkcyA9IFtyZW5kZXJlZC5zY29wZUlkICsgXCItc1wiXTtcbiAgfVxuICBpZiAoc2xvdCAmJiBzbG90Ll9jKSB7XG4gICAgc2xvdC5fZCA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIHJlbmRlcmVkO1xufVxuZnVuY3Rpb24gZW5zdXJlVmFsaWRWTm9kZSh2bm9kZXMpIHtcbiAgcmV0dXJuIHZub2Rlcy5zb21lKChjaGlsZCkgPT4ge1xuICAgIGlmICghaXNWTm9kZShjaGlsZCkpXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoY2hpbGQudHlwZSA9PT0gQ29tbWVudClcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBpZiAoY2hpbGQudHlwZSA9PT0gRnJhZ21lbnQgJiYgIWVuc3VyZVZhbGlkVk5vZGUoY2hpbGQuY2hpbGRyZW4pKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0cnVlO1xuICB9KSA/IHZub2RlcyA6IG51bGw7XG59XG5cbmZ1bmN0aW9uIHRvSGFuZGxlcnMob2JqLCBwcmVzZXJ2ZUNhc2VJZk5lY2Vzc2FyeSkge1xuICBjb25zdCByZXQgPSB7fTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiAhaXNPYmplY3Qob2JqKSkge1xuICAgIHdhcm4oYHYtb24gd2l0aCBubyBhcmd1bWVudCBleHBlY3RzIGFuIG9iamVjdCB2YWx1ZS5gKTtcbiAgICByZXR1cm4gcmV0O1xuICB9XG4gIGZvciAoY29uc3Qga2V5IGluIG9iaikge1xuICAgIHJldFtwcmVzZXJ2ZUNhc2VJZk5lY2Vzc2FyeSAmJiAvW0EtWl0vLnRlc3Qoa2V5KSA/IGBvbjoke2tleX1gIDogdG9IYW5kbGVyS2V5KGtleSldID0gb2JqW2tleV07XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cblxuY29uc3QgZ2V0UHVibGljSW5zdGFuY2UgPSAoaSkgPT4ge1xuICBpZiAoIWkpXG4gICAgcmV0dXJuIG51bGw7XG4gIGlmIChpc1N0YXRlZnVsQ29tcG9uZW50KGkpKVxuICAgIHJldHVybiBnZXRFeHBvc2VQcm94eShpKSB8fCBpLnByb3h5O1xuICByZXR1cm4gZ2V0UHVibGljSW5zdGFuY2UoaS5wYXJlbnQpO1xufTtcbmNvbnN0IHB1YmxpY1Byb3BlcnRpZXNNYXAgPSAoXG4gIC8vIE1vdmUgUFVSRSBtYXJrZXIgdG8gbmV3IGxpbmUgdG8gd29ya2Fyb3VuZCBjb21waWxlciBkaXNjYXJkaW5nIGl0XG4gIC8vIGR1ZSB0byB0eXBlIGFubm90YXRpb25cbiAgLyogQF9fUFVSRV9fICovIGV4dGVuZCgvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKSwge1xuICAgICQ6IChpKSA9PiBpLFxuICAgICRlbDogKGkpID0+IGkudm5vZGUuZWwsXG4gICAgJGRhdGE6IChpKSA9PiBpLmRhdGEsXG4gICAgJHByb3BzOiAoaSkgPT4gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gc2hhbGxvd1JlYWRvbmx5KGkucHJvcHMpIDogaS5wcm9wcyxcbiAgICAkYXR0cnM6IChpKSA9PiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBzaGFsbG93UmVhZG9ubHkoaS5hdHRycykgOiBpLmF0dHJzLFxuICAgICRzbG90czogKGkpID0+IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHNoYWxsb3dSZWFkb25seShpLnNsb3RzKSA6IGkuc2xvdHMsXG4gICAgJHJlZnM6IChpKSA9PiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBzaGFsbG93UmVhZG9ubHkoaS5yZWZzKSA6IGkucmVmcyxcbiAgICAkcGFyZW50OiAoaSkgPT4gZ2V0UHVibGljSW5zdGFuY2UoaS5wYXJlbnQpLFxuICAgICRyb290OiAoaSkgPT4gZ2V0UHVibGljSW5zdGFuY2UoaS5yb290KSxcbiAgICAkZW1pdDogKGkpID0+IGkuZW1pdCxcbiAgICAkb3B0aW9uczogKGkpID0+IF9fVlVFX09QVElPTlNfQVBJX18gPyByZXNvbHZlTWVyZ2VkT3B0aW9ucyhpKSA6IGkudHlwZSxcbiAgICAkZm9yY2VVcGRhdGU6IChpKSA9PiBpLmYgfHwgKGkuZiA9ICgpID0+IHF1ZXVlSm9iKGkudXBkYXRlKSksXG4gICAgJG5leHRUaWNrOiAoaSkgPT4gaS5uIHx8IChpLm4gPSBuZXh0VGljay5iaW5kKGkucHJveHkpKSxcbiAgICAkd2F0Y2g6IChpKSA9PiBfX1ZVRV9PUFRJT05TX0FQSV9fID8gaW5zdGFuY2VXYXRjaC5iaW5kKGkpIDogTk9PUFxuICB9KVxuKTtcbmNvbnN0IGlzUmVzZXJ2ZWRQcmVmaXggPSAoa2V5KSA9PiBrZXkgPT09IFwiX1wiIHx8IGtleSA9PT0gXCIkXCI7XG5jb25zdCBoYXNTZXR1cEJpbmRpbmcgPSAoc3RhdGUsIGtleSkgPT4gc3RhdGUgIT09IEVNUFRZX09CSiAmJiAhc3RhdGUuX19pc1NjcmlwdFNldHVwICYmIGhhc093bihzdGF0ZSwga2V5KTtcbmNvbnN0IFB1YmxpY0luc3RhbmNlUHJveHlIYW5kbGVycyA9IHtcbiAgZ2V0KHsgXzogaW5zdGFuY2UgfSwga2V5KSB7XG4gICAgY29uc3QgeyBjdHgsIHNldHVwU3RhdGUsIGRhdGEsIHByb3BzLCBhY2Nlc3NDYWNoZSwgdHlwZSwgYXBwQ29udGV4dCB9ID0gaW5zdGFuY2U7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiBrZXkgPT09IFwiX19pc1Z1ZVwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgbGV0IG5vcm1hbGl6ZWRQcm9wcztcbiAgICBpZiAoa2V5WzBdICE9PSBcIiRcIikge1xuICAgICAgY29uc3QgbiA9IGFjY2Vzc0NhY2hlW2tleV07XG4gICAgICBpZiAobiAhPT0gdm9pZCAwKSB7XG4gICAgICAgIHN3aXRjaCAobikge1xuICAgICAgICAgIGNhc2UgMSAvKiBTRVRVUCAqLzpcbiAgICAgICAgICAgIHJldHVybiBzZXR1cFN0YXRlW2tleV07XG4gICAgICAgICAgY2FzZSAyIC8qIERBVEEgKi86XG4gICAgICAgICAgICByZXR1cm4gZGF0YVtrZXldO1xuICAgICAgICAgIGNhc2UgNCAvKiBDT05URVhUICovOlxuICAgICAgICAgICAgcmV0dXJuIGN0eFtrZXldO1xuICAgICAgICAgIGNhc2UgMyAvKiBQUk9QUyAqLzpcbiAgICAgICAgICAgIHJldHVybiBwcm9wc1trZXldO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGhhc1NldHVwQmluZGluZyhzZXR1cFN0YXRlLCBrZXkpKSB7XG4gICAgICAgIGFjY2Vzc0NhY2hlW2tleV0gPSAxIC8qIFNFVFVQICovO1xuICAgICAgICByZXR1cm4gc2V0dXBTdGF0ZVtrZXldO1xuICAgICAgfSBlbHNlIGlmIChkYXRhICE9PSBFTVBUWV9PQkogJiYgaGFzT3duKGRhdGEsIGtleSkpIHtcbiAgICAgICAgYWNjZXNzQ2FjaGVba2V5XSA9IDIgLyogREFUQSAqLztcbiAgICAgICAgcmV0dXJuIGRhdGFba2V5XTtcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIC8vIG9ubHkgY2FjaGUgb3RoZXIgcHJvcGVydGllcyB3aGVuIGluc3RhbmNlIGhhcyBkZWNsYXJlZCAodGh1cyBzdGFibGUpXG4gICAgICAgIC8vIHByb3BzXG4gICAgICAgIChub3JtYWxpemVkUHJvcHMgPSBpbnN0YW5jZS5wcm9wc09wdGlvbnNbMF0pICYmIGhhc093bihub3JtYWxpemVkUHJvcHMsIGtleSlcbiAgICAgICkge1xuICAgICAgICBhY2Nlc3NDYWNoZVtrZXldID0gMyAvKiBQUk9QUyAqLztcbiAgICAgICAgcmV0dXJuIHByb3BzW2tleV07XG4gICAgICB9IGVsc2UgaWYgKGN0eCAhPT0gRU1QVFlfT0JKICYmIGhhc093bihjdHgsIGtleSkpIHtcbiAgICAgICAgYWNjZXNzQ2FjaGVba2V5XSA9IDQgLyogQ09OVEVYVCAqLztcbiAgICAgICAgcmV0dXJuIGN0eFtrZXldO1xuICAgICAgfSBlbHNlIGlmICghX19WVUVfT1BUSU9OU19BUElfXyB8fCBzaG91bGRDYWNoZUFjY2Vzcykge1xuICAgICAgICBhY2Nlc3NDYWNoZVtrZXldID0gMCAvKiBPVEhFUiAqLztcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgcHVibGljR2V0dGVyID0gcHVibGljUHJvcGVydGllc01hcFtrZXldO1xuICAgIGxldCBjc3NNb2R1bGUsIGdsb2JhbFByb3BlcnRpZXM7XG4gICAgaWYgKHB1YmxpY0dldHRlcikge1xuICAgICAgaWYgKGtleSA9PT0gXCIkYXR0cnNcIikge1xuICAgICAgICB0cmFjayhpbnN0YW5jZSwgXCJnZXRcIiwga2V5KTtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmIG1hcmtBdHRyc0FjY2Vzc2VkKCk7XG4gICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiBrZXkgPT09IFwiJHNsb3RzXCIpIHtcbiAgICAgICAgdHJhY2soaW5zdGFuY2UsIFwiZ2V0XCIsIGtleSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcHVibGljR2V0dGVyKGluc3RhbmNlKTtcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgLy8gY3NzIG1vZHVsZSAoaW5qZWN0ZWQgYnkgdnVlLWxvYWRlcilcbiAgICAgIChjc3NNb2R1bGUgPSB0eXBlLl9fY3NzTW9kdWxlcykgJiYgKGNzc01vZHVsZSA9IGNzc01vZHVsZVtrZXldKVxuICAgICkge1xuICAgICAgcmV0dXJuIGNzc01vZHVsZTtcbiAgICB9IGVsc2UgaWYgKGN0eCAhPT0gRU1QVFlfT0JKICYmIGhhc093bihjdHgsIGtleSkpIHtcbiAgICAgIGFjY2Vzc0NhY2hlW2tleV0gPSA0IC8qIENPTlRFWFQgKi87XG4gICAgICByZXR1cm4gY3R4W2tleV07XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIC8vIGdsb2JhbCBwcm9wZXJ0aWVzXG4gICAgICBnbG9iYWxQcm9wZXJ0aWVzID0gYXBwQ29udGV4dC5jb25maWcuZ2xvYmFsUHJvcGVydGllcywgaGFzT3duKGdsb2JhbFByb3BlcnRpZXMsIGtleSlcbiAgICApIHtcbiAgICAgIHtcbiAgICAgICAgcmV0dXJuIGdsb2JhbFByb3BlcnRpZXNba2V5XTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgJiYgKCFpc1N0cmluZyhrZXkpIHx8IC8vICMxMDkxIGF2b2lkIGludGVybmFsIGlzUmVmL2lzVk5vZGUgY2hlY2tzIG9uIGNvbXBvbmVudCBpbnN0YW5jZSBsZWFkaW5nXG4gICAgLy8gdG8gaW5maW5pdGUgd2FybmluZyBsb29wXG4gICAga2V5LmluZGV4T2YoXCJfX3ZcIikgIT09IDApKSB7XG4gICAgICBpZiAoZGF0YSAhPT0gRU1QVFlfT0JKICYmIGlzUmVzZXJ2ZWRQcmVmaXgoa2V5WzBdKSAmJiBoYXNPd24oZGF0YSwga2V5KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIGBQcm9wZXJ0eSAke0pTT04uc3RyaW5naWZ5KFxuICAgICAgICAgICAga2V5XG4gICAgICAgICAgKX0gbXVzdCBiZSBhY2Nlc3NlZCB2aWEgJGRhdGEgYmVjYXVzZSBpdCBzdGFydHMgd2l0aCBhIHJlc2VydmVkIGNoYXJhY3RlciAoXCIkXCIgb3IgXCJfXCIpIGFuZCBpcyBub3QgcHJveGllZCBvbiB0aGUgcmVuZGVyIGNvbnRleHQuYFxuICAgICAgICApO1xuICAgICAgfSBlbHNlIGlmIChpbnN0YW5jZSA9PT0gY3VycmVudFJlbmRlcmluZ0luc3RhbmNlKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgYFByb3BlcnR5ICR7SlNPTi5zdHJpbmdpZnkoa2V5KX0gd2FzIGFjY2Vzc2VkIGR1cmluZyByZW5kZXIgYnV0IGlzIG5vdCBkZWZpbmVkIG9uIGluc3RhbmNlLmBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHNldCh7IF86IGluc3RhbmNlIH0sIGtleSwgdmFsdWUpIHtcbiAgICBjb25zdCB7IGRhdGEsIHNldHVwU3RhdGUsIGN0eCB9ID0gaW5zdGFuY2U7XG4gICAgaWYgKGhhc1NldHVwQmluZGluZyhzZXR1cFN0YXRlLCBrZXkpKSB7XG4gICAgICBzZXR1cFN0YXRlW2tleV0gPSB2YWx1ZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmIHNldHVwU3RhdGUuX19pc1NjcmlwdFNldHVwICYmIGhhc093bihzZXR1cFN0YXRlLCBrZXkpKSB7XG4gICAgICB3YXJuKGBDYW5ub3QgbXV0YXRlIDxzY3JpcHQgc2V0dXA+IGJpbmRpbmcgXCIke2tleX1cIiBmcm9tIE9wdGlvbnMgQVBJLmApO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSBpZiAoZGF0YSAhPT0gRU1QVFlfT0JKICYmIGhhc093bihkYXRhLCBrZXkpKSB7XG4gICAgICBkYXRhW2tleV0gPSB2YWx1ZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSBpZiAoaGFzT3duKGluc3RhbmNlLnByb3BzLCBrZXkpKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgd2FybihgQXR0ZW1wdGluZyB0byBtdXRhdGUgcHJvcCBcIiR7a2V5fVwiLiBQcm9wcyBhcmUgcmVhZG9ubHkuYCk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChrZXlbMF0gPT09IFwiJFwiICYmIGtleS5zbGljZSgxKSBpbiBpbnN0YW5jZSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmIHdhcm4oXG4gICAgICAgIGBBdHRlbXB0aW5nIHRvIG11dGF0ZSBwdWJsaWMgcHJvcGVydHkgXCIke2tleX1cIi4gUHJvcGVydGllcyBzdGFydGluZyB3aXRoICQgYXJlIHJlc2VydmVkIGFuZCByZWFkb25seS5gXG4gICAgICApO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmIGtleSBpbiBpbnN0YW5jZS5hcHBDb250ZXh0LmNvbmZpZy5nbG9iYWxQcm9wZXJ0aWVzKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdHgsIGtleSwge1xuICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgIHZhbHVlXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3R4W2tleV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG4gIGhhcyh7XG4gICAgXzogeyBkYXRhLCBzZXR1cFN0YXRlLCBhY2Nlc3NDYWNoZSwgY3R4LCBhcHBDb250ZXh0LCBwcm9wc09wdGlvbnMgfVxuICB9LCBrZXkpIHtcbiAgICBsZXQgbm9ybWFsaXplZFByb3BzO1xuICAgIHJldHVybiAhIWFjY2Vzc0NhY2hlW2tleV0gfHwgZGF0YSAhPT0gRU1QVFlfT0JKICYmIGhhc093bihkYXRhLCBrZXkpIHx8IGhhc1NldHVwQmluZGluZyhzZXR1cFN0YXRlLCBrZXkpIHx8IChub3JtYWxpemVkUHJvcHMgPSBwcm9wc09wdGlvbnNbMF0pICYmIGhhc093bihub3JtYWxpemVkUHJvcHMsIGtleSkgfHwgaGFzT3duKGN0eCwga2V5KSB8fCBoYXNPd24ocHVibGljUHJvcGVydGllc01hcCwga2V5KSB8fCBoYXNPd24oYXBwQ29udGV4dC5jb25maWcuZ2xvYmFsUHJvcGVydGllcywga2V5KTtcbiAgfSxcbiAgZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIGRlc2NyaXB0b3IpIHtcbiAgICBpZiAoZGVzY3JpcHRvci5nZXQgIT0gbnVsbCkge1xuICAgICAgdGFyZ2V0Ll8uYWNjZXNzQ2FjaGVba2V5XSA9IDA7XG4gICAgfSBlbHNlIGlmIChoYXNPd24oZGVzY3JpcHRvciwgXCJ2YWx1ZVwiKSkge1xuICAgICAgdGhpcy5zZXQodGFyZ2V0LCBrZXksIGRlc2NyaXB0b3IudmFsdWUsIG51bGwpO1xuICAgIH1cbiAgICByZXR1cm4gUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZGVzY3JpcHRvcik7XG4gIH1cbn07XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmIHRydWUpIHtcbiAgUHVibGljSW5zdGFuY2VQcm94eUhhbmRsZXJzLm93bktleXMgPSAodGFyZ2V0KSA9PiB7XG4gICAgd2FybihcbiAgICAgIGBBdm9pZCBhcHAgbG9naWMgdGhhdCByZWxpZXMgb24gZW51bWVyYXRpbmcga2V5cyBvbiBhIGNvbXBvbmVudCBpbnN0YW5jZS4gVGhlIGtleXMgd2lsbCBiZSBlbXB0eSBpbiBwcm9kdWN0aW9uIG1vZGUgdG8gYXZvaWQgcGVyZm9ybWFuY2Ugb3ZlcmhlYWQuYFxuICAgICk7XG4gICAgcmV0dXJuIFJlZmxlY3Qub3duS2V5cyh0YXJnZXQpO1xuICB9O1xufVxuY29uc3QgUnVudGltZUNvbXBpbGVkUHVibGljSW5zdGFuY2VQcm94eUhhbmRsZXJzID0gLyogQF9fUFVSRV9fICovIGV4dGVuZChcbiAge30sXG4gIFB1YmxpY0luc3RhbmNlUHJveHlIYW5kbGVycyxcbiAge1xuICAgIGdldCh0YXJnZXQsIGtleSkge1xuICAgICAgaWYgKGtleSA9PT0gU3ltYm9sLnVuc2NvcGFibGVzKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBQdWJsaWNJbnN0YW5jZVByb3h5SGFuZGxlcnMuZ2V0KHRhcmdldCwga2V5LCB0YXJnZXQpO1xuICAgIH0sXG4gICAgaGFzKF8sIGtleSkge1xuICAgICAgY29uc3QgaGFzID0ga2V5WzBdICE9PSBcIl9cIiAmJiAhaXNHbG9iYWxseVdoaXRlbGlzdGVkKGtleSk7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmICFoYXMgJiYgUHVibGljSW5zdGFuY2VQcm94eUhhbmRsZXJzLmhhcyhfLCBrZXkpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgYFByb3BlcnR5ICR7SlNPTi5zdHJpbmdpZnkoXG4gICAgICAgICAgICBrZXlcbiAgICAgICAgICApfSBzaG91bGQgbm90IHN0YXJ0IHdpdGggXyB3aGljaCBpcyBhIHJlc2VydmVkIHByZWZpeCBmb3IgVnVlIGludGVybmFscy5gXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaGFzO1xuICAgIH1cbiAgfVxuKTtcbmZ1bmN0aW9uIGNyZWF0ZURldlJlbmRlckNvbnRleHQoaW5zdGFuY2UpIHtcbiAgY29uc3QgdGFyZ2V0ID0ge307XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGBfYCwge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICBnZXQ6ICgpID0+IGluc3RhbmNlXG4gIH0pO1xuICBPYmplY3Qua2V5cyhwdWJsaWNQcm9wZXJ0aWVzTWFwKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgZ2V0OiAoKSA9PiBwdWJsaWNQcm9wZXJ0aWVzTWFwW2tleV0oaW5zdGFuY2UpLFxuICAgICAgLy8gaW50ZXJjZXB0ZWQgYnkgdGhlIHByb3h5IHNvIG5vIG5lZWQgZm9yIGltcGxlbWVudGF0aW9uLFxuICAgICAgLy8gYnV0IG5lZWRlZCB0byBwcmV2ZW50IHNldCBlcnJvcnNcbiAgICAgIHNldDogTk9PUFxuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIHRhcmdldDtcbn1cbmZ1bmN0aW9uIGV4cG9zZVByb3BzT25SZW5kZXJDb250ZXh0KGluc3RhbmNlKSB7XG4gIGNvbnN0IHtcbiAgICBjdHgsXG4gICAgcHJvcHNPcHRpb25zOiBbcHJvcHNPcHRpb25zXVxuICB9ID0gaW5zdGFuY2U7XG4gIGlmIChwcm9wc09wdGlvbnMpIHtcbiAgICBPYmplY3Qua2V5cyhwcm9wc09wdGlvbnMpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN0eCwga2V5LCB7XG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0OiAoKSA9PiBpbnN0YW5jZS5wcm9wc1trZXldLFxuICAgICAgICBzZXQ6IE5PT1BcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59XG5mdW5jdGlvbiBleHBvc2VTZXR1cFN0YXRlT25SZW5kZXJDb250ZXh0KGluc3RhbmNlKSB7XG4gIGNvbnN0IHsgY3R4LCBzZXR1cFN0YXRlIH0gPSBpbnN0YW5jZTtcbiAgT2JqZWN0LmtleXModG9SYXcoc2V0dXBTdGF0ZSkpLmZvckVhY2goKGtleSkgPT4ge1xuICAgIGlmICghc2V0dXBTdGF0ZS5fX2lzU2NyaXB0U2V0dXApIHtcbiAgICAgIGlmIChpc1Jlc2VydmVkUHJlZml4KGtleVswXSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBgc2V0dXAoKSByZXR1cm4gcHJvcGVydHkgJHtKU09OLnN0cmluZ2lmeShcbiAgICAgICAgICAgIGtleVxuICAgICAgICAgICl9IHNob3VsZCBub3Qgc3RhcnQgd2l0aCBcIiRcIiBvciBcIl9cIiB3aGljaCBhcmUgcmVzZXJ2ZWQgcHJlZml4ZXMgZm9yIFZ1ZSBpbnRlcm5hbHMuYFxuICAgICAgICApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3R4LCBrZXksIHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6ICgpID0+IHNldHVwU3RhdGVba2V5XSxcbiAgICAgICAgc2V0OiBOT09QXG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xufVxuXG5jb25zdCB3YXJuUnVudGltZVVzYWdlID0gKG1ldGhvZCkgPT4gd2FybihcbiAgYCR7bWV0aG9kfSgpIGlzIGEgY29tcGlsZXItaGludCBoZWxwZXIgdGhhdCBpcyBvbmx5IHVzYWJsZSBpbnNpZGUgPHNjcmlwdCBzZXR1cD4gb2YgYSBzaW5nbGUgZmlsZSBjb21wb25lbnQuIEl0cyBhcmd1bWVudHMgc2hvdWxkIGJlIGNvbXBpbGVkIGF3YXkgYW5kIHBhc3NpbmcgaXQgYXQgcnVudGltZSBoYXMgbm8gZWZmZWN0LmBcbik7XG5mdW5jdGlvbiBkZWZpbmVQcm9wcygpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIHdhcm5SdW50aW1lVXNhZ2UoYGRlZmluZVByb3BzYCk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBkZWZpbmVFbWl0cygpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIHdhcm5SdW50aW1lVXNhZ2UoYGRlZmluZUVtaXRzYCk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBkZWZpbmVFeHBvc2UoZXhwb3NlZCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgd2FyblJ1bnRpbWVVc2FnZShgZGVmaW5lRXhwb3NlYCk7XG4gIH1cbn1cbmZ1bmN0aW9uIGRlZmluZU9wdGlvbnMob3B0aW9ucykge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgd2FyblJ1bnRpbWVVc2FnZShgZGVmaW5lT3B0aW9uc2ApO1xuICB9XG59XG5mdW5jdGlvbiBkZWZpbmVTbG90cygpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIHdhcm5SdW50aW1lVXNhZ2UoYGRlZmluZVNsb3RzYCk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBkZWZpbmVNb2RlbCgpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIHdhcm5SdW50aW1lVXNhZ2UoXCJkZWZpbmVNb2RlbFwiKTtcbiAgfVxufVxuZnVuY3Rpb24gd2l0aERlZmF1bHRzKHByb3BzLCBkZWZhdWx0cykge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgd2FyblJ1bnRpbWVVc2FnZShgd2l0aERlZmF1bHRzYCk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiB1c2VTbG90cygpIHtcbiAgcmV0dXJuIGdldENvbnRleHQoKS5zbG90cztcbn1cbmZ1bmN0aW9uIHVzZUF0dHJzKCkge1xuICByZXR1cm4gZ2V0Q29udGV4dCgpLmF0dHJzO1xufVxuZnVuY3Rpb24gdXNlTW9kZWwocHJvcHMsIG5hbWUsIG9wdGlvbnMpIHtcbiAgY29uc3QgaSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmICFpKSB7XG4gICAgd2FybihgdXNlTW9kZWwoKSBjYWxsZWQgd2l0aG91dCBhY3RpdmUgaW5zdGFuY2UuYCk7XG4gICAgcmV0dXJuIHJlZigpO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgIWkucHJvcHNPcHRpb25zWzBdW25hbWVdKSB7XG4gICAgd2FybihgdXNlTW9kZWwoKSBjYWxsZWQgd2l0aCBwcm9wIFwiJHtuYW1lfVwiIHdoaWNoIGlzIG5vdCBkZWNsYXJlZC5gKTtcbiAgICByZXR1cm4gcmVmKCk7XG4gIH1cbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5sb2NhbCkge1xuICAgIGNvbnN0IHByb3h5ID0gcmVmKHByb3BzW25hbWVdKTtcbiAgICB3YXRjaChcbiAgICAgICgpID0+IHByb3BzW25hbWVdLFxuICAgICAgKHYpID0+IHByb3h5LnZhbHVlID0gdlxuICAgICk7XG4gICAgd2F0Y2gocHJveHksICh2YWx1ZSkgPT4ge1xuICAgICAgaWYgKHZhbHVlICE9PSBwcm9wc1tuYW1lXSkge1xuICAgICAgICBpLmVtaXQoYHVwZGF0ZToke25hbWV9YCwgdmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBwcm94eTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4ge1xuICAgICAgX192X2lzUmVmOiB0cnVlLFxuICAgICAgZ2V0IHZhbHVlKCkge1xuICAgICAgICByZXR1cm4gcHJvcHNbbmFtZV07XG4gICAgICB9LFxuICAgICAgc2V0IHZhbHVlKHZhbHVlKSB7XG4gICAgICAgIGkuZW1pdChgdXBkYXRlOiR7bmFtZX1gLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0Q29udGV4dCgpIHtcbiAgY29uc3QgaSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmICFpKSB7XG4gICAgd2FybihgdXNlQ29udGV4dCgpIGNhbGxlZCB3aXRob3V0IGFjdGl2ZSBpbnN0YW5jZS5gKTtcbiAgfVxuICByZXR1cm4gaS5zZXR1cENvbnRleHQgfHwgKGkuc2V0dXBDb250ZXh0ID0gY3JlYXRlU2V0dXBDb250ZXh0KGkpKTtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZVByb3BzT3JFbWl0cyhwcm9wcykge1xuICByZXR1cm4gaXNBcnJheShwcm9wcykgPyBwcm9wcy5yZWR1Y2UoXG4gICAgKG5vcm1hbGl6ZWQsIHApID0+IChub3JtYWxpemVkW3BdID0gbnVsbCwgbm9ybWFsaXplZCksXG4gICAge31cbiAgKSA6IHByb3BzO1xufVxuZnVuY3Rpb24gbWVyZ2VEZWZhdWx0cyhyYXcsIGRlZmF1bHRzKSB7XG4gIGNvbnN0IHByb3BzID0gbm9ybWFsaXplUHJvcHNPckVtaXRzKHJhdyk7XG4gIGZvciAoY29uc3Qga2V5IGluIGRlZmF1bHRzKSB7XG4gICAgaWYgKGtleS5zdGFydHNXaXRoKFwiX19za2lwXCIpKVxuICAgICAgY29udGludWU7XG4gICAgbGV0IG9wdCA9IHByb3BzW2tleV07XG4gICAgaWYgKG9wdCkge1xuICAgICAgaWYgKGlzQXJyYXkob3B0KSB8fCBpc0Z1bmN0aW9uKG9wdCkpIHtcbiAgICAgICAgb3B0ID0gcHJvcHNba2V5XSA9IHsgdHlwZTogb3B0LCBkZWZhdWx0OiBkZWZhdWx0c1trZXldIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvcHQuZGVmYXVsdCA9IGRlZmF1bHRzW2tleV07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChvcHQgPT09IG51bGwpIHtcbiAgICAgIG9wdCA9IHByb3BzW2tleV0gPSB7IGRlZmF1bHQ6IGRlZmF1bHRzW2tleV0gfTtcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgd2FybihgcHJvcHMgZGVmYXVsdCBrZXkgXCIke2tleX1cIiBoYXMgbm8gY29ycmVzcG9uZGluZyBkZWNsYXJhdGlvbi5gKTtcbiAgICB9XG4gICAgaWYgKG9wdCAmJiBkZWZhdWx0c1tgX19za2lwXyR7a2V5fWBdKSB7XG4gICAgICBvcHQuc2tpcEZhY3RvcnkgPSB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcHJvcHM7XG59XG5mdW5jdGlvbiBtZXJnZU1vZGVscyhhLCBiKSB7XG4gIGlmICghYSB8fCAhYilcbiAgICByZXR1cm4gYSB8fCBiO1xuICBpZiAoaXNBcnJheShhKSAmJiBpc0FycmF5KGIpKVxuICAgIHJldHVybiBhLmNvbmNhdChiKTtcbiAgcmV0dXJuIGV4dGVuZCh7fSwgbm9ybWFsaXplUHJvcHNPckVtaXRzKGEpLCBub3JtYWxpemVQcm9wc09yRW1pdHMoYikpO1xufVxuZnVuY3Rpb24gY3JlYXRlUHJvcHNSZXN0UHJveHkocHJvcHMsIGV4Y2x1ZGVkS2V5cykge1xuICBjb25zdCByZXQgPSB7fTtcbiAgZm9yIChjb25zdCBrZXkgaW4gcHJvcHMpIHtcbiAgICBpZiAoIWV4Y2x1ZGVkS2V5cy5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocmV0LCBrZXksIHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0OiAoKSA9PiBwcm9wc1trZXldXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cbmZ1bmN0aW9uIHdpdGhBc3luY0NvbnRleHQoZ2V0QXdhaXRhYmxlKSB7XG4gIGNvbnN0IGN0eCA9IGdldEN1cnJlbnRJbnN0YW5jZSgpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmICFjdHgpIHtcbiAgICB3YXJuKFxuICAgICAgYHdpdGhBc3luY0NvbnRleHQgY2FsbGVkIHdpdGhvdXQgYWN0aXZlIGN1cnJlbnQgaW5zdGFuY2UuIFRoaXMgaXMgbGlrZWx5IGEgYnVnLmBcbiAgICApO1xuICB9XG4gIGxldCBhd2FpdGFibGUgPSBnZXRBd2FpdGFibGUoKTtcbiAgdW5zZXRDdXJyZW50SW5zdGFuY2UoKTtcbiAgaWYgKGlzUHJvbWlzZShhd2FpdGFibGUpKSB7XG4gICAgYXdhaXRhYmxlID0gYXdhaXRhYmxlLmNhdGNoKChlKSA9PiB7XG4gICAgICBzZXRDdXJyZW50SW5zdGFuY2UoY3R4KTtcbiAgICAgIHRocm93IGU7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIFthd2FpdGFibGUsICgpID0+IHNldEN1cnJlbnRJbnN0YW5jZShjdHgpXTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRHVwbGljYXRlQ2hlY2tlcigpIHtcbiAgY29uc3QgY2FjaGUgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgcmV0dXJuICh0eXBlLCBrZXkpID0+IHtcbiAgICBpZiAoY2FjaGVba2V5XSkge1xuICAgICAgd2FybihgJHt0eXBlfSBwcm9wZXJ0eSBcIiR7a2V5fVwiIGlzIGFscmVhZHkgZGVmaW5lZCBpbiAke2NhY2hlW2tleV19LmApO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYWNoZVtrZXldID0gdHlwZTtcbiAgICB9XG4gIH07XG59XG5sZXQgc2hvdWxkQ2FjaGVBY2Nlc3MgPSB0cnVlO1xuZnVuY3Rpb24gYXBwbHlPcHRpb25zKGluc3RhbmNlKSB7XG4gIGNvbnN0IG9wdGlvbnMgPSByZXNvbHZlTWVyZ2VkT3B0aW9ucyhpbnN0YW5jZSk7XG4gIGNvbnN0IHB1YmxpY1RoaXMgPSBpbnN0YW5jZS5wcm94eTtcbiAgY29uc3QgY3R4ID0gaW5zdGFuY2UuY3R4O1xuICBzaG91bGRDYWNoZUFjY2VzcyA9IGZhbHNlO1xuICBpZiAob3B0aW9ucy5iZWZvcmVDcmVhdGUpIHtcbiAgICBjYWxsSG9vayhvcHRpb25zLmJlZm9yZUNyZWF0ZSwgaW5zdGFuY2UsIFwiYmNcIik7XG4gIH1cbiAgY29uc3Qge1xuICAgIC8vIHN0YXRlXG4gICAgZGF0YTogZGF0YU9wdGlvbnMsXG4gICAgY29tcHV0ZWQ6IGNvbXB1dGVkT3B0aW9ucyxcbiAgICBtZXRob2RzLFxuICAgIHdhdGNoOiB3YXRjaE9wdGlvbnMsXG4gICAgcHJvdmlkZTogcHJvdmlkZU9wdGlvbnMsXG4gICAgaW5qZWN0OiBpbmplY3RPcHRpb25zLFxuICAgIC8vIGxpZmVjeWNsZVxuICAgIGNyZWF0ZWQsXG4gICAgYmVmb3JlTW91bnQsXG4gICAgbW91bnRlZCxcbiAgICBiZWZvcmVVcGRhdGUsXG4gICAgdXBkYXRlZCxcbiAgICBhY3RpdmF0ZWQsXG4gICAgZGVhY3RpdmF0ZWQsXG4gICAgYmVmb3JlRGVzdHJveSxcbiAgICBiZWZvcmVVbm1vdW50LFxuICAgIGRlc3Ryb3llZCxcbiAgICB1bm1vdW50ZWQsXG4gICAgcmVuZGVyLFxuICAgIHJlbmRlclRyYWNrZWQsXG4gICAgcmVuZGVyVHJpZ2dlcmVkLFxuICAgIGVycm9yQ2FwdHVyZWQsXG4gICAgc2VydmVyUHJlZmV0Y2gsXG4gICAgLy8gcHVibGljIEFQSVxuICAgIGV4cG9zZSxcbiAgICBpbmhlcml0QXR0cnMsXG4gICAgLy8gYXNzZXRzXG4gICAgY29tcG9uZW50cyxcbiAgICBkaXJlY3RpdmVzLFxuICAgIGZpbHRlcnNcbiAgfSA9IG9wdGlvbnM7XG4gIGNvbnN0IGNoZWNrRHVwbGljYXRlUHJvcGVydGllcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGNyZWF0ZUR1cGxpY2F0ZUNoZWNrZXIoKSA6IG51bGw7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBjb25zdCBbcHJvcHNPcHRpb25zXSA9IGluc3RhbmNlLnByb3BzT3B0aW9ucztcbiAgICBpZiAocHJvcHNPcHRpb25zKSB7XG4gICAgICBmb3IgKGNvbnN0IGtleSBpbiBwcm9wc09wdGlvbnMpIHtcbiAgICAgICAgY2hlY2tEdXBsaWNhdGVQcm9wZXJ0aWVzKFwiUHJvcHNcIiAvKiBQUk9QUyAqLywga2V5KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKGluamVjdE9wdGlvbnMpIHtcbiAgICByZXNvbHZlSW5qZWN0aW9ucyhpbmplY3RPcHRpb25zLCBjdHgsIGNoZWNrRHVwbGljYXRlUHJvcGVydGllcyk7XG4gIH1cbiAgaWYgKG1ldGhvZHMpIHtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBtZXRob2RzKSB7XG4gICAgICBjb25zdCBtZXRob2RIYW5kbGVyID0gbWV0aG9kc1trZXldO1xuICAgICAgaWYgKGlzRnVuY3Rpb24obWV0aG9kSGFuZGxlcikpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdHgsIGtleSwge1xuICAgICAgICAgICAgdmFsdWU6IG1ldGhvZEhhbmRsZXIuYmluZChwdWJsaWNUaGlzKSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGN0eFtrZXldID0gbWV0aG9kSGFuZGxlci5iaW5kKHB1YmxpY1RoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICBjaGVja0R1cGxpY2F0ZVByb3BlcnRpZXMoXCJNZXRob2RzXCIgLyogTUVUSE9EUyAqLywga2V5KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBgTWV0aG9kIFwiJHtrZXl9XCIgaGFzIHR5cGUgXCIke3R5cGVvZiBtZXRob2RIYW5kbGVyfVwiIGluIHRoZSBjb21wb25lbnQgZGVmaW5pdGlvbi4gRGlkIHlvdSByZWZlcmVuY2UgdGhlIGZ1bmN0aW9uIGNvcnJlY3RseT9gXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChkYXRhT3B0aW9ucykge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgIWlzRnVuY3Rpb24oZGF0YU9wdGlvbnMpKSB7XG4gICAgICB3YXJuKFxuICAgICAgICBgVGhlIGRhdGEgb3B0aW9uIG11c3QgYmUgYSBmdW5jdGlvbi4gUGxhaW4gb2JqZWN0IHVzYWdlIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQuYFxuICAgICAgKTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGRhdGFPcHRpb25zLmNhbGwocHVibGljVGhpcywgcHVibGljVGhpcyk7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiBpc1Byb21pc2UoZGF0YSkpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIGBkYXRhKCkgcmV0dXJuZWQgYSBQcm9taXNlIC0gbm90ZSBkYXRhKCkgY2Fubm90IGJlIGFzeW5jOyBJZiB5b3UgaW50ZW5kIHRvIHBlcmZvcm0gZGF0YSBmZXRjaGluZyBiZWZvcmUgY29tcG9uZW50IHJlbmRlcnMsIHVzZSBhc3luYyBzZXR1cCgpICsgPFN1c3BlbnNlPi5gXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgd2FybihgZGF0YSgpIHNob3VsZCByZXR1cm4gYW4gb2JqZWN0LmApO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnN0YW5jZS5kYXRhID0gcmVhY3RpdmUoZGF0YSk7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIGRhdGEpIHtcbiAgICAgICAgICBjaGVja0R1cGxpY2F0ZVByb3BlcnRpZXMoXCJEYXRhXCIgLyogREFUQSAqLywga2V5KTtcbiAgICAgICAgICBpZiAoIWlzUmVzZXJ2ZWRQcmVmaXgoa2V5WzBdKSkge1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN0eCwga2V5LCB7XG4gICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgZ2V0OiAoKSA9PiBkYXRhW2tleV0sXG4gICAgICAgICAgICAgIHNldDogTk9PUFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHNob3VsZENhY2hlQWNjZXNzID0gdHJ1ZTtcbiAgaWYgKGNvbXB1dGVkT3B0aW9ucykge1xuICAgIGZvciAoY29uc3Qga2V5IGluIGNvbXB1dGVkT3B0aW9ucykge1xuICAgICAgY29uc3Qgb3B0ID0gY29tcHV0ZWRPcHRpb25zW2tleV07XG4gICAgICBjb25zdCBnZXQgPSBpc0Z1bmN0aW9uKG9wdCkgPyBvcHQuYmluZChwdWJsaWNUaGlzLCBwdWJsaWNUaGlzKSA6IGlzRnVuY3Rpb24ob3B0LmdldCkgPyBvcHQuZ2V0LmJpbmQocHVibGljVGhpcywgcHVibGljVGhpcykgOiBOT09QO1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiBnZXQgPT09IE5PT1ApIHtcbiAgICAgICAgd2FybihgQ29tcHV0ZWQgcHJvcGVydHkgXCIke2tleX1cIiBoYXMgbm8gZ2V0dGVyLmApO1xuICAgICAgfVxuICAgICAgY29uc3Qgc2V0ID0gIWlzRnVuY3Rpb24ob3B0KSAmJiBpc0Z1bmN0aW9uKG9wdC5zZXQpID8gb3B0LnNldC5iaW5kKHB1YmxpY1RoaXMpIDogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKCkgPT4ge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIGBXcml0ZSBvcGVyYXRpb24gZmFpbGVkOiBjb21wdXRlZCBwcm9wZXJ0eSBcIiR7a2V5fVwiIGlzIHJlYWRvbmx5LmBcbiAgICAgICAgKTtcbiAgICAgIH0gOiBOT09QO1xuICAgICAgY29uc3QgYyA9IGNvbXB1dGVkKHtcbiAgICAgICAgZ2V0LFxuICAgICAgICBzZXRcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN0eCwga2V5LCB7XG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0OiAoKSA9PiBjLnZhbHVlLFxuICAgICAgICBzZXQ6ICh2KSA9PiBjLnZhbHVlID0gdlxuICAgICAgfSk7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgIGNoZWNrRHVwbGljYXRlUHJvcGVydGllcyhcIkNvbXB1dGVkXCIgLyogQ09NUFVURUQgKi8sIGtleSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmICh3YXRjaE9wdGlvbnMpIHtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiB3YXRjaE9wdGlvbnMpIHtcbiAgICAgIGNyZWF0ZVdhdGNoZXIod2F0Y2hPcHRpb25zW2tleV0sIGN0eCwgcHVibGljVGhpcywga2V5KTtcbiAgICB9XG4gIH1cbiAgaWYgKHByb3ZpZGVPcHRpb25zKSB7XG4gICAgY29uc3QgcHJvdmlkZXMgPSBpc0Z1bmN0aW9uKHByb3ZpZGVPcHRpb25zKSA/IHByb3ZpZGVPcHRpb25zLmNhbGwocHVibGljVGhpcykgOiBwcm92aWRlT3B0aW9ucztcbiAgICBSZWZsZWN0Lm93bktleXMocHJvdmlkZXMpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgcHJvdmlkZShrZXksIHByb3ZpZGVzW2tleV0pO1xuICAgIH0pO1xuICB9XG4gIGlmIChjcmVhdGVkKSB7XG4gICAgY2FsbEhvb2soY3JlYXRlZCwgaW5zdGFuY2UsIFwiY1wiKTtcbiAgfVxuICBmdW5jdGlvbiByZWdpc3RlckxpZmVjeWNsZUhvb2socmVnaXN0ZXIsIGhvb2spIHtcbiAgICBpZiAoaXNBcnJheShob29rKSkge1xuICAgICAgaG9vay5mb3JFYWNoKChfaG9vaykgPT4gcmVnaXN0ZXIoX2hvb2suYmluZChwdWJsaWNUaGlzKSkpO1xuICAgIH0gZWxzZSBpZiAoaG9vaykge1xuICAgICAgcmVnaXN0ZXIoaG9vay5iaW5kKHB1YmxpY1RoaXMpKTtcbiAgICB9XG4gIH1cbiAgcmVnaXN0ZXJMaWZlY3ljbGVIb29rKG9uQmVmb3JlTW91bnQsIGJlZm9yZU1vdW50KTtcbiAgcmVnaXN0ZXJMaWZlY3ljbGVIb29rKG9uTW91bnRlZCwgbW91bnRlZCk7XG4gIHJlZ2lzdGVyTGlmZWN5Y2xlSG9vayhvbkJlZm9yZVVwZGF0ZSwgYmVmb3JlVXBkYXRlKTtcbiAgcmVnaXN0ZXJMaWZlY3ljbGVIb29rKG9uVXBkYXRlZCwgdXBkYXRlZCk7XG4gIHJlZ2lzdGVyTGlmZWN5Y2xlSG9vayhvbkFjdGl2YXRlZCwgYWN0aXZhdGVkKTtcbiAgcmVnaXN0ZXJMaWZlY3ljbGVIb29rKG9uRGVhY3RpdmF0ZWQsIGRlYWN0aXZhdGVkKTtcbiAgcmVnaXN0ZXJMaWZlY3ljbGVIb29rKG9uRXJyb3JDYXB0dXJlZCwgZXJyb3JDYXB0dXJlZCk7XG4gIHJlZ2lzdGVyTGlmZWN5Y2xlSG9vayhvblJlbmRlclRyYWNrZWQsIHJlbmRlclRyYWNrZWQpO1xuICByZWdpc3RlckxpZmVjeWNsZUhvb2sob25SZW5kZXJUcmlnZ2VyZWQsIHJlbmRlclRyaWdnZXJlZCk7XG4gIHJlZ2lzdGVyTGlmZWN5Y2xlSG9vayhvbkJlZm9yZVVubW91bnQsIGJlZm9yZVVubW91bnQpO1xuICByZWdpc3RlckxpZmVjeWNsZUhvb2sob25Vbm1vdW50ZWQsIHVubW91bnRlZCk7XG4gIHJlZ2lzdGVyTGlmZWN5Y2xlSG9vayhvblNlcnZlclByZWZldGNoLCBzZXJ2ZXJQcmVmZXRjaCk7XG4gIGlmIChpc0FycmF5KGV4cG9zZSkpIHtcbiAgICBpZiAoZXhwb3NlLmxlbmd0aCkge1xuICAgICAgY29uc3QgZXhwb3NlZCA9IGluc3RhbmNlLmV4cG9zZWQgfHwgKGluc3RhbmNlLmV4cG9zZWQgPSB7fSk7XG4gICAgICBleHBvc2UuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvc2VkLCBrZXksIHtcbiAgICAgICAgICBnZXQ6ICgpID0+IHB1YmxpY1RoaXNba2V5XSxcbiAgICAgICAgICBzZXQ6ICh2YWwpID0+IHB1YmxpY1RoaXNba2V5XSA9IHZhbFxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoIWluc3RhbmNlLmV4cG9zZWQpIHtcbiAgICAgIGluc3RhbmNlLmV4cG9zZWQgPSB7fTtcbiAgICB9XG4gIH1cbiAgaWYgKHJlbmRlciAmJiBpbnN0YW5jZS5yZW5kZXIgPT09IE5PT1ApIHtcbiAgICBpbnN0YW5jZS5yZW5kZXIgPSByZW5kZXI7XG4gIH1cbiAgaWYgKGluaGVyaXRBdHRycyAhPSBudWxsKSB7XG4gICAgaW5zdGFuY2UuaW5oZXJpdEF0dHJzID0gaW5oZXJpdEF0dHJzO1xuICB9XG4gIGlmIChjb21wb25lbnRzKVxuICAgIGluc3RhbmNlLmNvbXBvbmVudHMgPSBjb21wb25lbnRzO1xuICBpZiAoZGlyZWN0aXZlcylcbiAgICBpbnN0YW5jZS5kaXJlY3RpdmVzID0gZGlyZWN0aXZlcztcbn1cbmZ1bmN0aW9uIHJlc29sdmVJbmplY3Rpb25zKGluamVjdE9wdGlvbnMsIGN0eCwgY2hlY2tEdXBsaWNhdGVQcm9wZXJ0aWVzID0gTk9PUCkge1xuICBpZiAoaXNBcnJheShpbmplY3RPcHRpb25zKSkge1xuICAgIGluamVjdE9wdGlvbnMgPSBub3JtYWxpemVJbmplY3QoaW5qZWN0T3B0aW9ucyk7XG4gIH1cbiAgZm9yIChjb25zdCBrZXkgaW4gaW5qZWN0T3B0aW9ucykge1xuICAgIGNvbnN0IG9wdCA9IGluamVjdE9wdGlvbnNba2V5XTtcbiAgICBsZXQgaW5qZWN0ZWQ7XG4gICAgaWYgKGlzT2JqZWN0KG9wdCkpIHtcbiAgICAgIGlmIChcImRlZmF1bHRcIiBpbiBvcHQpIHtcbiAgICAgICAgaW5qZWN0ZWQgPSBpbmplY3QoXG4gICAgICAgICAgb3B0LmZyb20gfHwga2V5LFxuICAgICAgICAgIG9wdC5kZWZhdWx0LFxuICAgICAgICAgIHRydWVcbiAgICAgICAgICAvKiB0cmVhdCBkZWZhdWx0IGZ1bmN0aW9uIGFzIGZhY3RvcnkgKi9cbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluamVjdGVkID0gaW5qZWN0KG9wdC5mcm9tIHx8IGtleSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGluamVjdGVkID0gaW5qZWN0KG9wdCk7XG4gICAgfVxuICAgIGlmIChpc1JlZihpbmplY3RlZCkpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdHgsIGtleSwge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIGdldDogKCkgPT4gaW5qZWN0ZWQudmFsdWUsXG4gICAgICAgIHNldDogKHYpID0+IGluamVjdGVkLnZhbHVlID0gdlxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGN0eFtrZXldID0gaW5qZWN0ZWQ7XG4gICAgfVxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIGNoZWNrRHVwbGljYXRlUHJvcGVydGllcyhcIkluamVjdFwiIC8qIElOSkVDVCAqLywga2V5KTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGNhbGxIb29rKGhvb2ssIGluc3RhbmNlLCB0eXBlKSB7XG4gIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKFxuICAgIGlzQXJyYXkoaG9vaykgPyBob29rLm1hcCgoaCkgPT4gaC5iaW5kKGluc3RhbmNlLnByb3h5KSkgOiBob29rLmJpbmQoaW5zdGFuY2UucHJveHkpLFxuICAgIGluc3RhbmNlLFxuICAgIHR5cGVcbiAgKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVdhdGNoZXIocmF3LCBjdHgsIHB1YmxpY1RoaXMsIGtleSkge1xuICBjb25zdCBnZXR0ZXIgPSBrZXkuaW5jbHVkZXMoXCIuXCIpID8gY3JlYXRlUGF0aEdldHRlcihwdWJsaWNUaGlzLCBrZXkpIDogKCkgPT4gcHVibGljVGhpc1trZXldO1xuICBpZiAoaXNTdHJpbmcocmF3KSkge1xuICAgIGNvbnN0IGhhbmRsZXIgPSBjdHhbcmF3XTtcbiAgICBpZiAoaXNGdW5jdGlvbihoYW5kbGVyKSkge1xuICAgICAgd2F0Y2goZ2V0dGVyLCBoYW5kbGVyKTtcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgd2FybihgSW52YWxpZCB3YXRjaCBoYW5kbGVyIHNwZWNpZmllZCBieSBrZXkgXCIke3Jhd31cImAsIGhhbmRsZXIpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc0Z1bmN0aW9uKHJhdykpIHtcbiAgICB3YXRjaChnZXR0ZXIsIHJhdy5iaW5kKHB1YmxpY1RoaXMpKTtcbiAgfSBlbHNlIGlmIChpc09iamVjdChyYXcpKSB7XG4gICAgaWYgKGlzQXJyYXkocmF3KSkge1xuICAgICAgcmF3LmZvckVhY2goKHIpID0+IGNyZWF0ZVdhdGNoZXIociwgY3R4LCBwdWJsaWNUaGlzLCBrZXkpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgaGFuZGxlciA9IGlzRnVuY3Rpb24ocmF3LmhhbmRsZXIpID8gcmF3LmhhbmRsZXIuYmluZChwdWJsaWNUaGlzKSA6IGN0eFtyYXcuaGFuZGxlcl07XG4gICAgICBpZiAoaXNGdW5jdGlvbihoYW5kbGVyKSkge1xuICAgICAgICB3YXRjaChnZXR0ZXIsIGhhbmRsZXIsIHJhdyk7XG4gICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICB3YXJuKGBJbnZhbGlkIHdhdGNoIGhhbmRsZXIgc3BlY2lmaWVkIGJ5IGtleSBcIiR7cmF3LmhhbmRsZXJ9XCJgLCBoYW5kbGVyKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgd2FybihgSW52YWxpZCB3YXRjaCBvcHRpb246IFwiJHtrZXl9XCJgLCByYXcpO1xuICB9XG59XG5mdW5jdGlvbiByZXNvbHZlTWVyZ2VkT3B0aW9ucyhpbnN0YW5jZSkge1xuICBjb25zdCBiYXNlID0gaW5zdGFuY2UudHlwZTtcbiAgY29uc3QgeyBtaXhpbnMsIGV4dGVuZHM6IGV4dGVuZHNPcHRpb25zIH0gPSBiYXNlO1xuICBjb25zdCB7XG4gICAgbWl4aW5zOiBnbG9iYWxNaXhpbnMsXG4gICAgb3B0aW9uc0NhY2hlOiBjYWNoZSxcbiAgICBjb25maWc6IHsgb3B0aW9uTWVyZ2VTdHJhdGVnaWVzIH1cbiAgfSA9IGluc3RhbmNlLmFwcENvbnRleHQ7XG4gIGNvbnN0IGNhY2hlZCA9IGNhY2hlLmdldChiYXNlKTtcbiAgbGV0IHJlc29sdmVkO1xuICBpZiAoY2FjaGVkKSB7XG4gICAgcmVzb2x2ZWQgPSBjYWNoZWQ7XG4gIH0gZWxzZSBpZiAoIWdsb2JhbE1peGlucy5sZW5ndGggJiYgIW1peGlucyAmJiAhZXh0ZW5kc09wdGlvbnMpIHtcbiAgICB7XG4gICAgICByZXNvbHZlZCA9IGJhc2U7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJlc29sdmVkID0ge307XG4gICAgaWYgKGdsb2JhbE1peGlucy5sZW5ndGgpIHtcbiAgICAgIGdsb2JhbE1peGlucy5mb3JFYWNoKFxuICAgICAgICAobSkgPT4gbWVyZ2VPcHRpb25zKHJlc29sdmVkLCBtLCBvcHRpb25NZXJnZVN0cmF0ZWdpZXMsIHRydWUpXG4gICAgICApO1xuICAgIH1cbiAgICBtZXJnZU9wdGlvbnMocmVzb2x2ZWQsIGJhc2UsIG9wdGlvbk1lcmdlU3RyYXRlZ2llcyk7XG4gIH1cbiAgaWYgKGlzT2JqZWN0KGJhc2UpKSB7XG4gICAgY2FjaGUuc2V0KGJhc2UsIHJlc29sdmVkKTtcbiAgfVxuICByZXR1cm4gcmVzb2x2ZWQ7XG59XG5mdW5jdGlvbiBtZXJnZU9wdGlvbnModG8sIGZyb20sIHN0cmF0cywgYXNNaXhpbiA9IGZhbHNlKSB7XG4gIGNvbnN0IHsgbWl4aW5zLCBleHRlbmRzOiBleHRlbmRzT3B0aW9ucyB9ID0gZnJvbTtcbiAgaWYgKGV4dGVuZHNPcHRpb25zKSB7XG4gICAgbWVyZ2VPcHRpb25zKHRvLCBleHRlbmRzT3B0aW9ucywgc3RyYXRzLCB0cnVlKTtcbiAgfVxuICBpZiAobWl4aW5zKSB7XG4gICAgbWl4aW5zLmZvckVhY2goXG4gICAgICAobSkgPT4gbWVyZ2VPcHRpb25zKHRvLCBtLCBzdHJhdHMsIHRydWUpXG4gICAgKTtcbiAgfVxuICBmb3IgKGNvbnN0IGtleSBpbiBmcm9tKSB7XG4gICAgaWYgKGFzTWl4aW4gJiYga2V5ID09PSBcImV4cG9zZVwiKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgd2FybihcbiAgICAgICAgYFwiZXhwb3NlXCIgb3B0aW9uIGlzIGlnbm9yZWQgd2hlbiBkZWNsYXJlZCBpbiBtaXhpbnMgb3IgZXh0ZW5kcy4gSXQgc2hvdWxkIG9ubHkgYmUgZGVjbGFyZWQgaW4gdGhlIGJhc2UgY29tcG9uZW50IGl0c2VsZi5gXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBzdHJhdCA9IGludGVybmFsT3B0aW9uTWVyZ2VTdHJhdHNba2V5XSB8fCBzdHJhdHMgJiYgc3RyYXRzW2tleV07XG4gICAgICB0b1trZXldID0gc3RyYXQgPyBzdHJhdCh0b1trZXldLCBmcm9tW2tleV0pIDogZnJvbVtrZXldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdG87XG59XG5jb25zdCBpbnRlcm5hbE9wdGlvbk1lcmdlU3RyYXRzID0ge1xuICBkYXRhOiBtZXJnZURhdGFGbixcbiAgcHJvcHM6IG1lcmdlRW1pdHNPclByb3BzT3B0aW9ucyxcbiAgZW1pdHM6IG1lcmdlRW1pdHNPclByb3BzT3B0aW9ucyxcbiAgLy8gb2JqZWN0c1xuICBtZXRob2RzOiBtZXJnZU9iamVjdE9wdGlvbnMsXG4gIGNvbXB1dGVkOiBtZXJnZU9iamVjdE9wdGlvbnMsXG4gIC8vIGxpZmVjeWNsZVxuICBiZWZvcmVDcmVhdGU6IG1lcmdlQXNBcnJheSxcbiAgY3JlYXRlZDogbWVyZ2VBc0FycmF5LFxuICBiZWZvcmVNb3VudDogbWVyZ2VBc0FycmF5LFxuICBtb3VudGVkOiBtZXJnZUFzQXJyYXksXG4gIGJlZm9yZVVwZGF0ZTogbWVyZ2VBc0FycmF5LFxuICB1cGRhdGVkOiBtZXJnZUFzQXJyYXksXG4gIGJlZm9yZURlc3Ryb3k6IG1lcmdlQXNBcnJheSxcbiAgYmVmb3JlVW5tb3VudDogbWVyZ2VBc0FycmF5LFxuICBkZXN0cm95ZWQ6IG1lcmdlQXNBcnJheSxcbiAgdW5tb3VudGVkOiBtZXJnZUFzQXJyYXksXG4gIGFjdGl2YXRlZDogbWVyZ2VBc0FycmF5LFxuICBkZWFjdGl2YXRlZDogbWVyZ2VBc0FycmF5LFxuICBlcnJvckNhcHR1cmVkOiBtZXJnZUFzQXJyYXksXG4gIHNlcnZlclByZWZldGNoOiBtZXJnZUFzQXJyYXksXG4gIC8vIGFzc2V0c1xuICBjb21wb25lbnRzOiBtZXJnZU9iamVjdE9wdGlvbnMsXG4gIGRpcmVjdGl2ZXM6IG1lcmdlT2JqZWN0T3B0aW9ucyxcbiAgLy8gd2F0Y2hcbiAgd2F0Y2g6IG1lcmdlV2F0Y2hPcHRpb25zLFxuICAvLyBwcm92aWRlIC8gaW5qZWN0XG4gIHByb3ZpZGU6IG1lcmdlRGF0YUZuLFxuICBpbmplY3Q6IG1lcmdlSW5qZWN0XG59O1xuZnVuY3Rpb24gbWVyZ2VEYXRhRm4odG8sIGZyb20pIHtcbiAgaWYgKCFmcm9tKSB7XG4gICAgcmV0dXJuIHRvO1xuICB9XG4gIGlmICghdG8pIHtcbiAgICByZXR1cm4gZnJvbTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VkRGF0YUZuKCkge1xuICAgIHJldHVybiAoZXh0ZW5kKShcbiAgICAgIGlzRnVuY3Rpb24odG8pID8gdG8uY2FsbCh0aGlzLCB0aGlzKSA6IHRvLFxuICAgICAgaXNGdW5jdGlvbihmcm9tKSA/IGZyb20uY2FsbCh0aGlzLCB0aGlzKSA6IGZyb21cbiAgICApO1xuICB9O1xufVxuZnVuY3Rpb24gbWVyZ2VJbmplY3QodG8sIGZyb20pIHtcbiAgcmV0dXJuIG1lcmdlT2JqZWN0T3B0aW9ucyhub3JtYWxpemVJbmplY3QodG8pLCBub3JtYWxpemVJbmplY3QoZnJvbSkpO1xufVxuZnVuY3Rpb24gbm9ybWFsaXplSW5qZWN0KHJhdykge1xuICBpZiAoaXNBcnJheShyYXcpKSB7XG4gICAgY29uc3QgcmVzID0ge307XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByYXcubGVuZ3RoOyBpKyspIHtcbiAgICAgIHJlc1tyYXdbaV1dID0gcmF3W2ldO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9XG4gIHJldHVybiByYXc7XG59XG5mdW5jdGlvbiBtZXJnZUFzQXJyYXkodG8sIGZyb20pIHtcbiAgcmV0dXJuIHRvID8gWy4uLm5ldyBTZXQoW10uY29uY2F0KHRvLCBmcm9tKSldIDogZnJvbTtcbn1cbmZ1bmN0aW9uIG1lcmdlT2JqZWN0T3B0aW9ucyh0bywgZnJvbSkge1xuICByZXR1cm4gdG8gPyBleHRlbmQoLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCksIHRvLCBmcm9tKSA6IGZyb207XG59XG5mdW5jdGlvbiBtZXJnZUVtaXRzT3JQcm9wc09wdGlvbnModG8sIGZyb20pIHtcbiAgaWYgKHRvKSB7XG4gICAgaWYgKGlzQXJyYXkodG8pICYmIGlzQXJyYXkoZnJvbSkpIHtcbiAgICAgIHJldHVybiBbLi4uLyogQF9fUFVSRV9fICovIG5ldyBTZXQoWy4uLnRvLCAuLi5mcm9tXSldO1xuICAgIH1cbiAgICByZXR1cm4gZXh0ZW5kKFxuICAgICAgLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCksXG4gICAgICBub3JtYWxpemVQcm9wc09yRW1pdHModG8pLFxuICAgICAgbm9ybWFsaXplUHJvcHNPckVtaXRzKGZyb20gIT0gbnVsbCA/IGZyb20gOiB7fSlcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmcm9tO1xuICB9XG59XG5mdW5jdGlvbiBtZXJnZVdhdGNoT3B0aW9ucyh0bywgZnJvbSkge1xuICBpZiAoIXRvKVxuICAgIHJldHVybiBmcm9tO1xuICBpZiAoIWZyb20pXG4gICAgcmV0dXJuIHRvO1xuICBjb25zdCBtZXJnZWQgPSBleHRlbmQoLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCksIHRvKTtcbiAgZm9yIChjb25zdCBrZXkgaW4gZnJvbSkge1xuICAgIG1lcmdlZFtrZXldID0gbWVyZ2VBc0FycmF5KHRvW2tleV0sIGZyb21ba2V5XSk7XG4gIH1cbiAgcmV0dXJuIG1lcmdlZDtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQXBwQ29udGV4dCgpIHtcbiAgcmV0dXJuIHtcbiAgICBhcHA6IG51bGwsXG4gICAgY29uZmlnOiB7XG4gICAgICBpc05hdGl2ZVRhZzogTk8sXG4gICAgICBwZXJmb3JtYW5jZTogZmFsc2UsXG4gICAgICBnbG9iYWxQcm9wZXJ0aWVzOiB7fSxcbiAgICAgIG9wdGlvbk1lcmdlU3RyYXRlZ2llczoge30sXG4gICAgICBlcnJvckhhbmRsZXI6IHZvaWQgMCxcbiAgICAgIHdhcm5IYW5kbGVyOiB2b2lkIDAsXG4gICAgICBjb21waWxlck9wdGlvbnM6IHt9XG4gICAgfSxcbiAgICBtaXhpbnM6IFtdLFxuICAgIGNvbXBvbmVudHM6IHt9LFxuICAgIGRpcmVjdGl2ZXM6IHt9LFxuICAgIHByb3ZpZGVzOiAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKSxcbiAgICBvcHRpb25zQ2FjaGU6IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpLFxuICAgIHByb3BzQ2FjaGU6IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpLFxuICAgIGVtaXRzQ2FjaGU6IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpXG4gIH07XG59XG5sZXQgdWlkJDEgPSAwO1xuZnVuY3Rpb24gY3JlYXRlQXBwQVBJKHJlbmRlciwgaHlkcmF0ZSkge1xuICByZXR1cm4gZnVuY3Rpb24gY3JlYXRlQXBwKHJvb3RDb21wb25lbnQsIHJvb3RQcm9wcyA9IG51bGwpIHtcbiAgICBpZiAoIWlzRnVuY3Rpb24ocm9vdENvbXBvbmVudCkpIHtcbiAgICAgIHJvb3RDb21wb25lbnQgPSBleHRlbmQoe30sIHJvb3RDb21wb25lbnQpO1xuICAgIH1cbiAgICBpZiAocm9vdFByb3BzICE9IG51bGwgJiYgIWlzT2JqZWN0KHJvb3RQcm9wcykpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiB3YXJuKGByb290IHByb3BzIHBhc3NlZCB0byBhcHAubW91bnQoKSBtdXN0IGJlIGFuIG9iamVjdC5gKTtcbiAgICAgIHJvb3RQcm9wcyA9IG51bGw7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRleHQgPSBjcmVhdGVBcHBDb250ZXh0KCk7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvbnRleHQuY29uZmlnLCBcInVud3JhcEluamVjdGVkUmVmXCIsIHtcbiAgICAgICAgZ2V0KCkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9LFxuICAgICAgICBzZXQoKSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgIGBhcHAuY29uZmlnLnVud3JhcEluamVjdGVkUmVmIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIDMuMyBub3cgYWxhd3lzIHVud3JhcHMgaW5qZWN0ZWQgcmVmcyBpbiBPcHRpb25zIEFQSS5gXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IGluc3RhbGxlZFBsdWdpbnMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpO1xuICAgIGxldCBpc01vdW50ZWQgPSBmYWxzZTtcbiAgICBjb25zdCBhcHAgPSBjb250ZXh0LmFwcCA9IHtcbiAgICAgIF91aWQ6IHVpZCQxKyssXG4gICAgICBfY29tcG9uZW50OiByb290Q29tcG9uZW50LFxuICAgICAgX3Byb3BzOiByb290UHJvcHMsXG4gICAgICBfY29udGFpbmVyOiBudWxsLFxuICAgICAgX2NvbnRleHQ6IGNvbnRleHQsXG4gICAgICBfaW5zdGFuY2U6IG51bGwsXG4gICAgICB2ZXJzaW9uLFxuICAgICAgZ2V0IGNvbmZpZygpIHtcbiAgICAgICAgcmV0dXJuIGNvbnRleHQuY29uZmlnO1xuICAgICAgfSxcbiAgICAgIHNldCBjb25maWcodikge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgIGBhcHAuY29uZmlnIGNhbm5vdCBiZSByZXBsYWNlZC4gTW9kaWZ5IGluZGl2aWR1YWwgb3B0aW9ucyBpbnN0ZWFkLmBcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdXNlKHBsdWdpbiwgLi4ub3B0aW9ucykge1xuICAgICAgICBpZiAoaW5zdGFsbGVkUGx1Z2lucy5oYXMocGx1Z2luKSkge1xuICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiB3YXJuKGBQbHVnaW4gaGFzIGFscmVhZHkgYmVlbiBhcHBsaWVkIHRvIHRhcmdldCBhcHAuYCk7XG4gICAgICAgIH0gZWxzZSBpZiAocGx1Z2luICYmIGlzRnVuY3Rpb24ocGx1Z2luLmluc3RhbGwpKSB7XG4gICAgICAgICAgaW5zdGFsbGVkUGx1Z2lucy5hZGQocGx1Z2luKTtcbiAgICAgICAgICBwbHVnaW4uaW5zdGFsbChhcHAsIC4uLm9wdGlvbnMpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRnVuY3Rpb24ocGx1Z2luKSkge1xuICAgICAgICAgIGluc3RhbGxlZFBsdWdpbnMuYWRkKHBsdWdpbik7XG4gICAgICAgICAgcGx1Z2luKGFwcCwgLi4ub3B0aW9ucyk7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgIGBBIHBsdWdpbiBtdXN0IGVpdGhlciBiZSBhIGZ1bmN0aW9uIG9yIGFuIG9iamVjdCB3aXRoIGFuIFwiaW5zdGFsbFwiIGZ1bmN0aW9uLmBcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcHA7XG4gICAgICB9LFxuICAgICAgbWl4aW4obWl4aW4pIHtcbiAgICAgICAgaWYgKF9fVlVFX09QVElPTlNfQVBJX18pIHtcbiAgICAgICAgICBpZiAoIWNvbnRleHQubWl4aW5zLmluY2x1ZGVzKG1peGluKSkge1xuICAgICAgICAgICAgY29udGV4dC5taXhpbnMucHVzaChtaXhpbik7XG4gICAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAgIFwiTWl4aW4gaGFzIGFscmVhZHkgYmVlbiBhcHBsaWVkIHRvIHRhcmdldCBhcHBcIiArIChtaXhpbi5uYW1lID8gYDogJHttaXhpbi5uYW1lfWAgOiBcIlwiKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgd2FybihcIk1peGlucyBhcmUgb25seSBhdmFpbGFibGUgaW4gYnVpbGRzIHN1cHBvcnRpbmcgT3B0aW9ucyBBUElcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFwcDtcbiAgICAgIH0sXG4gICAgICBjb21wb25lbnQobmFtZSwgY29tcG9uZW50KSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICB2YWxpZGF0ZUNvbXBvbmVudE5hbWUobmFtZSwgY29udGV4dC5jb25maWcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghY29tcG9uZW50KSB7XG4gICAgICAgICAgcmV0dXJuIGNvbnRleHQuY29tcG9uZW50c1tuYW1lXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmIGNvbnRleHQuY29tcG9uZW50c1tuYW1lXSkge1xuICAgICAgICAgIHdhcm4oYENvbXBvbmVudCBcIiR7bmFtZX1cIiBoYXMgYWxyZWFkeSBiZWVuIHJlZ2lzdGVyZWQgaW4gdGFyZ2V0IGFwcC5gKTtcbiAgICAgICAgfVxuICAgICAgICBjb250ZXh0LmNvbXBvbmVudHNbbmFtZV0gPSBjb21wb25lbnQ7XG4gICAgICAgIHJldHVybiBhcHA7XG4gICAgICB9LFxuICAgICAgZGlyZWN0aXZlKG5hbWUsIGRpcmVjdGl2ZSkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgdmFsaWRhdGVEaXJlY3RpdmVOYW1lKG5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZGlyZWN0aXZlKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbnRleHQuZGlyZWN0aXZlc1tuYW1lXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmIGNvbnRleHQuZGlyZWN0aXZlc1tuYW1lXSkge1xuICAgICAgICAgIHdhcm4oYERpcmVjdGl2ZSBcIiR7bmFtZX1cIiBoYXMgYWxyZWFkeSBiZWVuIHJlZ2lzdGVyZWQgaW4gdGFyZ2V0IGFwcC5gKTtcbiAgICAgICAgfVxuICAgICAgICBjb250ZXh0LmRpcmVjdGl2ZXNbbmFtZV0gPSBkaXJlY3RpdmU7XG4gICAgICAgIHJldHVybiBhcHA7XG4gICAgICB9LFxuICAgICAgbW91bnQocm9vdENvbnRhaW5lciwgaXNIeWRyYXRlLCBpc1NWRykge1xuICAgICAgICBpZiAoIWlzTW91bnRlZCkge1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgcm9vdENvbnRhaW5lci5fX3Z1ZV9hcHBfXykge1xuICAgICAgICAgICAgd2FybihcbiAgICAgICAgICAgICAgYFRoZXJlIGlzIGFscmVhZHkgYW4gYXBwIGluc3RhbmNlIG1vdW50ZWQgb24gdGhlIGhvc3QgY29udGFpbmVyLlxuIElmIHlvdSB3YW50IHRvIG1vdW50IGFub3RoZXIgYXBwIG9uIHRoZSBzYW1lIGhvc3QgY29udGFpbmVyLCB5b3UgbmVlZCB0byB1bm1vdW50IHRoZSBwcmV2aW91cyBhcHAgYnkgY2FsbGluZyBcXGBhcHAudW5tb3VudCgpXFxgIGZpcnN0LmBcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IHZub2RlID0gY3JlYXRlVk5vZGUoXG4gICAgICAgICAgICByb290Q29tcG9uZW50LFxuICAgICAgICAgICAgcm9vdFByb3BzXG4gICAgICAgICAgKTtcbiAgICAgICAgICB2bm9kZS5hcHBDb250ZXh0ID0gY29udGV4dDtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgICBjb250ZXh0LnJlbG9hZCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgcmVuZGVyKGNsb25lVk5vZGUodm5vZGUpLCByb290Q29udGFpbmVyLCBpc1NWRyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXNIeWRyYXRlICYmIGh5ZHJhdGUpIHtcbiAgICAgICAgICAgIGh5ZHJhdGUodm5vZGUsIHJvb3RDb250YWluZXIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZW5kZXIodm5vZGUsIHJvb3RDb250YWluZXIsIGlzU1ZHKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaXNNb3VudGVkID0gdHJ1ZTtcbiAgICAgICAgICBhcHAuX2NvbnRhaW5lciA9IHJvb3RDb250YWluZXI7XG4gICAgICAgICAgcm9vdENvbnRhaW5lci5fX3Z1ZV9hcHBfXyA9IGFwcDtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xuICAgICAgICAgICAgYXBwLl9pbnN0YW5jZSA9IHZub2RlLmNvbXBvbmVudDtcbiAgICAgICAgICAgIGRldnRvb2xzSW5pdEFwcChhcHAsIHZlcnNpb24pO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZ2V0RXhwb3NlUHJveHkodm5vZGUuY29tcG9uZW50KSB8fCB2bm9kZS5jb21wb25lbnQucHJveHk7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgIGBBcHAgaGFzIGFscmVhZHkgYmVlbiBtb3VudGVkLlxuSWYgeW91IHdhbnQgdG8gcmVtb3VudCB0aGUgc2FtZSBhcHAsIG1vdmUgeW91ciBhcHAgY3JlYXRpb24gbG9naWMgaW50byBhIGZhY3RvcnkgZnVuY3Rpb24gYW5kIGNyZWF0ZSBmcmVzaCBhcHAgaW5zdGFuY2VzIGZvciBlYWNoIG1vdW50IC0gZS5nLiBcXGBjb25zdCBjcmVhdGVNeUFwcCA9ICgpID0+IGNyZWF0ZUFwcChBcHApXFxgYFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB1bm1vdW50KCkge1xuICAgICAgICBpZiAoaXNNb3VudGVkKSB7XG4gICAgICAgICAgcmVuZGVyKG51bGwsIGFwcC5fY29udGFpbmVyKTtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xuICAgICAgICAgICAgYXBwLl9pbnN0YW5jZSA9IG51bGw7XG4gICAgICAgICAgICBkZXZ0b29sc1VubW91bnRBcHAoYXBwKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZGVsZXRlIGFwcC5fY29udGFpbmVyLl9fdnVlX2FwcF9fO1xuICAgICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgIHdhcm4oYENhbm5vdCB1bm1vdW50IGFuIGFwcCB0aGF0IGlzIG5vdCBtb3VudGVkLmApO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcHJvdmlkZShrZXksIHZhbHVlKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYga2V5IGluIGNvbnRleHQucHJvdmlkZXMpIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgYEFwcCBhbHJlYWR5IHByb3ZpZGVzIHByb3BlcnR5IHdpdGgga2V5IFwiJHtTdHJpbmcoa2V5KX1cIi4gSXQgd2lsbCBiZSBvdmVyd3JpdHRlbiB3aXRoIHRoZSBuZXcgdmFsdWUuYFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgY29udGV4dC5wcm92aWRlc1trZXldID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBhcHA7XG4gICAgICB9LFxuICAgICAgcnVuV2l0aENvbnRleHQoZm4pIHtcbiAgICAgICAgY3VycmVudEFwcCA9IGFwcDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gZm4oKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBjdXJyZW50QXBwID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIGFwcDtcbiAgfTtcbn1cbmxldCBjdXJyZW50QXBwID0gbnVsbDtcblxuZnVuY3Rpb24gcHJvdmlkZShrZXksIHZhbHVlKSB7XG4gIGlmICghY3VycmVudEluc3RhbmNlKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgd2FybihgcHJvdmlkZSgpIGNhbiBvbmx5IGJlIHVzZWQgaW5zaWRlIHNldHVwKCkuYCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGxldCBwcm92aWRlcyA9IGN1cnJlbnRJbnN0YW5jZS5wcm92aWRlcztcbiAgICBjb25zdCBwYXJlbnRQcm92aWRlcyA9IGN1cnJlbnRJbnN0YW5jZS5wYXJlbnQgJiYgY3VycmVudEluc3RhbmNlLnBhcmVudC5wcm92aWRlcztcbiAgICBpZiAocGFyZW50UHJvdmlkZXMgPT09IHByb3ZpZGVzKSB7XG4gICAgICBwcm92aWRlcyA9IGN1cnJlbnRJbnN0YW5jZS5wcm92aWRlcyA9IE9iamVjdC5jcmVhdGUocGFyZW50UHJvdmlkZXMpO1xuICAgIH1cbiAgICBwcm92aWRlc1trZXldID0gdmFsdWU7XG4gIH1cbn1cbmZ1bmN0aW9uIGluamVjdChrZXksIGRlZmF1bHRWYWx1ZSwgdHJlYXREZWZhdWx0QXNGYWN0b3J5ID0gZmFsc2UpIHtcbiAgY29uc3QgaW5zdGFuY2UgPSBjdXJyZW50SW5zdGFuY2UgfHwgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlO1xuICBpZiAoaW5zdGFuY2UgfHwgY3VycmVudEFwcCkge1xuICAgIGNvbnN0IHByb3ZpZGVzID0gaW5zdGFuY2UgPyBpbnN0YW5jZS5wYXJlbnQgPT0gbnVsbCA/IGluc3RhbmNlLnZub2RlLmFwcENvbnRleHQgJiYgaW5zdGFuY2Uudm5vZGUuYXBwQ29udGV4dC5wcm92aWRlcyA6IGluc3RhbmNlLnBhcmVudC5wcm92aWRlcyA6IGN1cnJlbnRBcHAuX2NvbnRleHQucHJvdmlkZXM7XG4gICAgaWYgKHByb3ZpZGVzICYmIGtleSBpbiBwcm92aWRlcykge1xuICAgICAgcmV0dXJuIHByb3ZpZGVzW2tleV07XG4gICAgfSBlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgcmV0dXJuIHRyZWF0RGVmYXVsdEFzRmFjdG9yeSAmJiBpc0Z1bmN0aW9uKGRlZmF1bHRWYWx1ZSkgPyBkZWZhdWx0VmFsdWUuY2FsbChpbnN0YW5jZSAmJiBpbnN0YW5jZS5wcm94eSkgOiBkZWZhdWx0VmFsdWU7XG4gICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIHdhcm4oYGluamVjdGlvbiBcIiR7U3RyaW5nKGtleSl9XCIgbm90IGZvdW5kLmApO1xuICAgIH1cbiAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICB3YXJuKGBpbmplY3QoKSBjYW4gb25seSBiZSB1c2VkIGluc2lkZSBzZXR1cCgpIG9yIGZ1bmN0aW9uYWwgY29tcG9uZW50cy5gKTtcbiAgfVxufVxuZnVuY3Rpb24gaGFzSW5qZWN0aW9uQ29udGV4dCgpIHtcbiAgcmV0dXJuICEhKGN1cnJlbnRJbnN0YW5jZSB8fCBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgfHwgY3VycmVudEFwcCk7XG59XG5cbmZ1bmN0aW9uIGluaXRQcm9wcyhpbnN0YW5jZSwgcmF3UHJvcHMsIGlzU3RhdGVmdWwsIGlzU1NSID0gZmFsc2UpIHtcbiAgY29uc3QgcHJvcHMgPSB7fTtcbiAgY29uc3QgYXR0cnMgPSB7fTtcbiAgZGVmKGF0dHJzLCBJbnRlcm5hbE9iamVjdEtleSwgMSk7XG4gIGluc3RhbmNlLnByb3BzRGVmYXVsdHMgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgc2V0RnVsbFByb3BzKGluc3RhbmNlLCByYXdQcm9wcywgcHJvcHMsIGF0dHJzKTtcbiAgZm9yIChjb25zdCBrZXkgaW4gaW5zdGFuY2UucHJvcHNPcHRpb25zWzBdKSB7XG4gICAgaWYgKCEoa2V5IGluIHByb3BzKSkge1xuICAgICAgcHJvcHNba2V5XSA9IHZvaWQgMDtcbiAgICB9XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIHZhbGlkYXRlUHJvcHMocmF3UHJvcHMgfHwge30sIHByb3BzLCBpbnN0YW5jZSk7XG4gIH1cbiAgaWYgKGlzU3RhdGVmdWwpIHtcbiAgICBpbnN0YW5jZS5wcm9wcyA9IGlzU1NSID8gcHJvcHMgOiBzaGFsbG93UmVhY3RpdmUocHJvcHMpO1xuICB9IGVsc2Uge1xuICAgIGlmICghaW5zdGFuY2UudHlwZS5wcm9wcykge1xuICAgICAgaW5zdGFuY2UucHJvcHMgPSBhdHRycztcbiAgICB9IGVsc2Uge1xuICAgICAgaW5zdGFuY2UucHJvcHMgPSBwcm9wcztcbiAgICB9XG4gIH1cbiAgaW5zdGFuY2UuYXR0cnMgPSBhdHRycztcbn1cbmZ1bmN0aW9uIGlzSW5IbXJDb250ZXh0KGluc3RhbmNlKSB7XG4gIHdoaWxlIChpbnN0YW5jZSkge1xuICAgIGlmIChpbnN0YW5jZS50eXBlLl9faG1ySWQpXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBpbnN0YW5jZSA9IGluc3RhbmNlLnBhcmVudDtcbiAgfVxufVxuZnVuY3Rpb24gdXBkYXRlUHJvcHMoaW5zdGFuY2UsIHJhd1Byb3BzLCByYXdQcmV2UHJvcHMsIG9wdGltaXplZCkge1xuICBjb25zdCB7XG4gICAgcHJvcHMsXG4gICAgYXR0cnMsXG4gICAgdm5vZGU6IHsgcGF0Y2hGbGFnIH1cbiAgfSA9IGluc3RhbmNlO1xuICBjb25zdCByYXdDdXJyZW50UHJvcHMgPSB0b1Jhdyhwcm9wcyk7XG4gIGNvbnN0IFtvcHRpb25zXSA9IGluc3RhbmNlLnByb3BzT3B0aW9ucztcbiAgbGV0IGhhc0F0dHJzQ2hhbmdlZCA9IGZhbHNlO1xuICBpZiAoXG4gICAgLy8gYWx3YXlzIGZvcmNlIGZ1bGwgZGlmZiBpbiBkZXZcbiAgICAvLyAtICMxOTQyIGlmIGhtciBpcyBlbmFibGVkIHdpdGggc2ZjIGNvbXBvbmVudFxuICAgIC8vIC0gdml0ZSM4NzIgbm9uLXNmYyBjb21wb25lbnQgdXNlZCBieSBzZmMgY29tcG9uZW50XG4gICAgIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgaXNJbkhtckNvbnRleHQoaW5zdGFuY2UpKSAmJiAob3B0aW1pemVkIHx8IHBhdGNoRmxhZyA+IDApICYmICEocGF0Y2hGbGFnICYgMTYpXG4gICkge1xuICAgIGlmIChwYXRjaEZsYWcgJiA4KSB7XG4gICAgICBjb25zdCBwcm9wc1RvVXBkYXRlID0gaW5zdGFuY2Uudm5vZGUuZHluYW1pY1Byb3BzO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm9wc1RvVXBkYXRlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBrZXkgPSBwcm9wc1RvVXBkYXRlW2ldO1xuICAgICAgICBpZiAoaXNFbWl0TGlzdGVuZXIoaW5zdGFuY2UuZW1pdHNPcHRpb25zLCBrZXkpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdmFsdWUgPSByYXdQcm9wc1trZXldO1xuICAgICAgICBpZiAob3B0aW9ucykge1xuICAgICAgICAgIGlmIChoYXNPd24oYXR0cnMsIGtleSkpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gYXR0cnNba2V5XSkge1xuICAgICAgICAgICAgICBhdHRyc1trZXldID0gdmFsdWU7XG4gICAgICAgICAgICAgIGhhc0F0dHJzQ2hhbmdlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGNhbWVsaXplZEtleSA9IGNhbWVsaXplKGtleSk7XG4gICAgICAgICAgICBwcm9wc1tjYW1lbGl6ZWRLZXldID0gcmVzb2x2ZVByb3BWYWx1ZShcbiAgICAgICAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgICAgICAgcmF3Q3VycmVudFByb3BzLFxuICAgICAgICAgICAgICBjYW1lbGl6ZWRLZXksXG4gICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgICBpbnN0YW5jZSxcbiAgICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgICAgICAgLyogaXNBYnNlbnQgKi9cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICh2YWx1ZSAhPT0gYXR0cnNba2V5XSkge1xuICAgICAgICAgICAgYXR0cnNba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgaGFzQXR0cnNDaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKHNldEZ1bGxQcm9wcyhpbnN0YW5jZSwgcmF3UHJvcHMsIHByb3BzLCBhdHRycykpIHtcbiAgICAgIGhhc0F0dHJzQ2hhbmdlZCA9IHRydWU7XG4gICAgfVxuICAgIGxldCBrZWJhYktleTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiByYXdDdXJyZW50UHJvcHMpIHtcbiAgICAgIGlmICghcmF3UHJvcHMgfHwgLy8gZm9yIGNhbWVsQ2FzZVxuICAgICAgIWhhc093bihyYXdQcm9wcywga2V5KSAmJiAvLyBpdCdzIHBvc3NpYmxlIHRoZSBvcmlnaW5hbCBwcm9wcyB3YXMgcGFzc2VkIGluIGFzIGtlYmFiLWNhc2VcbiAgICAgIC8vIGFuZCBjb252ZXJ0ZWQgdG8gY2FtZWxDYXNlICgjOTU1KVxuICAgICAgKChrZWJhYktleSA9IGh5cGhlbmF0ZShrZXkpKSA9PT0ga2V5IHx8ICFoYXNPd24ocmF3UHJvcHMsIGtlYmFiS2V5KSkpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgICAgICBpZiAocmF3UHJldlByb3BzICYmIC8vIGZvciBjYW1lbENhc2VcbiAgICAgICAgICAocmF3UHJldlByb3BzW2tleV0gIT09IHZvaWQgMCB8fCAvLyBmb3Iga2ViYWItY2FzZVxuICAgICAgICAgIHJhd1ByZXZQcm9wc1trZWJhYktleV0gIT09IHZvaWQgMCkpIHtcbiAgICAgICAgICAgIHByb3BzW2tleV0gPSByZXNvbHZlUHJvcFZhbHVlKFxuICAgICAgICAgICAgICBvcHRpb25zLFxuICAgICAgICAgICAgICByYXdDdXJyZW50UHJvcHMsXG4gICAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgICAgdm9pZCAwLFxuICAgICAgICAgICAgICBpbnN0YW5jZSxcbiAgICAgICAgICAgICAgdHJ1ZVxuICAgICAgICAgICAgICAvKiBpc0Fic2VudCAqL1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIHByb3BzW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGF0dHJzICE9PSByYXdDdXJyZW50UHJvcHMpIHtcbiAgICAgIGZvciAoY29uc3Qga2V5IGluIGF0dHJzKSB7XG4gICAgICAgIGlmICghcmF3UHJvcHMgfHwgIWhhc093bihyYXdQcm9wcywga2V5KSAmJiB0cnVlKSB7XG4gICAgICAgICAgZGVsZXRlIGF0dHJzW2tleV07XG4gICAgICAgICAgaGFzQXR0cnNDaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoaGFzQXR0cnNDaGFuZ2VkKSB7XG4gICAgdHJpZ2dlcihpbnN0YW5jZSwgXCJzZXRcIiwgXCIkYXR0cnNcIik7XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIHZhbGlkYXRlUHJvcHMocmF3UHJvcHMgfHwge30sIHByb3BzLCBpbnN0YW5jZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHNldEZ1bGxQcm9wcyhpbnN0YW5jZSwgcmF3UHJvcHMsIHByb3BzLCBhdHRycykge1xuICBjb25zdCBbb3B0aW9ucywgbmVlZENhc3RLZXlzXSA9IGluc3RhbmNlLnByb3BzT3B0aW9ucztcbiAgbGV0IGhhc0F0dHJzQ2hhbmdlZCA9IGZhbHNlO1xuICBsZXQgcmF3Q2FzdFZhbHVlcztcbiAgaWYgKHJhd1Byb3BzKSB7XG4gICAgZm9yIChsZXQga2V5IGluIHJhd1Byb3BzKSB7XG4gICAgICBpZiAoaXNSZXNlcnZlZFByb3Aoa2V5KSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHZhbHVlID0gcmF3UHJvcHNba2V5XTtcbiAgICAgIGxldCBjYW1lbEtleTtcbiAgICAgIGlmIChvcHRpb25zICYmIGhhc093bihvcHRpb25zLCBjYW1lbEtleSA9IGNhbWVsaXplKGtleSkpKSB7XG4gICAgICAgIGlmICghbmVlZENhc3RLZXlzIHx8ICFuZWVkQ2FzdEtleXMuaW5jbHVkZXMoY2FtZWxLZXkpKSB7XG4gICAgICAgICAgcHJvcHNbY2FtZWxLZXldID0gdmFsdWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgKHJhd0Nhc3RWYWx1ZXMgfHwgKHJhd0Nhc3RWYWx1ZXMgPSB7fSkpW2NhbWVsS2V5XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKCFpc0VtaXRMaXN0ZW5lcihpbnN0YW5jZS5lbWl0c09wdGlvbnMsIGtleSkpIHtcbiAgICAgICAgaWYgKCEoa2V5IGluIGF0dHJzKSB8fCB2YWx1ZSAhPT0gYXR0cnNba2V5XSkge1xuICAgICAgICAgIGF0dHJzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICBoYXNBdHRyc0NoYW5nZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChuZWVkQ2FzdEtleXMpIHtcbiAgICBjb25zdCByYXdDdXJyZW50UHJvcHMgPSB0b1Jhdyhwcm9wcyk7XG4gICAgY29uc3QgY2FzdFZhbHVlcyA9IHJhd0Nhc3RWYWx1ZXMgfHwgRU1QVFlfT0JKO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmVlZENhc3RLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBrZXkgPSBuZWVkQ2FzdEtleXNbaV07XG4gICAgICBwcm9wc1trZXldID0gcmVzb2x2ZVByb3BWYWx1ZShcbiAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgcmF3Q3VycmVudFByb3BzLFxuICAgICAgICBrZXksXG4gICAgICAgIGNhc3RWYWx1ZXNba2V5XSxcbiAgICAgICAgaW5zdGFuY2UsXG4gICAgICAgICFoYXNPd24oY2FzdFZhbHVlcywga2V5KVxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGhhc0F0dHJzQ2hhbmdlZDtcbn1cbmZ1bmN0aW9uIHJlc29sdmVQcm9wVmFsdWUob3B0aW9ucywgcHJvcHMsIGtleSwgdmFsdWUsIGluc3RhbmNlLCBpc0Fic2VudCkge1xuICBjb25zdCBvcHQgPSBvcHRpb25zW2tleV07XG4gIGlmIChvcHQgIT0gbnVsbCkge1xuICAgIGNvbnN0IGhhc0RlZmF1bHQgPSBoYXNPd24ob3B0LCBcImRlZmF1bHRcIik7XG4gICAgaWYgKGhhc0RlZmF1bHQgJiYgdmFsdWUgPT09IHZvaWQgMCkge1xuICAgICAgY29uc3QgZGVmYXVsdFZhbHVlID0gb3B0LmRlZmF1bHQ7XG4gICAgICBpZiAob3B0LnR5cGUgIT09IEZ1bmN0aW9uICYmICFvcHQuc2tpcEZhY3RvcnkgJiYgaXNGdW5jdGlvbihkZWZhdWx0VmFsdWUpKSB7XG4gICAgICAgIGNvbnN0IHsgcHJvcHNEZWZhdWx0cyB9ID0gaW5zdGFuY2U7XG4gICAgICAgIGlmIChrZXkgaW4gcHJvcHNEZWZhdWx0cykge1xuICAgICAgICAgIHZhbHVlID0gcHJvcHNEZWZhdWx0c1trZXldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNldEN1cnJlbnRJbnN0YW5jZShpbnN0YW5jZSk7XG4gICAgICAgICAgdmFsdWUgPSBwcm9wc0RlZmF1bHRzW2tleV0gPSBkZWZhdWx0VmFsdWUuY2FsbChcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBwcm9wc1xuICAgICAgICAgICk7XG4gICAgICAgICAgdW5zZXRDdXJyZW50SW5zdGFuY2UoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWUgPSBkZWZhdWx0VmFsdWU7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChvcHRbMCAvKiBzaG91bGRDYXN0ICovXSkge1xuICAgICAgaWYgKGlzQWJzZW50ICYmICFoYXNEZWZhdWx0KSB7XG4gICAgICAgIHZhbHVlID0gZmFsc2U7XG4gICAgICB9IGVsc2UgaWYgKG9wdFsxIC8qIHNob3VsZENhc3RUcnVlICovXSAmJiAodmFsdWUgPT09IFwiXCIgfHwgdmFsdWUgPT09IGh5cGhlbmF0ZShrZXkpKSkge1xuICAgICAgICB2YWx1ZSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZVByb3BzT3B0aW9ucyhjb21wLCBhcHBDb250ZXh0LCBhc01peGluID0gZmFsc2UpIHtcbiAgY29uc3QgY2FjaGUgPSBhcHBDb250ZXh0LnByb3BzQ2FjaGU7XG4gIGNvbnN0IGNhY2hlZCA9IGNhY2hlLmdldChjb21wKTtcbiAgaWYgKGNhY2hlZCkge1xuICAgIHJldHVybiBjYWNoZWQ7XG4gIH1cbiAgY29uc3QgcmF3ID0gY29tcC5wcm9wcztcbiAgY29uc3Qgbm9ybWFsaXplZCA9IHt9O1xuICBjb25zdCBuZWVkQ2FzdEtleXMgPSBbXTtcbiAgbGV0IGhhc0V4dGVuZHMgPSBmYWxzZTtcbiAgaWYgKF9fVlVFX09QVElPTlNfQVBJX18gJiYgIWlzRnVuY3Rpb24oY29tcCkpIHtcbiAgICBjb25zdCBleHRlbmRQcm9wcyA9IChyYXcyKSA9PiB7XG4gICAgICBoYXNFeHRlbmRzID0gdHJ1ZTtcbiAgICAgIGNvbnN0IFtwcm9wcywga2V5c10gPSBub3JtYWxpemVQcm9wc09wdGlvbnMocmF3MiwgYXBwQ29udGV4dCwgdHJ1ZSk7XG4gICAgICBleHRlbmQobm9ybWFsaXplZCwgcHJvcHMpO1xuICAgICAgaWYgKGtleXMpXG4gICAgICAgIG5lZWRDYXN0S2V5cy5wdXNoKC4uLmtleXMpO1xuICAgIH07XG4gICAgaWYgKCFhc01peGluICYmIGFwcENvbnRleHQubWl4aW5zLmxlbmd0aCkge1xuICAgICAgYXBwQ29udGV4dC5taXhpbnMuZm9yRWFjaChleHRlbmRQcm9wcyk7XG4gICAgfVxuICAgIGlmIChjb21wLmV4dGVuZHMpIHtcbiAgICAgIGV4dGVuZFByb3BzKGNvbXAuZXh0ZW5kcyk7XG4gICAgfVxuICAgIGlmIChjb21wLm1peGlucykge1xuICAgICAgY29tcC5taXhpbnMuZm9yRWFjaChleHRlbmRQcm9wcyk7XG4gICAgfVxuICB9XG4gIGlmICghcmF3ICYmICFoYXNFeHRlbmRzKSB7XG4gICAgaWYgKGlzT2JqZWN0KGNvbXApKSB7XG4gICAgICBjYWNoZS5zZXQoY29tcCwgRU1QVFlfQVJSKTtcbiAgICB9XG4gICAgcmV0dXJuIEVNUFRZX0FSUjtcbiAgfVxuICBpZiAoaXNBcnJheShyYXcpKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByYXcubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgIWlzU3RyaW5nKHJhd1tpXSkpIHtcbiAgICAgICAgd2FybihgcHJvcHMgbXVzdCBiZSBzdHJpbmdzIHdoZW4gdXNpbmcgYXJyYXkgc3ludGF4LmAsIHJhd1tpXSk7XG4gICAgICB9XG4gICAgICBjb25zdCBub3JtYWxpemVkS2V5ID0gY2FtZWxpemUocmF3W2ldKTtcbiAgICAgIGlmICh2YWxpZGF0ZVByb3BOYW1lKG5vcm1hbGl6ZWRLZXkpKSB7XG4gICAgICAgIG5vcm1hbGl6ZWRbbm9ybWFsaXplZEtleV0gPSBFTVBUWV9PQko7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKHJhdykge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgIWlzT2JqZWN0KHJhdykpIHtcbiAgICAgIHdhcm4oYGludmFsaWQgcHJvcHMgb3B0aW9uc2AsIHJhdyk7XG4gICAgfVxuICAgIGZvciAoY29uc3Qga2V5IGluIHJhdykge1xuICAgICAgY29uc3Qgbm9ybWFsaXplZEtleSA9IGNhbWVsaXplKGtleSk7XG4gICAgICBpZiAodmFsaWRhdGVQcm9wTmFtZShub3JtYWxpemVkS2V5KSkge1xuICAgICAgICBjb25zdCBvcHQgPSByYXdba2V5XTtcbiAgICAgICAgY29uc3QgcHJvcCA9IG5vcm1hbGl6ZWRbbm9ybWFsaXplZEtleV0gPSBpc0FycmF5KG9wdCkgfHwgaXNGdW5jdGlvbihvcHQpID8geyB0eXBlOiBvcHQgfSA6IGV4dGVuZCh7fSwgb3B0KTtcbiAgICAgICAgaWYgKHByb3ApIHtcbiAgICAgICAgICBjb25zdCBib29sZWFuSW5kZXggPSBnZXRUeXBlSW5kZXgoQm9vbGVhbiwgcHJvcC50eXBlKTtcbiAgICAgICAgICBjb25zdCBzdHJpbmdJbmRleCA9IGdldFR5cGVJbmRleChTdHJpbmcsIHByb3AudHlwZSk7XG4gICAgICAgICAgcHJvcFswIC8qIHNob3VsZENhc3QgKi9dID0gYm9vbGVhbkluZGV4ID4gLTE7XG4gICAgICAgICAgcHJvcFsxIC8qIHNob3VsZENhc3RUcnVlICovXSA9IHN0cmluZ0luZGV4IDwgMCB8fCBib29sZWFuSW5kZXggPCBzdHJpbmdJbmRleDtcbiAgICAgICAgICBpZiAoYm9vbGVhbkluZGV4ID4gLTEgfHwgaGFzT3duKHByb3AsIFwiZGVmYXVsdFwiKSkge1xuICAgICAgICAgICAgbmVlZENhc3RLZXlzLnB1c2gobm9ybWFsaXplZEtleSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGNvbnN0IHJlcyA9IFtub3JtYWxpemVkLCBuZWVkQ2FzdEtleXNdO1xuICBpZiAoaXNPYmplY3QoY29tcCkpIHtcbiAgICBjYWNoZS5zZXQoY29tcCwgcmVzKTtcbiAgfVxuICByZXR1cm4gcmVzO1xufVxuZnVuY3Rpb24gdmFsaWRhdGVQcm9wTmFtZShrZXkpIHtcbiAgaWYgKGtleVswXSAhPT0gXCIkXCIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICB3YXJuKGBJbnZhbGlkIHByb3AgbmFtZTogXCIke2tleX1cIiBpcyBhIHJlc2VydmVkIHByb3BlcnR5LmApO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGdldFR5cGUoY3Rvcikge1xuICBjb25zdCBtYXRjaCA9IGN0b3IgJiYgY3Rvci50b1N0cmluZygpLm1hdGNoKC9eXFxzKihmdW5jdGlvbnxjbGFzcykgKFxcdyspLyk7XG4gIHJldHVybiBtYXRjaCA/IG1hdGNoWzJdIDogY3RvciA9PT0gbnVsbCA/IFwibnVsbFwiIDogXCJcIjtcbn1cbmZ1bmN0aW9uIGlzU2FtZVR5cGUoYSwgYikge1xuICByZXR1cm4gZ2V0VHlwZShhKSA9PT0gZ2V0VHlwZShiKTtcbn1cbmZ1bmN0aW9uIGdldFR5cGVJbmRleCh0eXBlLCBleHBlY3RlZFR5cGVzKSB7XG4gIGlmIChpc0FycmF5KGV4cGVjdGVkVHlwZXMpKSB7XG4gICAgcmV0dXJuIGV4cGVjdGVkVHlwZXMuZmluZEluZGV4KCh0KSA9PiBpc1NhbWVUeXBlKHQsIHR5cGUpKTtcbiAgfSBlbHNlIGlmIChpc0Z1bmN0aW9uKGV4cGVjdGVkVHlwZXMpKSB7XG4gICAgcmV0dXJuIGlzU2FtZVR5cGUoZXhwZWN0ZWRUeXBlcywgdHlwZSkgPyAwIDogLTE7XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuZnVuY3Rpb24gdmFsaWRhdGVQcm9wcyhyYXdQcm9wcywgcHJvcHMsIGluc3RhbmNlKSB7XG4gIGNvbnN0IHJlc29sdmVkVmFsdWVzID0gdG9SYXcocHJvcHMpO1xuICBjb25zdCBvcHRpb25zID0gaW5zdGFuY2UucHJvcHNPcHRpb25zWzBdO1xuICBmb3IgKGNvbnN0IGtleSBpbiBvcHRpb25zKSB7XG4gICAgbGV0IG9wdCA9IG9wdGlvbnNba2V5XTtcbiAgICBpZiAob3B0ID09IG51bGwpXG4gICAgICBjb250aW51ZTtcbiAgICB2YWxpZGF0ZVByb3AoXG4gICAgICBrZXksXG4gICAgICByZXNvbHZlZFZhbHVlc1trZXldLFxuICAgICAgb3B0LFxuICAgICAgIWhhc093bihyYXdQcm9wcywga2V5KSAmJiAhaGFzT3duKHJhd1Byb3BzLCBoeXBoZW5hdGUoa2V5KSlcbiAgICApO1xuICB9XG59XG5mdW5jdGlvbiB2YWxpZGF0ZVByb3AobmFtZSwgdmFsdWUsIHByb3AsIGlzQWJzZW50KSB7XG4gIGNvbnN0IHsgdHlwZSwgcmVxdWlyZWQsIHZhbGlkYXRvciwgc2tpcENoZWNrIH0gPSBwcm9wO1xuICBpZiAocmVxdWlyZWQgJiYgaXNBYnNlbnQpIHtcbiAgICB3YXJuKCdNaXNzaW5nIHJlcXVpcmVkIHByb3A6IFwiJyArIG5hbWUgKyAnXCInKTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHZhbHVlID09IG51bGwgJiYgIXJlcXVpcmVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICh0eXBlICE9IG51bGwgJiYgdHlwZSAhPT0gdHJ1ZSAmJiAhc2tpcENoZWNrKSB7XG4gICAgbGV0IGlzVmFsaWQgPSBmYWxzZTtcbiAgICBjb25zdCB0eXBlcyA9IGlzQXJyYXkodHlwZSkgPyB0eXBlIDogW3R5cGVdO1xuICAgIGNvbnN0IGV4cGVjdGVkVHlwZXMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHR5cGVzLmxlbmd0aCAmJiAhaXNWYWxpZDsgaSsrKSB7XG4gICAgICBjb25zdCB7IHZhbGlkLCBleHBlY3RlZFR5cGUgfSA9IGFzc2VydFR5cGUodmFsdWUsIHR5cGVzW2ldKTtcbiAgICAgIGV4cGVjdGVkVHlwZXMucHVzaChleHBlY3RlZFR5cGUgfHwgXCJcIik7XG4gICAgICBpc1ZhbGlkID0gdmFsaWQ7XG4gICAgfVxuICAgIGlmICghaXNWYWxpZCkge1xuICAgICAgd2FybihnZXRJbnZhbGlkVHlwZU1lc3NhZ2UobmFtZSwgdmFsdWUsIGV4cGVjdGVkVHlwZXMpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbiAgaWYgKHZhbGlkYXRvciAmJiAhdmFsaWRhdG9yKHZhbHVlKSkge1xuICAgIHdhcm4oJ0ludmFsaWQgcHJvcDogY3VzdG9tIHZhbGlkYXRvciBjaGVjayBmYWlsZWQgZm9yIHByb3AgXCInICsgbmFtZSArICdcIi4nKTtcbiAgfVxufVxuY29uc3QgaXNTaW1wbGVUeXBlID0gLyogQF9fUFVSRV9fICovIG1ha2VNYXAoXG4gIFwiU3RyaW5nLE51bWJlcixCb29sZWFuLEZ1bmN0aW9uLFN5bWJvbCxCaWdJbnRcIlxuKTtcbmZ1bmN0aW9uIGFzc2VydFR5cGUodmFsdWUsIHR5cGUpIHtcbiAgbGV0IHZhbGlkO1xuICBjb25zdCBleHBlY3RlZFR5cGUgPSBnZXRUeXBlKHR5cGUpO1xuICBpZiAoaXNTaW1wbGVUeXBlKGV4cGVjdGVkVHlwZSkpIHtcbiAgICBjb25zdCB0ID0gdHlwZW9mIHZhbHVlO1xuICAgIHZhbGlkID0gdCA9PT0gZXhwZWN0ZWRUeXBlLnRvTG93ZXJDYXNlKCk7XG4gICAgaWYgKCF2YWxpZCAmJiB0ID09PSBcIm9iamVjdFwiKSB7XG4gICAgICB2YWxpZCA9IHZhbHVlIGluc3RhbmNlb2YgdHlwZTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSBcIk9iamVjdFwiKSB7XG4gICAgdmFsaWQgPSBpc09iamVjdCh2YWx1ZSk7XG4gIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSBcIkFycmF5XCIpIHtcbiAgICB2YWxpZCA9IGlzQXJyYXkodmFsdWUpO1xuICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gXCJudWxsXCIpIHtcbiAgICB2YWxpZCA9IHZhbHVlID09PSBudWxsO1xuICB9IGVsc2Uge1xuICAgIHZhbGlkID0gdmFsdWUgaW5zdGFuY2VvZiB0eXBlO1xuICB9XG4gIHJldHVybiB7XG4gICAgdmFsaWQsXG4gICAgZXhwZWN0ZWRUeXBlXG4gIH07XG59XG5mdW5jdGlvbiBnZXRJbnZhbGlkVHlwZU1lc3NhZ2UobmFtZSwgdmFsdWUsIGV4cGVjdGVkVHlwZXMpIHtcbiAgbGV0IG1lc3NhZ2UgPSBgSW52YWxpZCBwcm9wOiB0eXBlIGNoZWNrIGZhaWxlZCBmb3IgcHJvcCBcIiR7bmFtZX1cIi4gRXhwZWN0ZWQgJHtleHBlY3RlZFR5cGVzLm1hcChjYXBpdGFsaXplKS5qb2luKFwiIHwgXCIpfWA7XG4gIGNvbnN0IGV4cGVjdGVkVHlwZSA9IGV4cGVjdGVkVHlwZXNbMF07XG4gIGNvbnN0IHJlY2VpdmVkVHlwZSA9IHRvUmF3VHlwZSh2YWx1ZSk7XG4gIGNvbnN0IGV4cGVjdGVkVmFsdWUgPSBzdHlsZVZhbHVlKHZhbHVlLCBleHBlY3RlZFR5cGUpO1xuICBjb25zdCByZWNlaXZlZFZhbHVlID0gc3R5bGVWYWx1ZSh2YWx1ZSwgcmVjZWl2ZWRUeXBlKTtcbiAgaWYgKGV4cGVjdGVkVHlwZXMubGVuZ3RoID09PSAxICYmIGlzRXhwbGljYWJsZShleHBlY3RlZFR5cGUpICYmICFpc0Jvb2xlYW4oZXhwZWN0ZWRUeXBlLCByZWNlaXZlZFR5cGUpKSB7XG4gICAgbWVzc2FnZSArPSBgIHdpdGggdmFsdWUgJHtleHBlY3RlZFZhbHVlfWA7XG4gIH1cbiAgbWVzc2FnZSArPSBgLCBnb3QgJHtyZWNlaXZlZFR5cGV9IGA7XG4gIGlmIChpc0V4cGxpY2FibGUocmVjZWl2ZWRUeXBlKSkge1xuICAgIG1lc3NhZ2UgKz0gYHdpdGggdmFsdWUgJHtyZWNlaXZlZFZhbHVlfS5gO1xuICB9XG4gIHJldHVybiBtZXNzYWdlO1xufVxuZnVuY3Rpb24gc3R5bGVWYWx1ZSh2YWx1ZSwgdHlwZSkge1xuICBpZiAodHlwZSA9PT0gXCJTdHJpbmdcIikge1xuICAgIHJldHVybiBgXCIke3ZhbHVlfVwiYDtcbiAgfSBlbHNlIGlmICh0eXBlID09PSBcIk51bWJlclwiKSB7XG4gICAgcmV0dXJuIGAke051bWJlcih2YWx1ZSl9YDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYCR7dmFsdWV9YDtcbiAgfVxufVxuZnVuY3Rpb24gaXNFeHBsaWNhYmxlKHR5cGUpIHtcbiAgY29uc3QgZXhwbGljaXRUeXBlcyA9IFtcInN0cmluZ1wiLCBcIm51bWJlclwiLCBcImJvb2xlYW5cIl07XG4gIHJldHVybiBleHBsaWNpdFR5cGVzLnNvbWUoKGVsZW0pID0+IHR5cGUudG9Mb3dlckNhc2UoKSA9PT0gZWxlbSk7XG59XG5mdW5jdGlvbiBpc0Jvb2xlYW4oLi4uYXJncykge1xuICByZXR1cm4gYXJncy5zb21lKChlbGVtKSA9PiBlbGVtLnRvTG93ZXJDYXNlKCkgPT09IFwiYm9vbGVhblwiKTtcbn1cblxuY29uc3QgaXNJbnRlcm5hbEtleSA9IChrZXkpID0+IGtleVswXSA9PT0gXCJfXCIgfHwga2V5ID09PSBcIiRzdGFibGVcIjtcbmNvbnN0IG5vcm1hbGl6ZVNsb3RWYWx1ZSA9ICh2YWx1ZSkgPT4gaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZS5tYXAobm9ybWFsaXplVk5vZGUpIDogW25vcm1hbGl6ZVZOb2RlKHZhbHVlKV07XG5jb25zdCBub3JtYWxpemVTbG90ID0gKGtleSwgcmF3U2xvdCwgY3R4KSA9PiB7XG4gIGlmIChyYXdTbG90Ll9uKSB7XG4gICAgcmV0dXJuIHJhd1Nsb3Q7XG4gIH1cbiAgY29uc3Qgbm9ybWFsaXplZCA9IHdpdGhDdHgoKC4uLmFyZ3MpID0+IHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmIGN1cnJlbnRJbnN0YW5jZSkge1xuICAgICAgd2FybihcbiAgICAgICAgYFNsb3QgXCIke2tleX1cIiBpbnZva2VkIG91dHNpZGUgb2YgdGhlIHJlbmRlciBmdW5jdGlvbjogdGhpcyB3aWxsIG5vdCB0cmFjayBkZXBlbmRlbmNpZXMgdXNlZCBpbiB0aGUgc2xvdC4gSW52b2tlIHRoZSBzbG90IGZ1bmN0aW9uIGluc2lkZSB0aGUgcmVuZGVyIGZ1bmN0aW9uIGluc3RlYWQuYFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIG5vcm1hbGl6ZVNsb3RWYWx1ZShyYXdTbG90KC4uLmFyZ3MpKTtcbiAgfSwgY3R4KTtcbiAgbm9ybWFsaXplZC5fYyA9IGZhbHNlO1xuICByZXR1cm4gbm9ybWFsaXplZDtcbn07XG5jb25zdCBub3JtYWxpemVPYmplY3RTbG90cyA9IChyYXdTbG90cywgc2xvdHMsIGluc3RhbmNlKSA9PiB7XG4gIGNvbnN0IGN0eCA9IHJhd1Nsb3RzLl9jdHg7XG4gIGZvciAoY29uc3Qga2V5IGluIHJhd1Nsb3RzKSB7XG4gICAgaWYgKGlzSW50ZXJuYWxLZXkoa2V5KSlcbiAgICAgIGNvbnRpbnVlO1xuICAgIGNvbnN0IHZhbHVlID0gcmF3U2xvdHNba2V5XTtcbiAgICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICAgIHNsb3RzW2tleV0gPSBub3JtYWxpemVTbG90KGtleSwgdmFsdWUsIGN0eCk7XG4gICAgfSBlbHNlIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmIHRydWUpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBgTm9uLWZ1bmN0aW9uIHZhbHVlIGVuY291bnRlcmVkIGZvciBzbG90IFwiJHtrZXl9XCIuIFByZWZlciBmdW5jdGlvbiBzbG90cyBmb3IgYmV0dGVyIHBlcmZvcm1hbmNlLmBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG5vcm1hbGl6ZWQgPSBub3JtYWxpemVTbG90VmFsdWUodmFsdWUpO1xuICAgICAgc2xvdHNba2V5XSA9ICgpID0+IG5vcm1hbGl6ZWQ7XG4gICAgfVxuICB9XG59O1xuY29uc3Qgbm9ybWFsaXplVk5vZGVTbG90cyA9IChpbnN0YW5jZSwgY2hpbGRyZW4pID0+IHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiAhaXNLZWVwQWxpdmUoaW5zdGFuY2Uudm5vZGUpICYmIHRydWUpIHtcbiAgICB3YXJuKFxuICAgICAgYE5vbi1mdW5jdGlvbiB2YWx1ZSBlbmNvdW50ZXJlZCBmb3IgZGVmYXVsdCBzbG90LiBQcmVmZXIgZnVuY3Rpb24gc2xvdHMgZm9yIGJldHRlciBwZXJmb3JtYW5jZS5gXG4gICAgKTtcbiAgfVxuICBjb25zdCBub3JtYWxpemVkID0gbm9ybWFsaXplU2xvdFZhbHVlKGNoaWxkcmVuKTtcbiAgaW5zdGFuY2Uuc2xvdHMuZGVmYXVsdCA9ICgpID0+IG5vcm1hbGl6ZWQ7XG59O1xuY29uc3QgaW5pdFNsb3RzID0gKGluc3RhbmNlLCBjaGlsZHJlbikgPT4ge1xuICBpZiAoaW5zdGFuY2Uudm5vZGUuc2hhcGVGbGFnICYgMzIpIHtcbiAgICBjb25zdCB0eXBlID0gY2hpbGRyZW4uXztcbiAgICBpZiAodHlwZSkge1xuICAgICAgaW5zdGFuY2Uuc2xvdHMgPSB0b1JhdyhjaGlsZHJlbik7XG4gICAgICBkZWYoY2hpbGRyZW4sIFwiX1wiLCB0eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbm9ybWFsaXplT2JqZWN0U2xvdHMoXG4gICAgICAgIGNoaWxkcmVuLFxuICAgICAgICBpbnN0YW5jZS5zbG90cyA9IHt9KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaW5zdGFuY2Uuc2xvdHMgPSB7fTtcbiAgICBpZiAoY2hpbGRyZW4pIHtcbiAgICAgIG5vcm1hbGl6ZVZOb2RlU2xvdHMoaW5zdGFuY2UsIGNoaWxkcmVuKTtcbiAgICB9XG4gIH1cbiAgZGVmKGluc3RhbmNlLnNsb3RzLCBJbnRlcm5hbE9iamVjdEtleSwgMSk7XG59O1xuY29uc3QgdXBkYXRlU2xvdHMgPSAoaW5zdGFuY2UsIGNoaWxkcmVuLCBvcHRpbWl6ZWQpID0+IHtcbiAgY29uc3QgeyB2bm9kZSwgc2xvdHMgfSA9IGluc3RhbmNlO1xuICBsZXQgbmVlZERlbGV0aW9uQ2hlY2sgPSB0cnVlO1xuICBsZXQgZGVsZXRpb25Db21wYXJpc29uVGFyZ2V0ID0gRU1QVFlfT0JKO1xuICBpZiAodm5vZGUuc2hhcGVGbGFnICYgMzIpIHtcbiAgICBjb25zdCB0eXBlID0gY2hpbGRyZW4uXztcbiAgICBpZiAodHlwZSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiBpc0htclVwZGF0aW5nKSB7XG4gICAgICAgIGV4dGVuZChzbG90cywgY2hpbGRyZW4pO1xuICAgICAgICB0cmlnZ2VyKGluc3RhbmNlLCBcInNldFwiLCBcIiRzbG90c1wiKTtcbiAgICAgIH0gZWxzZSBpZiAob3B0aW1pemVkICYmIHR5cGUgPT09IDEpIHtcbiAgICAgICAgbmVlZERlbGV0aW9uQ2hlY2sgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGV4dGVuZChzbG90cywgY2hpbGRyZW4pO1xuICAgICAgICBpZiAoIW9wdGltaXplZCAmJiB0eXBlID09PSAxKSB7XG4gICAgICAgICAgZGVsZXRlIHNsb3RzLl87XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbmVlZERlbGV0aW9uQ2hlY2sgPSAhY2hpbGRyZW4uJHN0YWJsZTtcbiAgICAgIG5vcm1hbGl6ZU9iamVjdFNsb3RzKGNoaWxkcmVuLCBzbG90cyk7XG4gICAgfVxuICAgIGRlbGV0aW9uQ29tcGFyaXNvblRhcmdldCA9IGNoaWxkcmVuO1xuICB9IGVsc2UgaWYgKGNoaWxkcmVuKSB7XG4gICAgbm9ybWFsaXplVk5vZGVTbG90cyhpbnN0YW5jZSwgY2hpbGRyZW4pO1xuICAgIGRlbGV0aW9uQ29tcGFyaXNvblRhcmdldCA9IHsgZGVmYXVsdDogMSB9O1xuICB9XG4gIGlmIChuZWVkRGVsZXRpb25DaGVjaykge1xuICAgIGZvciAoY29uc3Qga2V5IGluIHNsb3RzKSB7XG4gICAgICBpZiAoIWlzSW50ZXJuYWxLZXkoa2V5KSAmJiAhKGtleSBpbiBkZWxldGlvbkNvbXBhcmlzb25UYXJnZXQpKSB7XG4gICAgICAgIGRlbGV0ZSBzbG90c1trZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gc2V0UmVmKHJhd1JlZiwgb2xkUmF3UmVmLCBwYXJlbnRTdXNwZW5zZSwgdm5vZGUsIGlzVW5tb3VudCA9IGZhbHNlKSB7XG4gIGlmIChpc0FycmF5KHJhd1JlZikpIHtcbiAgICByYXdSZWYuZm9yRWFjaChcbiAgICAgIChyLCBpKSA9PiBzZXRSZWYoXG4gICAgICAgIHIsXG4gICAgICAgIG9sZFJhd1JlZiAmJiAoaXNBcnJheShvbGRSYXdSZWYpID8gb2xkUmF3UmVmW2ldIDogb2xkUmF3UmVmKSxcbiAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgIHZub2RlLFxuICAgICAgICBpc1VubW91bnRcbiAgICAgIClcbiAgICApO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoaXNBc3luY1dyYXBwZXIodm5vZGUpICYmICFpc1VubW91bnQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgcmVmVmFsdWUgPSB2bm9kZS5zaGFwZUZsYWcgJiA0ID8gZ2V0RXhwb3NlUHJveHkodm5vZGUuY29tcG9uZW50KSB8fCB2bm9kZS5jb21wb25lbnQucHJveHkgOiB2bm9kZS5lbDtcbiAgY29uc3QgdmFsdWUgPSBpc1VubW91bnQgPyBudWxsIDogcmVmVmFsdWU7XG4gIGNvbnN0IHsgaTogb3duZXIsIHI6IHJlZiB9ID0gcmF3UmVmO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmICFvd25lcikge1xuICAgIHdhcm4oXG4gICAgICBgTWlzc2luZyByZWYgb3duZXIgY29udGV4dC4gcmVmIGNhbm5vdCBiZSB1c2VkIG9uIGhvaXN0ZWQgdm5vZGVzLiBBIHZub2RlIHdpdGggcmVmIG11c3QgYmUgY3JlYXRlZCBpbnNpZGUgdGhlIHJlbmRlciBmdW5jdGlvbi5gXG4gICAgKTtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3Qgb2xkUmVmID0gb2xkUmF3UmVmICYmIG9sZFJhd1JlZi5yO1xuICBjb25zdCByZWZzID0gb3duZXIucmVmcyA9PT0gRU1QVFlfT0JKID8gb3duZXIucmVmcyA9IHt9IDogb3duZXIucmVmcztcbiAgY29uc3Qgc2V0dXBTdGF0ZSA9IG93bmVyLnNldHVwU3RhdGU7XG4gIGlmIChvbGRSZWYgIT0gbnVsbCAmJiBvbGRSZWYgIT09IHJlZikge1xuICAgIGlmIChpc1N0cmluZyhvbGRSZWYpKSB7XG4gICAgICByZWZzW29sZFJlZl0gPSBudWxsO1xuICAgICAgaWYgKGhhc093bihzZXR1cFN0YXRlLCBvbGRSZWYpKSB7XG4gICAgICAgIHNldHVwU3RhdGVbb2xkUmVmXSA9IG51bGw7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1JlZihvbGRSZWYpKSB7XG4gICAgICBvbGRSZWYudmFsdWUgPSBudWxsO1xuICAgIH1cbiAgfVxuICBpZiAoaXNGdW5jdGlvbihyZWYpKSB7XG4gICAgY2FsbFdpdGhFcnJvckhhbmRsaW5nKHJlZiwgb3duZXIsIDEyLCBbdmFsdWUsIHJlZnNdKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBfaXNTdHJpbmcgPSBpc1N0cmluZyhyZWYpO1xuICAgIGNvbnN0IF9pc1JlZiA9IGlzUmVmKHJlZik7XG4gICAgaWYgKF9pc1N0cmluZyB8fCBfaXNSZWYpIHtcbiAgICAgIGNvbnN0IGRvU2V0ID0gKCkgPT4ge1xuICAgICAgICBpZiAocmF3UmVmLmYpIHtcbiAgICAgICAgICBjb25zdCBleGlzdGluZyA9IF9pc1N0cmluZyA/IGhhc093bihzZXR1cFN0YXRlLCByZWYpID8gc2V0dXBTdGF0ZVtyZWZdIDogcmVmc1tyZWZdIDogcmVmLnZhbHVlO1xuICAgICAgICAgIGlmIChpc1VubW91bnQpIHtcbiAgICAgICAgICAgIGlzQXJyYXkoZXhpc3RpbmcpICYmIHJlbW92ZShleGlzdGluZywgcmVmVmFsdWUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIWlzQXJyYXkoZXhpc3RpbmcpKSB7XG4gICAgICAgICAgICAgIGlmIChfaXNTdHJpbmcpIHtcbiAgICAgICAgICAgICAgICByZWZzW3JlZl0gPSBbcmVmVmFsdWVdO1xuICAgICAgICAgICAgICAgIGlmIChoYXNPd24oc2V0dXBTdGF0ZSwgcmVmKSkge1xuICAgICAgICAgICAgICAgICAgc2V0dXBTdGF0ZVtyZWZdID0gcmVmc1tyZWZdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZWYudmFsdWUgPSBbcmVmVmFsdWVdO1xuICAgICAgICAgICAgICAgIGlmIChyYXdSZWYuaylcbiAgICAgICAgICAgICAgICAgIHJlZnNbcmF3UmVmLmtdID0gcmVmLnZhbHVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFleGlzdGluZy5pbmNsdWRlcyhyZWZWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgZXhpc3RpbmcucHVzaChyZWZWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKF9pc1N0cmluZykge1xuICAgICAgICAgIHJlZnNbcmVmXSA9IHZhbHVlO1xuICAgICAgICAgIGlmIChoYXNPd24oc2V0dXBTdGF0ZSwgcmVmKSkge1xuICAgICAgICAgICAgc2V0dXBTdGF0ZVtyZWZdID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKF9pc1JlZikge1xuICAgICAgICAgIHJlZi52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgIGlmIChyYXdSZWYuaylcbiAgICAgICAgICAgIHJlZnNbcmF3UmVmLmtdID0gdmFsdWU7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgd2FybihcIkludmFsaWQgdGVtcGxhdGUgcmVmIHR5cGU6XCIsIHJlZiwgYCgke3R5cGVvZiByZWZ9KWApO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIGRvU2V0LmlkID0gLTE7XG4gICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdChkb1NldCwgcGFyZW50U3VzcGVuc2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZG9TZXQoKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgd2FybihcIkludmFsaWQgdGVtcGxhdGUgcmVmIHR5cGU6XCIsIHJlZiwgYCgke3R5cGVvZiByZWZ9KWApO1xuICAgIH1cbiAgfVxufVxuXG5sZXQgaGFzTWlzbWF0Y2ggPSBmYWxzZTtcbmNvbnN0IGlzU1ZHQ29udGFpbmVyID0gKGNvbnRhaW5lcikgPT4gL3N2Zy8udGVzdChjb250YWluZXIubmFtZXNwYWNlVVJJKSAmJiBjb250YWluZXIudGFnTmFtZSAhPT0gXCJmb3JlaWduT2JqZWN0XCI7XG5jb25zdCBpc0NvbW1lbnQgPSAobm9kZSkgPT4gbm9kZS5ub2RlVHlwZSA9PT0gOCAvKiBDT01NRU5UICovO1xuZnVuY3Rpb24gY3JlYXRlSHlkcmF0aW9uRnVuY3Rpb25zKHJlbmRlcmVySW50ZXJuYWxzKSB7XG4gIGNvbnN0IHtcbiAgICBtdDogbW91bnRDb21wb25lbnQsXG4gICAgcDogcGF0Y2gsXG4gICAgbzoge1xuICAgICAgcGF0Y2hQcm9wLFxuICAgICAgY3JlYXRlVGV4dCxcbiAgICAgIG5leHRTaWJsaW5nLFxuICAgICAgcGFyZW50Tm9kZSxcbiAgICAgIHJlbW92ZSxcbiAgICAgIGluc2VydCxcbiAgICAgIGNyZWF0ZUNvbW1lbnRcbiAgICB9XG4gIH0gPSByZW5kZXJlckludGVybmFscztcbiAgY29uc3QgaHlkcmF0ZSA9ICh2bm9kZSwgY29udGFpbmVyKSA9PiB7XG4gICAgaWYgKCFjb250YWluZXIuaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgd2FybihcbiAgICAgICAgYEF0dGVtcHRpbmcgdG8gaHlkcmF0ZSBleGlzdGluZyBtYXJrdXAgYnV0IGNvbnRhaW5lciBpcyBlbXB0eS4gUGVyZm9ybWluZyBmdWxsIG1vdW50IGluc3RlYWQuYFxuICAgICAgKTtcbiAgICAgIHBhdGNoKG51bGwsIHZub2RlLCBjb250YWluZXIpO1xuICAgICAgZmx1c2hQb3N0Rmx1c2hDYnMoKTtcbiAgICAgIGNvbnRhaW5lci5fdm5vZGUgPSB2bm9kZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaGFzTWlzbWF0Y2ggPSBmYWxzZTtcbiAgICBoeWRyYXRlTm9kZShjb250YWluZXIuZmlyc3RDaGlsZCwgdm5vZGUsIG51bGwsIG51bGwsIG51bGwpO1xuICAgIGZsdXNoUG9zdEZsdXNoQ2JzKCk7XG4gICAgY29udGFpbmVyLl92bm9kZSA9IHZub2RlO1xuICAgIGlmIChoYXNNaXNtYXRjaCAmJiB0cnVlKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGBIeWRyYXRpb24gY29tcGxldGVkIGJ1dCBjb250YWlucyBtaXNtYXRjaGVzLmApO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgaHlkcmF0ZU5vZGUgPSAobm9kZSwgdm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkID0gZmFsc2UpID0+IHtcbiAgICBjb25zdCBpc0ZyYWdtZW50U3RhcnQgPSBpc0NvbW1lbnQobm9kZSkgJiYgbm9kZS5kYXRhID09PSBcIltcIjtcbiAgICBjb25zdCBvbk1pc21hdGNoID0gKCkgPT4gaGFuZGxlTWlzbWF0Y2goXG4gICAgICBub2RlLFxuICAgICAgdm5vZGUsXG4gICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgIGlzRnJhZ21lbnRTdGFydFxuICAgICk7XG4gICAgY29uc3QgeyB0eXBlLCByZWYsIHNoYXBlRmxhZywgcGF0Y2hGbGFnIH0gPSB2bm9kZTtcbiAgICBsZXQgZG9tVHlwZSA9IG5vZGUubm9kZVR5cGU7XG4gICAgdm5vZGUuZWwgPSBub2RlO1xuICAgIGlmIChwYXRjaEZsYWcgPT09IC0yKSB7XG4gICAgICBvcHRpbWl6ZWQgPSBmYWxzZTtcbiAgICAgIHZub2RlLmR5bmFtaWNDaGlsZHJlbiA9IG51bGw7XG4gICAgfVxuICAgIGxldCBuZXh0Tm9kZSA9IG51bGw7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIFRleHQ6XG4gICAgICAgIGlmIChkb21UeXBlICE9PSAzIC8qIFRFWFQgKi8pIHtcbiAgICAgICAgICBpZiAodm5vZGUuY2hpbGRyZW4gPT09IFwiXCIpIHtcbiAgICAgICAgICAgIGluc2VydCh2bm9kZS5lbCA9IGNyZWF0ZVRleHQoXCJcIiksIHBhcmVudE5vZGUobm9kZSksIG5vZGUpO1xuICAgICAgICAgICAgbmV4dE5vZGUgPSBub2RlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXh0Tm9kZSA9IG9uTWlzbWF0Y2goKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKG5vZGUuZGF0YSAhPT0gdm5vZGUuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIGhhc01pc21hdGNoID0gdHJ1ZTtcbiAgICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiB3YXJuKFxuICAgICAgICAgICAgICBgSHlkcmF0aW9uIHRleHQgbWlzbWF0Y2g6XG4tIENsaWVudDogJHtKU09OLnN0cmluZ2lmeShub2RlLmRhdGEpfVxuLSBTZXJ2ZXI6ICR7SlNPTi5zdHJpbmdpZnkodm5vZGUuY2hpbGRyZW4pfWBcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBub2RlLmRhdGEgPSB2bm9kZS5jaGlsZHJlbjtcbiAgICAgICAgICB9XG4gICAgICAgICAgbmV4dE5vZGUgPSBuZXh0U2libGluZyhub2RlKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgQ29tbWVudDpcbiAgICAgICAgaWYgKGRvbVR5cGUgIT09IDggLyogQ09NTUVOVCAqLyB8fCBpc0ZyYWdtZW50U3RhcnQpIHtcbiAgICAgICAgICBuZXh0Tm9kZSA9IG9uTWlzbWF0Y2goKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXh0Tm9kZSA9IG5leHRTaWJsaW5nKG5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBTdGF0aWM6XG4gICAgICAgIGlmIChpc0ZyYWdtZW50U3RhcnQpIHtcbiAgICAgICAgICBub2RlID0gbmV4dFNpYmxpbmcobm9kZSk7XG4gICAgICAgICAgZG9tVHlwZSA9IG5vZGUubm9kZVR5cGU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRvbVR5cGUgPT09IDEgLyogRUxFTUVOVCAqLyB8fCBkb21UeXBlID09PSAzIC8qIFRFWFQgKi8pIHtcbiAgICAgICAgICBuZXh0Tm9kZSA9IG5vZGU7XG4gICAgICAgICAgY29uc3QgbmVlZFRvQWRvcHRDb250ZW50ID0gIXZub2RlLmNoaWxkcmVuLmxlbmd0aDtcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZub2RlLnN0YXRpY0NvdW50OyBpKyspIHtcbiAgICAgICAgICAgIGlmIChuZWVkVG9BZG9wdENvbnRlbnQpXG4gICAgICAgICAgICAgIHZub2RlLmNoaWxkcmVuICs9IG5leHROb2RlLm5vZGVUeXBlID09PSAxIC8qIEVMRU1FTlQgKi8gPyBuZXh0Tm9kZS5vdXRlckhUTUwgOiBuZXh0Tm9kZS5kYXRhO1xuICAgICAgICAgICAgaWYgKGkgPT09IHZub2RlLnN0YXRpY0NvdW50IC0gMSkge1xuICAgICAgICAgICAgICB2bm9kZS5hbmNob3IgPSBuZXh0Tm9kZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5leHROb2RlID0gbmV4dFNpYmxpbmcobmV4dE5vZGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gaXNGcmFnbWVudFN0YXJ0ID8gbmV4dFNpYmxpbmcobmV4dE5vZGUpIDogbmV4dE5vZGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb25NaXNtYXRjaCgpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBGcmFnbWVudDpcbiAgICAgICAgaWYgKCFpc0ZyYWdtZW50U3RhcnQpIHtcbiAgICAgICAgICBuZXh0Tm9kZSA9IG9uTWlzbWF0Y2goKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXh0Tm9kZSA9IGh5ZHJhdGVGcmFnbWVudChcbiAgICAgICAgICAgIG5vZGUsXG4gICAgICAgICAgICB2bm9kZSxcbiAgICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICAgICAgb3B0aW1pemVkXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChzaGFwZUZsYWcgJiAxKSB7XG4gICAgICAgICAgaWYgKGRvbVR5cGUgIT09IDEgLyogRUxFTUVOVCAqLyB8fCB2bm9kZS50eXBlLnRvTG93ZXJDYXNlKCkgIT09IG5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgICBuZXh0Tm9kZSA9IG9uTWlzbWF0Y2goKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV4dE5vZGUgPSBoeWRyYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgbm9kZSxcbiAgICAgICAgICAgICAgdm5vZGUsXG4gICAgICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgICAgICAgb3B0aW1pemVkXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChzaGFwZUZsYWcgJiA2KSB7XG4gICAgICAgICAgdm5vZGUuc2xvdFNjb3BlSWRzID0gc2xvdFNjb3BlSWRzO1xuICAgICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHBhcmVudE5vZGUobm9kZSk7XG4gICAgICAgICAgbW91bnRDb21wb25lbnQoXG4gICAgICAgICAgICB2bm9kZSxcbiAgICAgICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICAgIGlzU1ZHQ29udGFpbmVyKGNvbnRhaW5lciksXG4gICAgICAgICAgICBvcHRpbWl6ZWRcbiAgICAgICAgICApO1xuICAgICAgICAgIG5leHROb2RlID0gaXNGcmFnbWVudFN0YXJ0ID8gbG9jYXRlQ2xvc2luZ0FzeW5jQW5jaG9yKG5vZGUpIDogbmV4dFNpYmxpbmcobm9kZSk7XG4gICAgICAgICAgaWYgKG5leHROb2RlICYmIGlzQ29tbWVudChuZXh0Tm9kZSkgJiYgbmV4dE5vZGUuZGF0YSA9PT0gXCJ0ZWxlcG9ydCBlbmRcIikge1xuICAgICAgICAgICAgbmV4dE5vZGUgPSBuZXh0U2libGluZyhuZXh0Tm9kZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpc0FzeW5jV3JhcHBlcih2bm9kZSkpIHtcbiAgICAgICAgICAgIGxldCBzdWJUcmVlO1xuICAgICAgICAgICAgaWYgKGlzRnJhZ21lbnRTdGFydCkge1xuICAgICAgICAgICAgICBzdWJUcmVlID0gY3JlYXRlVk5vZGUoRnJhZ21lbnQpO1xuICAgICAgICAgICAgICBzdWJUcmVlLmFuY2hvciA9IG5leHROb2RlID8gbmV4dE5vZGUucHJldmlvdXNTaWJsaW5nIDogY29udGFpbmVyLmxhc3RDaGlsZDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHN1YlRyZWUgPSBub2RlLm5vZGVUeXBlID09PSAzID8gY3JlYXRlVGV4dFZOb2RlKFwiXCIpIDogY3JlYXRlVk5vZGUoXCJkaXZcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdWJUcmVlLmVsID0gbm9kZTtcbiAgICAgICAgICAgIHZub2RlLmNvbXBvbmVudC5zdWJUcmVlID0gc3ViVHJlZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoc2hhcGVGbGFnICYgNjQpIHtcbiAgICAgICAgICBpZiAoZG9tVHlwZSAhPT0gOCAvKiBDT01NRU5UICovKSB7XG4gICAgICAgICAgICBuZXh0Tm9kZSA9IG9uTWlzbWF0Y2goKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV4dE5vZGUgPSB2bm9kZS50eXBlLmh5ZHJhdGUoXG4gICAgICAgICAgICAgIG5vZGUsXG4gICAgICAgICAgICAgIHZub2RlLFxuICAgICAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgICAgICAgIG9wdGltaXplZCxcbiAgICAgICAgICAgICAgcmVuZGVyZXJJbnRlcm5hbHMsXG4gICAgICAgICAgICAgIGh5ZHJhdGVDaGlsZHJlblxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoc2hhcGVGbGFnICYgMTI4KSB7XG4gICAgICAgICAgbmV4dE5vZGUgPSB2bm9kZS50eXBlLmh5ZHJhdGUoXG4gICAgICAgICAgICBub2RlLFxuICAgICAgICAgICAgdm5vZGUsXG4gICAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICAgIGlzU1ZHQ29udGFpbmVyKHBhcmVudE5vZGUobm9kZSkpLFxuICAgICAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICAgICAgb3B0aW1pemVkLFxuICAgICAgICAgICAgcmVuZGVyZXJJbnRlcm5hbHMsXG4gICAgICAgICAgICBoeWRyYXRlTm9kZVxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgd2FybihcIkludmFsaWQgSG9zdFZOb2RlIHR5cGU6XCIsIHR5cGUsIGAoJHt0eXBlb2YgdHlwZX0pYCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHJlZiAhPSBudWxsKSB7XG4gICAgICBzZXRSZWYocmVmLCBudWxsLCBwYXJlbnRTdXNwZW5zZSwgdm5vZGUpO1xuICAgIH1cbiAgICByZXR1cm4gbmV4dE5vZGU7XG4gIH07XG4gIGNvbnN0IGh5ZHJhdGVFbGVtZW50ID0gKGVsLCB2bm9kZSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpID0+IHtcbiAgICBvcHRpbWl6ZWQgPSBvcHRpbWl6ZWQgfHwgISF2bm9kZS5keW5hbWljQ2hpbGRyZW47XG4gICAgY29uc3QgeyB0eXBlLCBwcm9wcywgcGF0Y2hGbGFnLCBzaGFwZUZsYWcsIGRpcnMgfSA9IHZub2RlO1xuICAgIGNvbnN0IGZvcmNlUGF0Y2hWYWx1ZSA9IHR5cGUgPT09IFwiaW5wdXRcIiAmJiBkaXJzIHx8IHR5cGUgPT09IFwib3B0aW9uXCI7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiB8fCBmb3JjZVBhdGNoVmFsdWUgfHwgcGF0Y2hGbGFnICE9PSAtMSkge1xuICAgICAgaWYgKGRpcnMpIHtcbiAgICAgICAgaW52b2tlRGlyZWN0aXZlSG9vayh2bm9kZSwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBcImNyZWF0ZWRcIik7XG4gICAgICB9XG4gICAgICBpZiAocHJvcHMpIHtcbiAgICAgICAgaWYgKGZvcmNlUGF0Y2hWYWx1ZSB8fCAhb3B0aW1pemVkIHx8IHBhdGNoRmxhZyAmICgxNiB8IDMyKSkge1xuICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHByb3BzKSB7XG4gICAgICAgICAgICBpZiAoZm9yY2VQYXRjaFZhbHVlICYmIGtleS5lbmRzV2l0aChcInZhbHVlXCIpIHx8IGlzT24oa2V5KSAmJiAhaXNSZXNlcnZlZFByb3Aoa2V5KSkge1xuICAgICAgICAgICAgICBwYXRjaFByb3AoXG4gICAgICAgICAgICAgICAgZWwsXG4gICAgICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgcHJvcHNba2V5XSxcbiAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICB2b2lkIDAsXG4gICAgICAgICAgICAgICAgcGFyZW50Q29tcG9uZW50XG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHByb3BzLm9uQ2xpY2spIHtcbiAgICAgICAgICBwYXRjaFByb3AoXG4gICAgICAgICAgICBlbCxcbiAgICAgICAgICAgIFwib25DbGlja1wiLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIHByb3BzLm9uQ2xpY2ssXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIHZvaWQgMCxcbiAgICAgICAgICAgIHBhcmVudENvbXBvbmVudFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxldCB2bm9kZUhvb2tzO1xuICAgICAgaWYgKHZub2RlSG9va3MgPSBwcm9wcyAmJiBwcm9wcy5vblZub2RlQmVmb3JlTW91bnQpIHtcbiAgICAgICAgaW52b2tlVk5vZGVIb29rKHZub2RlSG9va3MsIHBhcmVudENvbXBvbmVudCwgdm5vZGUpO1xuICAgICAgfVxuICAgICAgaWYgKGRpcnMpIHtcbiAgICAgICAgaW52b2tlRGlyZWN0aXZlSG9vayh2bm9kZSwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBcImJlZm9yZU1vdW50XCIpO1xuICAgICAgfVxuICAgICAgaWYgKCh2bm9kZUhvb2tzID0gcHJvcHMgJiYgcHJvcHMub25Wbm9kZU1vdW50ZWQpIHx8IGRpcnMpIHtcbiAgICAgICAgcXVldWVFZmZlY3RXaXRoU3VzcGVuc2UoKCkgPT4ge1xuICAgICAgICAgIHZub2RlSG9va3MgJiYgaW52b2tlVk5vZGVIb29rKHZub2RlSG9va3MsIHBhcmVudENvbXBvbmVudCwgdm5vZGUpO1xuICAgICAgICAgIGRpcnMgJiYgaW52b2tlRGlyZWN0aXZlSG9vayh2bm9kZSwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBcIm1vdW50ZWRcIik7XG4gICAgICAgIH0sIHBhcmVudFN1c3BlbnNlKTtcbiAgICAgIH1cbiAgICAgIGlmIChzaGFwZUZsYWcgJiAxNiAmJiAvLyBza2lwIGlmIGVsZW1lbnQgaGFzIGlubmVySFRNTCAvIHRleHRDb250ZW50XG4gICAgICAhKHByb3BzICYmIChwcm9wcy5pbm5lckhUTUwgfHwgcHJvcHMudGV4dENvbnRlbnQpKSkge1xuICAgICAgICBsZXQgbmV4dCA9IGh5ZHJhdGVDaGlsZHJlbihcbiAgICAgICAgICBlbC5maXJzdENoaWxkLFxuICAgICAgICAgIHZub2RlLFxuICAgICAgICAgIGVsLFxuICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgICAgb3B0aW1pemVkXG4gICAgICAgICk7XG4gICAgICAgIGxldCBoYXNXYXJuZWQgPSBmYWxzZTtcbiAgICAgICAgd2hpbGUgKG5leHQpIHtcbiAgICAgICAgICBoYXNNaXNtYXRjaCA9IHRydWU7XG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiAhaGFzV2FybmVkKSB7XG4gICAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgICBgSHlkcmF0aW9uIGNoaWxkcmVuIG1pc21hdGNoIGluIDwke3Zub2RlLnR5cGV9Pjogc2VydmVyIHJlbmRlcmVkIGVsZW1lbnQgY29udGFpbnMgbW9yZSBjaGlsZCBub2RlcyB0aGFuIGNsaWVudCB2ZG9tLmBcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBoYXNXYXJuZWQgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBjdXIgPSBuZXh0O1xuICAgICAgICAgIG5leHQgPSBuZXh0Lm5leHRTaWJsaW5nO1xuICAgICAgICAgIHJlbW92ZShjdXIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHNoYXBlRmxhZyAmIDgpIHtcbiAgICAgICAgaWYgKGVsLnRleHRDb250ZW50ICE9PSB2bm9kZS5jaGlsZHJlbikge1xuICAgICAgICAgIGhhc01pc21hdGNoID0gdHJ1ZTtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgd2FybihcbiAgICAgICAgICAgIGBIeWRyYXRpb24gdGV4dCBjb250ZW50IG1pc21hdGNoIGluIDwke3Zub2RlLnR5cGV9Pjpcbi0gQ2xpZW50OiAke2VsLnRleHRDb250ZW50fVxuLSBTZXJ2ZXI6ICR7dm5vZGUuY2hpbGRyZW59YFxuICAgICAgICAgICk7XG4gICAgICAgICAgZWwudGV4dENvbnRlbnQgPSB2bm9kZS5jaGlsZHJlbjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZWwubmV4dFNpYmxpbmc7XG4gIH07XG4gIGNvbnN0IGh5ZHJhdGVDaGlsZHJlbiA9IChub2RlLCBwYXJlbnRWTm9kZSwgY29udGFpbmVyLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCkgPT4ge1xuICAgIG9wdGltaXplZCA9IG9wdGltaXplZCB8fCAhIXBhcmVudFZOb2RlLmR5bmFtaWNDaGlsZHJlbjtcbiAgICBjb25zdCBjaGlsZHJlbiA9IHBhcmVudFZOb2RlLmNoaWxkcmVuO1xuICAgIGNvbnN0IGwgPSBjaGlsZHJlbi5sZW5ndGg7XG4gICAgbGV0IGhhc1dhcm5lZCA9IGZhbHNlO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICBjb25zdCB2bm9kZSA9IG9wdGltaXplZCA/IGNoaWxkcmVuW2ldIDogY2hpbGRyZW5baV0gPSBub3JtYWxpemVWTm9kZShjaGlsZHJlbltpXSk7XG4gICAgICBpZiAobm9kZSkge1xuICAgICAgICBub2RlID0gaHlkcmF0ZU5vZGUoXG4gICAgICAgICAgbm9kZSxcbiAgICAgICAgICB2bm9kZSxcbiAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICAgIG9wdGltaXplZFxuICAgICAgICApO1xuICAgICAgfSBlbHNlIGlmICh2bm9kZS50eXBlID09PSBUZXh0ICYmICF2bm9kZS5jaGlsZHJlbikge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGhhc01pc21hdGNoID0gdHJ1ZTtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiAhaGFzV2FybmVkKSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgIGBIeWRyYXRpb24gY2hpbGRyZW4gbWlzbWF0Y2ggaW4gPCR7Y29udGFpbmVyLnRhZ05hbWUudG9Mb3dlckNhc2UoKX0+OiBzZXJ2ZXIgcmVuZGVyZWQgZWxlbWVudCBjb250YWlucyBmZXdlciBjaGlsZCBub2RlcyB0aGFuIGNsaWVudCB2ZG9tLmBcbiAgICAgICAgICApO1xuICAgICAgICAgIGhhc1dhcm5lZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcGF0Y2goXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICB2bm9kZSxcbiAgICAgICAgICBjb250YWluZXIsXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgICAgaXNTVkdDb250YWluZXIoY29udGFpbmVyKSxcbiAgICAgICAgICBzbG90U2NvcGVJZHNcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5vZGU7XG4gIH07XG4gIGNvbnN0IGh5ZHJhdGVGcmFnbWVudCA9IChub2RlLCB2bm9kZSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpID0+IHtcbiAgICBjb25zdCB7IHNsb3RTY29wZUlkczogZnJhZ21lbnRTbG90U2NvcGVJZHMgfSA9IHZub2RlO1xuICAgIGlmIChmcmFnbWVudFNsb3RTY29wZUlkcykge1xuICAgICAgc2xvdFNjb3BlSWRzID0gc2xvdFNjb3BlSWRzID8gc2xvdFNjb3BlSWRzLmNvbmNhdChmcmFnbWVudFNsb3RTY29wZUlkcykgOiBmcmFnbWVudFNsb3RTY29wZUlkcztcbiAgICB9XG4gICAgY29uc3QgY29udGFpbmVyID0gcGFyZW50Tm9kZShub2RlKTtcbiAgICBjb25zdCBuZXh0ID0gaHlkcmF0ZUNoaWxkcmVuKFxuICAgICAgbmV4dFNpYmxpbmcobm9kZSksXG4gICAgICB2bm9kZSxcbiAgICAgIGNvbnRhaW5lcixcbiAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgb3B0aW1pemVkXG4gICAgKTtcbiAgICBpZiAobmV4dCAmJiBpc0NvbW1lbnQobmV4dCkgJiYgbmV4dC5kYXRhID09PSBcIl1cIikge1xuICAgICAgcmV0dXJuIG5leHRTaWJsaW5nKHZub2RlLmFuY2hvciA9IG5leHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBoYXNNaXNtYXRjaCA9IHRydWU7XG4gICAgICBpbnNlcnQodm5vZGUuYW5jaG9yID0gY3JlYXRlQ29tbWVudChgXWApLCBjb250YWluZXIsIG5leHQpO1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfVxuICB9O1xuICBjb25zdCBoYW5kbGVNaXNtYXRjaCA9IChub2RlLCB2bm9kZSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgc2xvdFNjb3BlSWRzLCBpc0ZyYWdtZW50KSA9PiB7XG4gICAgaGFzTWlzbWF0Y2ggPSB0cnVlO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiB3YXJuKFxuICAgICAgYEh5ZHJhdGlvbiBub2RlIG1pc21hdGNoOlxuLSBDbGllbnQgdm5vZGU6YCxcbiAgICAgIHZub2RlLnR5cGUsXG4gICAgICBgXG4tIFNlcnZlciByZW5kZXJlZCBET006YCxcbiAgICAgIG5vZGUsXG4gICAgICBub2RlLm5vZGVUeXBlID09PSAzIC8qIFRFWFQgKi8gPyBgKHRleHQpYCA6IGlzQ29tbWVudChub2RlKSAmJiBub2RlLmRhdGEgPT09IFwiW1wiID8gYChzdGFydCBvZiBmcmFnbWVudClgIDogYGBcbiAgICApO1xuICAgIHZub2RlLmVsID0gbnVsbDtcbiAgICBpZiAoaXNGcmFnbWVudCkge1xuICAgICAgY29uc3QgZW5kID0gbG9jYXRlQ2xvc2luZ0FzeW5jQW5jaG9yKG5vZGUpO1xuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgY29uc3QgbmV4dDIgPSBuZXh0U2libGluZyhub2RlKTtcbiAgICAgICAgaWYgKG5leHQyICYmIG5leHQyICE9PSBlbmQpIHtcbiAgICAgICAgICByZW1vdmUobmV4dDIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IG5leHQgPSBuZXh0U2libGluZyhub2RlKTtcbiAgICBjb25zdCBjb250YWluZXIgPSBwYXJlbnROb2RlKG5vZGUpO1xuICAgIHJlbW92ZShub2RlKTtcbiAgICBwYXRjaChcbiAgICAgIG51bGwsXG4gICAgICB2bm9kZSxcbiAgICAgIGNvbnRhaW5lcixcbiAgICAgIG5leHQsXG4gICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgIGlzU1ZHQ29udGFpbmVyKGNvbnRhaW5lciksXG4gICAgICBzbG90U2NvcGVJZHNcbiAgICApO1xuICAgIHJldHVybiBuZXh0O1xuICB9O1xuICBjb25zdCBsb2NhdGVDbG9zaW5nQXN5bmNBbmNob3IgPSAobm9kZSkgPT4ge1xuICAgIGxldCBtYXRjaCA9IDA7XG4gICAgd2hpbGUgKG5vZGUpIHtcbiAgICAgIG5vZGUgPSBuZXh0U2libGluZyhub2RlKTtcbiAgICAgIGlmIChub2RlICYmIGlzQ29tbWVudChub2RlKSkge1xuICAgICAgICBpZiAobm9kZS5kYXRhID09PSBcIltcIilcbiAgICAgICAgICBtYXRjaCsrO1xuICAgICAgICBpZiAobm9kZS5kYXRhID09PSBcIl1cIikge1xuICAgICAgICAgIGlmIChtYXRjaCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIG5leHRTaWJsaW5nKG5vZGUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtYXRjaC0tO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbm9kZTtcbiAgfTtcbiAgcmV0dXJuIFtoeWRyYXRlLCBoeWRyYXRlTm9kZV07XG59XG5cbmxldCBzdXBwb3J0ZWQ7XG5sZXQgcGVyZjtcbmZ1bmN0aW9uIHN0YXJ0TWVhc3VyZShpbnN0YW5jZSwgdHlwZSkge1xuICBpZiAoaW5zdGFuY2UuYXBwQ29udGV4dC5jb25maWcucGVyZm9ybWFuY2UgJiYgaXNTdXBwb3J0ZWQoKSkge1xuICAgIHBlcmYubWFyayhgdnVlLSR7dHlwZX0tJHtpbnN0YW5jZS51aWR9YCk7XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiB8fCBfX1ZVRV9QUk9EX0RFVlRPT0xTX18pIHtcbiAgICBkZXZ0b29sc1BlcmZTdGFydChpbnN0YW5jZSwgdHlwZSwgaXNTdXBwb3J0ZWQoKSA/IHBlcmYubm93KCkgOiBEYXRlLm5vdygpKTtcbiAgfVxufVxuZnVuY3Rpb24gZW5kTWVhc3VyZShpbnN0YW5jZSwgdHlwZSkge1xuICBpZiAoaW5zdGFuY2UuYXBwQ29udGV4dC5jb25maWcucGVyZm9ybWFuY2UgJiYgaXNTdXBwb3J0ZWQoKSkge1xuICAgIGNvbnN0IHN0YXJ0VGFnID0gYHZ1ZS0ke3R5cGV9LSR7aW5zdGFuY2UudWlkfWA7XG4gICAgY29uc3QgZW5kVGFnID0gc3RhcnRUYWcgKyBgOmVuZGA7XG4gICAgcGVyZi5tYXJrKGVuZFRhZyk7XG4gICAgcGVyZi5tZWFzdXJlKFxuICAgICAgYDwke2Zvcm1hdENvbXBvbmVudE5hbWUoaW5zdGFuY2UsIGluc3RhbmNlLnR5cGUpfT4gJHt0eXBlfWAsXG4gICAgICBzdGFydFRhZyxcbiAgICAgIGVuZFRhZ1xuICAgICk7XG4gICAgcGVyZi5jbGVhck1hcmtzKHN0YXJ0VGFnKTtcbiAgICBwZXJmLmNsZWFyTWFya3MoZW5kVGFnKTtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xuICAgIGRldnRvb2xzUGVyZkVuZChpbnN0YW5jZSwgdHlwZSwgaXNTdXBwb3J0ZWQoKSA/IHBlcmYubm93KCkgOiBEYXRlLm5vdygpKTtcbiAgfVxufVxuZnVuY3Rpb24gaXNTdXBwb3J0ZWQoKSB7XG4gIGlmIChzdXBwb3J0ZWQgIT09IHZvaWQgMCkge1xuICAgIHJldHVybiBzdXBwb3J0ZWQ7XG4gIH1cbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93LnBlcmZvcm1hbmNlKSB7XG4gICAgc3VwcG9ydGVkID0gdHJ1ZTtcbiAgICBwZXJmID0gd2luZG93LnBlcmZvcm1hbmNlO1xuICB9IGVsc2Uge1xuICAgIHN1cHBvcnRlZCA9IGZhbHNlO1xuICB9XG4gIHJldHVybiBzdXBwb3J0ZWQ7XG59XG5cbmZ1bmN0aW9uIGluaXRGZWF0dXJlRmxhZ3MoKSB7XG4gIGNvbnN0IG5lZWRXYXJuID0gW107XG4gIGlmICh0eXBlb2YgX19WVUVfT1BUSU9OU19BUElfXyAhPT0gXCJib29sZWFuXCIpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgbmVlZFdhcm4ucHVzaChgX19WVUVfT1BUSU9OU19BUElfX2ApO1xuICAgIGdldEdsb2JhbFRoaXMoKS5fX1ZVRV9PUFRJT05TX0FQSV9fID0gdHJ1ZTtcbiAgfVxuICBpZiAodHlwZW9mIF9fVlVFX1BST0RfREVWVE9PTFNfXyAhPT0gXCJib29sZWFuXCIpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgbmVlZFdhcm4ucHVzaChgX19WVUVfUFJPRF9ERVZUT09MU19fYCk7XG4gICAgZ2V0R2xvYmFsVGhpcygpLl9fVlVFX1BST0RfREVWVE9PTFNfXyA9IGZhbHNlO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgbmVlZFdhcm4ubGVuZ3RoKSB7XG4gICAgY29uc3QgbXVsdGkgPSBuZWVkV2Fybi5sZW5ndGggPiAxO1xuICAgIGNvbnNvbGUud2FybihcbiAgICAgIGBGZWF0dXJlIGZsYWcke211bHRpID8gYHNgIDogYGB9ICR7bmVlZFdhcm4uam9pbihcIiwgXCIpfSAke211bHRpID8gYGFyZWAgOiBgaXNgfSBub3QgZXhwbGljaXRseSBkZWZpbmVkLiBZb3UgYXJlIHJ1bm5pbmcgdGhlIGVzbS1idW5kbGVyIGJ1aWxkIG9mIFZ1ZSwgd2hpY2ggZXhwZWN0cyB0aGVzZSBjb21waWxlLXRpbWUgZmVhdHVyZSBmbGFncyB0byBiZSBnbG9iYWxseSBpbmplY3RlZCB2aWEgdGhlIGJ1bmRsZXIgY29uZmlnIGluIG9yZGVyIHRvIGdldCBiZXR0ZXIgdHJlZS1zaGFraW5nIGluIHRoZSBwcm9kdWN0aW9uIGJ1bmRsZS5cblxuRm9yIG1vcmUgZGV0YWlscywgc2VlIGh0dHBzOi8vbGluay52dWVqcy5vcmcvZmVhdHVyZS1mbGFncy5gXG4gICAgKTtcbiAgfVxufVxuXG5jb25zdCBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QgPSBxdWV1ZUVmZmVjdFdpdGhTdXNwZW5zZSA7XG5mdW5jdGlvbiBjcmVhdGVSZW5kZXJlcihvcHRpb25zKSB7XG4gIHJldHVybiBiYXNlQ3JlYXRlUmVuZGVyZXIob3B0aW9ucyk7XG59XG5mdW5jdGlvbiBjcmVhdGVIeWRyYXRpb25SZW5kZXJlcihvcHRpb25zKSB7XG4gIHJldHVybiBiYXNlQ3JlYXRlUmVuZGVyZXIob3B0aW9ucywgY3JlYXRlSHlkcmF0aW9uRnVuY3Rpb25zKTtcbn1cbmZ1bmN0aW9uIGJhc2VDcmVhdGVSZW5kZXJlcihvcHRpb25zLCBjcmVhdGVIeWRyYXRpb25GbnMpIHtcbiAge1xuICAgIGluaXRGZWF0dXJlRmxhZ3MoKTtcbiAgfVxuICBjb25zdCB0YXJnZXQgPSBnZXRHbG9iYWxUaGlzKCk7XG4gIHRhcmdldC5fX1ZVRV9fID0gdHJ1ZTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiB8fCBfX1ZVRV9QUk9EX0RFVlRPT0xTX18pIHtcbiAgICBzZXREZXZ0b29sc0hvb2sodGFyZ2V0Ll9fVlVFX0RFVlRPT0xTX0dMT0JBTF9IT09LX18sIHRhcmdldCk7XG4gIH1cbiAgY29uc3Qge1xuICAgIGluc2VydDogaG9zdEluc2VydCxcbiAgICByZW1vdmU6IGhvc3RSZW1vdmUsXG4gICAgcGF0Y2hQcm9wOiBob3N0UGF0Y2hQcm9wLFxuICAgIGNyZWF0ZUVsZW1lbnQ6IGhvc3RDcmVhdGVFbGVtZW50LFxuICAgIGNyZWF0ZVRleHQ6IGhvc3RDcmVhdGVUZXh0LFxuICAgIGNyZWF0ZUNvbW1lbnQ6IGhvc3RDcmVhdGVDb21tZW50LFxuICAgIHNldFRleHQ6IGhvc3RTZXRUZXh0LFxuICAgIHNldEVsZW1lbnRUZXh0OiBob3N0U2V0RWxlbWVudFRleHQsXG4gICAgcGFyZW50Tm9kZTogaG9zdFBhcmVudE5vZGUsXG4gICAgbmV4dFNpYmxpbmc6IGhvc3ROZXh0U2libGluZyxcbiAgICBzZXRTY29wZUlkOiBob3N0U2V0U2NvcGVJZCA9IE5PT1AsXG4gICAgaW5zZXJ0U3RhdGljQ29udGVudDogaG9zdEluc2VydFN0YXRpY0NvbnRlbnRcbiAgfSA9IG9wdGlvbnM7XG4gIGNvbnN0IHBhdGNoID0gKG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IgPSBudWxsLCBwYXJlbnRDb21wb25lbnQgPSBudWxsLCBwYXJlbnRTdXNwZW5zZSA9IG51bGwsIGlzU1ZHID0gZmFsc2UsIHNsb3RTY29wZUlkcyA9IG51bGwsIG9wdGltaXplZCA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiBpc0htclVwZGF0aW5nID8gZmFsc2UgOiAhIW4yLmR5bmFtaWNDaGlsZHJlbikgPT4ge1xuICAgIGlmIChuMSA9PT0gbjIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKG4xICYmICFpc1NhbWVWTm9kZVR5cGUobjEsIG4yKSkge1xuICAgICAgYW5jaG9yID0gZ2V0TmV4dEhvc3ROb2RlKG4xKTtcbiAgICAgIHVubW91bnQobjEsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHRydWUpO1xuICAgICAgbjEgPSBudWxsO1xuICAgIH1cbiAgICBpZiAobjIucGF0Y2hGbGFnID09PSAtMikge1xuICAgICAgb3B0aW1pemVkID0gZmFsc2U7XG4gICAgICBuMi5keW5hbWljQ2hpbGRyZW4gPSBudWxsO1xuICAgIH1cbiAgICBjb25zdCB7IHR5cGUsIHJlZiwgc2hhcGVGbGFnIH0gPSBuMjtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgVGV4dDpcbiAgICAgICAgcHJvY2Vzc1RleHQobjEsIG4yLCBjb250YWluZXIsIGFuY2hvcik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBDb21tZW50OlxuICAgICAgICBwcm9jZXNzQ29tbWVudE5vZGUobjEsIG4yLCBjb250YWluZXIsIGFuY2hvcik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBTdGF0aWM6XG4gICAgICAgIGlmIChuMSA9PSBudWxsKSB7XG4gICAgICAgICAgbW91bnRTdGF0aWNOb2RlKG4yLCBjb250YWluZXIsIGFuY2hvciwgaXNTVkcpO1xuICAgICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgIHBhdGNoU3RhdGljTm9kZShuMSwgbjIsIGNvbnRhaW5lciwgaXNTVkcpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBGcmFnbWVudDpcbiAgICAgICAgcHJvY2Vzc0ZyYWdtZW50KFxuICAgICAgICAgIG4xLFxuICAgICAgICAgIG4yLFxuICAgICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgICBhbmNob3IsXG4gICAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICAgIGlzU1ZHLFxuICAgICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgICBvcHRpbWl6ZWRcbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAoc2hhcGVGbGFnICYgMSkge1xuICAgICAgICAgIHByb2Nlc3NFbGVtZW50KFxuICAgICAgICAgICAgbjEsXG4gICAgICAgICAgICBuMixcbiAgICAgICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgICAgIGFuY2hvcixcbiAgICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICAgICAgaXNTVkcsXG4gICAgICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgICAgICBvcHRpbWl6ZWRcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2UgaWYgKHNoYXBlRmxhZyAmIDYpIHtcbiAgICAgICAgICBwcm9jZXNzQ29tcG9uZW50KFxuICAgICAgICAgICAgbjEsXG4gICAgICAgICAgICBuMixcbiAgICAgICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgICAgIGFuY2hvcixcbiAgICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICAgICAgaXNTVkcsXG4gICAgICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgICAgICBvcHRpbWl6ZWRcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2UgaWYgKHNoYXBlRmxhZyAmIDY0KSB7XG4gICAgICAgICAgdHlwZS5wcm9jZXNzKFxuICAgICAgICAgICAgbjEsXG4gICAgICAgICAgICBuMixcbiAgICAgICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgICAgIGFuY2hvcixcbiAgICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICAgICAgaXNTVkcsXG4gICAgICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgICAgICBvcHRpbWl6ZWQsXG4gICAgICAgICAgICBpbnRlcm5hbHNcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2UgaWYgKHNoYXBlRmxhZyAmIDEyOCkge1xuICAgICAgICAgIHR5cGUucHJvY2VzcyhcbiAgICAgICAgICAgIG4xLFxuICAgICAgICAgICAgbjIsXG4gICAgICAgICAgICBjb250YWluZXIsXG4gICAgICAgICAgICBhbmNob3IsXG4gICAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICAgIGlzU1ZHLFxuICAgICAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICAgICAgb3B0aW1pemVkLFxuICAgICAgICAgICAgaW50ZXJuYWxzXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICB3YXJuKFwiSW52YWxpZCBWTm9kZSB0eXBlOlwiLCB0eXBlLCBgKCR7dHlwZW9mIHR5cGV9KWApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChyZWYgIT0gbnVsbCAmJiBwYXJlbnRDb21wb25lbnQpIHtcbiAgICAgIHNldFJlZihyZWYsIG4xICYmIG4xLnJlZiwgcGFyZW50U3VzcGVuc2UsIG4yIHx8IG4xLCAhbjIpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgcHJvY2Vzc1RleHQgPSAobjEsIG4yLCBjb250YWluZXIsIGFuY2hvcikgPT4ge1xuICAgIGlmIChuMSA9PSBudWxsKSB7XG4gICAgICBob3N0SW5zZXJ0KFxuICAgICAgICBuMi5lbCA9IGhvc3RDcmVhdGVUZXh0KG4yLmNoaWxkcmVuKSxcbiAgICAgICAgY29udGFpbmVyLFxuICAgICAgICBhbmNob3JcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGVsID0gbjIuZWwgPSBuMS5lbDtcbiAgICAgIGlmIChuMi5jaGlsZHJlbiAhPT0gbjEuY2hpbGRyZW4pIHtcbiAgICAgICAgaG9zdFNldFRleHQoZWwsIG4yLmNoaWxkcmVuKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGNvbnN0IHByb2Nlc3NDb21tZW50Tm9kZSA9IChuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yKSA9PiB7XG4gICAgaWYgKG4xID09IG51bGwpIHtcbiAgICAgIGhvc3RJbnNlcnQoXG4gICAgICAgIG4yLmVsID0gaG9zdENyZWF0ZUNvbW1lbnQobjIuY2hpbGRyZW4gfHwgXCJcIiksXG4gICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgYW5jaG9yXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBuMi5lbCA9IG4xLmVsO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgbW91bnRTdGF0aWNOb2RlID0gKG4yLCBjb250YWluZXIsIGFuY2hvciwgaXNTVkcpID0+IHtcbiAgICBbbjIuZWwsIG4yLmFuY2hvcl0gPSBob3N0SW5zZXJ0U3RhdGljQ29udGVudChcbiAgICAgIG4yLmNoaWxkcmVuLFxuICAgICAgY29udGFpbmVyLFxuICAgICAgYW5jaG9yLFxuICAgICAgaXNTVkcsXG4gICAgICBuMi5lbCxcbiAgICAgIG4yLmFuY2hvclxuICAgICk7XG4gIH07XG4gIGNvbnN0IHBhdGNoU3RhdGljTm9kZSA9IChuMSwgbjIsIGNvbnRhaW5lciwgaXNTVkcpID0+IHtcbiAgICBpZiAobjIuY2hpbGRyZW4gIT09IG4xLmNoaWxkcmVuKSB7XG4gICAgICBjb25zdCBhbmNob3IgPSBob3N0TmV4dFNpYmxpbmcobjEuYW5jaG9yKTtcbiAgICAgIHJlbW92ZVN0YXRpY05vZGUobjEpO1xuICAgICAgW24yLmVsLCBuMi5hbmNob3JdID0gaG9zdEluc2VydFN0YXRpY0NvbnRlbnQoXG4gICAgICAgIG4yLmNoaWxkcmVuLFxuICAgICAgICBjb250YWluZXIsXG4gICAgICAgIGFuY2hvcixcbiAgICAgICAgaXNTVkdcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG4yLmVsID0gbjEuZWw7XG4gICAgICBuMi5hbmNob3IgPSBuMS5hbmNob3I7XG4gICAgfVxuICB9O1xuICBjb25zdCBtb3ZlU3RhdGljTm9kZSA9ICh7IGVsLCBhbmNob3IgfSwgY29udGFpbmVyLCBuZXh0U2libGluZykgPT4ge1xuICAgIGxldCBuZXh0O1xuICAgIHdoaWxlIChlbCAmJiBlbCAhPT0gYW5jaG9yKSB7XG4gICAgICBuZXh0ID0gaG9zdE5leHRTaWJsaW5nKGVsKTtcbiAgICAgIGhvc3RJbnNlcnQoZWwsIGNvbnRhaW5lciwgbmV4dFNpYmxpbmcpO1xuICAgICAgZWwgPSBuZXh0O1xuICAgIH1cbiAgICBob3N0SW5zZXJ0KGFuY2hvciwgY29udGFpbmVyLCBuZXh0U2libGluZyk7XG4gIH07XG4gIGNvbnN0IHJlbW92ZVN0YXRpY05vZGUgPSAoeyBlbCwgYW5jaG9yIH0pID0+IHtcbiAgICBsZXQgbmV4dDtcbiAgICB3aGlsZSAoZWwgJiYgZWwgIT09IGFuY2hvcikge1xuICAgICAgbmV4dCA9IGhvc3ROZXh0U2libGluZyhlbCk7XG4gICAgICBob3N0UmVtb3ZlKGVsKTtcbiAgICAgIGVsID0gbmV4dDtcbiAgICB9XG4gICAgaG9zdFJlbW92ZShhbmNob3IpO1xuICB9O1xuICBjb25zdCBwcm9jZXNzRWxlbWVudCA9IChuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpID0+IHtcbiAgICBpc1NWRyA9IGlzU1ZHIHx8IG4yLnR5cGUgPT09IFwic3ZnXCI7XG4gICAgaWYgKG4xID09IG51bGwpIHtcbiAgICAgIG1vdW50RWxlbWVudChcbiAgICAgICAgbjIsXG4gICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgYW5jaG9yLFxuICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICBpc1NWRyxcbiAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICBvcHRpbWl6ZWRcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhdGNoRWxlbWVudChcbiAgICAgICAgbjEsXG4gICAgICAgIG4yLFxuICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICBpc1NWRyxcbiAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICBvcHRpbWl6ZWRcbiAgICAgICk7XG4gICAgfVxuICB9O1xuICBjb25zdCBtb3VudEVsZW1lbnQgPSAodm5vZGUsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpID0+IHtcbiAgICBsZXQgZWw7XG4gICAgbGV0IHZub2RlSG9vaztcbiAgICBjb25zdCB7IHR5cGUsIHByb3BzLCBzaGFwZUZsYWcsIHRyYW5zaXRpb24sIGRpcnMgfSA9IHZub2RlO1xuICAgIGVsID0gdm5vZGUuZWwgPSBob3N0Q3JlYXRlRWxlbWVudChcbiAgICAgIHZub2RlLnR5cGUsXG4gICAgICBpc1NWRyxcbiAgICAgIHByb3BzICYmIHByb3BzLmlzLFxuICAgICAgcHJvcHNcbiAgICApO1xuICAgIGlmIChzaGFwZUZsYWcgJiA4KSB7XG4gICAgICBob3N0U2V0RWxlbWVudFRleHQoZWwsIHZub2RlLmNoaWxkcmVuKTtcbiAgICB9IGVsc2UgaWYgKHNoYXBlRmxhZyAmIDE2KSB7XG4gICAgICBtb3VudENoaWxkcmVuKFxuICAgICAgICB2bm9kZS5jaGlsZHJlbixcbiAgICAgICAgZWwsXG4gICAgICAgIG51bGwsXG4gICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgIGlzU1ZHICYmIHR5cGUgIT09IFwiZm9yZWlnbk9iamVjdFwiLFxuICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgIG9wdGltaXplZFxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKGRpcnMpIHtcbiAgICAgIGludm9rZURpcmVjdGl2ZUhvb2sodm5vZGUsIG51bGwsIHBhcmVudENvbXBvbmVudCwgXCJjcmVhdGVkXCIpO1xuICAgIH1cbiAgICBzZXRTY29wZUlkKGVsLCB2bm9kZSwgdm5vZGUuc2NvcGVJZCwgc2xvdFNjb3BlSWRzLCBwYXJlbnRDb21wb25lbnQpO1xuICAgIGlmIChwcm9wcykge1xuICAgICAgZm9yIChjb25zdCBrZXkgaW4gcHJvcHMpIHtcbiAgICAgICAgaWYgKGtleSAhPT0gXCJ2YWx1ZVwiICYmICFpc1Jlc2VydmVkUHJvcChrZXkpKSB7XG4gICAgICAgICAgaG9zdFBhdGNoUHJvcChcbiAgICAgICAgICAgIGVsLFxuICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIHByb3BzW2tleV0sXG4gICAgICAgICAgICBpc1NWRyxcbiAgICAgICAgICAgIHZub2RlLmNoaWxkcmVuLFxuICAgICAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgICAgICB1bm1vdW50Q2hpbGRyZW5cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoXCJ2YWx1ZVwiIGluIHByb3BzKSB7XG4gICAgICAgIGhvc3RQYXRjaFByb3AoZWwsIFwidmFsdWVcIiwgbnVsbCwgcHJvcHMudmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKHZub2RlSG9vayA9IHByb3BzLm9uVm5vZGVCZWZvcmVNb3VudCkge1xuICAgICAgICBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBwYXJlbnRDb21wb25lbnQsIHZub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiB8fCBfX1ZVRV9QUk9EX0RFVlRPT0xTX18pIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlbCwgXCJfX3Zub2RlXCIsIHtcbiAgICAgICAgdmFsdWU6IHZub2RlLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZVxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZWwsIFwiX192dWVQYXJlbnRDb21wb25lbnRcIiwge1xuICAgICAgICB2YWx1ZTogcGFyZW50Q29tcG9uZW50LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChkaXJzKSB7XG4gICAgICBpbnZva2VEaXJlY3RpdmVIb29rKHZub2RlLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIFwiYmVmb3JlTW91bnRcIik7XG4gICAgfVxuICAgIGNvbnN0IG5lZWRDYWxsVHJhbnNpdGlvbkhvb2tzID0gKCFwYXJlbnRTdXNwZW5zZSB8fCBwYXJlbnRTdXNwZW5zZSAmJiAhcGFyZW50U3VzcGVuc2UucGVuZGluZ0JyYW5jaCkgJiYgdHJhbnNpdGlvbiAmJiAhdHJhbnNpdGlvbi5wZXJzaXN0ZWQ7XG4gICAgaWYgKG5lZWRDYWxsVHJhbnNpdGlvbkhvb2tzKSB7XG4gICAgICB0cmFuc2l0aW9uLmJlZm9yZUVudGVyKGVsKTtcbiAgICB9XG4gICAgaG9zdEluc2VydChlbCwgY29udGFpbmVyLCBhbmNob3IpO1xuICAgIGlmICgodm5vZGVIb29rID0gcHJvcHMgJiYgcHJvcHMub25Wbm9kZU1vdW50ZWQpIHx8IG5lZWRDYWxsVHJhbnNpdGlvbkhvb2tzIHx8IGRpcnMpIHtcbiAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdCgoKSA9PiB7XG4gICAgICAgIHZub2RlSG9vayAmJiBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBwYXJlbnRDb21wb25lbnQsIHZub2RlKTtcbiAgICAgICAgbmVlZENhbGxUcmFuc2l0aW9uSG9va3MgJiYgdHJhbnNpdGlvbi5lbnRlcihlbCk7XG4gICAgICAgIGRpcnMgJiYgaW52b2tlRGlyZWN0aXZlSG9vayh2bm9kZSwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBcIm1vdW50ZWRcIik7XG4gICAgICB9LCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgfVxuICB9O1xuICBjb25zdCBzZXRTY29wZUlkID0gKGVsLCB2bm9kZSwgc2NvcGVJZCwgc2xvdFNjb3BlSWRzLCBwYXJlbnRDb21wb25lbnQpID0+IHtcbiAgICBpZiAoc2NvcGVJZCkge1xuICAgICAgaG9zdFNldFNjb3BlSWQoZWwsIHNjb3BlSWQpO1xuICAgIH1cbiAgICBpZiAoc2xvdFNjb3BlSWRzKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsb3RTY29wZUlkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBob3N0U2V0U2NvcGVJZChlbCwgc2xvdFNjb3BlSWRzW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHBhcmVudENvbXBvbmVudCkge1xuICAgICAgbGV0IHN1YlRyZWUgPSBwYXJlbnRDb21wb25lbnQuc3ViVHJlZTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgc3ViVHJlZS5wYXRjaEZsYWcgPiAwICYmIHN1YlRyZWUucGF0Y2hGbGFnICYgMjA0OCkge1xuICAgICAgICBzdWJUcmVlID0gZmlsdGVyU2luZ2xlUm9vdChzdWJUcmVlLmNoaWxkcmVuKSB8fCBzdWJUcmVlO1xuICAgICAgfVxuICAgICAgaWYgKHZub2RlID09PSBzdWJUcmVlKSB7XG4gICAgICAgIGNvbnN0IHBhcmVudFZOb2RlID0gcGFyZW50Q29tcG9uZW50LnZub2RlO1xuICAgICAgICBzZXRTY29wZUlkKFxuICAgICAgICAgIGVsLFxuICAgICAgICAgIHBhcmVudFZOb2RlLFxuICAgICAgICAgIHBhcmVudFZOb2RlLnNjb3BlSWQsXG4gICAgICAgICAgcGFyZW50Vk5vZGUuc2xvdFNjb3BlSWRzLFxuICAgICAgICAgIHBhcmVudENvbXBvbmVudC5wYXJlbnRcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGNvbnN0IG1vdW50Q2hpbGRyZW4gPSAoY2hpbGRyZW4sIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQsIHN0YXJ0ID0gMCkgPT4ge1xuICAgIGZvciAobGV0IGkgPSBzdGFydDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBjaGlsZCA9IGNoaWxkcmVuW2ldID0gb3B0aW1pemVkID8gY2xvbmVJZk1vdW50ZWQoY2hpbGRyZW5baV0pIDogbm9ybWFsaXplVk5vZGUoY2hpbGRyZW5baV0pO1xuICAgICAgcGF0Y2goXG4gICAgICAgIG51bGwsXG4gICAgICAgIGNoaWxkLFxuICAgICAgICBjb250YWluZXIsXG4gICAgICAgIGFuY2hvcixcbiAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgaXNTVkcsXG4gICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgb3B0aW1pemVkXG4gICAgICApO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgcGF0Y2hFbGVtZW50ID0gKG4xLCBuMiwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKSA9PiB7XG4gICAgY29uc3QgZWwgPSBuMi5lbCA9IG4xLmVsO1xuICAgIGxldCB7IHBhdGNoRmxhZywgZHluYW1pY0NoaWxkcmVuLCBkaXJzIH0gPSBuMjtcbiAgICBwYXRjaEZsYWcgfD0gbjEucGF0Y2hGbGFnICYgMTY7XG4gICAgY29uc3Qgb2xkUHJvcHMgPSBuMS5wcm9wcyB8fCBFTVBUWV9PQko7XG4gICAgY29uc3QgbmV3UHJvcHMgPSBuMi5wcm9wcyB8fCBFTVBUWV9PQko7XG4gICAgbGV0IHZub2RlSG9vaztcbiAgICBwYXJlbnRDb21wb25lbnQgJiYgdG9nZ2xlUmVjdXJzZShwYXJlbnRDb21wb25lbnQsIGZhbHNlKTtcbiAgICBpZiAodm5vZGVIb29rID0gbmV3UHJvcHMub25Wbm9kZUJlZm9yZVVwZGF0ZSkge1xuICAgICAgaW52b2tlVk5vZGVIb29rKHZub2RlSG9vaywgcGFyZW50Q29tcG9uZW50LCBuMiwgbjEpO1xuICAgIH1cbiAgICBpZiAoZGlycykge1xuICAgICAgaW52b2tlRGlyZWN0aXZlSG9vayhuMiwgbjEsIHBhcmVudENvbXBvbmVudCwgXCJiZWZvcmVVcGRhdGVcIik7XG4gICAgfVxuICAgIHBhcmVudENvbXBvbmVudCAmJiB0b2dnbGVSZWN1cnNlKHBhcmVudENvbXBvbmVudCwgdHJ1ZSk7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiBpc0htclVwZGF0aW5nKSB7XG4gICAgICBwYXRjaEZsYWcgPSAwO1xuICAgICAgb3B0aW1pemVkID0gZmFsc2U7XG4gICAgICBkeW5hbWljQ2hpbGRyZW4gPSBudWxsO1xuICAgIH1cbiAgICBjb25zdCBhcmVDaGlsZHJlblNWRyA9IGlzU1ZHICYmIG4yLnR5cGUgIT09IFwiZm9yZWlnbk9iamVjdFwiO1xuICAgIGlmIChkeW5hbWljQ2hpbGRyZW4pIHtcbiAgICAgIHBhdGNoQmxvY2tDaGlsZHJlbihcbiAgICAgICAgbjEuZHluYW1pY0NoaWxkcmVuLFxuICAgICAgICBkeW5hbWljQ2hpbGRyZW4sXG4gICAgICAgIGVsLFxuICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICBhcmVDaGlsZHJlblNWRyxcbiAgICAgICAgc2xvdFNjb3BlSWRzXG4gICAgICApO1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICB0cmF2ZXJzZVN0YXRpY0NoaWxkcmVuKG4xLCBuMik7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghb3B0aW1pemVkKSB7XG4gICAgICBwYXRjaENoaWxkcmVuKFxuICAgICAgICBuMSxcbiAgICAgICAgbjIsXG4gICAgICAgIGVsLFxuICAgICAgICBudWxsLFxuICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICBhcmVDaGlsZHJlblNWRyxcbiAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICBmYWxzZVxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKHBhdGNoRmxhZyA+IDApIHtcbiAgICAgIGlmIChwYXRjaEZsYWcgJiAxNikge1xuICAgICAgICBwYXRjaFByb3BzKFxuICAgICAgICAgIGVsLFxuICAgICAgICAgIG4yLFxuICAgICAgICAgIG9sZFByb3BzLFxuICAgICAgICAgIG5ld1Byb3BzLFxuICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICBpc1NWR1xuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHBhdGNoRmxhZyAmIDIpIHtcbiAgICAgICAgICBpZiAob2xkUHJvcHMuY2xhc3MgIT09IG5ld1Byb3BzLmNsYXNzKSB7XG4gICAgICAgICAgICBob3N0UGF0Y2hQcm9wKGVsLCBcImNsYXNzXCIsIG51bGwsIG5ld1Byb3BzLmNsYXNzLCBpc1NWRyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChwYXRjaEZsYWcgJiA0KSB7XG4gICAgICAgICAgaG9zdFBhdGNoUHJvcChlbCwgXCJzdHlsZVwiLCBvbGRQcm9wcy5zdHlsZSwgbmV3UHJvcHMuc3R5bGUsIGlzU1ZHKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGF0Y2hGbGFnICYgOCkge1xuICAgICAgICAgIGNvbnN0IHByb3BzVG9VcGRhdGUgPSBuMi5keW5hbWljUHJvcHM7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm9wc1RvVXBkYXRlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBrZXkgPSBwcm9wc1RvVXBkYXRlW2ldO1xuICAgICAgICAgICAgY29uc3QgcHJldiA9IG9sZFByb3BzW2tleV07XG4gICAgICAgICAgICBjb25zdCBuZXh0ID0gbmV3UHJvcHNba2V5XTtcbiAgICAgICAgICAgIGlmIChuZXh0ICE9PSBwcmV2IHx8IGtleSA9PT0gXCJ2YWx1ZVwiKSB7XG4gICAgICAgICAgICAgIGhvc3RQYXRjaFByb3AoXG4gICAgICAgICAgICAgICAgZWwsXG4gICAgICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgICAgIHByZXYsXG4gICAgICAgICAgICAgICAgbmV4dCxcbiAgICAgICAgICAgICAgICBpc1NWRyxcbiAgICAgICAgICAgICAgICBuMS5jaGlsZHJlbixcbiAgICAgICAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgICAgICAgICAgdW5tb3VudENoaWxkcmVuXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocGF0Y2hGbGFnICYgMSkge1xuICAgICAgICBpZiAobjEuY2hpbGRyZW4gIT09IG4yLmNoaWxkcmVuKSB7XG4gICAgICAgICAgaG9zdFNldEVsZW1lbnRUZXh0KGVsLCBuMi5jaGlsZHJlbik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFvcHRpbWl6ZWQgJiYgZHluYW1pY0NoaWxkcmVuID09IG51bGwpIHtcbiAgICAgIHBhdGNoUHJvcHMoXG4gICAgICAgIGVsLFxuICAgICAgICBuMixcbiAgICAgICAgb2xkUHJvcHMsXG4gICAgICAgIG5ld1Byb3BzLFxuICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICBpc1NWR1xuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKCh2bm9kZUhvb2sgPSBuZXdQcm9wcy5vblZub2RlVXBkYXRlZCkgfHwgZGlycykge1xuICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KCgpID0+IHtcbiAgICAgICAgdm5vZGVIb29rICYmIGludm9rZVZOb2RlSG9vayh2bm9kZUhvb2ssIHBhcmVudENvbXBvbmVudCwgbjIsIG4xKTtcbiAgICAgICAgZGlycyAmJiBpbnZva2VEaXJlY3RpdmVIb29rKG4yLCBuMSwgcGFyZW50Q29tcG9uZW50LCBcInVwZGF0ZWRcIik7XG4gICAgICB9LCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgfVxuICB9O1xuICBjb25zdCBwYXRjaEJsb2NrQ2hpbGRyZW4gPSAob2xkQ2hpbGRyZW4sIG5ld0NoaWxkcmVuLCBmYWxsYmFja0NvbnRhaW5lciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcykgPT4ge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmV3Q2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IG9sZFZOb2RlID0gb2xkQ2hpbGRyZW5baV07XG4gICAgICBjb25zdCBuZXdWTm9kZSA9IG5ld0NoaWxkcmVuW2ldO1xuICAgICAgY29uc3QgY29udGFpbmVyID0gKFxuICAgICAgICAvLyBvbGRWTm9kZSBtYXkgYmUgYW4gZXJyb3JlZCBhc3luYyBzZXR1cCgpIGNvbXBvbmVudCBpbnNpZGUgU3VzcGVuc2VcbiAgICAgICAgLy8gd2hpY2ggd2lsbCBub3QgaGF2ZSBhIG1vdW50ZWQgZWxlbWVudFxuICAgICAgICBvbGRWTm9kZS5lbCAmJiAvLyAtIEluIHRoZSBjYXNlIG9mIGEgRnJhZ21lbnQsIHdlIG5lZWQgdG8gcHJvdmlkZSB0aGUgYWN0dWFsIHBhcmVudFxuICAgICAgICAvLyBvZiB0aGUgRnJhZ21lbnQgaXRzZWxmIHNvIGl0IGNhbiBtb3ZlIGl0cyBjaGlsZHJlbi5cbiAgICAgICAgKG9sZFZOb2RlLnR5cGUgPT09IEZyYWdtZW50IHx8IC8vIC0gSW4gdGhlIGNhc2Ugb2YgZGlmZmVyZW50IG5vZGVzLCB0aGVyZSBpcyBnb2luZyB0byBiZSBhIHJlcGxhY2VtZW50XG4gICAgICAgIC8vIHdoaWNoIGFsc28gcmVxdWlyZXMgdGhlIGNvcnJlY3QgcGFyZW50IGNvbnRhaW5lclxuICAgICAgICAhaXNTYW1lVk5vZGVUeXBlKG9sZFZOb2RlLCBuZXdWTm9kZSkgfHwgLy8gLSBJbiB0aGUgY2FzZSBvZiBhIGNvbXBvbmVudCwgaXQgY291bGQgY29udGFpbiBhbnl0aGluZy5cbiAgICAgICAgb2xkVk5vZGUuc2hhcGVGbGFnICYgKDYgfCA2NCkpID8gaG9zdFBhcmVudE5vZGUob2xkVk5vZGUuZWwpIDogKFxuICAgICAgICAgIC8vIEluIG90aGVyIGNhc2VzLCB0aGUgcGFyZW50IGNvbnRhaW5lciBpcyBub3QgYWN0dWFsbHkgdXNlZCBzbyB3ZVxuICAgICAgICAgIC8vIGp1c3QgcGFzcyB0aGUgYmxvY2sgZWxlbWVudCBoZXJlIHRvIGF2b2lkIGEgRE9NIHBhcmVudE5vZGUgY2FsbC5cbiAgICAgICAgICBmYWxsYmFja0NvbnRhaW5lclxuICAgICAgICApXG4gICAgICApO1xuICAgICAgcGF0Y2goXG4gICAgICAgIG9sZFZOb2RlLFxuICAgICAgICBuZXdWTm9kZSxcbiAgICAgICAgY29udGFpbmVyLFxuICAgICAgICBudWxsLFxuICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICBpc1NWRyxcbiAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICB0cnVlXG4gICAgICApO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgcGF0Y2hQcm9wcyA9IChlbCwgdm5vZGUsIG9sZFByb3BzLCBuZXdQcm9wcywgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcpID0+IHtcbiAgICBpZiAob2xkUHJvcHMgIT09IG5ld1Byb3BzKSB7XG4gICAgICBpZiAob2xkUHJvcHMgIT09IEVNUFRZX09CSikge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBvbGRQcm9wcykge1xuICAgICAgICAgIGlmICghaXNSZXNlcnZlZFByb3Aoa2V5KSAmJiAhKGtleSBpbiBuZXdQcm9wcykpIHtcbiAgICAgICAgICAgIGhvc3RQYXRjaFByb3AoXG4gICAgICAgICAgICAgIGVsLFxuICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgIG9sZFByb3BzW2tleV0sXG4gICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgIGlzU1ZHLFxuICAgICAgICAgICAgICB2bm9kZS5jaGlsZHJlbixcbiAgICAgICAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICAgICAgdW5tb3VudENoaWxkcmVuXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZm9yIChjb25zdCBrZXkgaW4gbmV3UHJvcHMpIHtcbiAgICAgICAgaWYgKGlzUmVzZXJ2ZWRQcm9wKGtleSkpXG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIGNvbnN0IG5leHQgPSBuZXdQcm9wc1trZXldO1xuICAgICAgICBjb25zdCBwcmV2ID0gb2xkUHJvcHNba2V5XTtcbiAgICAgICAgaWYgKG5leHQgIT09IHByZXYgJiYga2V5ICE9PSBcInZhbHVlXCIpIHtcbiAgICAgICAgICBob3N0UGF0Y2hQcm9wKFxuICAgICAgICAgICAgZWwsXG4gICAgICAgICAgICBrZXksXG4gICAgICAgICAgICBwcmV2LFxuICAgICAgICAgICAgbmV4dCxcbiAgICAgICAgICAgIGlzU1ZHLFxuICAgICAgICAgICAgdm5vZGUuY2hpbGRyZW4sXG4gICAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICAgIHVubW91bnRDaGlsZHJlblxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChcInZhbHVlXCIgaW4gbmV3UHJvcHMpIHtcbiAgICAgICAgaG9zdFBhdGNoUHJvcChlbCwgXCJ2YWx1ZVwiLCBvbGRQcm9wcy52YWx1ZSwgbmV3UHJvcHMudmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgY29uc3QgcHJvY2Vzc0ZyYWdtZW50ID0gKG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCkgPT4ge1xuICAgIGNvbnN0IGZyYWdtZW50U3RhcnRBbmNob3IgPSBuMi5lbCA9IG4xID8gbjEuZWwgOiBob3N0Q3JlYXRlVGV4dChcIlwiKTtcbiAgICBjb25zdCBmcmFnbWVudEVuZEFuY2hvciA9IG4yLmFuY2hvciA9IG4xID8gbjEuYW5jaG9yIDogaG9zdENyZWF0ZVRleHQoXCJcIik7XG4gICAgbGV0IHsgcGF0Y2hGbGFnLCBkeW5hbWljQ2hpbGRyZW4sIHNsb3RTY29wZUlkczogZnJhZ21lbnRTbG90U2NvcGVJZHMgfSA9IG4yO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgLy8gIzU1MjMgZGV2IHJvb3QgZnJhZ21lbnQgbWF5IGluaGVyaXQgZGlyZWN0aXZlc1xuICAgIChpc0htclVwZGF0aW5nIHx8IHBhdGNoRmxhZyAmIDIwNDgpKSB7XG4gICAgICBwYXRjaEZsYWcgPSAwO1xuICAgICAgb3B0aW1pemVkID0gZmFsc2U7XG4gICAgICBkeW5hbWljQ2hpbGRyZW4gPSBudWxsO1xuICAgIH1cbiAgICBpZiAoZnJhZ21lbnRTbG90U2NvcGVJZHMpIHtcbiAgICAgIHNsb3RTY29wZUlkcyA9IHNsb3RTY29wZUlkcyA/IHNsb3RTY29wZUlkcy5jb25jYXQoZnJhZ21lbnRTbG90U2NvcGVJZHMpIDogZnJhZ21lbnRTbG90U2NvcGVJZHM7XG4gICAgfVxuICAgIGlmIChuMSA9PSBudWxsKSB7XG4gICAgICBob3N0SW5zZXJ0KGZyYWdtZW50U3RhcnRBbmNob3IsIGNvbnRhaW5lciwgYW5jaG9yKTtcbiAgICAgIGhvc3RJbnNlcnQoZnJhZ21lbnRFbmRBbmNob3IsIGNvbnRhaW5lciwgYW5jaG9yKTtcbiAgICAgIG1vdW50Q2hpbGRyZW4oXG4gICAgICAgIG4yLmNoaWxkcmVuLFxuICAgICAgICBjb250YWluZXIsXG4gICAgICAgIGZyYWdtZW50RW5kQW5jaG9yLFxuICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICBpc1NWRyxcbiAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICBvcHRpbWl6ZWRcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwYXRjaEZsYWcgPiAwICYmIHBhdGNoRmxhZyAmIDY0ICYmIGR5bmFtaWNDaGlsZHJlbiAmJiAvLyAjMjcxNSB0aGUgcHJldmlvdXMgZnJhZ21lbnQgY291bGQndmUgYmVlbiBhIEJBSUxlZCBvbmUgYXMgYSByZXN1bHRcbiAgICAgIC8vIG9mIHJlbmRlclNsb3QoKSB3aXRoIG5vIHZhbGlkIGNoaWxkcmVuXG4gICAgICBuMS5keW5hbWljQ2hpbGRyZW4pIHtcbiAgICAgICAgcGF0Y2hCbG9ja0NoaWxkcmVuKFxuICAgICAgICAgIG4xLmR5bmFtaWNDaGlsZHJlbixcbiAgICAgICAgICBkeW5hbWljQ2hpbGRyZW4sXG4gICAgICAgICAgY29udGFpbmVyLFxuICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICBpc1NWRyxcbiAgICAgICAgICBzbG90U2NvcGVJZHNcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgIHRyYXZlcnNlU3RhdGljQ2hpbGRyZW4objEsIG4yKTtcbiAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAvLyAjMjA4MCBpZiB0aGUgc3RhYmxlIGZyYWdtZW50IGhhcyBhIGtleSwgaXQncyBhIDx0ZW1wbGF0ZSB2LWZvcj4gdGhhdCBtYXlcbiAgICAgICAgICAvLyAgZ2V0IG1vdmVkIGFyb3VuZC4gTWFrZSBzdXJlIGFsbCByb290IGxldmVsIHZub2RlcyBpbmhlcml0IGVsLlxuICAgICAgICAgIC8vICMyMTM0IG9yIGlmIGl0J3MgYSBjb21wb25lbnQgcm9vdCwgaXQgbWF5IGFsc28gZ2V0IG1vdmVkIGFyb3VuZFxuICAgICAgICAgIC8vIGFzIHRoZSBjb21wb25lbnQgaXMgYmVpbmcgbW92ZWQuXG4gICAgICAgICAgbjIua2V5ICE9IG51bGwgfHwgcGFyZW50Q29tcG9uZW50ICYmIG4yID09PSBwYXJlbnRDb21wb25lbnQuc3ViVHJlZVxuICAgICAgICApIHtcbiAgICAgICAgICB0cmF2ZXJzZVN0YXRpY0NoaWxkcmVuKFxuICAgICAgICAgICAgbjEsXG4gICAgICAgICAgICBuMixcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgICAgIC8qIHNoYWxsb3cgKi9cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXRjaENoaWxkcmVuKFxuICAgICAgICAgIG4xLFxuICAgICAgICAgIG4yLFxuICAgICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgICBmcmFnbWVudEVuZEFuY2hvcixcbiAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgICAgaXNTVkcsXG4gICAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICAgIG9wdGltaXplZFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgY29uc3QgcHJvY2Vzc0NvbXBvbmVudCA9IChuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpID0+IHtcbiAgICBuMi5zbG90U2NvcGVJZHMgPSBzbG90U2NvcGVJZHM7XG4gICAgaWYgKG4xID09IG51bGwpIHtcbiAgICAgIGlmIChuMi5zaGFwZUZsYWcgJiA1MTIpIHtcbiAgICAgICAgcGFyZW50Q29tcG9uZW50LmN0eC5hY3RpdmF0ZShcbiAgICAgICAgICBuMixcbiAgICAgICAgICBjb250YWluZXIsXG4gICAgICAgICAgYW5jaG9yLFxuICAgICAgICAgIGlzU1ZHLFxuICAgICAgICAgIG9wdGltaXplZFxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbW91bnRDb21wb25lbnQoXG4gICAgICAgICAgbjIsXG4gICAgICAgICAgY29udGFpbmVyLFxuICAgICAgICAgIGFuY2hvcixcbiAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgICAgaXNTVkcsXG4gICAgICAgICAgb3B0aW1pemVkXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHVwZGF0ZUNvbXBvbmVudChuMSwgbjIsIG9wdGltaXplZCk7XG4gICAgfVxuICB9O1xuICBjb25zdCBtb3VudENvbXBvbmVudCA9IChpbml0aWFsVk5vZGUsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkKSA9PiB7XG4gICAgY29uc3QgaW5zdGFuY2UgPSAoaW5pdGlhbFZOb2RlLmNvbXBvbmVudCA9IGNyZWF0ZUNvbXBvbmVudEluc3RhbmNlKFxuICAgICAgaW5pdGlhbFZOb2RlLFxuICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgcGFyZW50U3VzcGVuc2VcbiAgICApKTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmIGluc3RhbmNlLnR5cGUuX19obXJJZCkge1xuICAgICAgcmVnaXN0ZXJITVIoaW5zdGFuY2UpO1xuICAgIH1cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICBwdXNoV2FybmluZ0NvbnRleHQoaW5pdGlhbFZOb2RlKTtcbiAgICAgIHN0YXJ0TWVhc3VyZShpbnN0YW5jZSwgYG1vdW50YCk7XG4gICAgfVxuICAgIGlmIChpc0tlZXBBbGl2ZShpbml0aWFsVk5vZGUpKSB7XG4gICAgICBpbnN0YW5jZS5jdHgucmVuZGVyZXIgPSBpbnRlcm5hbHM7XG4gICAgfVxuICAgIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgc3RhcnRNZWFzdXJlKGluc3RhbmNlLCBgaW5pdGApO1xuICAgICAgfVxuICAgICAgc2V0dXBDb21wb25lbnQoaW5zdGFuY2UpO1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICBlbmRNZWFzdXJlKGluc3RhbmNlLCBgaW5pdGApO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaW5zdGFuY2UuYXN5bmNEZXApIHtcbiAgICAgIHBhcmVudFN1c3BlbnNlICYmIHBhcmVudFN1c3BlbnNlLnJlZ2lzdGVyRGVwKGluc3RhbmNlLCBzZXR1cFJlbmRlckVmZmVjdCk7XG4gICAgICBpZiAoIWluaXRpYWxWTm9kZS5lbCkge1xuICAgICAgICBjb25zdCBwbGFjZWhvbGRlciA9IGluc3RhbmNlLnN1YlRyZWUgPSBjcmVhdGVWTm9kZShDb21tZW50KTtcbiAgICAgICAgcHJvY2Vzc0NvbW1lbnROb2RlKG51bGwsIHBsYWNlaG9sZGVyLCBjb250YWluZXIsIGFuY2hvcik7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHNldHVwUmVuZGVyRWZmZWN0KFxuICAgICAgaW5zdGFuY2UsXG4gICAgICBpbml0aWFsVk5vZGUsXG4gICAgICBjb250YWluZXIsXG4gICAgICBhbmNob3IsXG4gICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgIGlzU1ZHLFxuICAgICAgb3B0aW1pemVkXG4gICAgKTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICBwb3BXYXJuaW5nQ29udGV4dCgpO1xuICAgICAgZW5kTWVhc3VyZShpbnN0YW5jZSwgYG1vdW50YCk7XG4gICAgfVxuICB9O1xuICBjb25zdCB1cGRhdGVDb21wb25lbnQgPSAobjEsIG4yLCBvcHRpbWl6ZWQpID0+IHtcbiAgICBjb25zdCBpbnN0YW5jZSA9IG4yLmNvbXBvbmVudCA9IG4xLmNvbXBvbmVudDtcbiAgICBpZiAoc2hvdWxkVXBkYXRlQ29tcG9uZW50KG4xLCBuMiwgb3B0aW1pemVkKSkge1xuICAgICAgaWYgKGluc3RhbmNlLmFzeW5jRGVwICYmICFpbnN0YW5jZS5hc3luY1Jlc29sdmVkKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICBwdXNoV2FybmluZ0NvbnRleHQobjIpO1xuICAgICAgICB9XG4gICAgICAgIHVwZGF0ZUNvbXBvbmVudFByZVJlbmRlcihpbnN0YW5jZSwgbjIsIG9wdGltaXplZCk7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICBwb3BXYXJuaW5nQ29udGV4dCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluc3RhbmNlLm5leHQgPSBuMjtcbiAgICAgICAgaW52YWxpZGF0ZUpvYihpbnN0YW5jZS51cGRhdGUpO1xuICAgICAgICBpbnN0YW5jZS51cGRhdGUoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbjIuZWwgPSBuMS5lbDtcbiAgICAgIGluc3RhbmNlLnZub2RlID0gbjI7XG4gICAgfVxuICB9O1xuICBjb25zdCBzZXR1cFJlbmRlckVmZmVjdCA9IChpbnN0YW5jZSwgaW5pdGlhbFZOb2RlLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQpID0+IHtcbiAgICBjb25zdCBjb21wb25lbnRVcGRhdGVGbiA9ICgpID0+IHtcbiAgICAgIGlmICghaW5zdGFuY2UuaXNNb3VudGVkKSB7XG4gICAgICAgIGxldCB2bm9kZUhvb2s7XG4gICAgICAgIGNvbnN0IHsgZWwsIHByb3BzIH0gPSBpbml0aWFsVk5vZGU7XG4gICAgICAgIGNvbnN0IHsgYm0sIG0sIHBhcmVudCB9ID0gaW5zdGFuY2U7XG4gICAgICAgIGNvbnN0IGlzQXN5bmNXcmFwcGVyVk5vZGUgPSBpc0FzeW5jV3JhcHBlcihpbml0aWFsVk5vZGUpO1xuICAgICAgICB0b2dnbGVSZWN1cnNlKGluc3RhbmNlLCBmYWxzZSk7XG4gICAgICAgIGlmIChibSkge1xuICAgICAgICAgIGludm9rZUFycmF5Rm5zKGJtKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzQXN5bmNXcmFwcGVyVk5vZGUgJiYgKHZub2RlSG9vayA9IHByb3BzICYmIHByb3BzLm9uVm5vZGVCZWZvcmVNb3VudCkpIHtcbiAgICAgICAgICBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBwYXJlbnQsIGluaXRpYWxWTm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgdG9nZ2xlUmVjdXJzZShpbnN0YW5jZSwgdHJ1ZSk7XG4gICAgICAgIGlmIChlbCAmJiBoeWRyYXRlTm9kZSkge1xuICAgICAgICAgIGNvbnN0IGh5ZHJhdGVTdWJUcmVlID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgICAgICBzdGFydE1lYXN1cmUoaW5zdGFuY2UsIGByZW5kZXJgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGluc3RhbmNlLnN1YlRyZWUgPSByZW5kZXJDb21wb25lbnRSb290KGluc3RhbmNlKTtcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgZW5kTWVhc3VyZShpbnN0YW5jZSwgYHJlbmRlcmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgICAgICBzdGFydE1lYXN1cmUoaW5zdGFuY2UsIGBoeWRyYXRlYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoeWRyYXRlTm9kZShcbiAgICAgICAgICAgICAgZWwsXG4gICAgICAgICAgICAgIGluc3RhbmNlLnN1YlRyZWUsXG4gICAgICAgICAgICAgIGluc3RhbmNlLFxuICAgICAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICAgICAgbnVsbFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgZW5kTWVhc3VyZShpbnN0YW5jZSwgYGh5ZHJhdGVgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICAgIGlmIChpc0FzeW5jV3JhcHBlclZOb2RlKSB7XG4gICAgICAgICAgICBpbml0aWFsVk5vZGUudHlwZS5fX2FzeW5jTG9hZGVyKCkudGhlbihcbiAgICAgICAgICAgICAgLy8gbm90ZTogd2UgYXJlIG1vdmluZyB0aGUgcmVuZGVyIGNhbGwgaW50byBhbiBhc3luYyBjYWxsYmFjayxcbiAgICAgICAgICAgICAgLy8gd2hpY2ggbWVhbnMgaXQgd29uJ3QgdHJhY2sgZGVwZW5kZW5jaWVzIC0gYnV0IGl0J3Mgb2sgYmVjYXVzZVxuICAgICAgICAgICAgICAvLyBhIHNlcnZlci1yZW5kZXJlZCBhc3luYyB3cmFwcGVyIGlzIGFscmVhZHkgaW4gcmVzb2x2ZWQgc3RhdGVcbiAgICAgICAgICAgICAgLy8gYW5kIGl0IHdpbGwgbmV2ZXIgbmVlZCB0byBjaGFuZ2UuXG4gICAgICAgICAgICAgICgpID0+ICFpbnN0YW5jZS5pc1VubW91bnRlZCAmJiBoeWRyYXRlU3ViVHJlZSgpXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBoeWRyYXRlU3ViVHJlZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgICBzdGFydE1lYXN1cmUoaW5zdGFuY2UsIGByZW5kZXJgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3Qgc3ViVHJlZSA9IGluc3RhbmNlLnN1YlRyZWUgPSByZW5kZXJDb21wb25lbnRSb290KGluc3RhbmNlKTtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgICBlbmRNZWFzdXJlKGluc3RhbmNlLCBgcmVuZGVyYCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICAgIHN0YXJ0TWVhc3VyZShpbnN0YW5jZSwgYHBhdGNoYCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHBhdGNoKFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIHN1YlRyZWUsXG4gICAgICAgICAgICBjb250YWluZXIsXG4gICAgICAgICAgICBhbmNob3IsXG4gICAgICAgICAgICBpbnN0YW5jZSxcbiAgICAgICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICAgICAgaXNTVkdcbiAgICAgICAgICApO1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICAgIGVuZE1lYXN1cmUoaW5zdGFuY2UsIGBwYXRjaGApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpbml0aWFsVk5vZGUuZWwgPSBzdWJUcmVlLmVsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtKSB7XG4gICAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KG0sIHBhcmVudFN1c3BlbnNlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzQXN5bmNXcmFwcGVyVk5vZGUgJiYgKHZub2RlSG9vayA9IHByb3BzICYmIHByb3BzLm9uVm5vZGVNb3VudGVkKSkge1xuICAgICAgICAgIGNvbnN0IHNjb3BlZEluaXRpYWxWTm9kZSA9IGluaXRpYWxWTm9kZTtcbiAgICAgICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QoXG4gICAgICAgICAgICAoKSA9PiBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBwYXJlbnQsIHNjb3BlZEluaXRpYWxWTm9kZSksXG4gICAgICAgICAgICBwYXJlbnRTdXNwZW5zZVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluaXRpYWxWTm9kZS5zaGFwZUZsYWcgJiAyNTYgfHwgcGFyZW50ICYmIGlzQXN5bmNXcmFwcGVyKHBhcmVudC52bm9kZSkgJiYgcGFyZW50LnZub2RlLnNoYXBlRmxhZyAmIDI1Nikge1xuICAgICAgICAgIGluc3RhbmNlLmEgJiYgcXVldWVQb3N0UmVuZGVyRWZmZWN0KGluc3RhbmNlLmEsIHBhcmVudFN1c3BlbnNlKTtcbiAgICAgICAgfVxuICAgICAgICBpbnN0YW5jZS5pc01vdW50ZWQgPSB0cnVlO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xuICAgICAgICAgIGRldnRvb2xzQ29tcG9uZW50QWRkZWQoaW5zdGFuY2UpO1xuICAgICAgICB9XG4gICAgICAgIGluaXRpYWxWTm9kZSA9IGNvbnRhaW5lciA9IGFuY2hvciA9IG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgeyBuZXh0LCBidSwgdSwgcGFyZW50LCB2bm9kZSB9ID0gaW5zdGFuY2U7XG4gICAgICAgIGxldCBvcmlnaW5OZXh0ID0gbmV4dDtcbiAgICAgICAgbGV0IHZub2RlSG9vaztcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgIHB1c2hXYXJuaW5nQ29udGV4dChuZXh0IHx8IGluc3RhbmNlLnZub2RlKTtcbiAgICAgICAgfVxuICAgICAgICB0b2dnbGVSZWN1cnNlKGluc3RhbmNlLCBmYWxzZSk7XG4gICAgICAgIGlmIChuZXh0KSB7XG4gICAgICAgICAgbmV4dC5lbCA9IHZub2RlLmVsO1xuICAgICAgICAgIHVwZGF0ZUNvbXBvbmVudFByZVJlbmRlcihpbnN0YW5jZSwgbmV4dCwgb3B0aW1pemVkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXh0ID0gdm5vZGU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJ1KSB7XG4gICAgICAgICAgaW52b2tlQXJyYXlGbnMoYnUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2bm9kZUhvb2sgPSBuZXh0LnByb3BzICYmIG5leHQucHJvcHMub25Wbm9kZUJlZm9yZVVwZGF0ZSkge1xuICAgICAgICAgIGludm9rZVZOb2RlSG9vayh2bm9kZUhvb2ssIHBhcmVudCwgbmV4dCwgdm5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIHRvZ2dsZVJlY3Vyc2UoaW5zdGFuY2UsIHRydWUpO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgc3RhcnRNZWFzdXJlKGluc3RhbmNlLCBgcmVuZGVyYCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbmV4dFRyZWUgPSByZW5kZXJDb21wb25lbnRSb290KGluc3RhbmNlKTtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgIGVuZE1lYXN1cmUoaW5zdGFuY2UsIGByZW5kZXJgKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwcmV2VHJlZSA9IGluc3RhbmNlLnN1YlRyZWU7XG4gICAgICAgIGluc3RhbmNlLnN1YlRyZWUgPSBuZXh0VHJlZTtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgIHN0YXJ0TWVhc3VyZShpbnN0YW5jZSwgYHBhdGNoYCk7XG4gICAgICAgIH1cbiAgICAgICAgcGF0Y2goXG4gICAgICAgICAgcHJldlRyZWUsXG4gICAgICAgICAgbmV4dFRyZWUsXG4gICAgICAgICAgLy8gcGFyZW50IG1heSBoYXZlIGNoYW5nZWQgaWYgaXQncyBpbiBhIHRlbGVwb3J0XG4gICAgICAgICAgaG9zdFBhcmVudE5vZGUocHJldlRyZWUuZWwpLFxuICAgICAgICAgIC8vIGFuY2hvciBtYXkgaGF2ZSBjaGFuZ2VkIGlmIGl0J3MgaW4gYSBmcmFnbWVudFxuICAgICAgICAgIGdldE5leHRIb3N0Tm9kZShwcmV2VHJlZSksXG4gICAgICAgICAgaW5zdGFuY2UsXG4gICAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgICAgaXNTVkdcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgIGVuZE1lYXN1cmUoaW5zdGFuY2UsIGBwYXRjaGApO1xuICAgICAgICB9XG4gICAgICAgIG5leHQuZWwgPSBuZXh0VHJlZS5lbDtcbiAgICAgICAgaWYgKG9yaWdpbk5leHQgPT09IG51bGwpIHtcbiAgICAgICAgICB1cGRhdGVIT0NIb3N0RWwoaW5zdGFuY2UsIG5leHRUcmVlLmVsKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodSkge1xuICAgICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdCh1LCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZub2RlSG9vayA9IG5leHQucHJvcHMgJiYgbmV4dC5wcm9wcy5vblZub2RlVXBkYXRlZCkge1xuICAgICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdChcbiAgICAgICAgICAgICgpID0+IGludm9rZVZOb2RlSG9vayh2bm9kZUhvb2ssIHBhcmVudCwgbmV4dCwgdm5vZGUpLFxuICAgICAgICAgICAgcGFyZW50U3VzcGVuc2VcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgfHwgX19WVUVfUFJPRF9ERVZUT09MU19fKSB7XG4gICAgICAgICAgZGV2dG9vbHNDb21wb25lbnRVcGRhdGVkKGluc3RhbmNlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgcG9wV2FybmluZ0NvbnRleHQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgZWZmZWN0ID0gaW5zdGFuY2UuZWZmZWN0ID0gbmV3IFJlYWN0aXZlRWZmZWN0KFxuICAgICAgY29tcG9uZW50VXBkYXRlRm4sXG4gICAgICAoKSA9PiBxdWV1ZUpvYih1cGRhdGUpLFxuICAgICAgaW5zdGFuY2Uuc2NvcGVcbiAgICAgIC8vIHRyYWNrIGl0IGluIGNvbXBvbmVudCdzIGVmZmVjdCBzY29wZVxuICAgICk7XG4gICAgY29uc3QgdXBkYXRlID0gaW5zdGFuY2UudXBkYXRlID0gKCkgPT4gZWZmZWN0LnJ1bigpO1xuICAgIHVwZGF0ZS5pZCA9IGluc3RhbmNlLnVpZDtcbiAgICB0b2dnbGVSZWN1cnNlKGluc3RhbmNlLCB0cnVlKTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICBlZmZlY3Qub25UcmFjayA9IGluc3RhbmNlLnJ0YyA/IChlKSA9PiBpbnZva2VBcnJheUZucyhpbnN0YW5jZS5ydGMsIGUpIDogdm9pZCAwO1xuICAgICAgZWZmZWN0Lm9uVHJpZ2dlciA9IGluc3RhbmNlLnJ0ZyA/IChlKSA9PiBpbnZva2VBcnJheUZucyhpbnN0YW5jZS5ydGcsIGUpIDogdm9pZCAwO1xuICAgICAgdXBkYXRlLm93bmVySW5zdGFuY2UgPSBpbnN0YW5jZTtcbiAgICB9XG4gICAgdXBkYXRlKCk7XG4gIH07XG4gIGNvbnN0IHVwZGF0ZUNvbXBvbmVudFByZVJlbmRlciA9IChpbnN0YW5jZSwgbmV4dFZOb2RlLCBvcHRpbWl6ZWQpID0+IHtcbiAgICBuZXh0Vk5vZGUuY29tcG9uZW50ID0gaW5zdGFuY2U7XG4gICAgY29uc3QgcHJldlByb3BzID0gaW5zdGFuY2Uudm5vZGUucHJvcHM7XG4gICAgaW5zdGFuY2Uudm5vZGUgPSBuZXh0Vk5vZGU7XG4gICAgaW5zdGFuY2UubmV4dCA9IG51bGw7XG4gICAgdXBkYXRlUHJvcHMoaW5zdGFuY2UsIG5leHRWTm9kZS5wcm9wcywgcHJldlByb3BzLCBvcHRpbWl6ZWQpO1xuICAgIHVwZGF0ZVNsb3RzKGluc3RhbmNlLCBuZXh0Vk5vZGUuY2hpbGRyZW4sIG9wdGltaXplZCk7XG4gICAgcGF1c2VUcmFja2luZygpO1xuICAgIGZsdXNoUHJlRmx1c2hDYnMoKTtcbiAgICByZXNldFRyYWNraW5nKCk7XG4gIH07XG4gIGNvbnN0IHBhdGNoQ2hpbGRyZW4gPSAobjEsIG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkID0gZmFsc2UpID0+IHtcbiAgICBjb25zdCBjMSA9IG4xICYmIG4xLmNoaWxkcmVuO1xuICAgIGNvbnN0IHByZXZTaGFwZUZsYWcgPSBuMSA/IG4xLnNoYXBlRmxhZyA6IDA7XG4gICAgY29uc3QgYzIgPSBuMi5jaGlsZHJlbjtcbiAgICBjb25zdCB7IHBhdGNoRmxhZywgc2hhcGVGbGFnIH0gPSBuMjtcbiAgICBpZiAocGF0Y2hGbGFnID4gMCkge1xuICAgICAgaWYgKHBhdGNoRmxhZyAmIDEyOCkge1xuICAgICAgICBwYXRjaEtleWVkQ2hpbGRyZW4oXG4gICAgICAgICAgYzEsXG4gICAgICAgICAgYzIsXG4gICAgICAgICAgY29udGFpbmVyLFxuICAgICAgICAgIGFuY2hvcixcbiAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgICAgaXNTVkcsXG4gICAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICAgIG9wdGltaXplZFxuICAgICAgICApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9IGVsc2UgaWYgKHBhdGNoRmxhZyAmIDI1Nikge1xuICAgICAgICBwYXRjaFVua2V5ZWRDaGlsZHJlbihcbiAgICAgICAgICBjMSxcbiAgICAgICAgICBjMixcbiAgICAgICAgICBjb250YWluZXIsXG4gICAgICAgICAgYW5jaG9yLFxuICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICBpc1NWRyxcbiAgICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgICAgb3B0aW1pemVkXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHNoYXBlRmxhZyAmIDgpIHtcbiAgICAgIGlmIChwcmV2U2hhcGVGbGFnICYgMTYpIHtcbiAgICAgICAgdW5tb3VudENoaWxkcmVuKGMxLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlKTtcbiAgICAgIH1cbiAgICAgIGlmIChjMiAhPT0gYzEpIHtcbiAgICAgICAgaG9zdFNldEVsZW1lbnRUZXh0KGNvbnRhaW5lciwgYzIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocHJldlNoYXBlRmxhZyAmIDE2KSB7XG4gICAgICAgIGlmIChzaGFwZUZsYWcgJiAxNikge1xuICAgICAgICAgIHBhdGNoS2V5ZWRDaGlsZHJlbihcbiAgICAgICAgICAgIGMxLFxuICAgICAgICAgICAgYzIsXG4gICAgICAgICAgICBjb250YWluZXIsXG4gICAgICAgICAgICBhbmNob3IsXG4gICAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICAgIGlzU1ZHLFxuICAgICAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICAgICAgb3B0aW1pemVkXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB1bm1vdW50Q2hpbGRyZW4oYzEsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHRydWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAocHJldlNoYXBlRmxhZyAmIDgpIHtcbiAgICAgICAgICBob3N0U2V0RWxlbWVudFRleHQoY29udGFpbmVyLCBcIlwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2hhcGVGbGFnICYgMTYpIHtcbiAgICAgICAgICBtb3VudENoaWxkcmVuKFxuICAgICAgICAgICAgYzIsXG4gICAgICAgICAgICBjb250YWluZXIsXG4gICAgICAgICAgICBhbmNob3IsXG4gICAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICAgIGlzU1ZHLFxuICAgICAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICAgICAgb3B0aW1pemVkXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgY29uc3QgcGF0Y2hVbmtleWVkQ2hpbGRyZW4gPSAoYzEsIGMyLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKSA9PiB7XG4gICAgYzEgPSBjMSB8fCBFTVBUWV9BUlI7XG4gICAgYzIgPSBjMiB8fCBFTVBUWV9BUlI7XG4gICAgY29uc3Qgb2xkTGVuZ3RoID0gYzEubGVuZ3RoO1xuICAgIGNvbnN0IG5ld0xlbmd0aCA9IGMyLmxlbmd0aDtcbiAgICBjb25zdCBjb21tb25MZW5ndGggPSBNYXRoLm1pbihvbGRMZW5ndGgsIG5ld0xlbmd0aCk7XG4gICAgbGV0IGk7XG4gICAgZm9yIChpID0gMDsgaSA8IGNvbW1vbkxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBuZXh0Q2hpbGQgPSBjMltpXSA9IG9wdGltaXplZCA/IGNsb25lSWZNb3VudGVkKGMyW2ldKSA6IG5vcm1hbGl6ZVZOb2RlKGMyW2ldKTtcbiAgICAgIHBhdGNoKFxuICAgICAgICBjMVtpXSxcbiAgICAgICAgbmV4dENoaWxkLFxuICAgICAgICBjb250YWluZXIsXG4gICAgICAgIG51bGwsXG4gICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgIGlzU1ZHLFxuICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgIG9wdGltaXplZFxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKG9sZExlbmd0aCA+IG5ld0xlbmd0aCkge1xuICAgICAgdW5tb3VudENoaWxkcmVuKFxuICAgICAgICBjMSxcbiAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgdHJ1ZSxcbiAgICAgICAgZmFsc2UsXG4gICAgICAgIGNvbW1vbkxlbmd0aFxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbW91bnRDaGlsZHJlbihcbiAgICAgICAgYzIsXG4gICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgYW5jaG9yLFxuICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICBpc1NWRyxcbiAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICBvcHRpbWl6ZWQsXG4gICAgICAgIGNvbW1vbkxlbmd0aFxuICAgICAgKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHBhdGNoS2V5ZWRDaGlsZHJlbiA9IChjMSwgYzIsIGNvbnRhaW5lciwgcGFyZW50QW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpID0+IHtcbiAgICBsZXQgaSA9IDA7XG4gICAgY29uc3QgbDIgPSBjMi5sZW5ndGg7XG4gICAgbGV0IGUxID0gYzEubGVuZ3RoIC0gMTtcbiAgICBsZXQgZTIgPSBsMiAtIDE7XG4gICAgd2hpbGUgKGkgPD0gZTEgJiYgaSA8PSBlMikge1xuICAgICAgY29uc3QgbjEgPSBjMVtpXTtcbiAgICAgIGNvbnN0IG4yID0gYzJbaV0gPSBvcHRpbWl6ZWQgPyBjbG9uZUlmTW91bnRlZChjMltpXSkgOiBub3JtYWxpemVWTm9kZShjMltpXSk7XG4gICAgICBpZiAoaXNTYW1lVk5vZGVUeXBlKG4xLCBuMikpIHtcbiAgICAgICAgcGF0Y2goXG4gICAgICAgICAgbjEsXG4gICAgICAgICAgbjIsXG4gICAgICAgICAgY29udGFpbmVyLFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICAgIGlzU1ZHLFxuICAgICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgICBvcHRpbWl6ZWRcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgaSsrO1xuICAgIH1cbiAgICB3aGlsZSAoaSA8PSBlMSAmJiBpIDw9IGUyKSB7XG4gICAgICBjb25zdCBuMSA9IGMxW2UxXTtcbiAgICAgIGNvbnN0IG4yID0gYzJbZTJdID0gb3B0aW1pemVkID8gY2xvbmVJZk1vdW50ZWQoYzJbZTJdKSA6IG5vcm1hbGl6ZVZOb2RlKGMyW2UyXSk7XG4gICAgICBpZiAoaXNTYW1lVk5vZGVUeXBlKG4xLCBuMikpIHtcbiAgICAgICAgcGF0Y2goXG4gICAgICAgICAgbjEsXG4gICAgICAgICAgbjIsXG4gICAgICAgICAgY29udGFpbmVyLFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICAgIGlzU1ZHLFxuICAgICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgICBvcHRpbWl6ZWRcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgZTEtLTtcbiAgICAgIGUyLS07XG4gICAgfVxuICAgIGlmIChpID4gZTEpIHtcbiAgICAgIGlmIChpIDw9IGUyKSB7XG4gICAgICAgIGNvbnN0IG5leHRQb3MgPSBlMiArIDE7XG4gICAgICAgIGNvbnN0IGFuY2hvciA9IG5leHRQb3MgPCBsMiA/IGMyW25leHRQb3NdLmVsIDogcGFyZW50QW5jaG9yO1xuICAgICAgICB3aGlsZSAoaSA8PSBlMikge1xuICAgICAgICAgIHBhdGNoKFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIGMyW2ldID0gb3B0aW1pemVkID8gY2xvbmVJZk1vdW50ZWQoYzJbaV0pIDogbm9ybWFsaXplVk5vZGUoYzJbaV0pLFxuICAgICAgICAgICAgY29udGFpbmVyLFxuICAgICAgICAgICAgYW5jaG9yLFxuICAgICAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgICAgICBpc1NWRyxcbiAgICAgICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgICAgIG9wdGltaXplZFxuICAgICAgICAgICk7XG4gICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpID4gZTIpIHtcbiAgICAgIHdoaWxlIChpIDw9IGUxKSB7XG4gICAgICAgIHVubW91bnQoYzFbaV0sIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHRydWUpO1xuICAgICAgICBpKys7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHMxID0gaTtcbiAgICAgIGNvbnN0IHMyID0gaTtcbiAgICAgIGNvbnN0IGtleVRvTmV3SW5kZXhNYXAgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICAgICAgZm9yIChpID0gczI7IGkgPD0gZTI7IGkrKykge1xuICAgICAgICBjb25zdCBuZXh0Q2hpbGQgPSBjMltpXSA9IG9wdGltaXplZCA/IGNsb25lSWZNb3VudGVkKGMyW2ldKSA6IG5vcm1hbGl6ZVZOb2RlKGMyW2ldKTtcbiAgICAgICAgaWYgKG5leHRDaGlsZC5rZXkgIT0gbnVsbCkge1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYga2V5VG9OZXdJbmRleE1hcC5oYXMobmV4dENoaWxkLmtleSkpIHtcbiAgICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAgIGBEdXBsaWNhdGUga2V5cyBmb3VuZCBkdXJpbmcgdXBkYXRlOmAsXG4gICAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KG5leHRDaGlsZC5rZXkpLFxuICAgICAgICAgICAgICBgTWFrZSBzdXJlIGtleXMgYXJlIHVuaXF1ZS5gXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBrZXlUb05ld0luZGV4TWFwLnNldChuZXh0Q2hpbGQua2V5LCBpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGV0IGo7XG4gICAgICBsZXQgcGF0Y2hlZCA9IDA7XG4gICAgICBjb25zdCB0b0JlUGF0Y2hlZCA9IGUyIC0gczIgKyAxO1xuICAgICAgbGV0IG1vdmVkID0gZmFsc2U7XG4gICAgICBsZXQgbWF4TmV3SW5kZXhTb0ZhciA9IDA7XG4gICAgICBjb25zdCBuZXdJbmRleFRvT2xkSW5kZXhNYXAgPSBuZXcgQXJyYXkodG9CZVBhdGNoZWQpO1xuICAgICAgZm9yIChpID0gMDsgaSA8IHRvQmVQYXRjaGVkOyBpKyspXG4gICAgICAgIG5ld0luZGV4VG9PbGRJbmRleE1hcFtpXSA9IDA7XG4gICAgICBmb3IgKGkgPSBzMTsgaSA8PSBlMTsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHByZXZDaGlsZCA9IGMxW2ldO1xuICAgICAgICBpZiAocGF0Y2hlZCA+PSB0b0JlUGF0Y2hlZCkge1xuICAgICAgICAgIHVubW91bnQocHJldkNoaWxkLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCB0cnVlKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbmV3SW5kZXg7XG4gICAgICAgIGlmIChwcmV2Q2hpbGQua2V5ICE9IG51bGwpIHtcbiAgICAgICAgICBuZXdJbmRleCA9IGtleVRvTmV3SW5kZXhNYXAuZ2V0KHByZXZDaGlsZC5rZXkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZvciAoaiA9IHMyOyBqIDw9IGUyOyBqKyspIHtcbiAgICAgICAgICAgIGlmIChuZXdJbmRleFRvT2xkSW5kZXhNYXBbaiAtIHMyXSA9PT0gMCAmJiBpc1NhbWVWTm9kZVR5cGUocHJldkNoaWxkLCBjMltqXSkpIHtcbiAgICAgICAgICAgICAgbmV3SW5kZXggPSBqO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5ld0luZGV4ID09PSB2b2lkIDApIHtcbiAgICAgICAgICB1bm1vdW50KHByZXZDaGlsZCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgdHJ1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3SW5kZXhUb09sZEluZGV4TWFwW25ld0luZGV4IC0gczJdID0gaSArIDE7XG4gICAgICAgICAgaWYgKG5ld0luZGV4ID49IG1heE5ld0luZGV4U29GYXIpIHtcbiAgICAgICAgICAgIG1heE5ld0luZGV4U29GYXIgPSBuZXdJbmRleDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbW92ZWQgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwYXRjaChcbiAgICAgICAgICAgIHByZXZDaGlsZCxcbiAgICAgICAgICAgIGMyW25ld0luZGV4XSxcbiAgICAgICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICAgIGlzU1ZHLFxuICAgICAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICAgICAgb3B0aW1pemVkXG4gICAgICAgICAgKTtcbiAgICAgICAgICBwYXRjaGVkKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvbnN0IGluY3JlYXNpbmdOZXdJbmRleFNlcXVlbmNlID0gbW92ZWQgPyBnZXRTZXF1ZW5jZShuZXdJbmRleFRvT2xkSW5kZXhNYXApIDogRU1QVFlfQVJSO1xuICAgICAgaiA9IGluY3JlYXNpbmdOZXdJbmRleFNlcXVlbmNlLmxlbmd0aCAtIDE7XG4gICAgICBmb3IgKGkgPSB0b0JlUGF0Y2hlZCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIGNvbnN0IG5leHRJbmRleCA9IHMyICsgaTtcbiAgICAgICAgY29uc3QgbmV4dENoaWxkID0gYzJbbmV4dEluZGV4XTtcbiAgICAgICAgY29uc3QgYW5jaG9yID0gbmV4dEluZGV4ICsgMSA8IGwyID8gYzJbbmV4dEluZGV4ICsgMV0uZWwgOiBwYXJlbnRBbmNob3I7XG4gICAgICAgIGlmIChuZXdJbmRleFRvT2xkSW5kZXhNYXBbaV0gPT09IDApIHtcbiAgICAgICAgICBwYXRjaChcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBuZXh0Q2hpbGQsXG4gICAgICAgICAgICBjb250YWluZXIsXG4gICAgICAgICAgICBhbmNob3IsXG4gICAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICAgIGlzU1ZHLFxuICAgICAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICAgICAgb3B0aW1pemVkXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmIChtb3ZlZCkge1xuICAgICAgICAgIGlmIChqIDwgMCB8fCBpICE9PSBpbmNyZWFzaW5nTmV3SW5kZXhTZXF1ZW5jZVtqXSkge1xuICAgICAgICAgICAgbW92ZShuZXh0Q2hpbGQsIGNvbnRhaW5lciwgYW5jaG9yLCAyKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgai0tO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgY29uc3QgbW92ZSA9ICh2bm9kZSwgY29udGFpbmVyLCBhbmNob3IsIG1vdmVUeXBlLCBwYXJlbnRTdXNwZW5zZSA9IG51bGwpID0+IHtcbiAgICBjb25zdCB7IGVsLCB0eXBlLCB0cmFuc2l0aW9uLCBjaGlsZHJlbiwgc2hhcGVGbGFnIH0gPSB2bm9kZTtcbiAgICBpZiAoc2hhcGVGbGFnICYgNikge1xuICAgICAgbW92ZSh2bm9kZS5jb21wb25lbnQuc3ViVHJlZSwgY29udGFpbmVyLCBhbmNob3IsIG1vdmVUeXBlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHNoYXBlRmxhZyAmIDEyOCkge1xuICAgICAgdm5vZGUuc3VzcGVuc2UubW92ZShjb250YWluZXIsIGFuY2hvciwgbW92ZVR5cGUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoc2hhcGVGbGFnICYgNjQpIHtcbiAgICAgIHR5cGUubW92ZSh2bm9kZSwgY29udGFpbmVyLCBhbmNob3IsIGludGVybmFscyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0eXBlID09PSBGcmFnbWVudCkge1xuICAgICAgaG9zdEluc2VydChlbCwgY29udGFpbmVyLCBhbmNob3IpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICBtb3ZlKGNoaWxkcmVuW2ldLCBjb250YWluZXIsIGFuY2hvciwgbW92ZVR5cGUpO1xuICAgICAgfVxuICAgICAgaG9zdEluc2VydCh2bm9kZS5hbmNob3IsIGNvbnRhaW5lciwgYW5jaG9yKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHR5cGUgPT09IFN0YXRpYykge1xuICAgICAgbW92ZVN0YXRpY05vZGUodm5vZGUsIGNvbnRhaW5lciwgYW5jaG9yKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgbmVlZFRyYW5zaXRpb24gPSBtb3ZlVHlwZSAhPT0gMiAmJiBzaGFwZUZsYWcgJiAxICYmIHRyYW5zaXRpb247XG4gICAgaWYgKG5lZWRUcmFuc2l0aW9uKSB7XG4gICAgICBpZiAobW92ZVR5cGUgPT09IDApIHtcbiAgICAgICAgdHJhbnNpdGlvbi5iZWZvcmVFbnRlcihlbCk7XG4gICAgICAgIGhvc3RJbnNlcnQoZWwsIGNvbnRhaW5lciwgYW5jaG9yKTtcbiAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KCgpID0+IHRyYW5zaXRpb24uZW50ZXIoZWwpLCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCB7IGxlYXZlLCBkZWxheUxlYXZlLCBhZnRlckxlYXZlIH0gPSB0cmFuc2l0aW9uO1xuICAgICAgICBjb25zdCByZW1vdmUyID0gKCkgPT4gaG9zdEluc2VydChlbCwgY29udGFpbmVyLCBhbmNob3IpO1xuICAgICAgICBjb25zdCBwZXJmb3JtTGVhdmUgPSAoKSA9PiB7XG4gICAgICAgICAgbGVhdmUoZWwsICgpID0+IHtcbiAgICAgICAgICAgIHJlbW92ZTIoKTtcbiAgICAgICAgICAgIGFmdGVyTGVhdmUgJiYgYWZ0ZXJMZWF2ZSgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBpZiAoZGVsYXlMZWF2ZSkge1xuICAgICAgICAgIGRlbGF5TGVhdmUoZWwsIHJlbW92ZTIsIHBlcmZvcm1MZWF2ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVyZm9ybUxlYXZlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaG9zdEluc2VydChlbCwgY29udGFpbmVyLCBhbmNob3IpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgdW5tb3VudCA9ICh2bm9kZSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgZG9SZW1vdmUgPSBmYWxzZSwgb3B0aW1pemVkID0gZmFsc2UpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICB0eXBlLFxuICAgICAgcHJvcHMsXG4gICAgICByZWYsXG4gICAgICBjaGlsZHJlbixcbiAgICAgIGR5bmFtaWNDaGlsZHJlbixcbiAgICAgIHNoYXBlRmxhZyxcbiAgICAgIHBhdGNoRmxhZyxcbiAgICAgIGRpcnNcbiAgICB9ID0gdm5vZGU7XG4gICAgaWYgKHJlZiAhPSBudWxsKSB7XG4gICAgICBzZXRSZWYocmVmLCBudWxsLCBwYXJlbnRTdXNwZW5zZSwgdm5vZGUsIHRydWUpO1xuICAgIH1cbiAgICBpZiAoc2hhcGVGbGFnICYgMjU2KSB7XG4gICAgICBwYXJlbnRDb21wb25lbnQuY3R4LmRlYWN0aXZhdGUodm5vZGUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBzaG91bGRJbnZva2VEaXJzID0gc2hhcGVGbGFnICYgMSAmJiBkaXJzO1xuICAgIGNvbnN0IHNob3VsZEludm9rZVZub2RlSG9vayA9ICFpc0FzeW5jV3JhcHBlcih2bm9kZSk7XG4gICAgbGV0IHZub2RlSG9vaztcbiAgICBpZiAoc2hvdWxkSW52b2tlVm5vZGVIb29rICYmICh2bm9kZUhvb2sgPSBwcm9wcyAmJiBwcm9wcy5vblZub2RlQmVmb3JlVW5tb3VudCkpIHtcbiAgICAgIGludm9rZVZOb2RlSG9vayh2bm9kZUhvb2ssIHBhcmVudENvbXBvbmVudCwgdm5vZGUpO1xuICAgIH1cbiAgICBpZiAoc2hhcGVGbGFnICYgNikge1xuICAgICAgdW5tb3VudENvbXBvbmVudCh2bm9kZS5jb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBkb1JlbW92ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChzaGFwZUZsYWcgJiAxMjgpIHtcbiAgICAgICAgdm5vZGUuc3VzcGVuc2UudW5tb3VudChwYXJlbnRTdXNwZW5zZSwgZG9SZW1vdmUpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoc2hvdWxkSW52b2tlRGlycykge1xuICAgICAgICBpbnZva2VEaXJlY3RpdmVIb29rKHZub2RlLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIFwiYmVmb3JlVW5tb3VudFwiKTtcbiAgICAgIH1cbiAgICAgIGlmIChzaGFwZUZsYWcgJiA2NCkge1xuICAgICAgICB2bm9kZS50eXBlLnJlbW92ZShcbiAgICAgICAgICB2bm9kZSxcbiAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgICAgb3B0aW1pemVkLFxuICAgICAgICAgIGludGVybmFscyxcbiAgICAgICAgICBkb1JlbW92ZVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIGlmIChkeW5hbWljQ2hpbGRyZW4gJiYgLy8gIzExNTM6IGZhc3QgcGF0aCBzaG91bGQgbm90IGJlIHRha2VuIGZvciBub24tc3RhYmxlICh2LWZvcikgZnJhZ21lbnRzXG4gICAgICAodHlwZSAhPT0gRnJhZ21lbnQgfHwgcGF0Y2hGbGFnID4gMCAmJiBwYXRjaEZsYWcgJiA2NCkpIHtcbiAgICAgICAgdW5tb3VudENoaWxkcmVuKFxuICAgICAgICAgIGR5bmFtaWNDaGlsZHJlbixcbiAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgdHJ1ZVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSBGcmFnbWVudCAmJiBwYXRjaEZsYWcgJiAoMTI4IHwgMjU2KSB8fCAhb3B0aW1pemVkICYmIHNoYXBlRmxhZyAmIDE2KSB7XG4gICAgICAgIHVubW91bnRDaGlsZHJlbihjaGlsZHJlbiwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgICB9XG4gICAgICBpZiAoZG9SZW1vdmUpIHtcbiAgICAgICAgcmVtb3ZlKHZub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHNob3VsZEludm9rZVZub2RlSG9vayAmJiAodm5vZGVIb29rID0gcHJvcHMgJiYgcHJvcHMub25Wbm9kZVVubW91bnRlZCkgfHwgc2hvdWxkSW52b2tlRGlycykge1xuICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KCgpID0+IHtcbiAgICAgICAgdm5vZGVIb29rICYmIGludm9rZVZOb2RlSG9vayh2bm9kZUhvb2ssIHBhcmVudENvbXBvbmVudCwgdm5vZGUpO1xuICAgICAgICBzaG91bGRJbnZva2VEaXJzICYmIGludm9rZURpcmVjdGl2ZUhvb2sodm5vZGUsIG51bGwsIHBhcmVudENvbXBvbmVudCwgXCJ1bm1vdW50ZWRcIik7XG4gICAgICB9LCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgfVxuICB9O1xuICBjb25zdCByZW1vdmUgPSAodm5vZGUpID0+IHtcbiAgICBjb25zdCB7IHR5cGUsIGVsLCBhbmNob3IsIHRyYW5zaXRpb24gfSA9IHZub2RlO1xuICAgIGlmICh0eXBlID09PSBGcmFnbWVudCkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiB2bm9kZS5wYXRjaEZsYWcgPiAwICYmIHZub2RlLnBhdGNoRmxhZyAmIDIwNDggJiYgdHJhbnNpdGlvbiAmJiAhdHJhbnNpdGlvbi5wZXJzaXN0ZWQpIHtcbiAgICAgICAgdm5vZGUuY2hpbGRyZW4uZm9yRWFjaCgoY2hpbGQpID0+IHtcbiAgICAgICAgICBpZiAoY2hpbGQudHlwZSA9PT0gQ29tbWVudCkge1xuICAgICAgICAgICAgaG9zdFJlbW92ZShjaGlsZC5lbCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlbW92ZShjaGlsZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlbW92ZUZyYWdtZW50KGVsLCBhbmNob3IpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodHlwZSA9PT0gU3RhdGljKSB7XG4gICAgICByZW1vdmVTdGF0aWNOb2RlKHZub2RlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgcGVyZm9ybVJlbW92ZSA9ICgpID0+IHtcbiAgICAgIGhvc3RSZW1vdmUoZWwpO1xuICAgICAgaWYgKHRyYW5zaXRpb24gJiYgIXRyYW5zaXRpb24ucGVyc2lzdGVkICYmIHRyYW5zaXRpb24uYWZ0ZXJMZWF2ZSkge1xuICAgICAgICB0cmFuc2l0aW9uLmFmdGVyTGVhdmUoKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGlmICh2bm9kZS5zaGFwZUZsYWcgJiAxICYmIHRyYW5zaXRpb24gJiYgIXRyYW5zaXRpb24ucGVyc2lzdGVkKSB7XG4gICAgICBjb25zdCB7IGxlYXZlLCBkZWxheUxlYXZlIH0gPSB0cmFuc2l0aW9uO1xuICAgICAgY29uc3QgcGVyZm9ybUxlYXZlID0gKCkgPT4gbGVhdmUoZWwsIHBlcmZvcm1SZW1vdmUpO1xuICAgICAgaWYgKGRlbGF5TGVhdmUpIHtcbiAgICAgICAgZGVsYXlMZWF2ZSh2bm9kZS5lbCwgcGVyZm9ybVJlbW92ZSwgcGVyZm9ybUxlYXZlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlcmZvcm1MZWF2ZSgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZXJmb3JtUmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuICBjb25zdCByZW1vdmVGcmFnbWVudCA9IChjdXIsIGVuZCkgPT4ge1xuICAgIGxldCBuZXh0O1xuICAgIHdoaWxlIChjdXIgIT09IGVuZCkge1xuICAgICAgbmV4dCA9IGhvc3ROZXh0U2libGluZyhjdXIpO1xuICAgICAgaG9zdFJlbW92ZShjdXIpO1xuICAgICAgY3VyID0gbmV4dDtcbiAgICB9XG4gICAgaG9zdFJlbW92ZShlbmQpO1xuICB9O1xuICBjb25zdCB1bm1vdW50Q29tcG9uZW50ID0gKGluc3RhbmNlLCBwYXJlbnRTdXNwZW5zZSwgZG9SZW1vdmUpID0+IHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmIGluc3RhbmNlLnR5cGUuX19obXJJZCkge1xuICAgICAgdW5yZWdpc3RlckhNUihpbnN0YW5jZSk7XG4gICAgfVxuICAgIGNvbnN0IHsgYnVtLCBzY29wZSwgdXBkYXRlLCBzdWJUcmVlLCB1bSB9ID0gaW5zdGFuY2U7XG4gICAgaWYgKGJ1bSkge1xuICAgICAgaW52b2tlQXJyYXlGbnMoYnVtKTtcbiAgICB9XG4gICAgc2NvcGUuc3RvcCgpO1xuICAgIGlmICh1cGRhdGUpIHtcbiAgICAgIHVwZGF0ZS5hY3RpdmUgPSBmYWxzZTtcbiAgICAgIHVubW91bnQoc3ViVHJlZSwgaW5zdGFuY2UsIHBhcmVudFN1c3BlbnNlLCBkb1JlbW92ZSk7XG4gICAgfVxuICAgIGlmICh1bSkge1xuICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KHVtLCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgfVxuICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdCgoKSA9PiB7XG4gICAgICBpbnN0YW5jZS5pc1VubW91bnRlZCA9IHRydWU7XG4gICAgfSwgcGFyZW50U3VzcGVuc2UpO1xuICAgIGlmIChwYXJlbnRTdXNwZW5zZSAmJiBwYXJlbnRTdXNwZW5zZS5wZW5kaW5nQnJhbmNoICYmICFwYXJlbnRTdXNwZW5zZS5pc1VubW91bnRlZCAmJiBpbnN0YW5jZS5hc3luY0RlcCAmJiAhaW5zdGFuY2UuYXN5bmNSZXNvbHZlZCAmJiBpbnN0YW5jZS5zdXNwZW5zZUlkID09PSBwYXJlbnRTdXNwZW5zZS5wZW5kaW5nSWQpIHtcbiAgICAgIHBhcmVudFN1c3BlbnNlLmRlcHMtLTtcbiAgICAgIGlmIChwYXJlbnRTdXNwZW5zZS5kZXBzID09PSAwKSB7XG4gICAgICAgIHBhcmVudFN1c3BlbnNlLnJlc29sdmUoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiB8fCBfX1ZVRV9QUk9EX0RFVlRPT0xTX18pIHtcbiAgICAgIGRldnRvb2xzQ29tcG9uZW50UmVtb3ZlZChpbnN0YW5jZSk7XG4gICAgfVxuICB9O1xuICBjb25zdCB1bm1vdW50Q2hpbGRyZW4gPSAoY2hpbGRyZW4sIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGRvUmVtb3ZlID0gZmFsc2UsIG9wdGltaXplZCA9IGZhbHNlLCBzdGFydCA9IDApID0+IHtcbiAgICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgdW5tb3VudChjaGlsZHJlbltpXSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgZG9SZW1vdmUsIG9wdGltaXplZCk7XG4gICAgfVxuICB9O1xuICBjb25zdCBnZXROZXh0SG9zdE5vZGUgPSAodm5vZGUpID0+IHtcbiAgICBpZiAodm5vZGUuc2hhcGVGbGFnICYgNikge1xuICAgICAgcmV0dXJuIGdldE5leHRIb3N0Tm9kZSh2bm9kZS5jb21wb25lbnQuc3ViVHJlZSk7XG4gICAgfVxuICAgIGlmICh2bm9kZS5zaGFwZUZsYWcgJiAxMjgpIHtcbiAgICAgIHJldHVybiB2bm9kZS5zdXNwZW5zZS5uZXh0KCk7XG4gICAgfVxuICAgIHJldHVybiBob3N0TmV4dFNpYmxpbmcodm5vZGUuYW5jaG9yIHx8IHZub2RlLmVsKTtcbiAgfTtcbiAgY29uc3QgcmVuZGVyID0gKHZub2RlLCBjb250YWluZXIsIGlzU1ZHKSA9PiB7XG4gICAgaWYgKHZub2RlID09IG51bGwpIHtcbiAgICAgIGlmIChjb250YWluZXIuX3Zub2RlKSB7XG4gICAgICAgIHVubW91bnQoY29udGFpbmVyLl92bm9kZSwgbnVsbCwgbnVsbCwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhdGNoKGNvbnRhaW5lci5fdm5vZGUgfHwgbnVsbCwgdm5vZGUsIGNvbnRhaW5lciwgbnVsbCwgbnVsbCwgbnVsbCwgaXNTVkcpO1xuICAgIH1cbiAgICBmbHVzaFByZUZsdXNoQ2JzKCk7XG4gICAgZmx1c2hQb3N0Rmx1c2hDYnMoKTtcbiAgICBjb250YWluZXIuX3Zub2RlID0gdm5vZGU7XG4gIH07XG4gIGNvbnN0IGludGVybmFscyA9IHtcbiAgICBwOiBwYXRjaCxcbiAgICB1bTogdW5tb3VudCxcbiAgICBtOiBtb3ZlLFxuICAgIHI6IHJlbW92ZSxcbiAgICBtdDogbW91bnRDb21wb25lbnQsXG4gICAgbWM6IG1vdW50Q2hpbGRyZW4sXG4gICAgcGM6IHBhdGNoQ2hpbGRyZW4sXG4gICAgcGJjOiBwYXRjaEJsb2NrQ2hpbGRyZW4sXG4gICAgbjogZ2V0TmV4dEhvc3ROb2RlLFxuICAgIG86IG9wdGlvbnNcbiAgfTtcbiAgbGV0IGh5ZHJhdGU7XG4gIGxldCBoeWRyYXRlTm9kZTtcbiAgaWYgKGNyZWF0ZUh5ZHJhdGlvbkZucykge1xuICAgIFtoeWRyYXRlLCBoeWRyYXRlTm9kZV0gPSBjcmVhdGVIeWRyYXRpb25GbnMoXG4gICAgICBpbnRlcm5hbHNcbiAgICApO1xuICB9XG4gIHJldHVybiB7XG4gICAgcmVuZGVyLFxuICAgIGh5ZHJhdGUsXG4gICAgY3JlYXRlQXBwOiBjcmVhdGVBcHBBUEkocmVuZGVyLCBoeWRyYXRlKVxuICB9O1xufVxuZnVuY3Rpb24gdG9nZ2xlUmVjdXJzZSh7IGVmZmVjdCwgdXBkYXRlIH0sIGFsbG93ZWQpIHtcbiAgZWZmZWN0LmFsbG93UmVjdXJzZSA9IHVwZGF0ZS5hbGxvd1JlY3Vyc2UgPSBhbGxvd2VkO1xufVxuZnVuY3Rpb24gdHJhdmVyc2VTdGF0aWNDaGlsZHJlbihuMSwgbjIsIHNoYWxsb3cgPSBmYWxzZSkge1xuICBjb25zdCBjaDEgPSBuMS5jaGlsZHJlbjtcbiAgY29uc3QgY2gyID0gbjIuY2hpbGRyZW47XG4gIGlmIChpc0FycmF5KGNoMSkgJiYgaXNBcnJheShjaDIpKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaDEubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGMxID0gY2gxW2ldO1xuICAgICAgbGV0IGMyID0gY2gyW2ldO1xuICAgICAgaWYgKGMyLnNoYXBlRmxhZyAmIDEgJiYgIWMyLmR5bmFtaWNDaGlsZHJlbikge1xuICAgICAgICBpZiAoYzIucGF0Y2hGbGFnIDw9IDAgfHwgYzIucGF0Y2hGbGFnID09PSAzMikge1xuICAgICAgICAgIGMyID0gY2gyW2ldID0gY2xvbmVJZk1vdW50ZWQoY2gyW2ldKTtcbiAgICAgICAgICBjMi5lbCA9IGMxLmVsO1xuICAgICAgICB9XG4gICAgICAgIGlmICghc2hhbGxvdylcbiAgICAgICAgICB0cmF2ZXJzZVN0YXRpY0NoaWxkcmVuKGMxLCBjMik7XG4gICAgICB9XG4gICAgICBpZiAoYzIudHlwZSA9PT0gVGV4dCkge1xuICAgICAgICBjMi5lbCA9IGMxLmVsO1xuICAgICAgfVxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiBjMi50eXBlID09PSBDb21tZW50ICYmICFjMi5lbCkge1xuICAgICAgICBjMi5lbCA9IGMxLmVsO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gZ2V0U2VxdWVuY2UoYXJyKSB7XG4gIGNvbnN0IHAgPSBhcnIuc2xpY2UoKTtcbiAgY29uc3QgcmVzdWx0ID0gWzBdO1xuICBsZXQgaSwgaiwgdSwgdiwgYztcbiAgY29uc3QgbGVuID0gYXJyLmxlbmd0aDtcbiAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgY29uc3QgYXJySSA9IGFycltpXTtcbiAgICBpZiAoYXJySSAhPT0gMCkge1xuICAgICAgaiA9IHJlc3VsdFtyZXN1bHQubGVuZ3RoIC0gMV07XG4gICAgICBpZiAoYXJyW2pdIDwgYXJySSkge1xuICAgICAgICBwW2ldID0gajtcbiAgICAgICAgcmVzdWx0LnB1c2goaSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdSA9IDA7XG4gICAgICB2ID0gcmVzdWx0Lmxlbmd0aCAtIDE7XG4gICAgICB3aGlsZSAodSA8IHYpIHtcbiAgICAgICAgYyA9IHUgKyB2ID4+IDE7XG4gICAgICAgIGlmIChhcnJbcmVzdWx0W2NdXSA8IGFyckkpIHtcbiAgICAgICAgICB1ID0gYyArIDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdiA9IGM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChhcnJJIDwgYXJyW3Jlc3VsdFt1XV0pIHtcbiAgICAgICAgaWYgKHUgPiAwKSB7XG4gICAgICAgICAgcFtpXSA9IHJlc3VsdFt1IC0gMV07XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0W3VdID0gaTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgdSA9IHJlc3VsdC5sZW5ndGg7XG4gIHYgPSByZXN1bHRbdSAtIDFdO1xuICB3aGlsZSAodS0tID4gMCkge1xuICAgIHJlc3VsdFt1XSA9IHY7XG4gICAgdiA9IHBbdl07XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuY29uc3QgaXNUZWxlcG9ydCA9ICh0eXBlKSA9PiB0eXBlLl9faXNUZWxlcG9ydDtcbmNvbnN0IGlzVGVsZXBvcnREaXNhYmxlZCA9IChwcm9wcykgPT4gcHJvcHMgJiYgKHByb3BzLmRpc2FibGVkIHx8IHByb3BzLmRpc2FibGVkID09PSBcIlwiKTtcbmNvbnN0IGlzVGFyZ2V0U1ZHID0gKHRhcmdldCkgPT4gdHlwZW9mIFNWR0VsZW1lbnQgIT09IFwidW5kZWZpbmVkXCIgJiYgdGFyZ2V0IGluc3RhbmNlb2YgU1ZHRWxlbWVudDtcbmNvbnN0IHJlc29sdmVUYXJnZXQgPSAocHJvcHMsIHNlbGVjdCkgPT4ge1xuICBjb25zdCB0YXJnZXRTZWxlY3RvciA9IHByb3BzICYmIHByb3BzLnRvO1xuICBpZiAoaXNTdHJpbmcodGFyZ2V0U2VsZWN0b3IpKSB7XG4gICAgaWYgKCFzZWxlY3QpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiB3YXJuKFxuICAgICAgICBgQ3VycmVudCByZW5kZXJlciBkb2VzIG5vdCBzdXBwb3J0IHN0cmluZyB0YXJnZXQgZm9yIFRlbGVwb3J0cy4gKG1pc3NpbmcgcXVlcnlTZWxlY3RvciByZW5kZXJlciBvcHRpb24pYFxuICAgICAgKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB0YXJnZXQgPSBzZWxlY3QodGFyZ2V0U2VsZWN0b3IpO1xuICAgICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmIHdhcm4oXG4gICAgICAgICAgYEZhaWxlZCB0byBsb2NhdGUgVGVsZXBvcnQgdGFyZ2V0IHdpdGggc2VsZWN0b3IgXCIke3RhcmdldFNlbGVjdG9yfVwiLiBOb3RlIHRoZSB0YXJnZXQgZWxlbWVudCBtdXN0IGV4aXN0IGJlZm9yZSB0aGUgY29tcG9uZW50IGlzIG1vdW50ZWQgLSBpLmUuIHRoZSB0YXJnZXQgY2Fubm90IGJlIHJlbmRlcmVkIGJ5IHRoZSBjb21wb25lbnQgaXRzZWxmLCBhbmQgaWRlYWxseSBzaG91bGQgYmUgb3V0c2lkZSBvZiB0aGUgZW50aXJlIFZ1ZSBjb21wb25lbnQgdHJlZS5gXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmICF0YXJnZXRTZWxlY3RvciAmJiAhaXNUZWxlcG9ydERpc2FibGVkKHByb3BzKSkge1xuICAgICAgd2FybihgSW52YWxpZCBUZWxlcG9ydCB0YXJnZXQ6ICR7dGFyZ2V0U2VsZWN0b3J9YCk7XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXRTZWxlY3RvcjtcbiAgfVxufTtcbmNvbnN0IFRlbGVwb3J0SW1wbCA9IHtcbiAgX19pc1RlbGVwb3J0OiB0cnVlLFxuICBwcm9jZXNzKG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCwgaW50ZXJuYWxzKSB7XG4gICAgY29uc3Qge1xuICAgICAgbWM6IG1vdW50Q2hpbGRyZW4sXG4gICAgICBwYzogcGF0Y2hDaGlsZHJlbixcbiAgICAgIHBiYzogcGF0Y2hCbG9ja0NoaWxkcmVuLFxuICAgICAgbzogeyBpbnNlcnQsIHF1ZXJ5U2VsZWN0b3IsIGNyZWF0ZVRleHQsIGNyZWF0ZUNvbW1lbnQgfVxuICAgIH0gPSBpbnRlcm5hbHM7XG4gICAgY29uc3QgZGlzYWJsZWQgPSBpc1RlbGVwb3J0RGlzYWJsZWQobjIucHJvcHMpO1xuICAgIGxldCB7IHNoYXBlRmxhZywgY2hpbGRyZW4sIGR5bmFtaWNDaGlsZHJlbiB9ID0gbjI7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiBpc0htclVwZGF0aW5nKSB7XG4gICAgICBvcHRpbWl6ZWQgPSBmYWxzZTtcbiAgICAgIGR5bmFtaWNDaGlsZHJlbiA9IG51bGw7XG4gICAgfVxuICAgIGlmIChuMSA9PSBudWxsKSB7XG4gICAgICBjb25zdCBwbGFjZWhvbGRlciA9IG4yLmVsID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gY3JlYXRlQ29tbWVudChcInRlbGVwb3J0IHN0YXJ0XCIpIDogY3JlYXRlVGV4dChcIlwiKTtcbiAgICAgIGNvbnN0IG1haW5BbmNob3IgPSBuMi5hbmNob3IgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBjcmVhdGVDb21tZW50KFwidGVsZXBvcnQgZW5kXCIpIDogY3JlYXRlVGV4dChcIlwiKTtcbiAgICAgIGluc2VydChwbGFjZWhvbGRlciwgY29udGFpbmVyLCBhbmNob3IpO1xuICAgICAgaW5zZXJ0KG1haW5BbmNob3IsIGNvbnRhaW5lciwgYW5jaG9yKTtcbiAgICAgIGNvbnN0IHRhcmdldCA9IG4yLnRhcmdldCA9IHJlc29sdmVUYXJnZXQobjIucHJvcHMsIHF1ZXJ5U2VsZWN0b3IpO1xuICAgICAgY29uc3QgdGFyZ2V0QW5jaG9yID0gbjIudGFyZ2V0QW5jaG9yID0gY3JlYXRlVGV4dChcIlwiKTtcbiAgICAgIGlmICh0YXJnZXQpIHtcbiAgICAgICAgaW5zZXJ0KHRhcmdldEFuY2hvciwgdGFyZ2V0KTtcbiAgICAgICAgaXNTVkcgPSBpc1NWRyB8fCBpc1RhcmdldFNWRyh0YXJnZXQpO1xuICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgIWRpc2FibGVkKSB7XG4gICAgICAgIHdhcm4oXCJJbnZhbGlkIFRlbGVwb3J0IHRhcmdldCBvbiBtb3VudDpcIiwgdGFyZ2V0LCBgKCR7dHlwZW9mIHRhcmdldH0pYCk7XG4gICAgICB9XG4gICAgICBjb25zdCBtb3VudCA9IChjb250YWluZXIyLCBhbmNob3IyKSA9PiB7XG4gICAgICAgIGlmIChzaGFwZUZsYWcgJiAxNikge1xuICAgICAgICAgIG1vdW50Q2hpbGRyZW4oXG4gICAgICAgICAgICBjaGlsZHJlbixcbiAgICAgICAgICAgIGNvbnRhaW5lcjIsXG4gICAgICAgICAgICBhbmNob3IyLFxuICAgICAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgICAgICBpc1NWRyxcbiAgICAgICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgICAgIG9wdGltaXplZFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBpZiAoZGlzYWJsZWQpIHtcbiAgICAgICAgbW91bnQoY29udGFpbmVyLCBtYWluQW5jaG9yKTtcbiAgICAgIH0gZWxzZSBpZiAodGFyZ2V0KSB7XG4gICAgICAgIG1vdW50KHRhcmdldCwgdGFyZ2V0QW5jaG9yKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbjIuZWwgPSBuMS5lbDtcbiAgICAgIGNvbnN0IG1haW5BbmNob3IgPSBuMi5hbmNob3IgPSBuMS5hbmNob3I7XG4gICAgICBjb25zdCB0YXJnZXQgPSBuMi50YXJnZXQgPSBuMS50YXJnZXQ7XG4gICAgICBjb25zdCB0YXJnZXRBbmNob3IgPSBuMi50YXJnZXRBbmNob3IgPSBuMS50YXJnZXRBbmNob3I7XG4gICAgICBjb25zdCB3YXNEaXNhYmxlZCA9IGlzVGVsZXBvcnREaXNhYmxlZChuMS5wcm9wcyk7XG4gICAgICBjb25zdCBjdXJyZW50Q29udGFpbmVyID0gd2FzRGlzYWJsZWQgPyBjb250YWluZXIgOiB0YXJnZXQ7XG4gICAgICBjb25zdCBjdXJyZW50QW5jaG9yID0gd2FzRGlzYWJsZWQgPyBtYWluQW5jaG9yIDogdGFyZ2V0QW5jaG9yO1xuICAgICAgaXNTVkcgPSBpc1NWRyB8fCBpc1RhcmdldFNWRyh0YXJnZXQpO1xuICAgICAgaWYgKGR5bmFtaWNDaGlsZHJlbikge1xuICAgICAgICBwYXRjaEJsb2NrQ2hpbGRyZW4oXG4gICAgICAgICAgbjEuZHluYW1pY0NoaWxkcmVuLFxuICAgICAgICAgIGR5bmFtaWNDaGlsZHJlbixcbiAgICAgICAgICBjdXJyZW50Q29udGFpbmVyLFxuICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICBpc1NWRyxcbiAgICAgICAgICBzbG90U2NvcGVJZHNcbiAgICAgICAgKTtcbiAgICAgICAgdHJhdmVyc2VTdGF0aWNDaGlsZHJlbihuMSwgbjIsIHRydWUpO1xuICAgICAgfSBlbHNlIGlmICghb3B0aW1pemVkKSB7XG4gICAgICAgIHBhdGNoQ2hpbGRyZW4oXG4gICAgICAgICAgbjEsXG4gICAgICAgICAgbjIsXG4gICAgICAgICAgY3VycmVudENvbnRhaW5lcixcbiAgICAgICAgICBjdXJyZW50QW5jaG9yLFxuICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICBpc1NWRyxcbiAgICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgICAgZmFsc2VcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChkaXNhYmxlZCkge1xuICAgICAgICBpZiAoIXdhc0Rpc2FibGVkKSB7XG4gICAgICAgICAgbW92ZVRlbGVwb3J0KFxuICAgICAgICAgICAgbjIsXG4gICAgICAgICAgICBjb250YWluZXIsXG4gICAgICAgICAgICBtYWluQW5jaG9yLFxuICAgICAgICAgICAgaW50ZXJuYWxzLFxuICAgICAgICAgICAgMVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICgobjIucHJvcHMgJiYgbjIucHJvcHMudG8pICE9PSAobjEucHJvcHMgJiYgbjEucHJvcHMudG8pKSB7XG4gICAgICAgICAgY29uc3QgbmV4dFRhcmdldCA9IG4yLnRhcmdldCA9IHJlc29sdmVUYXJnZXQoXG4gICAgICAgICAgICBuMi5wcm9wcyxcbiAgICAgICAgICAgIHF1ZXJ5U2VsZWN0b3JcbiAgICAgICAgICApO1xuICAgICAgICAgIGlmIChuZXh0VGFyZ2V0KSB7XG4gICAgICAgICAgICBtb3ZlVGVsZXBvcnQoXG4gICAgICAgICAgICAgIG4yLFxuICAgICAgICAgICAgICBuZXh0VGFyZ2V0LFxuICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICBpbnRlcm5hbHMsXG4gICAgICAgICAgICAgIDBcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAgIFwiSW52YWxpZCBUZWxlcG9ydCB0YXJnZXQgb24gdXBkYXRlOlwiLFxuICAgICAgICAgICAgICB0YXJnZXQsXG4gICAgICAgICAgICAgIGAoJHt0eXBlb2YgdGFyZ2V0fSlgXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh3YXNEaXNhYmxlZCkge1xuICAgICAgICAgIG1vdmVUZWxlcG9ydChcbiAgICAgICAgICAgIG4yLFxuICAgICAgICAgICAgdGFyZ2V0LFxuICAgICAgICAgICAgdGFyZ2V0QW5jaG9yLFxuICAgICAgICAgICAgaW50ZXJuYWxzLFxuICAgICAgICAgICAgMVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgdXBkYXRlQ3NzVmFycyhuMik7XG4gIH0sXG4gIHJlbW92ZSh2bm9kZSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgb3B0aW1pemVkLCB7IHVtOiB1bm1vdW50LCBvOiB7IHJlbW92ZTogaG9zdFJlbW92ZSB9IH0sIGRvUmVtb3ZlKSB7XG4gICAgY29uc3QgeyBzaGFwZUZsYWcsIGNoaWxkcmVuLCBhbmNob3IsIHRhcmdldEFuY2hvciwgdGFyZ2V0LCBwcm9wcyB9ID0gdm5vZGU7XG4gICAgaWYgKHRhcmdldCkge1xuICAgICAgaG9zdFJlbW92ZSh0YXJnZXRBbmNob3IpO1xuICAgIH1cbiAgICBpZiAoZG9SZW1vdmUgfHwgIWlzVGVsZXBvcnREaXNhYmxlZChwcm9wcykpIHtcbiAgICAgIGhvc3RSZW1vdmUoYW5jaG9yKTtcbiAgICAgIGlmIChzaGFwZUZsYWcgJiAxNikge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgY29uc3QgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICAgICAgICB1bm1vdW50KFxuICAgICAgICAgICAgY2hpbGQsXG4gICAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICAhIWNoaWxkLmR5bmFtaWNDaGlsZHJlblxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIG1vdmU6IG1vdmVUZWxlcG9ydCxcbiAgaHlkcmF0ZTogaHlkcmF0ZVRlbGVwb3J0XG59O1xuZnVuY3Rpb24gbW92ZVRlbGVwb3J0KHZub2RlLCBjb250YWluZXIsIHBhcmVudEFuY2hvciwgeyBvOiB7IGluc2VydCB9LCBtOiBtb3ZlIH0sIG1vdmVUeXBlID0gMikge1xuICBpZiAobW92ZVR5cGUgPT09IDApIHtcbiAgICBpbnNlcnQodm5vZGUudGFyZ2V0QW5jaG9yLCBjb250YWluZXIsIHBhcmVudEFuY2hvcik7XG4gIH1cbiAgY29uc3QgeyBlbCwgYW5jaG9yLCBzaGFwZUZsYWcsIGNoaWxkcmVuLCBwcm9wcyB9ID0gdm5vZGU7XG4gIGNvbnN0IGlzUmVvcmRlciA9IG1vdmVUeXBlID09PSAyO1xuICBpZiAoaXNSZW9yZGVyKSB7XG4gICAgaW5zZXJ0KGVsLCBjb250YWluZXIsIHBhcmVudEFuY2hvcik7XG4gIH1cbiAgaWYgKCFpc1Jlb3JkZXIgfHwgaXNUZWxlcG9ydERpc2FibGVkKHByb3BzKSkge1xuICAgIGlmIChzaGFwZUZsYWcgJiAxNikge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICBtb3ZlKFxuICAgICAgICAgIGNoaWxkcmVuW2ldLFxuICAgICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgICBwYXJlbnRBbmNob3IsXG4gICAgICAgICAgMlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoaXNSZW9yZGVyKSB7XG4gICAgaW5zZXJ0KGFuY2hvciwgY29udGFpbmVyLCBwYXJlbnRBbmNob3IpO1xuICB9XG59XG5mdW5jdGlvbiBoeWRyYXRlVGVsZXBvcnQobm9kZSwgdm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkLCB7XG4gIG86IHsgbmV4dFNpYmxpbmcsIHBhcmVudE5vZGUsIHF1ZXJ5U2VsZWN0b3IgfVxufSwgaHlkcmF0ZUNoaWxkcmVuKSB7XG4gIGNvbnN0IHRhcmdldCA9IHZub2RlLnRhcmdldCA9IHJlc29sdmVUYXJnZXQoXG4gICAgdm5vZGUucHJvcHMsXG4gICAgcXVlcnlTZWxlY3RvclxuICApO1xuICBpZiAodGFyZ2V0KSB7XG4gICAgY29uc3QgdGFyZ2V0Tm9kZSA9IHRhcmdldC5fbHBhIHx8IHRhcmdldC5maXJzdENoaWxkO1xuICAgIGlmICh2bm9kZS5zaGFwZUZsYWcgJiAxNikge1xuICAgICAgaWYgKGlzVGVsZXBvcnREaXNhYmxlZCh2bm9kZS5wcm9wcykpIHtcbiAgICAgICAgdm5vZGUuYW5jaG9yID0gaHlkcmF0ZUNoaWxkcmVuKFxuICAgICAgICAgIG5leHRTaWJsaW5nKG5vZGUpLFxuICAgICAgICAgIHZub2RlLFxuICAgICAgICAgIHBhcmVudE5vZGUobm9kZSksXG4gICAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgICBvcHRpbWl6ZWRcbiAgICAgICAgKTtcbiAgICAgICAgdm5vZGUudGFyZ2V0QW5jaG9yID0gdGFyZ2V0Tm9kZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZub2RlLmFuY2hvciA9IG5leHRTaWJsaW5nKG5vZGUpO1xuICAgICAgICBsZXQgdGFyZ2V0QW5jaG9yID0gdGFyZ2V0Tm9kZTtcbiAgICAgICAgd2hpbGUgKHRhcmdldEFuY2hvcikge1xuICAgICAgICAgIHRhcmdldEFuY2hvciA9IG5leHRTaWJsaW5nKHRhcmdldEFuY2hvcik7XG4gICAgICAgICAgaWYgKHRhcmdldEFuY2hvciAmJiB0YXJnZXRBbmNob3Iubm9kZVR5cGUgPT09IDggJiYgdGFyZ2V0QW5jaG9yLmRhdGEgPT09IFwidGVsZXBvcnQgYW5jaG9yXCIpIHtcbiAgICAgICAgICAgIHZub2RlLnRhcmdldEFuY2hvciA9IHRhcmdldEFuY2hvcjtcbiAgICAgICAgICAgIHRhcmdldC5fbHBhID0gdm5vZGUudGFyZ2V0QW5jaG9yICYmIG5leHRTaWJsaW5nKHZub2RlLnRhcmdldEFuY2hvcik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaHlkcmF0ZUNoaWxkcmVuKFxuICAgICAgICAgIHRhcmdldE5vZGUsXG4gICAgICAgICAgdm5vZGUsXG4gICAgICAgICAgdGFyZ2V0LFxuICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgICAgb3B0aW1pemVkXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHVwZGF0ZUNzc1ZhcnModm5vZGUpO1xuICB9XG4gIHJldHVybiB2bm9kZS5hbmNob3IgJiYgbmV4dFNpYmxpbmcodm5vZGUuYW5jaG9yKTtcbn1cbmNvbnN0IFRlbGVwb3J0ID0gVGVsZXBvcnRJbXBsO1xuZnVuY3Rpb24gdXBkYXRlQ3NzVmFycyh2bm9kZSkge1xuICBjb25zdCBjdHggPSB2bm9kZS5jdHg7XG4gIGlmIChjdHggJiYgY3R4LnV0KSB7XG4gICAgbGV0IG5vZGUgPSB2bm9kZS5jaGlsZHJlblswXS5lbDtcbiAgICB3aGlsZSAobm9kZSAhPT0gdm5vZGUudGFyZ2V0QW5jaG9yKSB7XG4gICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gMSlcbiAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoXCJkYXRhLXYtb3duZXJcIiwgY3R4LnVpZCk7XG4gICAgICBub2RlID0gbm9kZS5uZXh0U2libGluZztcbiAgICB9XG4gICAgY3R4LnV0KCk7XG4gIH1cbn1cblxuY29uc3QgRnJhZ21lbnQgPSBTeW1ib2wuZm9yKFwidi1mZ3RcIik7XG5jb25zdCBUZXh0ID0gU3ltYm9sLmZvcihcInYtdHh0XCIpO1xuY29uc3QgQ29tbWVudCA9IFN5bWJvbC5mb3IoXCJ2LWNtdFwiKTtcbmNvbnN0IFN0YXRpYyA9IFN5bWJvbC5mb3IoXCJ2LXN0Y1wiKTtcbmNvbnN0IGJsb2NrU3RhY2sgPSBbXTtcbmxldCBjdXJyZW50QmxvY2sgPSBudWxsO1xuZnVuY3Rpb24gb3BlbkJsb2NrKGRpc2FibGVUcmFja2luZyA9IGZhbHNlKSB7XG4gIGJsb2NrU3RhY2sucHVzaChjdXJyZW50QmxvY2sgPSBkaXNhYmxlVHJhY2tpbmcgPyBudWxsIDogW10pO1xufVxuZnVuY3Rpb24gY2xvc2VCbG9jaygpIHtcbiAgYmxvY2tTdGFjay5wb3AoKTtcbiAgY3VycmVudEJsb2NrID0gYmxvY2tTdGFja1tibG9ja1N0YWNrLmxlbmd0aCAtIDFdIHx8IG51bGw7XG59XG5sZXQgaXNCbG9ja1RyZWVFbmFibGVkID0gMTtcbmZ1bmN0aW9uIHNldEJsb2NrVHJhY2tpbmcodmFsdWUpIHtcbiAgaXNCbG9ja1RyZWVFbmFibGVkICs9IHZhbHVlO1xufVxuZnVuY3Rpb24gc2V0dXBCbG9jayh2bm9kZSkge1xuICB2bm9kZS5keW5hbWljQ2hpbGRyZW4gPSBpc0Jsb2NrVHJlZUVuYWJsZWQgPiAwID8gY3VycmVudEJsb2NrIHx8IEVNUFRZX0FSUiA6IG51bGw7XG4gIGNsb3NlQmxvY2soKTtcbiAgaWYgKGlzQmxvY2tUcmVlRW5hYmxlZCA+IDAgJiYgY3VycmVudEJsb2NrKSB7XG4gICAgY3VycmVudEJsb2NrLnB1c2godm5vZGUpO1xuICB9XG4gIHJldHVybiB2bm9kZTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnRCbG9jayh0eXBlLCBwcm9wcywgY2hpbGRyZW4sIHBhdGNoRmxhZywgZHluYW1pY1Byb3BzLCBzaGFwZUZsYWcpIHtcbiAgcmV0dXJuIHNldHVwQmxvY2soXG4gICAgY3JlYXRlQmFzZVZOb2RlKFxuICAgICAgdHlwZSxcbiAgICAgIHByb3BzLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBwYXRjaEZsYWcsXG4gICAgICBkeW5hbWljUHJvcHMsXG4gICAgICBzaGFwZUZsYWcsXG4gICAgICB0cnVlXG4gICAgICAvKiBpc0Jsb2NrICovXG4gICAgKVxuICApO1xufVxuZnVuY3Rpb24gY3JlYXRlQmxvY2sodHlwZSwgcHJvcHMsIGNoaWxkcmVuLCBwYXRjaEZsYWcsIGR5bmFtaWNQcm9wcykge1xuICByZXR1cm4gc2V0dXBCbG9jayhcbiAgICBjcmVhdGVWTm9kZShcbiAgICAgIHR5cGUsXG4gICAgICBwcm9wcyxcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgcGF0Y2hGbGFnLFxuICAgICAgZHluYW1pY1Byb3BzLFxuICAgICAgdHJ1ZVxuICAgICAgLyogaXNCbG9jazogcHJldmVudCBhIGJsb2NrIGZyb20gdHJhY2tpbmcgaXRzZWxmICovXG4gICAgKVxuICApO1xufVxuZnVuY3Rpb24gaXNWTm9kZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPyB2YWx1ZS5fX3ZfaXNWTm9kZSA9PT0gdHJ1ZSA6IGZhbHNlO1xufVxuZnVuY3Rpb24gaXNTYW1lVk5vZGVUeXBlKG4xLCBuMikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmIG4yLnNoYXBlRmxhZyAmIDYgJiYgaG1yRGlydHlDb21wb25lbnRzLmhhcyhuMi50eXBlKSkge1xuICAgIG4xLnNoYXBlRmxhZyAmPSB+MjU2O1xuICAgIG4yLnNoYXBlRmxhZyAmPSB+NTEyO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gbjEudHlwZSA9PT0gbjIudHlwZSAmJiBuMS5rZXkgPT09IG4yLmtleTtcbn1cbmxldCB2bm9kZUFyZ3NUcmFuc2Zvcm1lcjtcbmZ1bmN0aW9uIHRyYW5zZm9ybVZOb2RlQXJncyh0cmFuc2Zvcm1lcikge1xuICB2bm9kZUFyZ3NUcmFuc2Zvcm1lciA9IHRyYW5zZm9ybWVyO1xufVxuY29uc3QgY3JlYXRlVk5vZGVXaXRoQXJnc1RyYW5zZm9ybSA9ICguLi5hcmdzKSA9PiB7XG4gIHJldHVybiBfY3JlYXRlVk5vZGUoXG4gICAgLi4udm5vZGVBcmdzVHJhbnNmb3JtZXIgPyB2bm9kZUFyZ3NUcmFuc2Zvcm1lcihhcmdzLCBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UpIDogYXJnc1xuICApO1xufTtcbmNvbnN0IEludGVybmFsT2JqZWN0S2V5ID0gYF9fdkludGVybmFsYDtcbmNvbnN0IG5vcm1hbGl6ZUtleSA9ICh7IGtleSB9KSA9PiBrZXkgIT0gbnVsbCA/IGtleSA6IG51bGw7XG5jb25zdCBub3JtYWxpemVSZWYgPSAoe1xuICByZWYsXG4gIHJlZl9rZXksXG4gIHJlZl9mb3Jcbn0pID0+IHtcbiAgaWYgKHR5cGVvZiByZWYgPT09IFwibnVtYmVyXCIpIHtcbiAgICByZWYgPSBcIlwiICsgcmVmO1xuICB9XG4gIHJldHVybiByZWYgIT0gbnVsbCA/IGlzU3RyaW5nKHJlZikgfHwgaXNSZWYocmVmKSB8fCBpc0Z1bmN0aW9uKHJlZikgPyB7IGk6IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSwgcjogcmVmLCBrOiByZWZfa2V5LCBmOiAhIXJlZl9mb3IgfSA6IHJlZiA6IG51bGw7XG59O1xuZnVuY3Rpb24gY3JlYXRlQmFzZVZOb2RlKHR5cGUsIHByb3BzID0gbnVsbCwgY2hpbGRyZW4gPSBudWxsLCBwYXRjaEZsYWcgPSAwLCBkeW5hbWljUHJvcHMgPSBudWxsLCBzaGFwZUZsYWcgPSB0eXBlID09PSBGcmFnbWVudCA/IDAgOiAxLCBpc0Jsb2NrTm9kZSA9IGZhbHNlLCBuZWVkRnVsbENoaWxkcmVuTm9ybWFsaXphdGlvbiA9IGZhbHNlKSB7XG4gIGNvbnN0IHZub2RlID0ge1xuICAgIF9fdl9pc1ZOb2RlOiB0cnVlLFxuICAgIF9fdl9za2lwOiB0cnVlLFxuICAgIHR5cGUsXG4gICAgcHJvcHMsXG4gICAga2V5OiBwcm9wcyAmJiBub3JtYWxpemVLZXkocHJvcHMpLFxuICAgIHJlZjogcHJvcHMgJiYgbm9ybWFsaXplUmVmKHByb3BzKSxcbiAgICBzY29wZUlkOiBjdXJyZW50U2NvcGVJZCxcbiAgICBzbG90U2NvcGVJZHM6IG51bGwsXG4gICAgY2hpbGRyZW4sXG4gICAgY29tcG9uZW50OiBudWxsLFxuICAgIHN1c3BlbnNlOiBudWxsLFxuICAgIHNzQ29udGVudDogbnVsbCxcbiAgICBzc0ZhbGxiYWNrOiBudWxsLFxuICAgIGRpcnM6IG51bGwsXG4gICAgdHJhbnNpdGlvbjogbnVsbCxcbiAgICBlbDogbnVsbCxcbiAgICBhbmNob3I6IG51bGwsXG4gICAgdGFyZ2V0OiBudWxsLFxuICAgIHRhcmdldEFuY2hvcjogbnVsbCxcbiAgICBzdGF0aWNDb3VudDogMCxcbiAgICBzaGFwZUZsYWcsXG4gICAgcGF0Y2hGbGFnLFxuICAgIGR5bmFtaWNQcm9wcyxcbiAgICBkeW5hbWljQ2hpbGRyZW46IG51bGwsXG4gICAgYXBwQ29udGV4dDogbnVsbCxcbiAgICBjdHg6IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZVxuICB9O1xuICBpZiAobmVlZEZ1bGxDaGlsZHJlbk5vcm1hbGl6YXRpb24pIHtcbiAgICBub3JtYWxpemVDaGlsZHJlbih2bm9kZSwgY2hpbGRyZW4pO1xuICAgIGlmIChzaGFwZUZsYWcgJiAxMjgpIHtcbiAgICAgIHR5cGUubm9ybWFsaXplKHZub2RlKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoY2hpbGRyZW4pIHtcbiAgICB2bm9kZS5zaGFwZUZsYWcgfD0gaXNTdHJpbmcoY2hpbGRyZW4pID8gOCA6IDE2O1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgdm5vZGUua2V5ICE9PSB2bm9kZS5rZXkpIHtcbiAgICB3YXJuKGBWTm9kZSBjcmVhdGVkIHdpdGggaW52YWxpZCBrZXkgKE5hTikuIFZOb2RlIHR5cGU6YCwgdm5vZGUudHlwZSk7XG4gIH1cbiAgaWYgKGlzQmxvY2tUcmVlRW5hYmxlZCA+IDAgJiYgLy8gYXZvaWQgYSBibG9jayBub2RlIGZyb20gdHJhY2tpbmcgaXRzZWxmXG4gICFpc0Jsb2NrTm9kZSAmJiAvLyBoYXMgY3VycmVudCBwYXJlbnQgYmxvY2tcbiAgY3VycmVudEJsb2NrICYmIC8vIHByZXNlbmNlIG9mIGEgcGF0Y2ggZmxhZyBpbmRpY2F0ZXMgdGhpcyBub2RlIG5lZWRzIHBhdGNoaW5nIG9uIHVwZGF0ZXMuXG4gIC8vIGNvbXBvbmVudCBub2RlcyBhbHNvIHNob3VsZCBhbHdheXMgYmUgcGF0Y2hlZCwgYmVjYXVzZSBldmVuIGlmIHRoZVxuICAvLyBjb21wb25lbnQgZG9lc24ndCBuZWVkIHRvIHVwZGF0ZSwgaXQgbmVlZHMgdG8gcGVyc2lzdCB0aGUgaW5zdGFuY2Ugb24gdG9cbiAgLy8gdGhlIG5leHQgdm5vZGUgc28gdGhhdCBpdCBjYW4gYmUgcHJvcGVybHkgdW5tb3VudGVkIGxhdGVyLlxuICAodm5vZGUucGF0Y2hGbGFnID4gMCB8fCBzaGFwZUZsYWcgJiA2KSAmJiAvLyB0aGUgRVZFTlRTIGZsYWcgaXMgb25seSBmb3IgaHlkcmF0aW9uIGFuZCBpZiBpdCBpcyB0aGUgb25seSBmbGFnLCB0aGVcbiAgLy8gdm5vZGUgc2hvdWxkIG5vdCBiZSBjb25zaWRlcmVkIGR5bmFtaWMgZHVlIHRvIGhhbmRsZXIgY2FjaGluZy5cbiAgdm5vZGUucGF0Y2hGbGFnICE9PSAzMikge1xuICAgIGN1cnJlbnRCbG9jay5wdXNoKHZub2RlKTtcbiAgfVxuICByZXR1cm4gdm5vZGU7XG59XG5jb25zdCBjcmVhdGVWTm9kZSA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGNyZWF0ZVZOb2RlV2l0aEFyZ3NUcmFuc2Zvcm0gOiBfY3JlYXRlVk5vZGU7XG5mdW5jdGlvbiBfY3JlYXRlVk5vZGUodHlwZSwgcHJvcHMgPSBudWxsLCBjaGlsZHJlbiA9IG51bGwsIHBhdGNoRmxhZyA9IDAsIGR5bmFtaWNQcm9wcyA9IG51bGwsIGlzQmxvY2tOb2RlID0gZmFsc2UpIHtcbiAgaWYgKCF0eXBlIHx8IHR5cGUgPT09IE5VTExfRFlOQU1JQ19DT01QT05FTlQpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmICF0eXBlKSB7XG4gICAgICB3YXJuKGBJbnZhbGlkIHZub2RlIHR5cGUgd2hlbiBjcmVhdGluZyB2bm9kZTogJHt0eXBlfS5gKTtcbiAgICB9XG4gICAgdHlwZSA9IENvbW1lbnQ7XG4gIH1cbiAgaWYgKGlzVk5vZGUodHlwZSkpIHtcbiAgICBjb25zdCBjbG9uZWQgPSBjbG9uZVZOb2RlKFxuICAgICAgdHlwZSxcbiAgICAgIHByb3BzLFxuICAgICAgdHJ1ZVxuICAgICAgLyogbWVyZ2VSZWY6IHRydWUgKi9cbiAgICApO1xuICAgIGlmIChjaGlsZHJlbikge1xuICAgICAgbm9ybWFsaXplQ2hpbGRyZW4oY2xvbmVkLCBjaGlsZHJlbik7XG4gICAgfVxuICAgIGlmIChpc0Jsb2NrVHJlZUVuYWJsZWQgPiAwICYmICFpc0Jsb2NrTm9kZSAmJiBjdXJyZW50QmxvY2spIHtcbiAgICAgIGlmIChjbG9uZWQuc2hhcGVGbGFnICYgNikge1xuICAgICAgICBjdXJyZW50QmxvY2tbY3VycmVudEJsb2NrLmluZGV4T2YodHlwZSldID0gY2xvbmVkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3VycmVudEJsb2NrLnB1c2goY2xvbmVkKTtcbiAgICAgIH1cbiAgICB9XG4gICAgY2xvbmVkLnBhdGNoRmxhZyB8PSAtMjtcbiAgICByZXR1cm4gY2xvbmVkO1xuICB9XG4gIGlmIChpc0NsYXNzQ29tcG9uZW50KHR5cGUpKSB7XG4gICAgdHlwZSA9IHR5cGUuX192Y2NPcHRzO1xuICB9XG4gIGlmIChwcm9wcykge1xuICAgIHByb3BzID0gZ3VhcmRSZWFjdGl2ZVByb3BzKHByb3BzKTtcbiAgICBsZXQgeyBjbGFzczoga2xhc3MsIHN0eWxlIH0gPSBwcm9wcztcbiAgICBpZiAoa2xhc3MgJiYgIWlzU3RyaW5nKGtsYXNzKSkge1xuICAgICAgcHJvcHMuY2xhc3MgPSBub3JtYWxpemVDbGFzcyhrbGFzcyk7XG4gICAgfVxuICAgIGlmIChpc09iamVjdChzdHlsZSkpIHtcbiAgICAgIGlmIChpc1Byb3h5KHN0eWxlKSAmJiAhaXNBcnJheShzdHlsZSkpIHtcbiAgICAgICAgc3R5bGUgPSBleHRlbmQoe30sIHN0eWxlKTtcbiAgICAgIH1cbiAgICAgIHByb3BzLnN0eWxlID0gbm9ybWFsaXplU3R5bGUoc3R5bGUpO1xuICAgIH1cbiAgfVxuICBjb25zdCBzaGFwZUZsYWcgPSBpc1N0cmluZyh0eXBlKSA/IDEgOiBpc1N1c3BlbnNlKHR5cGUpID8gMTI4IDogaXNUZWxlcG9ydCh0eXBlKSA/IDY0IDogaXNPYmplY3QodHlwZSkgPyA0IDogaXNGdW5jdGlvbih0eXBlKSA/IDIgOiAwO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmIHNoYXBlRmxhZyAmIDQgJiYgaXNQcm94eSh0eXBlKSkge1xuICAgIHR5cGUgPSB0b1Jhdyh0eXBlKTtcbiAgICB3YXJuKFxuICAgICAgYFZ1ZSByZWNlaXZlZCBhIENvbXBvbmVudCB3aGljaCB3YXMgbWFkZSBhIHJlYWN0aXZlIG9iamVjdC4gVGhpcyBjYW4gbGVhZCB0byB1bm5lY2Vzc2FyeSBwZXJmb3JtYW5jZSBvdmVyaGVhZCwgYW5kIHNob3VsZCBiZSBhdm9pZGVkIGJ5IG1hcmtpbmcgdGhlIGNvbXBvbmVudCB3aXRoIFxcYG1hcmtSYXdcXGAgb3IgdXNpbmcgXFxgc2hhbGxvd1JlZlxcYCBpbnN0ZWFkIG9mIFxcYHJlZlxcYC5gLFxuICAgICAgYFxuQ29tcG9uZW50IHRoYXQgd2FzIG1hZGUgcmVhY3RpdmU6IGAsXG4gICAgICB0eXBlXG4gICAgKTtcbiAgfVxuICByZXR1cm4gY3JlYXRlQmFzZVZOb2RlKFxuICAgIHR5cGUsXG4gICAgcHJvcHMsXG4gICAgY2hpbGRyZW4sXG4gICAgcGF0Y2hGbGFnLFxuICAgIGR5bmFtaWNQcm9wcyxcbiAgICBzaGFwZUZsYWcsXG4gICAgaXNCbG9ja05vZGUsXG4gICAgdHJ1ZVxuICApO1xufVxuZnVuY3Rpb24gZ3VhcmRSZWFjdGl2ZVByb3BzKHByb3BzKSB7XG4gIGlmICghcHJvcHMpXG4gICAgcmV0dXJuIG51bGw7XG4gIHJldHVybiBpc1Byb3h5KHByb3BzKSB8fCBJbnRlcm5hbE9iamVjdEtleSBpbiBwcm9wcyA/IGV4dGVuZCh7fSwgcHJvcHMpIDogcHJvcHM7XG59XG5mdW5jdGlvbiBjbG9uZVZOb2RlKHZub2RlLCBleHRyYVByb3BzLCBtZXJnZVJlZiA9IGZhbHNlKSB7XG4gIGNvbnN0IHsgcHJvcHMsIHJlZiwgcGF0Y2hGbGFnLCBjaGlsZHJlbiB9ID0gdm5vZGU7XG4gIGNvbnN0IG1lcmdlZFByb3BzID0gZXh0cmFQcm9wcyA/IG1lcmdlUHJvcHMocHJvcHMgfHwge30sIGV4dHJhUHJvcHMpIDogcHJvcHM7XG4gIGNvbnN0IGNsb25lZCA9IHtcbiAgICBfX3ZfaXNWTm9kZTogdHJ1ZSxcbiAgICBfX3Zfc2tpcDogdHJ1ZSxcbiAgICB0eXBlOiB2bm9kZS50eXBlLFxuICAgIHByb3BzOiBtZXJnZWRQcm9wcyxcbiAgICBrZXk6IG1lcmdlZFByb3BzICYmIG5vcm1hbGl6ZUtleShtZXJnZWRQcm9wcyksXG4gICAgcmVmOiBleHRyYVByb3BzICYmIGV4dHJhUHJvcHMucmVmID8gKFxuICAgICAgLy8gIzIwNzggaW4gdGhlIGNhc2Ugb2YgPGNvbXBvbmVudCA6aXM9XCJ2bm9kZVwiIHJlZj1cImV4dHJhXCIvPlxuICAgICAgLy8gaWYgdGhlIHZub2RlIGl0c2VsZiBhbHJlYWR5IGhhcyBhIHJlZiwgY2xvbmVWTm9kZSB3aWxsIG5lZWQgdG8gbWVyZ2VcbiAgICAgIC8vIHRoZSByZWZzIHNvIHRoZSBzaW5nbGUgdm5vZGUgY2FuIGJlIHNldCBvbiBtdWx0aXBsZSByZWZzXG4gICAgICBtZXJnZVJlZiAmJiByZWYgPyBpc0FycmF5KHJlZikgPyByZWYuY29uY2F0KG5vcm1hbGl6ZVJlZihleHRyYVByb3BzKSkgOiBbcmVmLCBub3JtYWxpemVSZWYoZXh0cmFQcm9wcyldIDogbm9ybWFsaXplUmVmKGV4dHJhUHJvcHMpXG4gICAgKSA6IHJlZixcbiAgICBzY29wZUlkOiB2bm9kZS5zY29wZUlkLFxuICAgIHNsb3RTY29wZUlkczogdm5vZGUuc2xvdFNjb3BlSWRzLFxuICAgIGNoaWxkcmVuOiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgcGF0Y2hGbGFnID09PSAtMSAmJiBpc0FycmF5KGNoaWxkcmVuKSA/IGNoaWxkcmVuLm1hcChkZWVwQ2xvbmVWTm9kZSkgOiBjaGlsZHJlbixcbiAgICB0YXJnZXQ6IHZub2RlLnRhcmdldCxcbiAgICB0YXJnZXRBbmNob3I6IHZub2RlLnRhcmdldEFuY2hvcixcbiAgICBzdGF0aWNDb3VudDogdm5vZGUuc3RhdGljQ291bnQsXG4gICAgc2hhcGVGbGFnOiB2bm9kZS5zaGFwZUZsYWcsXG4gICAgLy8gaWYgdGhlIHZub2RlIGlzIGNsb25lZCB3aXRoIGV4dHJhIHByb3BzLCB3ZSBjYW4gbm8gbG9uZ2VyIGFzc3VtZSBpdHNcbiAgICAvLyBleGlzdGluZyBwYXRjaCBmbGFnIHRvIGJlIHJlbGlhYmxlIGFuZCBuZWVkIHRvIGFkZCB0aGUgRlVMTF9QUk9QUyBmbGFnLlxuICAgIC8vIG5vdGU6IHByZXNlcnZlIGZsYWcgZm9yIGZyYWdtZW50cyBzaW5jZSB0aGV5IHVzZSB0aGUgZmxhZyBmb3IgY2hpbGRyZW5cbiAgICAvLyBmYXN0IHBhdGhzIG9ubHkuXG4gICAgcGF0Y2hGbGFnOiBleHRyYVByb3BzICYmIHZub2RlLnR5cGUgIT09IEZyYWdtZW50ID8gcGF0Y2hGbGFnID09PSAtMSA/IDE2IDogcGF0Y2hGbGFnIHwgMTYgOiBwYXRjaEZsYWcsXG4gICAgZHluYW1pY1Byb3BzOiB2bm9kZS5keW5hbWljUHJvcHMsXG4gICAgZHluYW1pY0NoaWxkcmVuOiB2bm9kZS5keW5hbWljQ2hpbGRyZW4sXG4gICAgYXBwQ29udGV4dDogdm5vZGUuYXBwQ29udGV4dCxcbiAgICBkaXJzOiB2bm9kZS5kaXJzLFxuICAgIHRyYW5zaXRpb246IHZub2RlLnRyYW5zaXRpb24sXG4gICAgLy8gVGhlc2Ugc2hvdWxkIHRlY2huaWNhbGx5IG9ubHkgYmUgbm9uLW51bGwgb24gbW91bnRlZCBWTm9kZXMuIEhvd2V2ZXIsXG4gICAgLy8gdGhleSAqc2hvdWxkKiBiZSBjb3BpZWQgZm9yIGtlcHQtYWxpdmUgdm5vZGVzLiBTbyB3ZSBqdXN0IGFsd2F5cyBjb3B5XG4gICAgLy8gdGhlbSBzaW5jZSB0aGVtIGJlaW5nIG5vbi1udWxsIGR1cmluZyBhIG1vdW50IGRvZXNuJ3QgYWZmZWN0IHRoZSBsb2dpYyBhc1xuICAgIC8vIHRoZXkgd2lsbCBzaW1wbHkgYmUgb3ZlcndyaXR0ZW4uXG4gICAgY29tcG9uZW50OiB2bm9kZS5jb21wb25lbnQsXG4gICAgc3VzcGVuc2U6IHZub2RlLnN1c3BlbnNlLFxuICAgIHNzQ29udGVudDogdm5vZGUuc3NDb250ZW50ICYmIGNsb25lVk5vZGUodm5vZGUuc3NDb250ZW50KSxcbiAgICBzc0ZhbGxiYWNrOiB2bm9kZS5zc0ZhbGxiYWNrICYmIGNsb25lVk5vZGUodm5vZGUuc3NGYWxsYmFjayksXG4gICAgZWw6IHZub2RlLmVsLFxuICAgIGFuY2hvcjogdm5vZGUuYW5jaG9yLFxuICAgIGN0eDogdm5vZGUuY3R4LFxuICAgIGNlOiB2bm9kZS5jZVxuICB9O1xuICByZXR1cm4gY2xvbmVkO1xufVxuZnVuY3Rpb24gZGVlcENsb25lVk5vZGUodm5vZGUpIHtcbiAgY29uc3QgY2xvbmVkID0gY2xvbmVWTm9kZSh2bm9kZSk7XG4gIGlmIChpc0FycmF5KHZub2RlLmNoaWxkcmVuKSkge1xuICAgIGNsb25lZC5jaGlsZHJlbiA9IHZub2RlLmNoaWxkcmVuLm1hcChkZWVwQ2xvbmVWTm9kZSk7XG4gIH1cbiAgcmV0dXJuIGNsb25lZDtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVRleHRWTm9kZSh0ZXh0ID0gXCIgXCIsIGZsYWcgPSAwKSB7XG4gIHJldHVybiBjcmVhdGVWTm9kZShUZXh0LCBudWxsLCB0ZXh0LCBmbGFnKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVN0YXRpY1ZOb2RlKGNvbnRlbnQsIG51bWJlck9mTm9kZXMpIHtcbiAgY29uc3Qgdm5vZGUgPSBjcmVhdGVWTm9kZShTdGF0aWMsIG51bGwsIGNvbnRlbnQpO1xuICB2bm9kZS5zdGF0aWNDb3VudCA9IG51bWJlck9mTm9kZXM7XG4gIHJldHVybiB2bm9kZTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUNvbW1lbnRWTm9kZSh0ZXh0ID0gXCJcIiwgYXNCbG9jayA9IGZhbHNlKSB7XG4gIHJldHVybiBhc0Jsb2NrID8gKG9wZW5CbG9jaygpLCBjcmVhdGVCbG9jayhDb21tZW50LCBudWxsLCB0ZXh0KSkgOiBjcmVhdGVWTm9kZShDb21tZW50LCBudWxsLCB0ZXh0KTtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZVZOb2RlKGNoaWxkKSB7XG4gIGlmIChjaGlsZCA9PSBudWxsIHx8IHR5cGVvZiBjaGlsZCA9PT0gXCJib29sZWFuXCIpIHtcbiAgICByZXR1cm4gY3JlYXRlVk5vZGUoQ29tbWVudCk7XG4gIH0gZWxzZSBpZiAoaXNBcnJheShjaGlsZCkpIHtcbiAgICByZXR1cm4gY3JlYXRlVk5vZGUoXG4gICAgICBGcmFnbWVudCxcbiAgICAgIG51bGwsXG4gICAgICAvLyAjMzY2NiwgYXZvaWQgcmVmZXJlbmNlIHBvbGx1dGlvbiB3aGVuIHJldXNpbmcgdm5vZGVcbiAgICAgIGNoaWxkLnNsaWNlKClcbiAgICApO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBjaGlsZCA9PT0gXCJvYmplY3RcIikge1xuICAgIHJldHVybiBjbG9uZUlmTW91bnRlZChjaGlsZCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGNyZWF0ZVZOb2RlKFRleHQsIG51bGwsIFN0cmluZyhjaGlsZCkpO1xuICB9XG59XG5mdW5jdGlvbiBjbG9uZUlmTW91bnRlZChjaGlsZCkge1xuICByZXR1cm4gY2hpbGQuZWwgPT09IG51bGwgJiYgY2hpbGQucGF0Y2hGbGFnICE9PSAtMSB8fCBjaGlsZC5tZW1vID8gY2hpbGQgOiBjbG9uZVZOb2RlKGNoaWxkKTtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZUNoaWxkcmVuKHZub2RlLCBjaGlsZHJlbikge1xuICBsZXQgdHlwZSA9IDA7XG4gIGNvbnN0IHsgc2hhcGVGbGFnIH0gPSB2bm9kZTtcbiAgaWYgKGNoaWxkcmVuID09IG51bGwpIHtcbiAgICBjaGlsZHJlbiA9IG51bGw7XG4gIH0gZWxzZSBpZiAoaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICB0eXBlID0gMTY7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGNoaWxkcmVuID09PSBcIm9iamVjdFwiKSB7XG4gICAgaWYgKHNoYXBlRmxhZyAmICgxIHwgNjQpKSB7XG4gICAgICBjb25zdCBzbG90ID0gY2hpbGRyZW4uZGVmYXVsdDtcbiAgICAgIGlmIChzbG90KSB7XG4gICAgICAgIHNsb3QuX2MgJiYgKHNsb3QuX2QgPSBmYWxzZSk7XG4gICAgICAgIG5vcm1hbGl6ZUNoaWxkcmVuKHZub2RlLCBzbG90KCkpO1xuICAgICAgICBzbG90Ll9jICYmIChzbG90Ll9kID0gdHJ1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfSBlbHNlIHtcbiAgICAgIHR5cGUgPSAzMjtcbiAgICAgIGNvbnN0IHNsb3RGbGFnID0gY2hpbGRyZW4uXztcbiAgICAgIGlmICghc2xvdEZsYWcgJiYgIShJbnRlcm5hbE9iamVjdEtleSBpbiBjaGlsZHJlbikpIHtcbiAgICAgICAgY2hpbGRyZW4uX2N0eCA9IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZTtcbiAgICAgIH0gZWxzZSBpZiAoc2xvdEZsYWcgPT09IDMgJiYgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlKSB7XG4gICAgICAgIGlmIChjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2Uuc2xvdHMuXyA9PT0gMSkge1xuICAgICAgICAgIGNoaWxkcmVuLl8gPSAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNoaWxkcmVuLl8gPSAyO1xuICAgICAgICAgIHZub2RlLnBhdGNoRmxhZyB8PSAxMDI0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzRnVuY3Rpb24oY2hpbGRyZW4pKSB7XG4gICAgY2hpbGRyZW4gPSB7IGRlZmF1bHQ6IGNoaWxkcmVuLCBfY3R4OiBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgfTtcbiAgICB0eXBlID0gMzI7XG4gIH0gZWxzZSB7XG4gICAgY2hpbGRyZW4gPSBTdHJpbmcoY2hpbGRyZW4pO1xuICAgIGlmIChzaGFwZUZsYWcgJiA2NCkge1xuICAgICAgdHlwZSA9IDE2O1xuICAgICAgY2hpbGRyZW4gPSBbY3JlYXRlVGV4dFZOb2RlKGNoaWxkcmVuKV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHR5cGUgPSA4O1xuICAgIH1cbiAgfVxuICB2bm9kZS5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICB2bm9kZS5zaGFwZUZsYWcgfD0gdHlwZTtcbn1cbmZ1bmN0aW9uIG1lcmdlUHJvcHMoLi4uYXJncykge1xuICBjb25zdCByZXQgPSB7fTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgdG9NZXJnZSA9IGFyZ3NbaV07XG4gICAgZm9yIChjb25zdCBrZXkgaW4gdG9NZXJnZSkge1xuICAgICAgaWYgKGtleSA9PT0gXCJjbGFzc1wiKSB7XG4gICAgICAgIGlmIChyZXQuY2xhc3MgIT09IHRvTWVyZ2UuY2xhc3MpIHtcbiAgICAgICAgICByZXQuY2xhc3MgPSBub3JtYWxpemVDbGFzcyhbcmV0LmNsYXNzLCB0b01lcmdlLmNsYXNzXSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSBcInN0eWxlXCIpIHtcbiAgICAgICAgcmV0LnN0eWxlID0gbm9ybWFsaXplU3R5bGUoW3JldC5zdHlsZSwgdG9NZXJnZS5zdHlsZV0pO1xuICAgICAgfSBlbHNlIGlmIChpc09uKGtleSkpIHtcbiAgICAgICAgY29uc3QgZXhpc3RpbmcgPSByZXRba2V5XTtcbiAgICAgICAgY29uc3QgaW5jb21pbmcgPSB0b01lcmdlW2tleV07XG4gICAgICAgIGlmIChpbmNvbWluZyAmJiBleGlzdGluZyAhPT0gaW5jb21pbmcgJiYgIShpc0FycmF5KGV4aXN0aW5nKSAmJiBleGlzdGluZy5pbmNsdWRlcyhpbmNvbWluZykpKSB7XG4gICAgICAgICAgcmV0W2tleV0gPSBleGlzdGluZyA/IFtdLmNvbmNhdChleGlzdGluZywgaW5jb21pbmcpIDogaW5jb21pbmc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoa2V5ICE9PSBcIlwiKSB7XG4gICAgICAgIHJldFtrZXldID0gdG9NZXJnZVtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gcmV0O1xufVxuZnVuY3Rpb24gaW52b2tlVk5vZGVIb29rKGhvb2ssIGluc3RhbmNlLCB2bm9kZSwgcHJldlZOb2RlID0gbnVsbCkge1xuICBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyhob29rLCBpbnN0YW5jZSwgNywgW1xuICAgIHZub2RlLFxuICAgIHByZXZWTm9kZVxuICBdKTtcbn1cblxuY29uc3QgZW1wdHlBcHBDb250ZXh0ID0gY3JlYXRlQXBwQ29udGV4dCgpO1xubGV0IHVpZCA9IDA7XG5mdW5jdGlvbiBjcmVhdGVDb21wb25lbnRJbnN0YW5jZSh2bm9kZSwgcGFyZW50LCBzdXNwZW5zZSkge1xuICBjb25zdCB0eXBlID0gdm5vZGUudHlwZTtcbiAgY29uc3QgYXBwQ29udGV4dCA9IChwYXJlbnQgPyBwYXJlbnQuYXBwQ29udGV4dCA6IHZub2RlLmFwcENvbnRleHQpIHx8IGVtcHR5QXBwQ29udGV4dDtcbiAgY29uc3QgaW5zdGFuY2UgPSB7XG4gICAgdWlkOiB1aWQrKyxcbiAgICB2bm9kZSxcbiAgICB0eXBlLFxuICAgIHBhcmVudCxcbiAgICBhcHBDb250ZXh0LFxuICAgIHJvb3Q6IG51bGwsXG4gICAgLy8gdG8gYmUgaW1tZWRpYXRlbHkgc2V0XG4gICAgbmV4dDogbnVsbCxcbiAgICBzdWJUcmVlOiBudWxsLFxuICAgIC8vIHdpbGwgYmUgc2V0IHN5bmNocm9ub3VzbHkgcmlnaHQgYWZ0ZXIgY3JlYXRpb25cbiAgICBlZmZlY3Q6IG51bGwsXG4gICAgdXBkYXRlOiBudWxsLFxuICAgIC8vIHdpbGwgYmUgc2V0IHN5bmNocm9ub3VzbHkgcmlnaHQgYWZ0ZXIgY3JlYXRpb25cbiAgICBzY29wZTogbmV3IEVmZmVjdFNjb3BlKFxuICAgICAgdHJ1ZVxuICAgICAgLyogZGV0YWNoZWQgKi9cbiAgICApLFxuICAgIHJlbmRlcjogbnVsbCxcbiAgICBwcm94eTogbnVsbCxcbiAgICBleHBvc2VkOiBudWxsLFxuICAgIGV4cG9zZVByb3h5OiBudWxsLFxuICAgIHdpdGhQcm94eTogbnVsbCxcbiAgICBwcm92aWRlczogcGFyZW50ID8gcGFyZW50LnByb3ZpZGVzIDogT2JqZWN0LmNyZWF0ZShhcHBDb250ZXh0LnByb3ZpZGVzKSxcbiAgICBhY2Nlc3NDYWNoZTogbnVsbCxcbiAgICByZW5kZXJDYWNoZTogW10sXG4gICAgLy8gbG9jYWwgcmVzb2x2ZWQgYXNzZXRzXG4gICAgY29tcG9uZW50czogbnVsbCxcbiAgICBkaXJlY3RpdmVzOiBudWxsLFxuICAgIC8vIHJlc29sdmVkIHByb3BzIGFuZCBlbWl0cyBvcHRpb25zXG4gICAgcHJvcHNPcHRpb25zOiBub3JtYWxpemVQcm9wc09wdGlvbnModHlwZSwgYXBwQ29udGV4dCksXG4gICAgZW1pdHNPcHRpb25zOiBub3JtYWxpemVFbWl0c09wdGlvbnModHlwZSwgYXBwQ29udGV4dCksXG4gICAgLy8gZW1pdFxuICAgIGVtaXQ6IG51bGwsXG4gICAgLy8gdG8gYmUgc2V0IGltbWVkaWF0ZWx5XG4gICAgZW1pdHRlZDogbnVsbCxcbiAgICAvLyBwcm9wcyBkZWZhdWx0IHZhbHVlXG4gICAgcHJvcHNEZWZhdWx0czogRU1QVFlfT0JKLFxuICAgIC8vIGluaGVyaXRBdHRyc1xuICAgIGluaGVyaXRBdHRyczogdHlwZS5pbmhlcml0QXR0cnMsXG4gICAgLy8gc3RhdGVcbiAgICBjdHg6IEVNUFRZX09CSixcbiAgICBkYXRhOiBFTVBUWV9PQkosXG4gICAgcHJvcHM6IEVNUFRZX09CSixcbiAgICBhdHRyczogRU1QVFlfT0JKLFxuICAgIHNsb3RzOiBFTVBUWV9PQkosXG4gICAgcmVmczogRU1QVFlfT0JKLFxuICAgIHNldHVwU3RhdGU6IEVNUFRZX09CSixcbiAgICBzZXR1cENvbnRleHQ6IG51bGwsXG4gICAgYXR0cnNQcm94eTogbnVsbCxcbiAgICBzbG90c1Byb3h5OiBudWxsLFxuICAgIC8vIHN1c3BlbnNlIHJlbGF0ZWRcbiAgICBzdXNwZW5zZSxcbiAgICBzdXNwZW5zZUlkOiBzdXNwZW5zZSA/IHN1c3BlbnNlLnBlbmRpbmdJZCA6IDAsXG4gICAgYXN5bmNEZXA6IG51bGwsXG4gICAgYXN5bmNSZXNvbHZlZDogZmFsc2UsXG4gICAgLy8gbGlmZWN5Y2xlIGhvb2tzXG4gICAgLy8gbm90IHVzaW5nIGVudW1zIGhlcmUgYmVjYXVzZSBpdCByZXN1bHRzIGluIGNvbXB1dGVkIHByb3BlcnRpZXNcbiAgICBpc01vdW50ZWQ6IGZhbHNlLFxuICAgIGlzVW5tb3VudGVkOiBmYWxzZSxcbiAgICBpc0RlYWN0aXZhdGVkOiBmYWxzZSxcbiAgICBiYzogbnVsbCxcbiAgICBjOiBudWxsLFxuICAgIGJtOiBudWxsLFxuICAgIG06IG51bGwsXG4gICAgYnU6IG51bGwsXG4gICAgdTogbnVsbCxcbiAgICB1bTogbnVsbCxcbiAgICBidW06IG51bGwsXG4gICAgZGE6IG51bGwsXG4gICAgYTogbnVsbCxcbiAgICBydGc6IG51bGwsXG4gICAgcnRjOiBudWxsLFxuICAgIGVjOiBudWxsLFxuICAgIHNwOiBudWxsXG4gIH07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBpbnN0YW5jZS5jdHggPSBjcmVhdGVEZXZSZW5kZXJDb250ZXh0KGluc3RhbmNlKTtcbiAgfSBlbHNlIHtcbiAgICBpbnN0YW5jZS5jdHggPSB7IF86IGluc3RhbmNlIH07XG4gIH1cbiAgaW5zdGFuY2Uucm9vdCA9IHBhcmVudCA/IHBhcmVudC5yb290IDogaW5zdGFuY2U7XG4gIGluc3RhbmNlLmVtaXQgPSBlbWl0LmJpbmQobnVsbCwgaW5zdGFuY2UpO1xuICBpZiAodm5vZGUuY2UpIHtcbiAgICB2bm9kZS5jZShpbnN0YW5jZSk7XG4gIH1cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxubGV0IGN1cnJlbnRJbnN0YW5jZSA9IG51bGw7XG5jb25zdCBnZXRDdXJyZW50SW5zdGFuY2UgPSAoKSA9PiBjdXJyZW50SW5zdGFuY2UgfHwgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlO1xubGV0IGludGVybmFsU2V0Q3VycmVudEluc3RhbmNlO1xubGV0IGdsb2JhbEN1cnJlbnRJbnN0YW5jZVNldHRlcnM7XG5sZXQgc2V0dGVyc0tleSA9IFwiX19WVUVfSU5TVEFOQ0VfU0VUVEVSU19fXCI7XG57XG4gIGlmICghKGdsb2JhbEN1cnJlbnRJbnN0YW5jZVNldHRlcnMgPSBnZXRHbG9iYWxUaGlzKClbc2V0dGVyc0tleV0pKSB7XG4gICAgZ2xvYmFsQ3VycmVudEluc3RhbmNlU2V0dGVycyA9IGdldEdsb2JhbFRoaXMoKVtzZXR0ZXJzS2V5XSA9IFtdO1xuICB9XG4gIGdsb2JhbEN1cnJlbnRJbnN0YW5jZVNldHRlcnMucHVzaCgoaSkgPT4gY3VycmVudEluc3RhbmNlID0gaSk7XG4gIGludGVybmFsU2V0Q3VycmVudEluc3RhbmNlID0gKGluc3RhbmNlKSA9PiB7XG4gICAgaWYgKGdsb2JhbEN1cnJlbnRJbnN0YW5jZVNldHRlcnMubGVuZ3RoID4gMSkge1xuICAgICAgZ2xvYmFsQ3VycmVudEluc3RhbmNlU2V0dGVycy5mb3JFYWNoKChzKSA9PiBzKGluc3RhbmNlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdsb2JhbEN1cnJlbnRJbnN0YW5jZVNldHRlcnNbMF0oaW5zdGFuY2UpO1xuICAgIH1cbiAgfTtcbn1cbmNvbnN0IHNldEN1cnJlbnRJbnN0YW5jZSA9IChpbnN0YW5jZSkgPT4ge1xuICBpbnRlcm5hbFNldEN1cnJlbnRJbnN0YW5jZShpbnN0YW5jZSk7XG4gIGluc3RhbmNlLnNjb3BlLm9uKCk7XG59O1xuY29uc3QgdW5zZXRDdXJyZW50SW5zdGFuY2UgPSAoKSA9PiB7XG4gIGN1cnJlbnRJbnN0YW5jZSAmJiBjdXJyZW50SW5zdGFuY2Uuc2NvcGUub2ZmKCk7XG4gIGludGVybmFsU2V0Q3VycmVudEluc3RhbmNlKG51bGwpO1xufTtcbmNvbnN0IGlzQnVpbHRJblRhZyA9IC8qIEBfX1BVUkVfXyAqLyBtYWtlTWFwKFwic2xvdCxjb21wb25lbnRcIik7XG5mdW5jdGlvbiB2YWxpZGF0ZUNvbXBvbmVudE5hbWUobmFtZSwgY29uZmlnKSB7XG4gIGNvbnN0IGFwcElzTmF0aXZlVGFnID0gY29uZmlnLmlzTmF0aXZlVGFnIHx8IE5PO1xuICBpZiAoaXNCdWlsdEluVGFnKG5hbWUpIHx8IGFwcElzTmF0aXZlVGFnKG5hbWUpKSB7XG4gICAgd2FybihcbiAgICAgIFwiRG8gbm90IHVzZSBidWlsdC1pbiBvciByZXNlcnZlZCBIVE1MIGVsZW1lbnRzIGFzIGNvbXBvbmVudCBpZDogXCIgKyBuYW1lXG4gICAgKTtcbiAgfVxufVxuZnVuY3Rpb24gaXNTdGF0ZWZ1bENvbXBvbmVudChpbnN0YW5jZSkge1xuICByZXR1cm4gaW5zdGFuY2Uudm5vZGUuc2hhcGVGbGFnICYgNDtcbn1cbmxldCBpc0luU1NSQ29tcG9uZW50U2V0dXAgPSBmYWxzZTtcbmZ1bmN0aW9uIHNldHVwQ29tcG9uZW50KGluc3RhbmNlLCBpc1NTUiA9IGZhbHNlKSB7XG4gIGlzSW5TU1JDb21wb25lbnRTZXR1cCA9IGlzU1NSO1xuICBjb25zdCB7IHByb3BzLCBjaGlsZHJlbiB9ID0gaW5zdGFuY2Uudm5vZGU7XG4gIGNvbnN0IGlzU3RhdGVmdWwgPSBpc1N0YXRlZnVsQ29tcG9uZW50KGluc3RhbmNlKTtcbiAgaW5pdFByb3BzKGluc3RhbmNlLCBwcm9wcywgaXNTdGF0ZWZ1bCwgaXNTU1IpO1xuICBpbml0U2xvdHMoaW5zdGFuY2UsIGNoaWxkcmVuKTtcbiAgY29uc3Qgc2V0dXBSZXN1bHQgPSBpc1N0YXRlZnVsID8gc2V0dXBTdGF0ZWZ1bENvbXBvbmVudChpbnN0YW5jZSwgaXNTU1IpIDogdm9pZCAwO1xuICBpc0luU1NSQ29tcG9uZW50U2V0dXAgPSBmYWxzZTtcbiAgcmV0dXJuIHNldHVwUmVzdWx0O1xufVxuZnVuY3Rpb24gc2V0dXBTdGF0ZWZ1bENvbXBvbmVudChpbnN0YW5jZSwgaXNTU1IpIHtcbiAgdmFyIF9hO1xuICBjb25zdCBDb21wb25lbnQgPSBpbnN0YW5jZS50eXBlO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgaWYgKENvbXBvbmVudC5uYW1lKSB7XG4gICAgICB2YWxpZGF0ZUNvbXBvbmVudE5hbWUoQ29tcG9uZW50Lm5hbWUsIGluc3RhbmNlLmFwcENvbnRleHQuY29uZmlnKTtcbiAgICB9XG4gICAgaWYgKENvbXBvbmVudC5jb21wb25lbnRzKSB7XG4gICAgICBjb25zdCBuYW1lcyA9IE9iamVjdC5rZXlzKENvbXBvbmVudC5jb21wb25lbnRzKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFsaWRhdGVDb21wb25lbnROYW1lKG5hbWVzW2ldLCBpbnN0YW5jZS5hcHBDb250ZXh0LmNvbmZpZyk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChDb21wb25lbnQuZGlyZWN0aXZlcykge1xuICAgICAgY29uc3QgbmFtZXMgPSBPYmplY3Qua2V5cyhDb21wb25lbnQuZGlyZWN0aXZlcyk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhbGlkYXRlRGlyZWN0aXZlTmFtZShuYW1lc1tpXSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChDb21wb25lbnQuY29tcGlsZXJPcHRpb25zICYmIGlzUnVudGltZU9ubHkoKSkge1xuICAgICAgd2FybihcbiAgICAgICAgYFwiY29tcGlsZXJPcHRpb25zXCIgaXMgb25seSBzdXBwb3J0ZWQgd2hlbiB1c2luZyBhIGJ1aWxkIG9mIFZ1ZSB0aGF0IGluY2x1ZGVzIHRoZSBydW50aW1lIGNvbXBpbGVyLiBTaW5jZSB5b3UgYXJlIHVzaW5nIGEgcnVudGltZS1vbmx5IGJ1aWxkLCB0aGUgb3B0aW9ucyBzaG91bGQgYmUgcGFzc2VkIHZpYSB5b3VyIGJ1aWxkIHRvb2wgY29uZmlnIGluc3RlYWQuYFxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgaW5zdGFuY2UuYWNjZXNzQ2FjaGUgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgaW5zdGFuY2UucHJveHkgPSBtYXJrUmF3KG5ldyBQcm94eShpbnN0YW5jZS5jdHgsIFB1YmxpY0luc3RhbmNlUHJveHlIYW5kbGVycykpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgZXhwb3NlUHJvcHNPblJlbmRlckNvbnRleHQoaW5zdGFuY2UpO1xuICB9XG4gIGNvbnN0IHsgc2V0dXAgfSA9IENvbXBvbmVudDtcbiAgaWYgKHNldHVwKSB7XG4gICAgY29uc3Qgc2V0dXBDb250ZXh0ID0gaW5zdGFuY2Uuc2V0dXBDb250ZXh0ID0gc2V0dXAubGVuZ3RoID4gMSA/IGNyZWF0ZVNldHVwQ29udGV4dChpbnN0YW5jZSkgOiBudWxsO1xuICAgIHNldEN1cnJlbnRJbnN0YW5jZShpbnN0YW5jZSk7XG4gICAgcGF1c2VUcmFja2luZygpO1xuICAgIGNvbnN0IHNldHVwUmVzdWx0ID0gY2FsbFdpdGhFcnJvckhhbmRsaW5nKFxuICAgICAgc2V0dXAsXG4gICAgICBpbnN0YW5jZSxcbiAgICAgIDAsXG4gICAgICBbcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gc2hhbGxvd1JlYWRvbmx5KGluc3RhbmNlLnByb3BzKSA6IGluc3RhbmNlLnByb3BzLCBzZXR1cENvbnRleHRdXG4gICAgKTtcbiAgICByZXNldFRyYWNraW5nKCk7XG4gICAgdW5zZXRDdXJyZW50SW5zdGFuY2UoKTtcbiAgICBpZiAoaXNQcm9taXNlKHNldHVwUmVzdWx0KSkge1xuICAgICAgc2V0dXBSZXN1bHQudGhlbih1bnNldEN1cnJlbnRJbnN0YW5jZSwgdW5zZXRDdXJyZW50SW5zdGFuY2UpO1xuICAgICAgaWYgKGlzU1NSKSB7XG4gICAgICAgIHJldHVybiBzZXR1cFJlc3VsdC50aGVuKChyZXNvbHZlZFJlc3VsdCkgPT4ge1xuICAgICAgICAgIGhhbmRsZVNldHVwUmVzdWx0KGluc3RhbmNlLCByZXNvbHZlZFJlc3VsdCwgaXNTU1IpO1xuICAgICAgICB9KS5jYXRjaCgoZSkgPT4ge1xuICAgICAgICAgIGhhbmRsZUVycm9yKGUsIGluc3RhbmNlLCAwKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbnN0YW5jZS5hc3luY0RlcCA9IHNldHVwUmVzdWx0O1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmICFpbnN0YW5jZS5zdXNwZW5zZSkge1xuICAgICAgICAgIGNvbnN0IG5hbWUgPSAoX2EgPSBDb21wb25lbnQubmFtZSkgIT0gbnVsbCA/IF9hIDogXCJBbm9ueW1vdXNcIjtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgYENvbXBvbmVudCA8JHtuYW1lfT46IHNldHVwIGZ1bmN0aW9uIHJldHVybmVkIGEgcHJvbWlzZSwgYnV0IG5vIDxTdXNwZW5zZT4gYm91bmRhcnkgd2FzIGZvdW5kIGluIHRoZSBwYXJlbnQgY29tcG9uZW50IHRyZWUuIEEgY29tcG9uZW50IHdpdGggYXN5bmMgc2V0dXAoKSBtdXN0IGJlIG5lc3RlZCBpbiBhIDxTdXNwZW5zZT4gaW4gb3JkZXIgdG8gYmUgcmVuZGVyZWQuYFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaGFuZGxlU2V0dXBSZXN1bHQoaW5zdGFuY2UsIHNldHVwUmVzdWx0LCBpc1NTUik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZpbmlzaENvbXBvbmVudFNldHVwKGluc3RhbmNlLCBpc1NTUik7XG4gIH1cbn1cbmZ1bmN0aW9uIGhhbmRsZVNldHVwUmVzdWx0KGluc3RhbmNlLCBzZXR1cFJlc3VsdCwgaXNTU1IpIHtcbiAgaWYgKGlzRnVuY3Rpb24oc2V0dXBSZXN1bHQpKSB7XG4gICAgaWYgKGluc3RhbmNlLnR5cGUuX19zc3JJbmxpbmVSZW5kZXIpIHtcbiAgICAgIGluc3RhbmNlLnNzclJlbmRlciA9IHNldHVwUmVzdWx0O1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnN0YW5jZS5yZW5kZXIgPSBzZXR1cFJlc3VsdDtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNPYmplY3Qoc2V0dXBSZXN1bHQpKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiBpc1ZOb2RlKHNldHVwUmVzdWx0KSkge1xuICAgICAgd2FybihcbiAgICAgICAgYHNldHVwKCkgc2hvdWxkIG5vdCByZXR1cm4gVk5vZGVzIGRpcmVjdGx5IC0gcmV0dXJuIGEgcmVuZGVyIGZ1bmN0aW9uIGluc3RlYWQuYFxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiB8fCBfX1ZVRV9QUk9EX0RFVlRPT0xTX18pIHtcbiAgICAgIGluc3RhbmNlLmRldnRvb2xzUmF3U2V0dXBTdGF0ZSA9IHNldHVwUmVzdWx0O1xuICAgIH1cbiAgICBpbnN0YW5jZS5zZXR1cFN0YXRlID0gcHJveHlSZWZzKHNldHVwUmVzdWx0KTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICBleHBvc2VTZXR1cFN0YXRlT25SZW5kZXJDb250ZXh0KGluc3RhbmNlKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmIHNldHVwUmVzdWx0ICE9PSB2b2lkIDApIHtcbiAgICB3YXJuKFxuICAgICAgYHNldHVwKCkgc2hvdWxkIHJldHVybiBhbiBvYmplY3QuIFJlY2VpdmVkOiAke3NldHVwUmVzdWx0ID09PSBudWxsID8gXCJudWxsXCIgOiB0eXBlb2Ygc2V0dXBSZXN1bHR9YFxuICAgICk7XG4gIH1cbiAgZmluaXNoQ29tcG9uZW50U2V0dXAoaW5zdGFuY2UsIGlzU1NSKTtcbn1cbmxldCBjb21waWxlO1xubGV0IGluc3RhbGxXaXRoUHJveHk7XG5mdW5jdGlvbiByZWdpc3RlclJ1bnRpbWVDb21waWxlcihfY29tcGlsZSkge1xuICBjb21waWxlID0gX2NvbXBpbGU7XG4gIGluc3RhbGxXaXRoUHJveHkgPSAoaSkgPT4ge1xuICAgIGlmIChpLnJlbmRlci5fcmMpIHtcbiAgICAgIGkud2l0aFByb3h5ID0gbmV3IFByb3h5KGkuY3R4LCBSdW50aW1lQ29tcGlsZWRQdWJsaWNJbnN0YW5jZVByb3h5SGFuZGxlcnMpO1xuICAgIH1cbiAgfTtcbn1cbmNvbnN0IGlzUnVudGltZU9ubHkgPSAoKSA9PiAhY29tcGlsZTtcbmZ1bmN0aW9uIGZpbmlzaENvbXBvbmVudFNldHVwKGluc3RhbmNlLCBpc1NTUiwgc2tpcE9wdGlvbnMpIHtcbiAgY29uc3QgQ29tcG9uZW50ID0gaW5zdGFuY2UudHlwZTtcbiAgaWYgKCFpbnN0YW5jZS5yZW5kZXIpIHtcbiAgICBpZiAoIWlzU1NSICYmIGNvbXBpbGUgJiYgIUNvbXBvbmVudC5yZW5kZXIpIHtcbiAgICAgIGNvbnN0IHRlbXBsYXRlID0gQ29tcG9uZW50LnRlbXBsYXRlIHx8IHJlc29sdmVNZXJnZWRPcHRpb25zKGluc3RhbmNlKS50ZW1wbGF0ZTtcbiAgICAgIGlmICh0ZW1wbGF0ZSkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgc3RhcnRNZWFzdXJlKGluc3RhbmNlLCBgY29tcGlsZWApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgaXNDdXN0b21FbGVtZW50LCBjb21waWxlck9wdGlvbnMgfSA9IGluc3RhbmNlLmFwcENvbnRleHQuY29uZmlnO1xuICAgICAgICBjb25zdCB7IGRlbGltaXRlcnMsIGNvbXBpbGVyT3B0aW9uczogY29tcG9uZW50Q29tcGlsZXJPcHRpb25zIH0gPSBDb21wb25lbnQ7XG4gICAgICAgIGNvbnN0IGZpbmFsQ29tcGlsZXJPcHRpb25zID0gZXh0ZW5kKFxuICAgICAgICAgIGV4dGVuZChcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgaXNDdXN0b21FbGVtZW50LFxuICAgICAgICAgICAgICBkZWxpbWl0ZXJzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29tcGlsZXJPcHRpb25zXG4gICAgICAgICAgKSxcbiAgICAgICAgICBjb21wb25lbnRDb21waWxlck9wdGlvbnNcbiAgICAgICAgKTtcbiAgICAgICAgQ29tcG9uZW50LnJlbmRlciA9IGNvbXBpbGUodGVtcGxhdGUsIGZpbmFsQ29tcGlsZXJPcHRpb25zKTtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgIGVuZE1lYXN1cmUoaW5zdGFuY2UsIGBjb21waWxlYCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaW5zdGFuY2UucmVuZGVyID0gQ29tcG9uZW50LnJlbmRlciB8fCBOT09QO1xuICAgIGlmIChpbnN0YWxsV2l0aFByb3h5KSB7XG4gICAgICBpbnN0YWxsV2l0aFByb3h5KGluc3RhbmNlKTtcbiAgICB9XG4gIH1cbiAgaWYgKF9fVlVFX09QVElPTlNfQVBJX18gJiYgdHJ1ZSkge1xuICAgIHNldEN1cnJlbnRJbnN0YW5jZShpbnN0YW5jZSk7XG4gICAgcGF1c2VUcmFja2luZygpO1xuICAgIGFwcGx5T3B0aW9ucyhpbnN0YW5jZSk7XG4gICAgcmVzZXRUcmFja2luZygpO1xuICAgIHVuc2V0Q3VycmVudEluc3RhbmNlKCk7XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiAhQ29tcG9uZW50LnJlbmRlciAmJiBpbnN0YW5jZS5yZW5kZXIgPT09IE5PT1AgJiYgIWlzU1NSKSB7XG4gICAgaWYgKCFjb21waWxlICYmIENvbXBvbmVudC50ZW1wbGF0ZSkge1xuICAgICAgd2FybihcbiAgICAgICAgYENvbXBvbmVudCBwcm92aWRlZCB0ZW1wbGF0ZSBvcHRpb24gYnV0IHJ1bnRpbWUgY29tcGlsYXRpb24gaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJ1aWxkIG9mIFZ1ZS5gICsgKGAgQ29uZmlndXJlIHlvdXIgYnVuZGxlciB0byBhbGlhcyBcInZ1ZVwiIHRvIFwidnVlL2Rpc3QvdnVlLmVzbS1idW5kbGVyLmpzXCIuYCApXG4gICAgICAgIC8qIHNob3VsZCBub3QgaGFwcGVuICovXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB3YXJuKGBDb21wb25lbnQgaXMgbWlzc2luZyB0ZW1wbGF0ZSBvciByZW5kZXIgZnVuY3Rpb24uYCk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBnZXRBdHRyc1Byb3h5KGluc3RhbmNlKSB7XG4gIHJldHVybiBpbnN0YW5jZS5hdHRyc1Byb3h5IHx8IChpbnN0YW5jZS5hdHRyc1Byb3h5ID0gbmV3IFByb3h5KFxuICAgIGluc3RhbmNlLmF0dHJzLFxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgICAgIGdldCh0YXJnZXQsIGtleSkge1xuICAgICAgICBtYXJrQXR0cnNBY2Nlc3NlZCgpO1xuICAgICAgICB0cmFjayhpbnN0YW5jZSwgXCJnZXRcIiwgXCIkYXR0cnNcIik7XG4gICAgICAgIHJldHVybiB0YXJnZXRba2V5XTtcbiAgICAgIH0sXG4gICAgICBzZXQoKSB7XG4gICAgICAgIHdhcm4oYHNldHVwQ29udGV4dC5hdHRycyBpcyByZWFkb25seS5gKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSxcbiAgICAgIGRlbGV0ZVByb3BlcnR5KCkge1xuICAgICAgICB3YXJuKGBzZXR1cENvbnRleHQuYXR0cnMgaXMgcmVhZG9ubHkuYCk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IDoge1xuICAgICAgZ2V0KHRhcmdldCwga2V5KSB7XG4gICAgICAgIHRyYWNrKGluc3RhbmNlLCBcImdldFwiLCBcIiRhdHRyc1wiKTtcbiAgICAgICAgcmV0dXJuIHRhcmdldFtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgKSk7XG59XG5mdW5jdGlvbiBnZXRTbG90c1Byb3h5KGluc3RhbmNlKSB7XG4gIHJldHVybiBpbnN0YW5jZS5zbG90c1Byb3h5IHx8IChpbnN0YW5jZS5zbG90c1Byb3h5ID0gbmV3IFByb3h5KGluc3RhbmNlLnNsb3RzLCB7XG4gICAgZ2V0KHRhcmdldCwga2V5KSB7XG4gICAgICB0cmFjayhpbnN0YW5jZSwgXCJnZXRcIiwgXCIkc2xvdHNcIik7XG4gICAgICByZXR1cm4gdGFyZ2V0W2tleV07XG4gICAgfVxuICB9KSk7XG59XG5mdW5jdGlvbiBjcmVhdGVTZXR1cENvbnRleHQoaW5zdGFuY2UpIHtcbiAgY29uc3QgZXhwb3NlID0gKGV4cG9zZWQpID0+IHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICBpZiAoaW5zdGFuY2UuZXhwb3NlZCkge1xuICAgICAgICB3YXJuKGBleHBvc2UoKSBzaG91bGQgYmUgY2FsbGVkIG9ubHkgb25jZSBwZXIgc2V0dXAoKS5gKTtcbiAgICAgIH1cbiAgICAgIGlmIChleHBvc2VkICE9IG51bGwpIHtcbiAgICAgICAgbGV0IGV4cG9zZWRUeXBlID0gdHlwZW9mIGV4cG9zZWQ7XG4gICAgICAgIGlmIChleHBvc2VkVHlwZSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgIGlmIChpc0FycmF5KGV4cG9zZWQpKSB7XG4gICAgICAgICAgICBleHBvc2VkVHlwZSA9IFwiYXJyYXlcIjtcbiAgICAgICAgICB9IGVsc2UgaWYgKGlzUmVmKGV4cG9zZWQpKSB7XG4gICAgICAgICAgICBleHBvc2VkVHlwZSA9IFwicmVmXCI7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChleHBvc2VkVHlwZSAhPT0gXCJvYmplY3RcIikge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICBgZXhwb3NlKCkgc2hvdWxkIGJlIHBhc3NlZCBhIHBsYWluIG9iamVjdCwgcmVjZWl2ZWQgJHtleHBvc2VkVHlwZX0uYFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaW5zdGFuY2UuZXhwb3NlZCA9IGV4cG9zZWQgfHwge307XG4gIH07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICByZXR1cm4gT2JqZWN0LmZyZWV6ZSh7XG4gICAgICBnZXQgYXR0cnMoKSB7XG4gICAgICAgIHJldHVybiBnZXRBdHRyc1Byb3h5KGluc3RhbmNlKTtcbiAgICAgIH0sXG4gICAgICBnZXQgc2xvdHMoKSB7XG4gICAgICAgIHJldHVybiBnZXRTbG90c1Byb3h5KGluc3RhbmNlKTtcbiAgICAgIH0sXG4gICAgICBnZXQgZW1pdCgpIHtcbiAgICAgICAgcmV0dXJuIChldmVudCwgLi4uYXJncykgPT4gaW5zdGFuY2UuZW1pdChldmVudCwgLi4uYXJncyk7XG4gICAgICB9LFxuICAgICAgZXhwb3NlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGdldCBhdHRycygpIHtcbiAgICAgICAgcmV0dXJuIGdldEF0dHJzUHJveHkoaW5zdGFuY2UpO1xuICAgICAgfSxcbiAgICAgIHNsb3RzOiBpbnN0YW5jZS5zbG90cyxcbiAgICAgIGVtaXQ6IGluc3RhbmNlLmVtaXQsXG4gICAgICBleHBvc2VcbiAgICB9O1xuICB9XG59XG5mdW5jdGlvbiBnZXRFeHBvc2VQcm94eShpbnN0YW5jZSkge1xuICBpZiAoaW5zdGFuY2UuZXhwb3NlZCkge1xuICAgIHJldHVybiBpbnN0YW5jZS5leHBvc2VQcm94eSB8fCAoaW5zdGFuY2UuZXhwb3NlUHJveHkgPSBuZXcgUHJveHkocHJveHlSZWZzKG1hcmtSYXcoaW5zdGFuY2UuZXhwb3NlZCkpLCB7XG4gICAgICBnZXQodGFyZ2V0LCBrZXkpIHtcbiAgICAgICAgaWYgKGtleSBpbiB0YXJnZXQpIHtcbiAgICAgICAgICByZXR1cm4gdGFyZ2V0W2tleV07XG4gICAgICAgIH0gZWxzZSBpZiAoa2V5IGluIHB1YmxpY1Byb3BlcnRpZXNNYXApIHtcbiAgICAgICAgICByZXR1cm4gcHVibGljUHJvcGVydGllc01hcFtrZXldKGluc3RhbmNlKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGhhcyh0YXJnZXQsIGtleSkge1xuICAgICAgICByZXR1cm4ga2V5IGluIHRhcmdldCB8fCBrZXkgaW4gcHVibGljUHJvcGVydGllc01hcDtcbiAgICAgIH1cbiAgICB9KSk7XG4gIH1cbn1cbmNvbnN0IGNsYXNzaWZ5UkUgPSAvKD86XnxbLV9dKShcXHcpL2c7XG5jb25zdCBjbGFzc2lmeSA9IChzdHIpID0+IHN0ci5yZXBsYWNlKGNsYXNzaWZ5UkUsIChjKSA9PiBjLnRvVXBwZXJDYXNlKCkpLnJlcGxhY2UoL1stX10vZywgXCJcIik7XG5mdW5jdGlvbiBnZXRDb21wb25lbnROYW1lKENvbXBvbmVudCwgaW5jbHVkZUluZmVycmVkID0gdHJ1ZSkge1xuICByZXR1cm4gaXNGdW5jdGlvbihDb21wb25lbnQpID8gQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lIDogQ29tcG9uZW50Lm5hbWUgfHwgaW5jbHVkZUluZmVycmVkICYmIENvbXBvbmVudC5fX25hbWU7XG59XG5mdW5jdGlvbiBmb3JtYXRDb21wb25lbnROYW1lKGluc3RhbmNlLCBDb21wb25lbnQsIGlzUm9vdCA9IGZhbHNlKSB7XG4gIGxldCBuYW1lID0gZ2V0Q29tcG9uZW50TmFtZShDb21wb25lbnQpO1xuICBpZiAoIW5hbWUgJiYgQ29tcG9uZW50Ll9fZmlsZSkge1xuICAgIGNvbnN0IG1hdGNoID0gQ29tcG9uZW50Ll9fZmlsZS5tYXRjaCgvKFteL1xcXFxdKylcXC5cXHcrJC8pO1xuICAgIGlmIChtYXRjaCkge1xuICAgICAgbmFtZSA9IG1hdGNoWzFdO1xuICAgIH1cbiAgfVxuICBpZiAoIW5hbWUgJiYgaW5zdGFuY2UgJiYgaW5zdGFuY2UucGFyZW50KSB7XG4gICAgY29uc3QgaW5mZXJGcm9tUmVnaXN0cnkgPSAocmVnaXN0cnkpID0+IHtcbiAgICAgIGZvciAoY29uc3Qga2V5IGluIHJlZ2lzdHJ5KSB7XG4gICAgICAgIGlmIChyZWdpc3RyeVtrZXldID09PSBDb21wb25lbnQpIHtcbiAgICAgICAgICByZXR1cm4ga2V5O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBuYW1lID0gaW5mZXJGcm9tUmVnaXN0cnkoXG4gICAgICBpbnN0YW5jZS5jb21wb25lbnRzIHx8IGluc3RhbmNlLnBhcmVudC50eXBlLmNvbXBvbmVudHNcbiAgICApIHx8IGluZmVyRnJvbVJlZ2lzdHJ5KGluc3RhbmNlLmFwcENvbnRleHQuY29tcG9uZW50cyk7XG4gIH1cbiAgcmV0dXJuIG5hbWUgPyBjbGFzc2lmeShuYW1lKSA6IGlzUm9vdCA/IGBBcHBgIDogYEFub255bW91c2A7XG59XG5mdW5jdGlvbiBpc0NsYXNzQ29tcG9uZW50KHZhbHVlKSB7XG4gIHJldHVybiBpc0Z1bmN0aW9uKHZhbHVlKSAmJiBcIl9fdmNjT3B0c1wiIGluIHZhbHVlO1xufVxuXG5jb25zdCBjb21wdXRlZCA9IChnZXR0ZXJPck9wdGlvbnMsIGRlYnVnT3B0aW9ucykgPT4ge1xuICByZXR1cm4gY29tcHV0ZWQkMShnZXR0ZXJPck9wdGlvbnMsIGRlYnVnT3B0aW9ucywgaXNJblNTUkNvbXBvbmVudFNldHVwKTtcbn07XG5cbmZ1bmN0aW9uIGgodHlwZSwgcHJvcHNPckNoaWxkcmVuLCBjaGlsZHJlbikge1xuICBjb25zdCBsID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgaWYgKGwgPT09IDIpIHtcbiAgICBpZiAoaXNPYmplY3QocHJvcHNPckNoaWxkcmVuKSAmJiAhaXNBcnJheShwcm9wc09yQ2hpbGRyZW4pKSB7XG4gICAgICBpZiAoaXNWTm9kZShwcm9wc09yQ2hpbGRyZW4pKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVWTm9kZSh0eXBlLCBudWxsLCBbcHJvcHNPckNoaWxkcmVuXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gY3JlYXRlVk5vZGUodHlwZSwgcHJvcHNPckNoaWxkcmVuKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGNyZWF0ZVZOb2RlKHR5cGUsIG51bGwsIHByb3BzT3JDaGlsZHJlbik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChsID4gMykge1xuICAgICAgY2hpbGRyZW4gPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpO1xuICAgIH0gZWxzZSBpZiAobCA9PT0gMyAmJiBpc1ZOb2RlKGNoaWxkcmVuKSkge1xuICAgICAgY2hpbGRyZW4gPSBbY2hpbGRyZW5dO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlVk5vZGUodHlwZSwgcHJvcHNPckNoaWxkcmVuLCBjaGlsZHJlbik7XG4gIH1cbn1cblxuY29uc3Qgc3NyQ29udGV4dEtleSA9IFN5bWJvbC5mb3IoXCJ2LXNjeFwiKTtcbmNvbnN0IHVzZVNTUkNvbnRleHQgPSAoKSA9PiB7XG4gIHtcbiAgICBjb25zdCBjdHggPSBpbmplY3Qoc3NyQ29udGV4dEtleSk7XG4gICAgaWYgKCFjdHgpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiB3YXJuKFxuICAgICAgICBgU2VydmVyIHJlbmRlcmluZyBjb250ZXh0IG5vdCBwcm92aWRlZC4gTWFrZSBzdXJlIHRvIG9ubHkgY2FsbCB1c2VTU1JDb250ZXh0KCkgY29uZGl0aW9uYWxseSBpbiB0aGUgc2VydmVyIGJ1aWxkLmBcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBjdHg7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGlzU2hhbGxvdyh2YWx1ZSkge1xuICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWVbXCJfX3ZfaXNTaGFsbG93XCJdKTtcbn1cblxuZnVuY3Rpb24gaW5pdEN1c3RvbUZvcm1hdHRlcigpIHtcbiAgaWYgKCFwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgfHwgdHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCB2dWVTdHlsZSA9IHsgc3R5bGU6IFwiY29sb3I6IzNiYTc3NlwiIH07XG4gIGNvbnN0IG51bWJlclN0eWxlID0geyBzdHlsZTogXCJjb2xvcjojMGIxYmM5XCIgfTtcbiAgY29uc3Qgc3RyaW5nU3R5bGUgPSB7IHN0eWxlOiBcImNvbG9yOiNiNjJlMjRcIiB9O1xuICBjb25zdCBrZXl3b3JkU3R5bGUgPSB7IHN0eWxlOiBcImNvbG9yOiM5ZDI4OGNcIiB9O1xuICBjb25zdCBmb3JtYXR0ZXIgPSB7XG4gICAgaGVhZGVyKG9iaikge1xuICAgICAgaWYgKCFpc09iamVjdChvYmopKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKG9iai5fX2lzVnVlKSB7XG4gICAgICAgIHJldHVybiBbXCJkaXZcIiwgdnVlU3R5bGUsIGBWdWVJbnN0YW5jZWBdO1xuICAgICAgfSBlbHNlIGlmIChpc1JlZihvYmopKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICB7fSxcbiAgICAgICAgICBbXCJzcGFuXCIsIHZ1ZVN0eWxlLCBnZW5SZWZGbGFnKG9iaildLFxuICAgICAgICAgIFwiPFwiLFxuICAgICAgICAgIGZvcm1hdFZhbHVlKG9iai52YWx1ZSksXG4gICAgICAgICAgYD5gXG4gICAgICAgIF07XG4gICAgICB9IGVsc2UgaWYgKGlzUmVhY3RpdmUob2JqKSkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAge30sXG4gICAgICAgICAgW1wic3BhblwiLCB2dWVTdHlsZSwgaXNTaGFsbG93KG9iaikgPyBcIlNoYWxsb3dSZWFjdGl2ZVwiIDogXCJSZWFjdGl2ZVwiXSxcbiAgICAgICAgICBcIjxcIixcbiAgICAgICAgICBmb3JtYXRWYWx1ZShvYmopLFxuICAgICAgICAgIGA+JHtpc1JlYWRvbmx5KG9iaikgPyBgIChyZWFkb25seSlgIDogYGB9YFxuICAgICAgICBdO1xuICAgICAgfSBlbHNlIGlmIChpc1JlYWRvbmx5KG9iaikpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgIHt9LFxuICAgICAgICAgIFtcInNwYW5cIiwgdnVlU3R5bGUsIGlzU2hhbGxvdyhvYmopID8gXCJTaGFsbG93UmVhZG9ubHlcIiA6IFwiUmVhZG9ubHlcIl0sXG4gICAgICAgICAgXCI8XCIsXG4gICAgICAgICAgZm9ybWF0VmFsdWUob2JqKSxcbiAgICAgICAgICBcIj5cIlxuICAgICAgICBdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcbiAgICBoYXNCb2R5KG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiBvYmouX19pc1Z1ZTtcbiAgICB9LFxuICAgIGJvZHkob2JqKSB7XG4gICAgICBpZiAob2JqICYmIG9iai5fX2lzVnVlKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICB7fSxcbiAgICAgICAgICAuLi5mb3JtYXRJbnN0YW5jZShvYmouJClcbiAgICAgICAgXTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGZ1bmN0aW9uIGZvcm1hdEluc3RhbmNlKGluc3RhbmNlKSB7XG4gICAgY29uc3QgYmxvY2tzID0gW107XG4gICAgaWYgKGluc3RhbmNlLnR5cGUucHJvcHMgJiYgaW5zdGFuY2UucHJvcHMpIHtcbiAgICAgIGJsb2Nrcy5wdXNoKGNyZWF0ZUluc3RhbmNlQmxvY2soXCJwcm9wc1wiLCB0b1JhdyhpbnN0YW5jZS5wcm9wcykpKTtcbiAgICB9XG4gICAgaWYgKGluc3RhbmNlLnNldHVwU3RhdGUgIT09IEVNUFRZX09CSikge1xuICAgICAgYmxvY2tzLnB1c2goY3JlYXRlSW5zdGFuY2VCbG9jayhcInNldHVwXCIsIGluc3RhbmNlLnNldHVwU3RhdGUpKTtcbiAgICB9XG4gICAgaWYgKGluc3RhbmNlLmRhdGEgIT09IEVNUFRZX09CSikge1xuICAgICAgYmxvY2tzLnB1c2goY3JlYXRlSW5zdGFuY2VCbG9jayhcImRhdGFcIiwgdG9SYXcoaW5zdGFuY2UuZGF0YSkpKTtcbiAgICB9XG4gICAgY29uc3QgY29tcHV0ZWQgPSBleHRyYWN0S2V5cyhpbnN0YW5jZSwgXCJjb21wdXRlZFwiKTtcbiAgICBpZiAoY29tcHV0ZWQpIHtcbiAgICAgIGJsb2Nrcy5wdXNoKGNyZWF0ZUluc3RhbmNlQmxvY2soXCJjb21wdXRlZFwiLCBjb21wdXRlZCkpO1xuICAgIH1cbiAgICBjb25zdCBpbmplY3RlZCA9IGV4dHJhY3RLZXlzKGluc3RhbmNlLCBcImluamVjdFwiKTtcbiAgICBpZiAoaW5qZWN0ZWQpIHtcbiAgICAgIGJsb2Nrcy5wdXNoKGNyZWF0ZUluc3RhbmNlQmxvY2soXCJpbmplY3RlZFwiLCBpbmplY3RlZCkpO1xuICAgIH1cbiAgICBibG9ja3MucHVzaChbXG4gICAgICBcImRpdlwiLFxuICAgICAge30sXG4gICAgICBbXG4gICAgICAgIFwic3BhblwiLFxuICAgICAgICB7XG4gICAgICAgICAgc3R5bGU6IGtleXdvcmRTdHlsZS5zdHlsZSArIFwiO29wYWNpdHk6MC42NlwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiJCAoaW50ZXJuYWwpOiBcIlxuICAgICAgXSxcbiAgICAgIFtcIm9iamVjdFwiLCB7IG9iamVjdDogaW5zdGFuY2UgfV1cbiAgICBdKTtcbiAgICByZXR1cm4gYmxvY2tzO1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlQmxvY2sodHlwZSwgdGFyZ2V0KSB7XG4gICAgdGFyZ2V0ID0gZXh0ZW5kKHt9LCB0YXJnZXQpO1xuICAgIGlmICghT2JqZWN0LmtleXModGFyZ2V0KS5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBbXCJzcGFuXCIsIHt9XTtcbiAgICB9XG4gICAgcmV0dXJuIFtcbiAgICAgIFwiZGl2XCIsXG4gICAgICB7IHN0eWxlOiBcImxpbmUtaGVpZ2h0OjEuMjVlbTttYXJnaW4tYm90dG9tOjAuNmVtXCIgfSxcbiAgICAgIFtcbiAgICAgICAgXCJkaXZcIixcbiAgICAgICAge1xuICAgICAgICAgIHN0eWxlOiBcImNvbG9yOiM0NzY1ODJcIlxuICAgICAgICB9LFxuICAgICAgICB0eXBlXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICBcImRpdlwiLFxuICAgICAgICB7XG4gICAgICAgICAgc3R5bGU6IFwicGFkZGluZy1sZWZ0OjEuMjVlbVwiXG4gICAgICAgIH0sXG4gICAgICAgIC4uLk9iamVjdC5rZXlzKHRhcmdldCkubWFwKChrZXkpID0+IHtcbiAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICAgIHt9LFxuICAgICAgICAgICAgW1wic3BhblwiLCBrZXl3b3JkU3R5bGUsIGtleSArIFwiOiBcIl0sXG4gICAgICAgICAgICBmb3JtYXRWYWx1ZSh0YXJnZXRba2V5XSwgZmFsc2UpXG4gICAgICAgICAgXTtcbiAgICAgICAgfSlcbiAgICAgIF1cbiAgICBdO1xuICB9XG4gIGZ1bmN0aW9uIGZvcm1hdFZhbHVlKHYsIGFzUmF3ID0gdHJ1ZSkge1xuICAgIGlmICh0eXBlb2YgdiA9PT0gXCJudW1iZXJcIikge1xuICAgICAgcmV0dXJuIFtcInNwYW5cIiwgbnVtYmVyU3R5bGUsIHZdO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHYgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHJldHVybiBbXCJzcGFuXCIsIHN0cmluZ1N0eWxlLCBKU09OLnN0cmluZ2lmeSh2KV07XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdiA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgIHJldHVybiBbXCJzcGFuXCIsIGtleXdvcmRTdHlsZSwgdl07XG4gICAgfSBlbHNlIGlmIChpc09iamVjdCh2KSkge1xuICAgICAgcmV0dXJuIFtcIm9iamVjdFwiLCB7IG9iamVjdDogYXNSYXcgPyB0b1Jhdyh2KSA6IHYgfV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBbXCJzcGFuXCIsIHN0cmluZ1N0eWxlLCBTdHJpbmcodildO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBleHRyYWN0S2V5cyhpbnN0YW5jZSwgdHlwZSkge1xuICAgIGNvbnN0IENvbXAgPSBpbnN0YW5jZS50eXBlO1xuICAgIGlmIChpc0Z1bmN0aW9uKENvbXApKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGV4dHJhY3RlZCA9IHt9O1xuICAgIGZvciAoY29uc3Qga2V5IGluIGluc3RhbmNlLmN0eCkge1xuICAgICAgaWYgKGlzS2V5T2ZUeXBlKENvbXAsIGtleSwgdHlwZSkpIHtcbiAgICAgICAgZXh0cmFjdGVkW2tleV0gPSBpbnN0YW5jZS5jdHhba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGV4dHJhY3RlZDtcbiAgfVxuICBmdW5jdGlvbiBpc0tleU9mVHlwZShDb21wLCBrZXksIHR5cGUpIHtcbiAgICBjb25zdCBvcHRzID0gQ29tcFt0eXBlXTtcbiAgICBpZiAoaXNBcnJheShvcHRzKSAmJiBvcHRzLmluY2x1ZGVzKGtleSkgfHwgaXNPYmplY3Qob3B0cykgJiYga2V5IGluIG9wdHMpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoQ29tcC5leHRlbmRzICYmIGlzS2V5T2ZUeXBlKENvbXAuZXh0ZW5kcywga2V5LCB0eXBlKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChDb21wLm1peGlucyAmJiBDb21wLm1peGlucy5zb21lKChtKSA9PiBpc0tleU9mVHlwZShtLCBrZXksIHR5cGUpKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGdlblJlZkZsYWcodikge1xuICAgIGlmIChpc1NoYWxsb3codikpIHtcbiAgICAgIHJldHVybiBgU2hhbGxvd1JlZmA7XG4gICAgfVxuICAgIGlmICh2LmVmZmVjdCkge1xuICAgICAgcmV0dXJuIGBDb21wdXRlZFJlZmA7XG4gICAgfVxuICAgIHJldHVybiBgUmVmYDtcbiAgfVxuICBpZiAod2luZG93LmRldnRvb2xzRm9ybWF0dGVycykge1xuICAgIHdpbmRvdy5kZXZ0b29sc0Zvcm1hdHRlcnMucHVzaChmb3JtYXR0ZXIpO1xuICB9IGVsc2Uge1xuICAgIHdpbmRvdy5kZXZ0b29sc0Zvcm1hdHRlcnMgPSBbZm9ybWF0dGVyXTtcbiAgfVxufVxuXG5mdW5jdGlvbiB3aXRoTWVtbyhtZW1vLCByZW5kZXIsIGNhY2hlLCBpbmRleCkge1xuICBjb25zdCBjYWNoZWQgPSBjYWNoZVtpbmRleF07XG4gIGlmIChjYWNoZWQgJiYgaXNNZW1vU2FtZShjYWNoZWQsIG1lbW8pKSB7XG4gICAgcmV0dXJuIGNhY2hlZDtcbiAgfVxuICBjb25zdCByZXQgPSByZW5kZXIoKTtcbiAgcmV0Lm1lbW8gPSBtZW1vLnNsaWNlKCk7XG4gIHJldHVybiBjYWNoZVtpbmRleF0gPSByZXQ7XG59XG5mdW5jdGlvbiBpc01lbW9TYW1lKGNhY2hlZCwgbWVtbykge1xuICBjb25zdCBwcmV2ID0gY2FjaGVkLm1lbW87XG4gIGlmIChwcmV2Lmxlbmd0aCAhPSBtZW1vLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBmb3IgKGxldCBpID0gMDsgaSA8IHByZXYubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoaGFzQ2hhbmdlZChwcmV2W2ldLCBtZW1vW2ldKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICBpZiAoaXNCbG9ja1RyZWVFbmFibGVkID4gMCAmJiBjdXJyZW50QmxvY2spIHtcbiAgICBjdXJyZW50QmxvY2sucHVzaChjYWNoZWQpO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG5jb25zdCB2ZXJzaW9uID0gXCIzLjMuMFwiO1xuY29uc3QgX3NzclV0aWxzID0ge1xuICBjcmVhdGVDb21wb25lbnRJbnN0YW5jZSxcbiAgc2V0dXBDb21wb25lbnQsXG4gIHJlbmRlckNvbXBvbmVudFJvb3QsXG4gIHNldEN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSxcbiAgaXNWTm9kZTogaXNWTm9kZSxcbiAgbm9ybWFsaXplVk5vZGVcbn07XG5jb25zdCBzc3JVdGlscyA9IF9zc3JVdGlscyA7XG5jb25zdCByZXNvbHZlRmlsdGVyID0gbnVsbDtcbmNvbnN0IGNvbXBhdFV0aWxzID0gbnVsbDtcblxuZXhwb3J0IHsgQmFzZVRyYW5zaXRpb24sIEJhc2VUcmFuc2l0aW9uUHJvcHNWYWxpZGF0b3JzLCBDb21tZW50LCBGcmFnbWVudCwgS2VlcEFsaXZlLCBTdGF0aWMsIFN1c3BlbnNlLCBUZWxlcG9ydCwgVGV4dCwgYXNzZXJ0TnVtYmVyLCBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZywgY2FsbFdpdGhFcnJvckhhbmRsaW5nLCBjbG9uZVZOb2RlLCBjb21wYXRVdGlscywgY29tcHV0ZWQsIGNyZWF0ZUJsb2NrLCBjcmVhdGVDb21tZW50Vk5vZGUsIGNyZWF0ZUVsZW1lbnRCbG9jaywgY3JlYXRlQmFzZVZOb2RlIGFzIGNyZWF0ZUVsZW1lbnRWTm9kZSwgY3JlYXRlSHlkcmF0aW9uUmVuZGVyZXIsIGNyZWF0ZVByb3BzUmVzdFByb3h5LCBjcmVhdGVSZW5kZXJlciwgY3JlYXRlU2xvdHMsIGNyZWF0ZVN0YXRpY1ZOb2RlLCBjcmVhdGVUZXh0Vk5vZGUsIGNyZWF0ZVZOb2RlLCBkZWZpbmVBc3luY0NvbXBvbmVudCwgZGVmaW5lQ29tcG9uZW50LCBkZWZpbmVFbWl0cywgZGVmaW5lRXhwb3NlLCBkZWZpbmVNb2RlbCwgZGVmaW5lT3B0aW9ucywgZGVmaW5lUHJvcHMsIGRlZmluZVNsb3RzLCBkZXZ0b29scywgZ2V0Q3VycmVudEluc3RhbmNlLCBnZXRUcmFuc2l0aW9uUmF3Q2hpbGRyZW4sIGd1YXJkUmVhY3RpdmVQcm9wcywgaCwgaGFuZGxlRXJyb3IsIGhhc0luamVjdGlvbkNvbnRleHQsIGluaXRDdXN0b21Gb3JtYXR0ZXIsIGluamVjdCwgaXNNZW1vU2FtZSwgaXNSdW50aW1lT25seSwgaXNWTm9kZSwgbWVyZ2VEZWZhdWx0cywgbWVyZ2VNb2RlbHMsIG1lcmdlUHJvcHMsIG5leHRUaWNrLCBvbkFjdGl2YXRlZCwgb25CZWZvcmVNb3VudCwgb25CZWZvcmVVbm1vdW50LCBvbkJlZm9yZVVwZGF0ZSwgb25EZWFjdGl2YXRlZCwgb25FcnJvckNhcHR1cmVkLCBvbk1vdW50ZWQsIG9uUmVuZGVyVHJhY2tlZCwgb25SZW5kZXJUcmlnZ2VyZWQsIG9uU2VydmVyUHJlZmV0Y2gsIG9uVW5tb3VudGVkLCBvblVwZGF0ZWQsIG9wZW5CbG9jaywgcG9wU2NvcGVJZCwgcHJvdmlkZSwgcHVzaFNjb3BlSWQsIHF1ZXVlUG9zdEZsdXNoQ2IsIHJlZ2lzdGVyUnVudGltZUNvbXBpbGVyLCByZW5kZXJMaXN0LCByZW5kZXJTbG90LCByZXNvbHZlQ29tcG9uZW50LCByZXNvbHZlRGlyZWN0aXZlLCByZXNvbHZlRHluYW1pY0NvbXBvbmVudCwgcmVzb2x2ZUZpbHRlciwgcmVzb2x2ZVRyYW5zaXRpb25Ib29rcywgc2V0QmxvY2tUcmFja2luZywgc2V0RGV2dG9vbHNIb29rLCBzZXRUcmFuc2l0aW9uSG9va3MsIHNzckNvbnRleHRLZXksIHNzclV0aWxzLCB0b0hhbmRsZXJzLCB0cmFuc2Zvcm1WTm9kZUFyZ3MsIHVzZUF0dHJzLCB1c2VNb2RlbCwgdXNlU1NSQ29udGV4dCwgdXNlU2xvdHMsIHVzZVRyYW5zaXRpb25TdGF0ZSwgdmVyc2lvbiwgd2Fybiwgd2F0Y2gsIHdhdGNoRWZmZWN0LCB3YXRjaFBvc3RFZmZlY3QsIHdhdGNoU3luY0VmZmVjdCwgd2l0aEFzeW5jQ29udGV4dCwgd2l0aEN0eCwgd2l0aERlZmF1bHRzLCB3aXRoRGlyZWN0aXZlcywgd2l0aE1lbW8sIHdpdGhTY29wZUlkIH07XG4iLCJpbXBvcnQgeyB3YXJuLCBjYW1lbGl6ZSwgY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcsIGRlZmluZUNvbXBvbmVudCwgbmV4dFRpY2ssIGNyZWF0ZVZOb2RlLCBnZXRDdXJyZW50SW5zdGFuY2UsIHdhdGNoUG9zdEVmZmVjdCwgb25Nb3VudGVkLCBvblVubW91bnRlZCwgRnJhZ21lbnQsIFN0YXRpYywgaCwgQmFzZVRyYW5zaXRpb24sIEJhc2VUcmFuc2l0aW9uUHJvcHNWYWxpZGF0b3JzLCBhc3NlcnROdW1iZXIsIHVzZVRyYW5zaXRpb25TdGF0ZSwgb25VcGRhdGVkLCB0b1JhdywgZ2V0VHJhbnNpdGlvblJhd0NoaWxkcmVuLCBzZXRUcmFuc2l0aW9uSG9va3MsIHJlc29sdmVUcmFuc2l0aW9uSG9va3MsIGlzUnVudGltZU9ubHksIGNyZWF0ZVJlbmRlcmVyLCBjcmVhdGVIeWRyYXRpb25SZW5kZXJlciB9IGZyb20gJ0B2dWUvcnVudGltZS1jb3JlJztcbmV4cG9ydCAqIGZyb20gJ0B2dWUvcnVudGltZS1jb3JlJztcbmltcG9ydCB7IGlzU3RyaW5nLCBpc0FycmF5LCBoeXBoZW5hdGUsIGNhcGl0YWxpemUsIGlzU3BlY2lhbEJvb2xlYW5BdHRyLCBpbmNsdWRlQm9vbGVhbkF0dHIsIGlzT24sIGlzTW9kZWxMaXN0ZW5lciwgaXNGdW5jdGlvbiwgY2FtZWxpemUgYXMgY2FtZWxpemUkMSwgdG9OdW1iZXIsIGV4dGVuZCwgRU1QVFlfT0JKLCBpc09iamVjdCwgbG9vc2VUb051bWJlciwgbG9vc2VJbmRleE9mLCBpc1NldCwgbG9vc2VFcXVhbCwgaW52b2tlQXJyYXlGbnMsIGlzSFRNTFRhZywgaXNTVkdUYWcgfSBmcm9tICdAdnVlL3NoYXJlZCc7XG5cbmNvbnN0IHN2Z05TID0gXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO1xuY29uc3QgZG9jID0gdHlwZW9mIGRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiID8gZG9jdW1lbnQgOiBudWxsO1xuY29uc3QgdGVtcGxhdGVDb250YWluZXIgPSBkb2MgJiYgLyogQF9fUFVSRV9fICovIGRvYy5jcmVhdGVFbGVtZW50KFwidGVtcGxhdGVcIik7XG5jb25zdCBub2RlT3BzID0ge1xuICBpbnNlcnQ6IChjaGlsZCwgcGFyZW50LCBhbmNob3IpID0+IHtcbiAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKGNoaWxkLCBhbmNob3IgfHwgbnVsbCk7XG4gIH0sXG4gIHJlbW92ZTogKGNoaWxkKSA9PiB7XG4gICAgY29uc3QgcGFyZW50ID0gY2hpbGQucGFyZW50Tm9kZTtcbiAgICBpZiAocGFyZW50KSB7XG4gICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQoY2hpbGQpO1xuICAgIH1cbiAgfSxcbiAgY3JlYXRlRWxlbWVudDogKHRhZywgaXNTVkcsIGlzLCBwcm9wcykgPT4ge1xuICAgIGNvbnN0IGVsID0gaXNTVkcgPyBkb2MuY3JlYXRlRWxlbWVudE5TKHN2Z05TLCB0YWcpIDogZG9jLmNyZWF0ZUVsZW1lbnQodGFnLCBpcyA/IHsgaXMgfSA6IHZvaWQgMCk7XG4gICAgaWYgKHRhZyA9PT0gXCJzZWxlY3RcIiAmJiBwcm9wcyAmJiBwcm9wcy5tdWx0aXBsZSAhPSBudWxsKSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoXCJtdWx0aXBsZVwiLCBwcm9wcy5tdWx0aXBsZSk7XG4gICAgfVxuICAgIHJldHVybiBlbDtcbiAgfSxcbiAgY3JlYXRlVGV4dDogKHRleHQpID0+IGRvYy5jcmVhdGVUZXh0Tm9kZSh0ZXh0KSxcbiAgY3JlYXRlQ29tbWVudDogKHRleHQpID0+IGRvYy5jcmVhdGVDb21tZW50KHRleHQpLFxuICBzZXRUZXh0OiAobm9kZSwgdGV4dCkgPT4ge1xuICAgIG5vZGUubm9kZVZhbHVlID0gdGV4dDtcbiAgfSxcbiAgc2V0RWxlbWVudFRleHQ6IChlbCwgdGV4dCkgPT4ge1xuICAgIGVsLnRleHRDb250ZW50ID0gdGV4dDtcbiAgfSxcbiAgcGFyZW50Tm9kZTogKG5vZGUpID0+IG5vZGUucGFyZW50Tm9kZSxcbiAgbmV4dFNpYmxpbmc6IChub2RlKSA9PiBub2RlLm5leHRTaWJsaW5nLFxuICBxdWVyeVNlbGVjdG9yOiAoc2VsZWN0b3IpID0+IGRvYy5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKSxcbiAgc2V0U2NvcGVJZChlbCwgaWQpIHtcbiAgICBlbC5zZXRBdHRyaWJ1dGUoaWQsIFwiXCIpO1xuICB9LFxuICAvLyBfX1VOU0FGRV9fXG4gIC8vIFJlYXNvbjogaW5uZXJIVE1MLlxuICAvLyBTdGF0aWMgY29udGVudCBoZXJlIGNhbiBvbmx5IGNvbWUgZnJvbSBjb21waWxlZCB0ZW1wbGF0ZXMuXG4gIC8vIEFzIGxvbmcgYXMgdGhlIHVzZXIgb25seSB1c2VzIHRydXN0ZWQgdGVtcGxhdGVzLCB0aGlzIGlzIHNhZmUuXG4gIGluc2VydFN0YXRpY0NvbnRlbnQoY29udGVudCwgcGFyZW50LCBhbmNob3IsIGlzU1ZHLCBzdGFydCwgZW5kKSB7XG4gICAgY29uc3QgYmVmb3JlID0gYW5jaG9yID8gYW5jaG9yLnByZXZpb3VzU2libGluZyA6IHBhcmVudC5sYXN0Q2hpbGQ7XG4gICAgaWYgKHN0YXJ0ICYmIChzdGFydCA9PT0gZW5kIHx8IHN0YXJ0Lm5leHRTaWJsaW5nKSkge1xuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShzdGFydC5jbG9uZU5vZGUodHJ1ZSksIGFuY2hvcik7XG4gICAgICAgIGlmIChzdGFydCA9PT0gZW5kIHx8ICEoc3RhcnQgPSBzdGFydC5uZXh0U2libGluZykpXG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRlbXBsYXRlQ29udGFpbmVyLmlubmVySFRNTCA9IGlzU1ZHID8gYDxzdmc+JHtjb250ZW50fTwvc3ZnPmAgOiBjb250ZW50O1xuICAgICAgY29uc3QgdGVtcGxhdGUgPSB0ZW1wbGF0ZUNvbnRhaW5lci5jb250ZW50O1xuICAgICAgaWYgKGlzU1ZHKSB7XG4gICAgICAgIGNvbnN0IHdyYXBwZXIgPSB0ZW1wbGF0ZS5maXJzdENoaWxkO1xuICAgICAgICB3aGlsZSAod3JhcHBlci5maXJzdENoaWxkKSB7XG4gICAgICAgICAgdGVtcGxhdGUuYXBwZW5kQ2hpbGQod3JhcHBlci5maXJzdENoaWxkKTtcbiAgICAgICAgfVxuICAgICAgICB0ZW1wbGF0ZS5yZW1vdmVDaGlsZCh3cmFwcGVyKTtcbiAgICAgIH1cbiAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUodGVtcGxhdGUsIGFuY2hvcik7XG4gICAgfVxuICAgIHJldHVybiBbXG4gICAgICAvLyBmaXJzdFxuICAgICAgYmVmb3JlID8gYmVmb3JlLm5leHRTaWJsaW5nIDogcGFyZW50LmZpcnN0Q2hpbGQsXG4gICAgICAvLyBsYXN0XG4gICAgICBhbmNob3IgPyBhbmNob3IucHJldmlvdXNTaWJsaW5nIDogcGFyZW50Lmxhc3RDaGlsZFxuICAgIF07XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHBhdGNoQ2xhc3MoZWwsIHZhbHVlLCBpc1NWRykge1xuICBjb25zdCB0cmFuc2l0aW9uQ2xhc3NlcyA9IGVsLl92dGM7XG4gIGlmICh0cmFuc2l0aW9uQ2xhc3Nlcykge1xuICAgIHZhbHVlID0gKHZhbHVlID8gW3ZhbHVlLCAuLi50cmFuc2l0aW9uQ2xhc3Nlc10gOiBbLi4udHJhbnNpdGlvbkNsYXNzZXNdKS5qb2luKFwiIFwiKTtcbiAgfVxuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShcImNsYXNzXCIpO1xuICB9IGVsc2UgaWYgKGlzU1ZHKSB7XG4gICAgZWwuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgdmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIGVsLmNsYXNzTmFtZSA9IHZhbHVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHBhdGNoU3R5bGUoZWwsIHByZXYsIG5leHQpIHtcbiAgY29uc3Qgc3R5bGUgPSBlbC5zdHlsZTtcbiAgY29uc3QgaXNDc3NTdHJpbmcgPSBpc1N0cmluZyhuZXh0KTtcbiAgaWYgKG5leHQgJiYgIWlzQ3NzU3RyaW5nKSB7XG4gICAgaWYgKHByZXYgJiYgIWlzU3RyaW5nKHByZXYpKSB7XG4gICAgICBmb3IgKGNvbnN0IGtleSBpbiBwcmV2KSB7XG4gICAgICAgIGlmIChuZXh0W2tleV0gPT0gbnVsbCkge1xuICAgICAgICAgIHNldFN0eWxlKHN0eWxlLCBrZXksIFwiXCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAoY29uc3Qga2V5IGluIG5leHQpIHtcbiAgICAgIHNldFN0eWxlKHN0eWxlLCBrZXksIG5leHRba2V5XSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGNvbnN0IGN1cnJlbnREaXNwbGF5ID0gc3R5bGUuZGlzcGxheTtcbiAgICBpZiAoaXNDc3NTdHJpbmcpIHtcbiAgICAgIGlmIChwcmV2ICE9PSBuZXh0KSB7XG4gICAgICAgIHN0eWxlLmNzc1RleHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocHJldikge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKFwic3R5bGVcIik7XG4gICAgfVxuICAgIGlmIChcIl92b2RcIiBpbiBlbCkge1xuICAgICAgc3R5bGUuZGlzcGxheSA9IGN1cnJlbnREaXNwbGF5O1xuICAgIH1cbiAgfVxufVxuY29uc3Qgc2VtaWNvbG9uUkUgPSAvW15cXFxcXTtcXHMqJC87XG5jb25zdCBpbXBvcnRhbnRSRSA9IC9cXHMqIWltcG9ydGFudCQvO1xuZnVuY3Rpb24gc2V0U3R5bGUoc3R5bGUsIG5hbWUsIHZhbCkge1xuICBpZiAoaXNBcnJheSh2YWwpKSB7XG4gICAgdmFsLmZvckVhY2goKHYpID0+IHNldFN0eWxlKHN0eWxlLCBuYW1lLCB2KSk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHZhbCA9PSBudWxsKVxuICAgICAgdmFsID0gXCJcIjtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICBpZiAoc2VtaWNvbG9uUkUudGVzdCh2YWwpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgYFVuZXhwZWN0ZWQgc2VtaWNvbG9uIGF0IHRoZSBlbmQgb2YgJyR7bmFtZX0nIHN0eWxlIHZhbHVlOiAnJHt2YWx9J2BcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG5hbWUuc3RhcnRzV2l0aChcIi0tXCIpKSB7XG4gICAgICBzdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2YWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBwcmVmaXhlZCA9IGF1dG9QcmVmaXgoc3R5bGUsIG5hbWUpO1xuICAgICAgaWYgKGltcG9ydGFudFJFLnRlc3QodmFsKSkge1xuICAgICAgICBzdHlsZS5zZXRQcm9wZXJ0eShcbiAgICAgICAgICBoeXBoZW5hdGUocHJlZml4ZWQpLFxuICAgICAgICAgIHZhbC5yZXBsYWNlKGltcG9ydGFudFJFLCBcIlwiKSxcbiAgICAgICAgICBcImltcG9ydGFudFwiXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdHlsZVtwcmVmaXhlZF0gPSB2YWw7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5jb25zdCBwcmVmaXhlcyA9IFtcIldlYmtpdFwiLCBcIk1velwiLCBcIm1zXCJdO1xuY29uc3QgcHJlZml4Q2FjaGUgPSB7fTtcbmZ1bmN0aW9uIGF1dG9QcmVmaXgoc3R5bGUsIHJhd05hbWUpIHtcbiAgY29uc3QgY2FjaGVkID0gcHJlZml4Q2FjaGVbcmF3TmFtZV07XG4gIGlmIChjYWNoZWQpIHtcbiAgICByZXR1cm4gY2FjaGVkO1xuICB9XG4gIGxldCBuYW1lID0gY2FtZWxpemUocmF3TmFtZSk7XG4gIGlmIChuYW1lICE9PSBcImZpbHRlclwiICYmIG5hbWUgaW4gc3R5bGUpIHtcbiAgICByZXR1cm4gcHJlZml4Q2FjaGVbcmF3TmFtZV0gPSBuYW1lO1xuICB9XG4gIG5hbWUgPSBjYXBpdGFsaXplKG5hbWUpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHByZWZpeGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgcHJlZml4ZWQgPSBwcmVmaXhlc1tpXSArIG5hbWU7XG4gICAgaWYgKHByZWZpeGVkIGluIHN0eWxlKSB7XG4gICAgICByZXR1cm4gcHJlZml4Q2FjaGVbcmF3TmFtZV0gPSBwcmVmaXhlZDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJhd05hbWU7XG59XG5cbmNvbnN0IHhsaW5rTlMgPSBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIjtcbmZ1bmN0aW9uIHBhdGNoQXR0cihlbCwga2V5LCB2YWx1ZSwgaXNTVkcsIGluc3RhbmNlKSB7XG4gIGlmIChpc1NWRyAmJiBrZXkuc3RhcnRzV2l0aChcInhsaW5rOlwiKSkge1xuICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGVOUyh4bGlua05TLCBrZXkuc2xpY2UoNiwga2V5Lmxlbmd0aCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGVOUyh4bGlua05TLCBrZXksIHZhbHVlKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgaXNCb29sZWFuID0gaXNTcGVjaWFsQm9vbGVhbkF0dHIoa2V5KTtcbiAgICBpZiAodmFsdWUgPT0gbnVsbCB8fCBpc0Jvb2xlYW4gJiYgIWluY2x1ZGVCb29sZWFuQXR0cih2YWx1ZSkpIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoa2V5LCBpc0Jvb2xlYW4gPyBcIlwiIDogdmFsdWUpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBwYXRjaERPTVByb3AoZWwsIGtleSwgdmFsdWUsIHByZXZDaGlsZHJlbiwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgdW5tb3VudENoaWxkcmVuKSB7XG4gIGlmIChrZXkgPT09IFwiaW5uZXJIVE1MXCIgfHwga2V5ID09PSBcInRleHRDb250ZW50XCIpIHtcbiAgICBpZiAocHJldkNoaWxkcmVuKSB7XG4gICAgICB1bm1vdW50Q2hpbGRyZW4ocHJldkNoaWxkcmVuLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlKTtcbiAgICB9XG4gICAgZWxba2V5XSA9IHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWU7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHRhZyA9IGVsLnRhZ05hbWU7XG4gIGlmIChrZXkgPT09IFwidmFsdWVcIiAmJiB0YWcgIT09IFwiUFJPR1JFU1NcIiAmJiAvLyBjdXN0b20gZWxlbWVudHMgbWF5IHVzZSBfdmFsdWUgaW50ZXJuYWxseVxuICAhdGFnLmluY2x1ZGVzKFwiLVwiKSkge1xuICAgIGVsLl92YWx1ZSA9IHZhbHVlO1xuICAgIGNvbnN0IG9sZFZhbHVlID0gdGFnID09PSBcIk9QVElPTlwiID8gZWwuZ2V0QXR0cmlidXRlKFwidmFsdWVcIikgOiBlbC52YWx1ZTtcbiAgICBjb25zdCBuZXdWYWx1ZSA9IHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWU7XG4gICAgaWYgKG9sZFZhbHVlICE9PSBuZXdWYWx1ZSkge1xuICAgICAgZWwudmFsdWUgPSBuZXdWYWx1ZTtcbiAgICB9XG4gICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cbiAgbGV0IG5lZWRSZW1vdmUgPSBmYWxzZTtcbiAgaWYgKHZhbHVlID09PSBcIlwiIHx8IHZhbHVlID09IG51bGwpIHtcbiAgICBjb25zdCB0eXBlID0gdHlwZW9mIGVsW2tleV07XG4gICAgaWYgKHR5cGUgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICB2YWx1ZSA9IGluY2x1ZGVCb29sZWFuQXR0cih2YWx1ZSk7XG4gICAgfSBlbHNlIGlmICh2YWx1ZSA9PSBudWxsICYmIHR5cGUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHZhbHVlID0gXCJcIjtcbiAgICAgIG5lZWRSZW1vdmUgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgdmFsdWUgPSAwO1xuICAgICAgbmVlZFJlbW92ZSA9IHRydWU7XG4gICAgfVxuICB9XG4gIHRyeSB7XG4gICAgZWxba2V5XSA9IHZhbHVlO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiAhbmVlZFJlbW92ZSkge1xuICAgICAgd2FybihcbiAgICAgICAgYEZhaWxlZCBzZXR0aW5nIHByb3AgXCIke2tleX1cIiBvbiA8JHt0YWcudG9Mb3dlckNhc2UoKX0+OiB2YWx1ZSAke3ZhbHVlfSBpcyBpbnZhbGlkLmAsXG4gICAgICAgIGVcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIG5lZWRSZW1vdmUgJiYgZWwucmVtb3ZlQXR0cmlidXRlKGtleSk7XG59XG5cbmZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXIoZWwsIGV2ZW50LCBoYW5kbGVyLCBvcHRpb25zKSB7XG4gIGVsLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpO1xufVxuZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcihlbCwgZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpIHtcbiAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlciwgb3B0aW9ucyk7XG59XG5mdW5jdGlvbiBwYXRjaEV2ZW50KGVsLCByYXdOYW1lLCBwcmV2VmFsdWUsIG5leHRWYWx1ZSwgaW5zdGFuY2UgPSBudWxsKSB7XG4gIGNvbnN0IGludm9rZXJzID0gZWwuX3ZlaSB8fCAoZWwuX3ZlaSA9IHt9KTtcbiAgY29uc3QgZXhpc3RpbmdJbnZva2VyID0gaW52b2tlcnNbcmF3TmFtZV07XG4gIGlmIChuZXh0VmFsdWUgJiYgZXhpc3RpbmdJbnZva2VyKSB7XG4gICAgZXhpc3RpbmdJbnZva2VyLnZhbHVlID0gbmV4dFZhbHVlO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IFtuYW1lLCBvcHRpb25zXSA9IHBhcnNlTmFtZShyYXdOYW1lKTtcbiAgICBpZiAobmV4dFZhbHVlKSB7XG4gICAgICBjb25zdCBpbnZva2VyID0gaW52b2tlcnNbcmF3TmFtZV0gPSBjcmVhdGVJbnZva2VyKG5leHRWYWx1ZSwgaW5zdGFuY2UpO1xuICAgICAgYWRkRXZlbnRMaXN0ZW5lcihlbCwgbmFtZSwgaW52b2tlciwgb3B0aW9ucyk7XG4gICAgfSBlbHNlIGlmIChleGlzdGluZ0ludm9rZXIpIHtcbiAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXIoZWwsIG5hbWUsIGV4aXN0aW5nSW52b2tlciwgb3B0aW9ucyk7XG4gICAgICBpbnZva2Vyc1tyYXdOYW1lXSA9IHZvaWQgMDtcbiAgICB9XG4gIH1cbn1cbmNvbnN0IG9wdGlvbnNNb2RpZmllclJFID0gLyg/Ok9uY2V8UGFzc2l2ZXxDYXB0dXJlKSQvO1xuZnVuY3Rpb24gcGFyc2VOYW1lKG5hbWUpIHtcbiAgbGV0IG9wdGlvbnM7XG4gIGlmIChvcHRpb25zTW9kaWZpZXJSRS50ZXN0KG5hbWUpKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICAgIGxldCBtO1xuICAgIHdoaWxlIChtID0gbmFtZS5tYXRjaChvcHRpb25zTW9kaWZpZXJSRSkpIHtcbiAgICAgIG5hbWUgPSBuYW1lLnNsaWNlKDAsIG5hbWUubGVuZ3RoIC0gbVswXS5sZW5ndGgpO1xuICAgICAgb3B0aW9uc1ttWzBdLnRvTG93ZXJDYXNlKCldID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgY29uc3QgZXZlbnQgPSBuYW1lWzJdID09PSBcIjpcIiA/IG5hbWUuc2xpY2UoMykgOiBoeXBoZW5hdGUobmFtZS5zbGljZSgyKSk7XG4gIHJldHVybiBbZXZlbnQsIG9wdGlvbnNdO1xufVxubGV0IGNhY2hlZE5vdyA9IDA7XG5jb25zdCBwID0gLyogQF9fUFVSRV9fICovIFByb21pc2UucmVzb2x2ZSgpO1xuY29uc3QgZ2V0Tm93ID0gKCkgPT4gY2FjaGVkTm93IHx8IChwLnRoZW4oKCkgPT4gY2FjaGVkTm93ID0gMCksIGNhY2hlZE5vdyA9IERhdGUubm93KCkpO1xuZnVuY3Rpb24gY3JlYXRlSW52b2tlcihpbml0aWFsVmFsdWUsIGluc3RhbmNlKSB7XG4gIGNvbnN0IGludm9rZXIgPSAoZSkgPT4ge1xuICAgIGlmICghZS5fdnRzKSB7XG4gICAgICBlLl92dHMgPSBEYXRlLm5vdygpO1xuICAgIH0gZWxzZSBpZiAoZS5fdnRzIDw9IGludm9rZXIuYXR0YWNoZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcoXG4gICAgICBwYXRjaFN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbihlLCBpbnZva2VyLnZhbHVlKSxcbiAgICAgIGluc3RhbmNlLFxuICAgICAgNSxcbiAgICAgIFtlXVxuICAgICk7XG4gIH07XG4gIGludm9rZXIudmFsdWUgPSBpbml0aWFsVmFsdWU7XG4gIGludm9rZXIuYXR0YWNoZWQgPSBnZXROb3coKTtcbiAgcmV0dXJuIGludm9rZXI7XG59XG5mdW5jdGlvbiBwYXRjaFN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbihlLCB2YWx1ZSkge1xuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBjb25zdCBvcmlnaW5hbFN0b3AgPSBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjtcbiAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiA9ICgpID0+IHtcbiAgICAgIG9yaWdpbmFsU3RvcC5jYWxsKGUpO1xuICAgICAgZS5fc3RvcHBlZCA9IHRydWU7XG4gICAgfTtcbiAgICByZXR1cm4gdmFsdWUubWFwKChmbikgPT4gKGUyKSA9PiAhZTIuX3N0b3BwZWQgJiYgZm4gJiYgZm4oZTIpKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbn1cblxuY29uc3QgbmF0aXZlT25SRSA9IC9eb25bYS16XS87XG5jb25zdCBwYXRjaFByb3AgPSAoZWwsIGtleSwgcHJldlZhbHVlLCBuZXh0VmFsdWUsIGlzU1ZHID0gZmFsc2UsIHByZXZDaGlsZHJlbiwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgdW5tb3VudENoaWxkcmVuKSA9PiB7XG4gIGlmIChrZXkgPT09IFwiY2xhc3NcIikge1xuICAgIHBhdGNoQ2xhc3MoZWwsIG5leHRWYWx1ZSwgaXNTVkcpO1xuICB9IGVsc2UgaWYgKGtleSA9PT0gXCJzdHlsZVwiKSB7XG4gICAgcGF0Y2hTdHlsZShlbCwgcHJldlZhbHVlLCBuZXh0VmFsdWUpO1xuICB9IGVsc2UgaWYgKGlzT24oa2V5KSkge1xuICAgIGlmICghaXNNb2RlbExpc3RlbmVyKGtleSkpIHtcbiAgICAgIHBhdGNoRXZlbnQoZWwsIGtleSwgcHJldlZhbHVlLCBuZXh0VmFsdWUsIHBhcmVudENvbXBvbmVudCk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGtleVswXSA9PT0gXCIuXCIgPyAoa2V5ID0ga2V5LnNsaWNlKDEpLCB0cnVlKSA6IGtleVswXSA9PT0gXCJeXCIgPyAoa2V5ID0ga2V5LnNsaWNlKDEpLCBmYWxzZSkgOiBzaG91bGRTZXRBc1Byb3AoZWwsIGtleSwgbmV4dFZhbHVlLCBpc1NWRykpIHtcbiAgICBwYXRjaERPTVByb3AoXG4gICAgICBlbCxcbiAgICAgIGtleSxcbiAgICAgIG5leHRWYWx1ZSxcbiAgICAgIHByZXZDaGlsZHJlbixcbiAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgdW5tb3VudENoaWxkcmVuXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoa2V5ID09PSBcInRydWUtdmFsdWVcIikge1xuICAgICAgZWwuX3RydWVWYWx1ZSA9IG5leHRWYWx1ZTtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gXCJmYWxzZS12YWx1ZVwiKSB7XG4gICAgICBlbC5fZmFsc2VWYWx1ZSA9IG5leHRWYWx1ZTtcbiAgICB9XG4gICAgcGF0Y2hBdHRyKGVsLCBrZXksIG5leHRWYWx1ZSwgaXNTVkcpO1xuICB9XG59O1xuZnVuY3Rpb24gc2hvdWxkU2V0QXNQcm9wKGVsLCBrZXksIHZhbHVlLCBpc1NWRykge1xuICBpZiAoaXNTVkcpIHtcbiAgICBpZiAoa2V5ID09PSBcImlubmVySFRNTFwiIHx8IGtleSA9PT0gXCJ0ZXh0Q29udGVudFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGtleSBpbiBlbCAmJiBuYXRpdmVPblJFLnRlc3Qoa2V5KSAmJiBpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoa2V5ID09PSBcInNwZWxsY2hlY2tcIiB8fCBrZXkgPT09IFwiZHJhZ2dhYmxlXCIgfHwga2V5ID09PSBcInRyYW5zbGF0ZVwiKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChrZXkgPT09IFwiZm9ybVwiKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChrZXkgPT09IFwibGlzdFwiICYmIGVsLnRhZ05hbWUgPT09IFwiSU5QVVRcIikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoa2V5ID09PSBcInR5cGVcIiAmJiBlbC50YWdOYW1lID09PSBcIlRFWFRBUkVBXCIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKG5hdGl2ZU9uUkUudGVzdChrZXkpICYmIGlzU3RyaW5nKHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4ga2V5IGluIGVsO1xufVxuXG5mdW5jdGlvbiBkZWZpbmVDdXN0b21FbGVtZW50KG9wdGlvbnMsIGh5ZHJhdGUyKSB7XG4gIGNvbnN0IENvbXAgPSBkZWZpbmVDb21wb25lbnQob3B0aW9ucyk7XG4gIGNsYXNzIFZ1ZUN1c3RvbUVsZW1lbnQgZXh0ZW5kcyBWdWVFbGVtZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihpbml0aWFsUHJvcHMpIHtcbiAgICAgIHN1cGVyKENvbXAsIGluaXRpYWxQcm9wcywgaHlkcmF0ZTIpO1xuICAgIH1cbiAgfVxuICBWdWVDdXN0b21FbGVtZW50LmRlZiA9IENvbXA7XG4gIHJldHVybiBWdWVDdXN0b21FbGVtZW50O1xufVxuY29uc3QgZGVmaW5lU1NSQ3VzdG9tRWxlbWVudCA9IChvcHRpb25zKSA9PiB7XG4gIHJldHVybiBkZWZpbmVDdXN0b21FbGVtZW50KG9wdGlvbnMsIGh5ZHJhdGUpO1xufTtcbmNvbnN0IEJhc2VDbGFzcyA9IHR5cGVvZiBIVE1MRWxlbWVudCAhPT0gXCJ1bmRlZmluZWRcIiA/IEhUTUxFbGVtZW50IDogY2xhc3Mge1xufTtcbmNsYXNzIFZ1ZUVsZW1lbnQgZXh0ZW5kcyBCYXNlQ2xhc3Mge1xuICBjb25zdHJ1Y3RvcihfZGVmLCBfcHJvcHMgPSB7fSwgaHlkcmF0ZTIpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX2RlZiA9IF9kZWY7XG4gICAgdGhpcy5fcHJvcHMgPSBfcHJvcHM7XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgdGhpcy5faW5zdGFuY2UgPSBudWxsO1xuICAgIHRoaXMuX2Nvbm5lY3RlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3Jlc29sdmVkID0gZmFsc2U7XG4gICAgdGhpcy5fbnVtYmVyUHJvcHMgPSBudWxsO1xuICAgIGlmICh0aGlzLnNoYWRvd1Jvb3QgJiYgaHlkcmF0ZTIpIHtcbiAgICAgIGh5ZHJhdGUyKHRoaXMuX2NyZWF0ZVZOb2RlKCksIHRoaXMuc2hhZG93Um9vdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgdGhpcy5zaGFkb3dSb290KSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgYEN1c3RvbSBlbGVtZW50IGhhcyBwcmUtcmVuZGVyZWQgZGVjbGFyYXRpdmUgc2hhZG93IHJvb3QgYnV0IGlzIG5vdCBkZWZpbmVkIGFzIGh5ZHJhdGFibGUuIFVzZSBcXGBkZWZpbmVTU1JDdXN0b21FbGVtZW50XFxgLmBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuYXR0YWNoU2hhZG93KHsgbW9kZTogXCJvcGVuXCIgfSk7XG4gICAgICBpZiAoIXRoaXMuX2RlZi5fX2FzeW5jTG9hZGVyKSB7XG4gICAgICAgIHRoaXMuX3Jlc29sdmVQcm9wcyh0aGlzLl9kZWYpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICB0aGlzLl9jb25uZWN0ZWQgPSB0cnVlO1xuICAgIGlmICghdGhpcy5faW5zdGFuY2UpIHtcbiAgICAgIGlmICh0aGlzLl9yZXNvbHZlZCkge1xuICAgICAgICB0aGlzLl91cGRhdGUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3Jlc29sdmVEZWYoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgdGhpcy5fY29ubmVjdGVkID0gZmFsc2U7XG4gICAgbmV4dFRpY2soKCkgPT4ge1xuICAgICAgaWYgKCF0aGlzLl9jb25uZWN0ZWQpIHtcbiAgICAgICAgcmVuZGVyKG51bGwsIHRoaXMuc2hhZG93Um9vdCk7XG4gICAgICAgIHRoaXMuX2luc3RhbmNlID0gbnVsbDtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogcmVzb2x2ZSBpbm5lciBjb21wb25lbnQgZGVmaW5pdGlvbiAoaGFuZGxlIHBvc3NpYmxlIGFzeW5jIGNvbXBvbmVudClcbiAgICovXG4gIF9yZXNvbHZlRGVmKCkge1xuICAgIHRoaXMuX3Jlc29sdmVkID0gdHJ1ZTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuYXR0cmlidXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5fc2V0QXR0cih0aGlzLmF0dHJpYnV0ZXNbaV0ubmFtZSk7XG4gICAgfVxuICAgIG5ldyBNdXRhdGlvbk9ic2VydmVyKChtdXRhdGlvbnMpID0+IHtcbiAgICAgIGZvciAoY29uc3QgbSBvZiBtdXRhdGlvbnMpIHtcbiAgICAgICAgdGhpcy5fc2V0QXR0cihtLmF0dHJpYnV0ZU5hbWUpO1xuICAgICAgfVxuICAgIH0pLm9ic2VydmUodGhpcywgeyBhdHRyaWJ1dGVzOiB0cnVlIH0pO1xuICAgIGNvbnN0IHJlc29sdmUgPSAoZGVmLCBpc0FzeW5jID0gZmFsc2UpID0+IHtcbiAgICAgIGNvbnN0IHsgcHJvcHMsIHN0eWxlcyB9ID0gZGVmO1xuICAgICAgbGV0IG51bWJlclByb3BzO1xuICAgICAgaWYgKHByb3BzICYmICFpc0FycmF5KHByb3BzKSkge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBwcm9wcykge1xuICAgICAgICAgIGNvbnN0IG9wdCA9IHByb3BzW2tleV07XG4gICAgICAgICAgaWYgKG9wdCA9PT0gTnVtYmVyIHx8IG9wdCAmJiBvcHQudHlwZSA9PT0gTnVtYmVyKSB7XG4gICAgICAgICAgICBpZiAoa2V5IGluIHRoaXMuX3Byb3BzKSB7XG4gICAgICAgICAgICAgIHRoaXMuX3Byb3BzW2tleV0gPSB0b051bWJlcih0aGlzLl9wcm9wc1trZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIChudW1iZXJQcm9wcyB8fCAobnVtYmVyUHJvcHMgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKSkpW2NhbWVsaXplJDEoa2V5KV0gPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5fbnVtYmVyUHJvcHMgPSBudW1iZXJQcm9wcztcbiAgICAgIGlmIChpc0FzeW5jKSB7XG4gICAgICAgIHRoaXMuX3Jlc29sdmVQcm9wcyhkZWYpO1xuICAgICAgfVxuICAgICAgdGhpcy5fYXBwbHlTdHlsZXMoc3R5bGVzKTtcbiAgICAgIHRoaXMuX3VwZGF0ZSgpO1xuICAgIH07XG4gICAgY29uc3QgYXN5bmNEZWYgPSB0aGlzLl9kZWYuX19hc3luY0xvYWRlcjtcbiAgICBpZiAoYXN5bmNEZWYpIHtcbiAgICAgIGFzeW5jRGVmKCkudGhlbigoZGVmKSA9PiByZXNvbHZlKGRlZiwgdHJ1ZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXNvbHZlKHRoaXMuX2RlZik7XG4gICAgfVxuICB9XG4gIF9yZXNvbHZlUHJvcHMoZGVmKSB7XG4gICAgY29uc3QgeyBwcm9wcyB9ID0gZGVmO1xuICAgIGNvbnN0IGRlY2xhcmVkUHJvcEtleXMgPSBpc0FycmF5KHByb3BzKSA/IHByb3BzIDogT2JqZWN0LmtleXMocHJvcHMgfHwge30pO1xuICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHRoaXMpKSB7XG4gICAgICBpZiAoa2V5WzBdICE9PSBcIl9cIiAmJiBkZWNsYXJlZFByb3BLZXlzLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgdGhpcy5fc2V0UHJvcChrZXksIHRoaXNba2V5XSwgdHJ1ZSwgZmFsc2UpO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IGtleSBvZiBkZWNsYXJlZFByb3BLZXlzLm1hcChjYW1lbGl6ZSQxKSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIGtleSwge1xuICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX2dldFByb3Aoa2V5KTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0KHZhbCkge1xuICAgICAgICAgIHRoaXMuX3NldFByb3Aoa2V5LCB2YWwpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgX3NldEF0dHIoa2V5KSB7XG4gICAgbGV0IHZhbHVlID0gdGhpcy5nZXRBdHRyaWJ1dGUoa2V5KTtcbiAgICBjb25zdCBjYW1lbEtleSA9IGNhbWVsaXplJDEoa2V5KTtcbiAgICBpZiAodGhpcy5fbnVtYmVyUHJvcHMgJiYgdGhpcy5fbnVtYmVyUHJvcHNbY2FtZWxLZXldKSB7XG4gICAgICB2YWx1ZSA9IHRvTnVtYmVyKHZhbHVlKTtcbiAgICB9XG4gICAgdGhpcy5fc2V0UHJvcChjYW1lbEtleSwgdmFsdWUsIGZhbHNlKTtcbiAgfVxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBfZ2V0UHJvcChrZXkpIHtcbiAgICByZXR1cm4gdGhpcy5fcHJvcHNba2V5XTtcbiAgfVxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBfc2V0UHJvcChrZXksIHZhbCwgc2hvdWxkUmVmbGVjdCA9IHRydWUsIHNob3VsZFVwZGF0ZSA9IHRydWUpIHtcbiAgICBpZiAodmFsICE9PSB0aGlzLl9wcm9wc1trZXldKSB7XG4gICAgICB0aGlzLl9wcm9wc1trZXldID0gdmFsO1xuICAgICAgaWYgKHNob3VsZFVwZGF0ZSAmJiB0aGlzLl9pbnN0YW5jZSkge1xuICAgICAgICB0aGlzLl91cGRhdGUoKTtcbiAgICAgIH1cbiAgICAgIGlmIChzaG91bGRSZWZsZWN0KSB7XG4gICAgICAgIGlmICh2YWwgPT09IHRydWUpIHtcbiAgICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZShoeXBoZW5hdGUoa2V5KSwgXCJcIik7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gXCJzdHJpbmdcIiB8fCB0eXBlb2YgdmFsID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoaHlwaGVuYXRlKGtleSksIHZhbCArIFwiXCIpO1xuICAgICAgICB9IGVsc2UgaWYgKCF2YWwpIHtcbiAgICAgICAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZShoeXBoZW5hdGUoa2V5KSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgX3VwZGF0ZSgpIHtcbiAgICByZW5kZXIodGhpcy5fY3JlYXRlVk5vZGUoKSwgdGhpcy5zaGFkb3dSb290KTtcbiAgfVxuICBfY3JlYXRlVk5vZGUoKSB7XG4gICAgY29uc3Qgdm5vZGUgPSBjcmVhdGVWTm9kZSh0aGlzLl9kZWYsIGV4dGVuZCh7fSwgdGhpcy5fcHJvcHMpKTtcbiAgICBpZiAoIXRoaXMuX2luc3RhbmNlKSB7XG4gICAgICB2bm9kZS5jZSA9IChpbnN0YW5jZSkgPT4ge1xuICAgICAgICB0aGlzLl9pbnN0YW5jZSA9IGluc3RhbmNlO1xuICAgICAgICBpbnN0YW5jZS5pc0NFID0gdHJ1ZTtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgIGluc3RhbmNlLmNlUmVsb2FkID0gKG5ld1N0eWxlcykgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuX3N0eWxlcykge1xuICAgICAgICAgICAgICB0aGlzLl9zdHlsZXMuZm9yRWFjaCgocykgPT4gdGhpcy5zaGFkb3dSb290LnJlbW92ZUNoaWxkKHMpKTtcbiAgICAgICAgICAgICAgdGhpcy5fc3R5bGVzLmxlbmd0aCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9hcHBseVN0eWxlcyhuZXdTdHlsZXMpO1xuICAgICAgICAgICAgdGhpcy5faW5zdGFuY2UgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlKCk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkaXNwYXRjaCA9IChldmVudCwgYXJncykgPT4ge1xuICAgICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChcbiAgICAgICAgICAgIG5ldyBDdXN0b21FdmVudChldmVudCwge1xuICAgICAgICAgICAgICBkZXRhaWw6IGFyZ3NcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgKTtcbiAgICAgICAgfTtcbiAgICAgICAgaW5zdGFuY2UuZW1pdCA9IChldmVudCwgLi4uYXJncykgPT4ge1xuICAgICAgICAgIGRpc3BhdGNoKGV2ZW50LCBhcmdzKTtcbiAgICAgICAgICBpZiAoaHlwaGVuYXRlKGV2ZW50KSAhPT0gZXZlbnQpIHtcbiAgICAgICAgICAgIGRpc3BhdGNoKGh5cGhlbmF0ZShldmVudCksIGFyZ3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgbGV0IHBhcmVudCA9IHRoaXM7XG4gICAgICAgIHdoaWxlIChwYXJlbnQgPSBwYXJlbnQgJiYgKHBhcmVudC5wYXJlbnROb2RlIHx8IHBhcmVudC5ob3N0KSkge1xuICAgICAgICAgIGlmIChwYXJlbnQgaW5zdGFuY2VvZiBWdWVFbGVtZW50KSB7XG4gICAgICAgICAgICBpbnN0YW5jZS5wYXJlbnQgPSBwYXJlbnQuX2luc3RhbmNlO1xuICAgICAgICAgICAgaW5zdGFuY2UucHJvdmlkZXMgPSBwYXJlbnQuX2luc3RhbmNlLnByb3ZpZGVzO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gdm5vZGU7XG4gIH1cbiAgX2FwcGx5U3R5bGVzKHN0eWxlcykge1xuICAgIGlmIChzdHlsZXMpIHtcbiAgICAgIHN0eWxlcy5mb3JFYWNoKChjc3MpID0+IHtcbiAgICAgICAgY29uc3QgcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgICAgICAgcy50ZXh0Q29udGVudCA9IGNzcztcbiAgICAgICAgdGhpcy5zaGFkb3dSb290LmFwcGVuZENoaWxkKHMpO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgKHRoaXMuX3N0eWxlcyB8fCAodGhpcy5fc3R5bGVzID0gW10pKS5wdXNoKHMpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdXNlQ3NzTW9kdWxlKG5hbWUgPSBcIiRzdHlsZVwiKSB7XG4gIHtcbiAgICBjb25zdCBpbnN0YW5jZSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpO1xuICAgIGlmICghaW5zdGFuY2UpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiB3YXJuKGB1c2VDc3NNb2R1bGUgbXVzdCBiZSBjYWxsZWQgaW5zaWRlIHNldHVwKClgKTtcbiAgICAgIHJldHVybiBFTVBUWV9PQko7XG4gICAgfVxuICAgIGNvbnN0IG1vZHVsZXMgPSBpbnN0YW5jZS50eXBlLl9fY3NzTW9kdWxlcztcbiAgICBpZiAoIW1vZHVsZXMpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiB3YXJuKGBDdXJyZW50IGluc3RhbmNlIGRvZXMgbm90IGhhdmUgQ1NTIG1vZHVsZXMgaW5qZWN0ZWQuYCk7XG4gICAgICByZXR1cm4gRU1QVFlfT0JKO1xuICAgIH1cbiAgICBjb25zdCBtb2QgPSBtb2R1bGVzW25hbWVdO1xuICAgIGlmICghbW9kKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgd2FybihgQ3VycmVudCBpbnN0YW5jZSBkb2VzIG5vdCBoYXZlIENTUyBtb2R1bGUgbmFtZWQgXCIke25hbWV9XCIuYCk7XG4gICAgICByZXR1cm4gRU1QVFlfT0JKO1xuICAgIH1cbiAgICByZXR1cm4gbW9kO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVzZUNzc1ZhcnMoZ2V0dGVyKSB7XG4gIGNvbnN0IGluc3RhbmNlID0gZ2V0Q3VycmVudEluc3RhbmNlKCk7XG4gIGlmICghaW5zdGFuY2UpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgd2FybihgdXNlQ3NzVmFycyBpcyBjYWxsZWQgd2l0aG91dCBjdXJyZW50IGFjdGl2ZSBjb21wb25lbnQgaW5zdGFuY2UuYCk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHVwZGF0ZVRlbGVwb3J0cyA9IGluc3RhbmNlLnV0ID0gKHZhcnMgPSBnZXR0ZXIoaW5zdGFuY2UucHJveHkpKSA9PiB7XG4gICAgQXJyYXkuZnJvbShcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoYFtkYXRhLXYtb3duZXI9XCIke2luc3RhbmNlLnVpZH1cIl1gKVxuICAgICkuZm9yRWFjaCgobm9kZSkgPT4gc2V0VmFyc09uTm9kZShub2RlLCB2YXJzKSk7XG4gIH07XG4gIGNvbnN0IHNldFZhcnMgPSAoKSA9PiB7XG4gICAgY29uc3QgdmFycyA9IGdldHRlcihpbnN0YW5jZS5wcm94eSk7XG4gICAgc2V0VmFyc09uVk5vZGUoaW5zdGFuY2Uuc3ViVHJlZSwgdmFycyk7XG4gICAgdXBkYXRlVGVsZXBvcnRzKHZhcnMpO1xuICB9O1xuICB3YXRjaFBvc3RFZmZlY3Qoc2V0VmFycyk7XG4gIG9uTW91bnRlZCgoKSA9PiB7XG4gICAgY29uc3Qgb2IgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihzZXRWYXJzKTtcbiAgICBvYi5vYnNlcnZlKGluc3RhbmNlLnN1YlRyZWUuZWwucGFyZW50Tm9kZSwgeyBjaGlsZExpc3Q6IHRydWUgfSk7XG4gICAgb25Vbm1vdW50ZWQoKCkgPT4gb2IuZGlzY29ubmVjdCgpKTtcbiAgfSk7XG59XG5mdW5jdGlvbiBzZXRWYXJzT25WTm9kZSh2bm9kZSwgdmFycykge1xuICBpZiAodm5vZGUuc2hhcGVGbGFnICYgMTI4KSB7XG4gICAgY29uc3Qgc3VzcGVuc2UgPSB2bm9kZS5zdXNwZW5zZTtcbiAgICB2bm9kZSA9IHN1c3BlbnNlLmFjdGl2ZUJyYW5jaDtcbiAgICBpZiAoc3VzcGVuc2UucGVuZGluZ0JyYW5jaCAmJiAhc3VzcGVuc2UuaXNIeWRyYXRpbmcpIHtcbiAgICAgIHN1c3BlbnNlLmVmZmVjdHMucHVzaCgoKSA9PiB7XG4gICAgICAgIHNldFZhcnNPblZOb2RlKHN1c3BlbnNlLmFjdGl2ZUJyYW5jaCwgdmFycyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgd2hpbGUgKHZub2RlLmNvbXBvbmVudCkge1xuICAgIHZub2RlID0gdm5vZGUuY29tcG9uZW50LnN1YlRyZWU7XG4gIH1cbiAgaWYgKHZub2RlLnNoYXBlRmxhZyAmIDEgJiYgdm5vZGUuZWwpIHtcbiAgICBzZXRWYXJzT25Ob2RlKHZub2RlLmVsLCB2YXJzKTtcbiAgfSBlbHNlIGlmICh2bm9kZS50eXBlID09PSBGcmFnbWVudCkge1xuICAgIHZub2RlLmNoaWxkcmVuLmZvckVhY2goKGMpID0+IHNldFZhcnNPblZOb2RlKGMsIHZhcnMpKTtcbiAgfSBlbHNlIGlmICh2bm9kZS50eXBlID09PSBTdGF0aWMpIHtcbiAgICBsZXQgeyBlbCwgYW5jaG9yIH0gPSB2bm9kZTtcbiAgICB3aGlsZSAoZWwpIHtcbiAgICAgIHNldFZhcnNPbk5vZGUoZWwsIHZhcnMpO1xuICAgICAgaWYgKGVsID09PSBhbmNob3IpXG4gICAgICAgIGJyZWFrO1xuICAgICAgZWwgPSBlbC5uZXh0U2libGluZztcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIHNldFZhcnNPbk5vZGUoZWwsIHZhcnMpIHtcbiAgaWYgKGVsLm5vZGVUeXBlID09PSAxKSB7XG4gICAgY29uc3Qgc3R5bGUgPSBlbC5zdHlsZTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiB2YXJzKSB7XG4gICAgICBzdHlsZS5zZXRQcm9wZXJ0eShgLS0ke2tleX1gLCB2YXJzW2tleV0pO1xuICAgIH1cbiAgfVxufVxuXG5jb25zdCBUUkFOU0lUSU9OID0gXCJ0cmFuc2l0aW9uXCI7XG5jb25zdCBBTklNQVRJT04gPSBcImFuaW1hdGlvblwiO1xuY29uc3QgVHJhbnNpdGlvbiA9IChwcm9wcywgeyBzbG90cyB9KSA9PiBoKEJhc2VUcmFuc2l0aW9uLCByZXNvbHZlVHJhbnNpdGlvblByb3BzKHByb3BzKSwgc2xvdHMpO1xuVHJhbnNpdGlvbi5kaXNwbGF5TmFtZSA9IFwiVHJhbnNpdGlvblwiO1xuY29uc3QgRE9NVHJhbnNpdGlvblByb3BzVmFsaWRhdG9ycyA9IHtcbiAgbmFtZTogU3RyaW5nLFxuICB0eXBlOiBTdHJpbmcsXG4gIGNzczoge1xuICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgZGVmYXVsdDogdHJ1ZVxuICB9LFxuICBkdXJhdGlvbjogW1N0cmluZywgTnVtYmVyLCBPYmplY3RdLFxuICBlbnRlckZyb21DbGFzczogU3RyaW5nLFxuICBlbnRlckFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gIGVudGVyVG9DbGFzczogU3RyaW5nLFxuICBhcHBlYXJGcm9tQ2xhc3M6IFN0cmluZyxcbiAgYXBwZWFyQWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgYXBwZWFyVG9DbGFzczogU3RyaW5nLFxuICBsZWF2ZUZyb21DbGFzczogU3RyaW5nLFxuICBsZWF2ZUFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gIGxlYXZlVG9DbGFzczogU3RyaW5nXG59O1xuY29uc3QgVHJhbnNpdGlvblByb3BzVmFsaWRhdG9ycyA9IFRyYW5zaXRpb24ucHJvcHMgPSAvKiBAX19QVVJFX18gKi8gZXh0ZW5kKFxuICB7fSxcbiAgQmFzZVRyYW5zaXRpb25Qcm9wc1ZhbGlkYXRvcnMsXG4gIERPTVRyYW5zaXRpb25Qcm9wc1ZhbGlkYXRvcnNcbik7XG5jb25zdCBjYWxsSG9vayA9IChob29rLCBhcmdzID0gW10pID0+IHtcbiAgaWYgKGlzQXJyYXkoaG9vaykpIHtcbiAgICBob29rLmZvckVhY2goKGgyKSA9PiBoMiguLi5hcmdzKSk7XG4gIH0gZWxzZSBpZiAoaG9vaykge1xuICAgIGhvb2soLi4uYXJncyk7XG4gIH1cbn07XG5jb25zdCBoYXNFeHBsaWNpdENhbGxiYWNrID0gKGhvb2spID0+IHtcbiAgcmV0dXJuIGhvb2sgPyBpc0FycmF5KGhvb2spID8gaG9vay5zb21lKChoMikgPT4gaDIubGVuZ3RoID4gMSkgOiBob29rLmxlbmd0aCA+IDEgOiBmYWxzZTtcbn07XG5mdW5jdGlvbiByZXNvbHZlVHJhbnNpdGlvblByb3BzKHJhd1Byb3BzKSB7XG4gIGNvbnN0IGJhc2VQcm9wcyA9IHt9O1xuICBmb3IgKGNvbnN0IGtleSBpbiByYXdQcm9wcykge1xuICAgIGlmICghKGtleSBpbiBET01UcmFuc2l0aW9uUHJvcHNWYWxpZGF0b3JzKSkge1xuICAgICAgYmFzZVByb3BzW2tleV0gPSByYXdQcm9wc1trZXldO1xuICAgIH1cbiAgfVxuICBpZiAocmF3UHJvcHMuY3NzID09PSBmYWxzZSkge1xuICAgIHJldHVybiBiYXNlUHJvcHM7XG4gIH1cbiAgY29uc3Qge1xuICAgIG5hbWUgPSBcInZcIixcbiAgICB0eXBlLFxuICAgIGR1cmF0aW9uLFxuICAgIGVudGVyRnJvbUNsYXNzID0gYCR7bmFtZX0tZW50ZXItZnJvbWAsXG4gICAgZW50ZXJBY3RpdmVDbGFzcyA9IGAke25hbWV9LWVudGVyLWFjdGl2ZWAsXG4gICAgZW50ZXJUb0NsYXNzID0gYCR7bmFtZX0tZW50ZXItdG9gLFxuICAgIGFwcGVhckZyb21DbGFzcyA9IGVudGVyRnJvbUNsYXNzLFxuICAgIGFwcGVhckFjdGl2ZUNsYXNzID0gZW50ZXJBY3RpdmVDbGFzcyxcbiAgICBhcHBlYXJUb0NsYXNzID0gZW50ZXJUb0NsYXNzLFxuICAgIGxlYXZlRnJvbUNsYXNzID0gYCR7bmFtZX0tbGVhdmUtZnJvbWAsXG4gICAgbGVhdmVBY3RpdmVDbGFzcyA9IGAke25hbWV9LWxlYXZlLWFjdGl2ZWAsXG4gICAgbGVhdmVUb0NsYXNzID0gYCR7bmFtZX0tbGVhdmUtdG9gXG4gIH0gPSByYXdQcm9wcztcbiAgY29uc3QgZHVyYXRpb25zID0gbm9ybWFsaXplRHVyYXRpb24oZHVyYXRpb24pO1xuICBjb25zdCBlbnRlckR1cmF0aW9uID0gZHVyYXRpb25zICYmIGR1cmF0aW9uc1swXTtcbiAgY29uc3QgbGVhdmVEdXJhdGlvbiA9IGR1cmF0aW9ucyAmJiBkdXJhdGlvbnNbMV07XG4gIGNvbnN0IHtcbiAgICBvbkJlZm9yZUVudGVyLFxuICAgIG9uRW50ZXIsXG4gICAgb25FbnRlckNhbmNlbGxlZCxcbiAgICBvbkxlYXZlLFxuICAgIG9uTGVhdmVDYW5jZWxsZWQsXG4gICAgb25CZWZvcmVBcHBlYXIgPSBvbkJlZm9yZUVudGVyLFxuICAgIG9uQXBwZWFyID0gb25FbnRlcixcbiAgICBvbkFwcGVhckNhbmNlbGxlZCA9IG9uRW50ZXJDYW5jZWxsZWRcbiAgfSA9IGJhc2VQcm9wcztcbiAgY29uc3QgZmluaXNoRW50ZXIgPSAoZWwsIGlzQXBwZWFyLCBkb25lKSA9PiB7XG4gICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBpc0FwcGVhciA/IGFwcGVhclRvQ2xhc3MgOiBlbnRlclRvQ2xhc3MpO1xuICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgaXNBcHBlYXIgPyBhcHBlYXJBY3RpdmVDbGFzcyA6IGVudGVyQWN0aXZlQ2xhc3MpO1xuICAgIGRvbmUgJiYgZG9uZSgpO1xuICB9O1xuICBjb25zdCBmaW5pc2hMZWF2ZSA9IChlbCwgZG9uZSkgPT4ge1xuICAgIGVsLl9pc0xlYXZpbmcgPSBmYWxzZTtcbiAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlRnJvbUNsYXNzKTtcbiAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlVG9DbGFzcyk7XG4gICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUFjdGl2ZUNsYXNzKTtcbiAgICBkb25lICYmIGRvbmUoKTtcbiAgfTtcbiAgY29uc3QgbWFrZUVudGVySG9vayA9IChpc0FwcGVhcikgPT4ge1xuICAgIHJldHVybiAoZWwsIGRvbmUpID0+IHtcbiAgICAgIGNvbnN0IGhvb2sgPSBpc0FwcGVhciA/IG9uQXBwZWFyIDogb25FbnRlcjtcbiAgICAgIGNvbnN0IHJlc29sdmUgPSAoKSA9PiBmaW5pc2hFbnRlcihlbCwgaXNBcHBlYXIsIGRvbmUpO1xuICAgICAgY2FsbEhvb2soaG9vaywgW2VsLCByZXNvbHZlXSk7XG4gICAgICBuZXh0RnJhbWUoKCkgPT4ge1xuICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGlzQXBwZWFyID8gYXBwZWFyRnJvbUNsYXNzIDogZW50ZXJGcm9tQ2xhc3MpO1xuICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGlzQXBwZWFyID8gYXBwZWFyVG9DbGFzcyA6IGVudGVyVG9DbGFzcyk7XG4gICAgICAgIGlmICghaGFzRXhwbGljaXRDYWxsYmFjayhob29rKSkge1xuICAgICAgICAgIHdoZW5UcmFuc2l0aW9uRW5kcyhlbCwgdHlwZSwgZW50ZXJEdXJhdGlvbiwgcmVzb2x2ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG4gIH07XG4gIHJldHVybiBleHRlbmQoYmFzZVByb3BzLCB7XG4gICAgb25CZWZvcmVFbnRlcihlbCkge1xuICAgICAgY2FsbEhvb2sob25CZWZvcmVFbnRlciwgW2VsXSk7XG4gICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGVudGVyRnJvbUNsYXNzKTtcbiAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgZW50ZXJBY3RpdmVDbGFzcyk7XG4gICAgfSxcbiAgICBvbkJlZm9yZUFwcGVhcihlbCkge1xuICAgICAgY2FsbEhvb2sob25CZWZvcmVBcHBlYXIsIFtlbF0pO1xuICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBhcHBlYXJGcm9tQ2xhc3MpO1xuICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBhcHBlYXJBY3RpdmVDbGFzcyk7XG4gICAgfSxcbiAgICBvbkVudGVyOiBtYWtlRW50ZXJIb29rKGZhbHNlKSxcbiAgICBvbkFwcGVhcjogbWFrZUVudGVySG9vayh0cnVlKSxcbiAgICBvbkxlYXZlKGVsLCBkb25lKSB7XG4gICAgICBlbC5faXNMZWF2aW5nID0gdHJ1ZTtcbiAgICAgIGNvbnN0IHJlc29sdmUgPSAoKSA9PiBmaW5pc2hMZWF2ZShlbCwgZG9uZSk7XG4gICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlRnJvbUNsYXNzKTtcbiAgICAgIGZvcmNlUmVmbG93KCk7XG4gICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQWN0aXZlQ2xhc3MpO1xuICAgICAgbmV4dEZyYW1lKCgpID0+IHtcbiAgICAgICAgaWYgKCFlbC5faXNMZWF2aW5nKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVGcm9tQ2xhc3MpO1xuICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlVG9DbGFzcyk7XG4gICAgICAgIGlmICghaGFzRXhwbGljaXRDYWxsYmFjayhvbkxlYXZlKSkge1xuICAgICAgICAgIHdoZW5UcmFuc2l0aW9uRW5kcyhlbCwgdHlwZSwgbGVhdmVEdXJhdGlvbiwgcmVzb2x2ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgY2FsbEhvb2sob25MZWF2ZSwgW2VsLCByZXNvbHZlXSk7XG4gICAgfSxcbiAgICBvbkVudGVyQ2FuY2VsbGVkKGVsKSB7XG4gICAgICBmaW5pc2hFbnRlcihlbCwgZmFsc2UpO1xuICAgICAgY2FsbEhvb2sob25FbnRlckNhbmNlbGxlZCwgW2VsXSk7XG4gICAgfSxcbiAgICBvbkFwcGVhckNhbmNlbGxlZChlbCkge1xuICAgICAgZmluaXNoRW50ZXIoZWwsIHRydWUpO1xuICAgICAgY2FsbEhvb2sob25BcHBlYXJDYW5jZWxsZWQsIFtlbF0pO1xuICAgIH0sXG4gICAgb25MZWF2ZUNhbmNlbGxlZChlbCkge1xuICAgICAgZmluaXNoTGVhdmUoZWwpO1xuICAgICAgY2FsbEhvb2sob25MZWF2ZUNhbmNlbGxlZCwgW2VsXSk7XG4gICAgfVxuICB9KTtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZUR1cmF0aW9uKGR1cmF0aW9uKSB7XG4gIGlmIChkdXJhdGlvbiA9PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH0gZWxzZSBpZiAoaXNPYmplY3QoZHVyYXRpb24pKSB7XG4gICAgcmV0dXJuIFtOdW1iZXJPZihkdXJhdGlvbi5lbnRlciksIE51bWJlck9mKGR1cmF0aW9uLmxlYXZlKV07XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgbiA9IE51bWJlck9mKGR1cmF0aW9uKTtcbiAgICByZXR1cm4gW24sIG5dO1xuICB9XG59XG5mdW5jdGlvbiBOdW1iZXJPZih2YWwpIHtcbiAgY29uc3QgcmVzID0gdG9OdW1iZXIodmFsKTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIGFzc2VydE51bWJlcihyZXMsIFwiPHRyYW5zaXRpb24+IGV4cGxpY2l0IGR1cmF0aW9uXCIpO1xuICB9XG4gIHJldHVybiByZXM7XG59XG5mdW5jdGlvbiBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGNscykge1xuICBjbHMuc3BsaXQoL1xccysvKS5mb3JFYWNoKChjKSA9PiBjICYmIGVsLmNsYXNzTGlzdC5hZGQoYykpO1xuICAoZWwuX3Z0YyB8fCAoZWwuX3Z0YyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCkpKS5hZGQoY2xzKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgY2xzKSB7XG4gIGNscy5zcGxpdCgvXFxzKy8pLmZvckVhY2goKGMpID0+IGMgJiYgZWwuY2xhc3NMaXN0LnJlbW92ZShjKSk7XG4gIGNvbnN0IHsgX3Z0YyB9ID0gZWw7XG4gIGlmIChfdnRjKSB7XG4gICAgX3Z0Yy5kZWxldGUoY2xzKTtcbiAgICBpZiAoIV92dGMuc2l6ZSkge1xuICAgICAgZWwuX3Z0YyA9IHZvaWQgMDtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIG5leHRGcmFtZShjYikge1xuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShjYik7XG4gIH0pO1xufVxubGV0IGVuZElkID0gMDtcbmZ1bmN0aW9uIHdoZW5UcmFuc2l0aW9uRW5kcyhlbCwgZXhwZWN0ZWRUeXBlLCBleHBsaWNpdFRpbWVvdXQsIHJlc29sdmUpIHtcbiAgY29uc3QgaWQgPSBlbC5fZW5kSWQgPSArK2VuZElkO1xuICBjb25zdCByZXNvbHZlSWZOb3RTdGFsZSA9ICgpID0+IHtcbiAgICBpZiAoaWQgPT09IGVsLl9lbmRJZCkge1xuICAgICAgcmVzb2x2ZSgpO1xuICAgIH1cbiAgfTtcbiAgaWYgKGV4cGxpY2l0VGltZW91dCkge1xuICAgIHJldHVybiBzZXRUaW1lb3V0KHJlc29sdmVJZk5vdFN0YWxlLCBleHBsaWNpdFRpbWVvdXQpO1xuICB9XG4gIGNvbnN0IHsgdHlwZSwgdGltZW91dCwgcHJvcENvdW50IH0gPSBnZXRUcmFuc2l0aW9uSW5mbyhlbCwgZXhwZWN0ZWRUeXBlKTtcbiAgaWYgKCF0eXBlKSB7XG4gICAgcmV0dXJuIHJlc29sdmUoKTtcbiAgfVxuICBjb25zdCBlbmRFdmVudCA9IHR5cGUgKyBcImVuZFwiO1xuICBsZXQgZW5kZWQgPSAwO1xuICBjb25zdCBlbmQgPSAoKSA9PiB7XG4gICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihlbmRFdmVudCwgb25FbmQpO1xuICAgIHJlc29sdmVJZk5vdFN0YWxlKCk7XG4gIH07XG4gIGNvbnN0IG9uRW5kID0gKGUpID0+IHtcbiAgICBpZiAoZS50YXJnZXQgPT09IGVsICYmICsrZW5kZWQgPj0gcHJvcENvdW50KSB7XG4gICAgICBlbmQoKTtcbiAgICB9XG4gIH07XG4gIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgIGlmIChlbmRlZCA8IHByb3BDb3VudCkge1xuICAgICAgZW5kKCk7XG4gICAgfVxuICB9LCB0aW1lb3V0ICsgMSk7XG4gIGVsLmFkZEV2ZW50TGlzdGVuZXIoZW5kRXZlbnQsIG9uRW5kKTtcbn1cbmZ1bmN0aW9uIGdldFRyYW5zaXRpb25JbmZvKGVsLCBleHBlY3RlZFR5cGUpIHtcbiAgY29uc3Qgc3R5bGVzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwpO1xuICBjb25zdCBnZXRTdHlsZVByb3BlcnRpZXMgPSAoa2V5KSA9PiAoc3R5bGVzW2tleV0gfHwgXCJcIikuc3BsaXQoXCIsIFwiKTtcbiAgY29uc3QgdHJhbnNpdGlvbkRlbGF5cyA9IGdldFN0eWxlUHJvcGVydGllcyhgJHtUUkFOU0lUSU9OfURlbGF5YCk7XG4gIGNvbnN0IHRyYW5zaXRpb25EdXJhdGlvbnMgPSBnZXRTdHlsZVByb3BlcnRpZXMoYCR7VFJBTlNJVElPTn1EdXJhdGlvbmApO1xuICBjb25zdCB0cmFuc2l0aW9uVGltZW91dCA9IGdldFRpbWVvdXQodHJhbnNpdGlvbkRlbGF5cywgdHJhbnNpdGlvbkR1cmF0aW9ucyk7XG4gIGNvbnN0IGFuaW1hdGlvbkRlbGF5cyA9IGdldFN0eWxlUHJvcGVydGllcyhgJHtBTklNQVRJT059RGVsYXlgKTtcbiAgY29uc3QgYW5pbWF0aW9uRHVyYXRpb25zID0gZ2V0U3R5bGVQcm9wZXJ0aWVzKGAke0FOSU1BVElPTn1EdXJhdGlvbmApO1xuICBjb25zdCBhbmltYXRpb25UaW1lb3V0ID0gZ2V0VGltZW91dChhbmltYXRpb25EZWxheXMsIGFuaW1hdGlvbkR1cmF0aW9ucyk7XG4gIGxldCB0eXBlID0gbnVsbDtcbiAgbGV0IHRpbWVvdXQgPSAwO1xuICBsZXQgcHJvcENvdW50ID0gMDtcbiAgaWYgKGV4cGVjdGVkVHlwZSA9PT0gVFJBTlNJVElPTikge1xuICAgIGlmICh0cmFuc2l0aW9uVGltZW91dCA+IDApIHtcbiAgICAgIHR5cGUgPSBUUkFOU0lUSU9OO1xuICAgICAgdGltZW91dCA9IHRyYW5zaXRpb25UaW1lb3V0O1xuICAgICAgcHJvcENvdW50ID0gdHJhbnNpdGlvbkR1cmF0aW9ucy5sZW5ndGg7XG4gICAgfVxuICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gQU5JTUFUSU9OKSB7XG4gICAgaWYgKGFuaW1hdGlvblRpbWVvdXQgPiAwKSB7XG4gICAgICB0eXBlID0gQU5JTUFUSU9OO1xuICAgICAgdGltZW91dCA9IGFuaW1hdGlvblRpbWVvdXQ7XG4gICAgICBwcm9wQ291bnQgPSBhbmltYXRpb25EdXJhdGlvbnMubGVuZ3RoO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aW1lb3V0ID0gTWF0aC5tYXgodHJhbnNpdGlvblRpbWVvdXQsIGFuaW1hdGlvblRpbWVvdXQpO1xuICAgIHR5cGUgPSB0aW1lb3V0ID4gMCA/IHRyYW5zaXRpb25UaW1lb3V0ID4gYW5pbWF0aW9uVGltZW91dCA/IFRSQU5TSVRJT04gOiBBTklNQVRJT04gOiBudWxsO1xuICAgIHByb3BDb3VudCA9IHR5cGUgPyB0eXBlID09PSBUUkFOU0lUSU9OID8gdHJhbnNpdGlvbkR1cmF0aW9ucy5sZW5ndGggOiBhbmltYXRpb25EdXJhdGlvbnMubGVuZ3RoIDogMDtcbiAgfVxuICBjb25zdCBoYXNUcmFuc2Zvcm0gPSB0eXBlID09PSBUUkFOU0lUSU9OICYmIC9cXGIodHJhbnNmb3JtfGFsbCkoLHwkKS8udGVzdChcbiAgICBnZXRTdHlsZVByb3BlcnRpZXMoYCR7VFJBTlNJVElPTn1Qcm9wZXJ0eWApLnRvU3RyaW5nKClcbiAgKTtcbiAgcmV0dXJuIHtcbiAgICB0eXBlLFxuICAgIHRpbWVvdXQsXG4gICAgcHJvcENvdW50LFxuICAgIGhhc1RyYW5zZm9ybVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0VGltZW91dChkZWxheXMsIGR1cmF0aW9ucykge1xuICB3aGlsZSAoZGVsYXlzLmxlbmd0aCA8IGR1cmF0aW9ucy5sZW5ndGgpIHtcbiAgICBkZWxheXMgPSBkZWxheXMuY29uY2F0KGRlbGF5cyk7XG4gIH1cbiAgcmV0dXJuIE1hdGgubWF4KC4uLmR1cmF0aW9ucy5tYXAoKGQsIGkpID0+IHRvTXMoZCkgKyB0b01zKGRlbGF5c1tpXSkpKTtcbn1cbmZ1bmN0aW9uIHRvTXMocykge1xuICByZXR1cm4gTnVtYmVyKHMuc2xpY2UoMCwgLTEpLnJlcGxhY2UoXCIsXCIsIFwiLlwiKSkgKiAxZTM7XG59XG5mdW5jdGlvbiBmb3JjZVJlZmxvdygpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmJvZHkub2Zmc2V0SGVpZ2h0O1xufVxuXG5jb25zdCBwb3NpdGlvbk1hcCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpO1xuY29uc3QgbmV3UG9zaXRpb25NYXAgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IFRyYW5zaXRpb25Hcm91cEltcGwgPSB7XG4gIG5hbWU6IFwiVHJhbnNpdGlvbkdyb3VwXCIsXG4gIHByb3BzOiAvKiBAX19QVVJFX18gKi8gZXh0ZW5kKHt9LCBUcmFuc2l0aW9uUHJvcHNWYWxpZGF0b3JzLCB7XG4gICAgdGFnOiBTdHJpbmcsXG4gICAgbW92ZUNsYXNzOiBTdHJpbmdcbiAgfSksXG4gIHNldHVwKHByb3BzLCB7IHNsb3RzIH0pIHtcbiAgICBjb25zdCBpbnN0YW5jZSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpO1xuICAgIGNvbnN0IHN0YXRlID0gdXNlVHJhbnNpdGlvblN0YXRlKCk7XG4gICAgbGV0IHByZXZDaGlsZHJlbjtcbiAgICBsZXQgY2hpbGRyZW47XG4gICAgb25VcGRhdGVkKCgpID0+IHtcbiAgICAgIGlmICghcHJldkNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBtb3ZlQ2xhc3MgPSBwcm9wcy5tb3ZlQ2xhc3MgfHwgYCR7cHJvcHMubmFtZSB8fCBcInZcIn0tbW92ZWA7XG4gICAgICBpZiAoIWhhc0NTU1RyYW5zZm9ybShcbiAgICAgICAgcHJldkNoaWxkcmVuWzBdLmVsLFxuICAgICAgICBpbnN0YW5jZS52bm9kZS5lbCxcbiAgICAgICAgbW92ZUNsYXNzXG4gICAgICApKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHByZXZDaGlsZHJlbi5mb3JFYWNoKGNhbGxQZW5kaW5nQ2JzKTtcbiAgICAgIHByZXZDaGlsZHJlbi5mb3JFYWNoKHJlY29yZFBvc2l0aW9uKTtcbiAgICAgIGNvbnN0IG1vdmVkQ2hpbGRyZW4gPSBwcmV2Q2hpbGRyZW4uZmlsdGVyKGFwcGx5VHJhbnNsYXRpb24pO1xuICAgICAgZm9yY2VSZWZsb3coKTtcbiAgICAgIG1vdmVkQ2hpbGRyZW4uZm9yRWFjaCgoYykgPT4ge1xuICAgICAgICBjb25zdCBlbCA9IGMuZWw7XG4gICAgICAgIGNvbnN0IHN0eWxlID0gZWwuc3R5bGU7XG4gICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbW92ZUNsYXNzKTtcbiAgICAgICAgc3R5bGUudHJhbnNmb3JtID0gc3R5bGUud2Via2l0VHJhbnNmb3JtID0gc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gXCJcIjtcbiAgICAgICAgY29uc3QgY2IgPSBlbC5fbW92ZUNiID0gKGUpID0+IHtcbiAgICAgICAgICBpZiAoZSAmJiBlLnRhcmdldCAhPT0gZWwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFlIHx8IC90cmFuc2Zvcm0kLy50ZXN0KGUucHJvcGVydHlOYW1lKSkge1xuICAgICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRyYW5zaXRpb25lbmRcIiwgY2IpO1xuICAgICAgICAgICAgZWwuX21vdmVDYiA9IG51bGw7XG4gICAgICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIG1vdmVDbGFzcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKFwidHJhbnNpdGlvbmVuZFwiLCBjYik7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgY29uc3QgcmF3UHJvcHMgPSB0b1Jhdyhwcm9wcyk7XG4gICAgICBjb25zdCBjc3NUcmFuc2l0aW9uUHJvcHMgPSByZXNvbHZlVHJhbnNpdGlvblByb3BzKHJhd1Byb3BzKTtcbiAgICAgIGxldCB0YWcgPSByYXdQcm9wcy50YWcgfHwgRnJhZ21lbnQ7XG4gICAgICBwcmV2Q2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgICAgIGNoaWxkcmVuID0gc2xvdHMuZGVmYXVsdCA/IGdldFRyYW5zaXRpb25SYXdDaGlsZHJlbihzbG90cy5kZWZhdWx0KCkpIDogW107XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgICAgIGlmIChjaGlsZC5rZXkgIT0gbnVsbCkge1xuICAgICAgICAgIHNldFRyYW5zaXRpb25Ib29rcyhcbiAgICAgICAgICAgIGNoaWxkLFxuICAgICAgICAgICAgcmVzb2x2ZVRyYW5zaXRpb25Ib29rcyhjaGlsZCwgY3NzVHJhbnNpdGlvblByb3BzLCBzdGF0ZSwgaW5zdGFuY2UpXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICB3YXJuKGA8VHJhbnNpdGlvbkdyb3VwPiBjaGlsZHJlbiBtdXN0IGJlIGtleWVkLmApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocHJldkNoaWxkcmVuKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJldkNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgY29uc3QgY2hpbGQgPSBwcmV2Q2hpbGRyZW5baV07XG4gICAgICAgICAgc2V0VHJhbnNpdGlvbkhvb2tzKFxuICAgICAgICAgICAgY2hpbGQsXG4gICAgICAgICAgICByZXNvbHZlVHJhbnNpdGlvbkhvb2tzKGNoaWxkLCBjc3NUcmFuc2l0aW9uUHJvcHMsIHN0YXRlLCBpbnN0YW5jZSlcbiAgICAgICAgICApO1xuICAgICAgICAgIHBvc2l0aW9uTWFwLnNldChjaGlsZCwgY2hpbGQuZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gY3JlYXRlVk5vZGUodGFnLCBudWxsLCBjaGlsZHJlbik7XG4gICAgfTtcbiAgfVxufTtcbmNvbnN0IHJlbW92ZU1vZGUgPSAocHJvcHMpID0+IGRlbGV0ZSBwcm9wcy5tb2RlO1xuLyogQF9fUFVSRV9fICovIHJlbW92ZU1vZGUoVHJhbnNpdGlvbkdyb3VwSW1wbC5wcm9wcyk7XG5jb25zdCBUcmFuc2l0aW9uR3JvdXAgPSBUcmFuc2l0aW9uR3JvdXBJbXBsO1xuZnVuY3Rpb24gY2FsbFBlbmRpbmdDYnMoYykge1xuICBjb25zdCBlbCA9IGMuZWw7XG4gIGlmIChlbC5fbW92ZUNiKSB7XG4gICAgZWwuX21vdmVDYigpO1xuICB9XG4gIGlmIChlbC5fZW50ZXJDYikge1xuICAgIGVsLl9lbnRlckNiKCk7XG4gIH1cbn1cbmZ1bmN0aW9uIHJlY29yZFBvc2l0aW9uKGMpIHtcbiAgbmV3UG9zaXRpb25NYXAuc2V0KGMsIGMuZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkpO1xufVxuZnVuY3Rpb24gYXBwbHlUcmFuc2xhdGlvbihjKSB7XG4gIGNvbnN0IG9sZFBvcyA9IHBvc2l0aW9uTWFwLmdldChjKTtcbiAgY29uc3QgbmV3UG9zID0gbmV3UG9zaXRpb25NYXAuZ2V0KGMpO1xuICBjb25zdCBkeCA9IG9sZFBvcy5sZWZ0IC0gbmV3UG9zLmxlZnQ7XG4gIGNvbnN0IGR5ID0gb2xkUG9zLnRvcCAtIG5ld1Bvcy50b3A7XG4gIGlmIChkeCB8fCBkeSkge1xuICAgIGNvbnN0IHMgPSBjLmVsLnN0eWxlO1xuICAgIHMudHJhbnNmb3JtID0gcy53ZWJraXRUcmFuc2Zvcm0gPSBgdHJhbnNsYXRlKCR7ZHh9cHgsJHtkeX1weClgO1xuICAgIHMudHJhbnNpdGlvbkR1cmF0aW9uID0gXCIwc1wiO1xuICAgIHJldHVybiBjO1xuICB9XG59XG5mdW5jdGlvbiBoYXNDU1NUcmFuc2Zvcm0oZWwsIHJvb3QsIG1vdmVDbGFzcykge1xuICBjb25zdCBjbG9uZSA9IGVsLmNsb25lTm9kZSgpO1xuICBpZiAoZWwuX3Z0Yykge1xuICAgIGVsLl92dGMuZm9yRWFjaCgoY2xzKSA9PiB7XG4gICAgICBjbHMuc3BsaXQoL1xccysvKS5mb3JFYWNoKChjKSA9PiBjICYmIGNsb25lLmNsYXNzTGlzdC5yZW1vdmUoYykpO1xuICAgIH0pO1xuICB9XG4gIG1vdmVDbGFzcy5zcGxpdCgvXFxzKy8pLmZvckVhY2goKGMpID0+IGMgJiYgY2xvbmUuY2xhc3NMaXN0LmFkZChjKSk7XG4gIGNsb25lLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgY29uc3QgY29udGFpbmVyID0gcm9vdC5ub2RlVHlwZSA9PT0gMSA/IHJvb3QgOiByb290LnBhcmVudE5vZGU7XG4gIGNvbnRhaW5lci5hcHBlbmRDaGlsZChjbG9uZSk7XG4gIGNvbnN0IHsgaGFzVHJhbnNmb3JtIH0gPSBnZXRUcmFuc2l0aW9uSW5mbyhjbG9uZSk7XG4gIGNvbnRhaW5lci5yZW1vdmVDaGlsZChjbG9uZSk7XG4gIHJldHVybiBoYXNUcmFuc2Zvcm07XG59XG5cbmNvbnN0IGdldE1vZGVsQXNzaWduZXIgPSAodm5vZGUpID0+IHtcbiAgY29uc3QgZm4gPSB2bm9kZS5wcm9wc1tcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIl0gfHwgZmFsc2U7XG4gIHJldHVybiBpc0FycmF5KGZuKSA/ICh2YWx1ZSkgPT4gaW52b2tlQXJyYXlGbnMoZm4sIHZhbHVlKSA6IGZuO1xufTtcbmZ1bmN0aW9uIG9uQ29tcG9zaXRpb25TdGFydChlKSB7XG4gIGUudGFyZ2V0LmNvbXBvc2luZyA9IHRydWU7XG59XG5mdW5jdGlvbiBvbkNvbXBvc2l0aW9uRW5kKGUpIHtcbiAgY29uc3QgdGFyZ2V0ID0gZS50YXJnZXQ7XG4gIGlmICh0YXJnZXQuY29tcG9zaW5nKSB7XG4gICAgdGFyZ2V0LmNvbXBvc2luZyA9IGZhbHNlO1xuICAgIHRhcmdldC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcImlucHV0XCIpKTtcbiAgfVxufVxuY29uc3Qgdk1vZGVsVGV4dCA9IHtcbiAgY3JlYXRlZChlbCwgeyBtb2RpZmllcnM6IHsgbGF6eSwgdHJpbSwgbnVtYmVyIH0gfSwgdm5vZGUpIHtcbiAgICBlbC5fYXNzaWduID0gZ2V0TW9kZWxBc3NpZ25lcih2bm9kZSk7XG4gICAgY29uc3QgY2FzdFRvTnVtYmVyID0gbnVtYmVyIHx8IHZub2RlLnByb3BzICYmIHZub2RlLnByb3BzLnR5cGUgPT09IFwibnVtYmVyXCI7XG4gICAgYWRkRXZlbnRMaXN0ZW5lcihlbCwgbGF6eSA/IFwiY2hhbmdlXCIgOiBcImlucHV0XCIsIChlKSA9PiB7XG4gICAgICBpZiAoZS50YXJnZXQuY29tcG9zaW5nKVxuICAgICAgICByZXR1cm47XG4gICAgICBsZXQgZG9tVmFsdWUgPSBlbC52YWx1ZTtcbiAgICAgIGlmICh0cmltKSB7XG4gICAgICAgIGRvbVZhbHVlID0gZG9tVmFsdWUudHJpbSgpO1xuICAgICAgfVxuICAgICAgaWYgKGNhc3RUb051bWJlcikge1xuICAgICAgICBkb21WYWx1ZSA9IGxvb3NlVG9OdW1iZXIoZG9tVmFsdWUpO1xuICAgICAgfVxuICAgICAgZWwuX2Fzc2lnbihkb21WYWx1ZSk7XG4gICAgfSk7XG4gICAgaWYgKHRyaW0pIHtcbiAgICAgIGFkZEV2ZW50TGlzdGVuZXIoZWwsIFwiY2hhbmdlXCIsICgpID0+IHtcbiAgICAgICAgZWwudmFsdWUgPSBlbC52YWx1ZS50cmltKCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKCFsYXp5KSB7XG4gICAgICBhZGRFdmVudExpc3RlbmVyKGVsLCBcImNvbXBvc2l0aW9uc3RhcnRcIiwgb25Db21wb3NpdGlvblN0YXJ0KTtcbiAgICAgIGFkZEV2ZW50TGlzdGVuZXIoZWwsIFwiY29tcG9zaXRpb25lbmRcIiwgb25Db21wb3NpdGlvbkVuZCk7XG4gICAgICBhZGRFdmVudExpc3RlbmVyKGVsLCBcImNoYW5nZVwiLCBvbkNvbXBvc2l0aW9uRW5kKTtcbiAgICB9XG4gIH0sXG4gIC8vIHNldCB2YWx1ZSBvbiBtb3VudGVkIHNvIGl0J3MgYWZ0ZXIgbWluL21heCBmb3IgdHlwZT1cInJhbmdlXCJcbiAgbW91bnRlZChlbCwgeyB2YWx1ZSB9KSB7XG4gICAgZWwudmFsdWUgPSB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlO1xuICB9LFxuICBiZWZvcmVVcGRhdGUoZWwsIHsgdmFsdWUsIG1vZGlmaWVyczogeyBsYXp5LCB0cmltLCBudW1iZXIgfSB9LCB2bm9kZSkge1xuICAgIGVsLl9hc3NpZ24gPSBnZXRNb2RlbEFzc2lnbmVyKHZub2RlKTtcbiAgICBpZiAoZWwuY29tcG9zaW5nKVxuICAgICAgcmV0dXJuO1xuICAgIGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50ID09PSBlbCAmJiBlbC50eXBlICE9PSBcInJhbmdlXCIpIHtcbiAgICAgIGlmIChsYXp5KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICh0cmltICYmIGVsLnZhbHVlLnRyaW0oKSA9PT0gdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKChudW1iZXIgfHwgZWwudHlwZSA9PT0gXCJudW1iZXJcIikgJiYgbG9vc2VUb051bWJlcihlbC52YWx1ZSkgPT09IHZhbHVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgbmV3VmFsdWUgPSB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlO1xuICAgIGlmIChlbC52YWx1ZSAhPT0gbmV3VmFsdWUpIHtcbiAgICAgIGVsLnZhbHVlID0gbmV3VmFsdWU7XG4gICAgfVxuICB9XG59O1xuY29uc3Qgdk1vZGVsQ2hlY2tib3ggPSB7XG4gIC8vICM0MDk2IGFycmF5IGNoZWNrYm94ZXMgbmVlZCB0byBiZSBkZWVwIHRyYXZlcnNlZFxuICBkZWVwOiB0cnVlLFxuICBjcmVhdGVkKGVsLCBfLCB2bm9kZSkge1xuICAgIGVsLl9hc3NpZ24gPSBnZXRNb2RlbEFzc2lnbmVyKHZub2RlKTtcbiAgICBhZGRFdmVudExpc3RlbmVyKGVsLCBcImNoYW5nZVwiLCAoKSA9PiB7XG4gICAgICBjb25zdCBtb2RlbFZhbHVlID0gZWwuX21vZGVsVmFsdWU7XG4gICAgICBjb25zdCBlbGVtZW50VmFsdWUgPSBnZXRWYWx1ZShlbCk7XG4gICAgICBjb25zdCBjaGVja2VkID0gZWwuY2hlY2tlZDtcbiAgICAgIGNvbnN0IGFzc2lnbiA9IGVsLl9hc3NpZ247XG4gICAgICBpZiAoaXNBcnJheShtb2RlbFZhbHVlKSkge1xuICAgICAgICBjb25zdCBpbmRleCA9IGxvb3NlSW5kZXhPZihtb2RlbFZhbHVlLCBlbGVtZW50VmFsdWUpO1xuICAgICAgICBjb25zdCBmb3VuZCA9IGluZGV4ICE9PSAtMTtcbiAgICAgICAgaWYgKGNoZWNrZWQgJiYgIWZvdW5kKSB7XG4gICAgICAgICAgYXNzaWduKG1vZGVsVmFsdWUuY29uY2F0KGVsZW1lbnRWYWx1ZSkpO1xuICAgICAgICB9IGVsc2UgaWYgKCFjaGVja2VkICYmIGZvdW5kKSB7XG4gICAgICAgICAgY29uc3QgZmlsdGVyZWQgPSBbLi4ubW9kZWxWYWx1ZV07XG4gICAgICAgICAgZmlsdGVyZWQuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICBhc3NpZ24oZmlsdGVyZWQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlzU2V0KG1vZGVsVmFsdWUpKSB7XG4gICAgICAgIGNvbnN0IGNsb25lZCA9IG5ldyBTZXQobW9kZWxWYWx1ZSk7XG4gICAgICAgIGlmIChjaGVja2VkKSB7XG4gICAgICAgICAgY2xvbmVkLmFkZChlbGVtZW50VmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNsb25lZC5kZWxldGUoZWxlbWVudFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBhc3NpZ24oY2xvbmVkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFzc2lnbihnZXRDaGVja2JveFZhbHVlKGVsLCBjaGVja2VkKSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG4gIC8vIHNldCBpbml0aWFsIGNoZWNrZWQgb24gbW91bnQgdG8gd2FpdCBmb3IgdHJ1ZS12YWx1ZS9mYWxzZS12YWx1ZVxuICBtb3VudGVkOiBzZXRDaGVja2VkLFxuICBiZWZvcmVVcGRhdGUoZWwsIGJpbmRpbmcsIHZub2RlKSB7XG4gICAgZWwuX2Fzc2lnbiA9IGdldE1vZGVsQXNzaWduZXIodm5vZGUpO1xuICAgIHNldENoZWNrZWQoZWwsIGJpbmRpbmcsIHZub2RlKTtcbiAgfVxufTtcbmZ1bmN0aW9uIHNldENoZWNrZWQoZWwsIHsgdmFsdWUsIG9sZFZhbHVlIH0sIHZub2RlKSB7XG4gIGVsLl9tb2RlbFZhbHVlID0gdmFsdWU7XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIGVsLmNoZWNrZWQgPSBsb29zZUluZGV4T2YodmFsdWUsIHZub2RlLnByb3BzLnZhbHVlKSA+IC0xO1xuICB9IGVsc2UgaWYgKGlzU2V0KHZhbHVlKSkge1xuICAgIGVsLmNoZWNrZWQgPSB2YWx1ZS5oYXModm5vZGUucHJvcHMudmFsdWUpO1xuICB9IGVsc2UgaWYgKHZhbHVlICE9PSBvbGRWYWx1ZSkge1xuICAgIGVsLmNoZWNrZWQgPSBsb29zZUVxdWFsKHZhbHVlLCBnZXRDaGVja2JveFZhbHVlKGVsLCB0cnVlKSk7XG4gIH1cbn1cbmNvbnN0IHZNb2RlbFJhZGlvID0ge1xuICBjcmVhdGVkKGVsLCB7IHZhbHVlIH0sIHZub2RlKSB7XG4gICAgZWwuY2hlY2tlZCA9IGxvb3NlRXF1YWwodmFsdWUsIHZub2RlLnByb3BzLnZhbHVlKTtcbiAgICBlbC5fYXNzaWduID0gZ2V0TW9kZWxBc3NpZ25lcih2bm9kZSk7XG4gICAgYWRkRXZlbnRMaXN0ZW5lcihlbCwgXCJjaGFuZ2VcIiwgKCkgPT4ge1xuICAgICAgZWwuX2Fzc2lnbihnZXRWYWx1ZShlbCkpO1xuICAgIH0pO1xuICB9LFxuICBiZWZvcmVVcGRhdGUoZWwsIHsgdmFsdWUsIG9sZFZhbHVlIH0sIHZub2RlKSB7XG4gICAgZWwuX2Fzc2lnbiA9IGdldE1vZGVsQXNzaWduZXIodm5vZGUpO1xuICAgIGlmICh2YWx1ZSAhPT0gb2xkVmFsdWUpIHtcbiAgICAgIGVsLmNoZWNrZWQgPSBsb29zZUVxdWFsKHZhbHVlLCB2bm9kZS5wcm9wcy52YWx1ZSk7XG4gICAgfVxuICB9XG59O1xuY29uc3Qgdk1vZGVsU2VsZWN0ID0ge1xuICAvLyA8c2VsZWN0IG11bHRpcGxlPiB2YWx1ZSBuZWVkIHRvIGJlIGRlZXAgdHJhdmVyc2VkXG4gIGRlZXA6IHRydWUsXG4gIGNyZWF0ZWQoZWwsIHsgdmFsdWUsIG1vZGlmaWVyczogeyBudW1iZXIgfSB9LCB2bm9kZSkge1xuICAgIGNvbnN0IGlzU2V0TW9kZWwgPSBpc1NldCh2YWx1ZSk7XG4gICAgYWRkRXZlbnRMaXN0ZW5lcihlbCwgXCJjaGFuZ2VcIiwgKCkgPT4ge1xuICAgICAgY29uc3Qgc2VsZWN0ZWRWYWwgPSBBcnJheS5wcm90b3R5cGUuZmlsdGVyLmNhbGwoZWwub3B0aW9ucywgKG8pID0+IG8uc2VsZWN0ZWQpLm1hcChcbiAgICAgICAgKG8pID0+IG51bWJlciA/IGxvb3NlVG9OdW1iZXIoZ2V0VmFsdWUobykpIDogZ2V0VmFsdWUobylcbiAgICAgICk7XG4gICAgICBlbC5fYXNzaWduKFxuICAgICAgICBlbC5tdWx0aXBsZSA/IGlzU2V0TW9kZWwgPyBuZXcgU2V0KHNlbGVjdGVkVmFsKSA6IHNlbGVjdGVkVmFsIDogc2VsZWN0ZWRWYWxbMF1cbiAgICAgICk7XG4gICAgfSk7XG4gICAgZWwuX2Fzc2lnbiA9IGdldE1vZGVsQXNzaWduZXIodm5vZGUpO1xuICB9LFxuICAvLyBzZXQgdmFsdWUgaW4gbW91bnRlZCAmIHVwZGF0ZWQgYmVjYXVzZSA8c2VsZWN0PiByZWxpZXMgb24gaXRzIGNoaWxkcmVuXG4gIC8vIDxvcHRpb24+cy5cbiAgbW91bnRlZChlbCwgeyB2YWx1ZSB9KSB7XG4gICAgc2V0U2VsZWN0ZWQoZWwsIHZhbHVlKTtcbiAgfSxcbiAgYmVmb3JlVXBkYXRlKGVsLCBfYmluZGluZywgdm5vZGUpIHtcbiAgICBlbC5fYXNzaWduID0gZ2V0TW9kZWxBc3NpZ25lcih2bm9kZSk7XG4gIH0sXG4gIHVwZGF0ZWQoZWwsIHsgdmFsdWUgfSkge1xuICAgIHNldFNlbGVjdGVkKGVsLCB2YWx1ZSk7XG4gIH1cbn07XG5mdW5jdGlvbiBzZXRTZWxlY3RlZChlbCwgdmFsdWUpIHtcbiAgY29uc3QgaXNNdWx0aXBsZSA9IGVsLm11bHRpcGxlO1xuICBpZiAoaXNNdWx0aXBsZSAmJiAhaXNBcnJheSh2YWx1ZSkgJiYgIWlzU2V0KHZhbHVlKSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiB3YXJuKFxuICAgICAgYDxzZWxlY3QgbXVsdGlwbGUgdi1tb2RlbD4gZXhwZWN0cyBhbiBBcnJheSBvciBTZXQgdmFsdWUgZm9yIGl0cyBiaW5kaW5nLCBidXQgZ290ICR7T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKS5zbGljZSg4LCAtMSl9LmBcbiAgICApO1xuICAgIHJldHVybjtcbiAgfVxuICBmb3IgKGxldCBpID0gMCwgbCA9IGVsLm9wdGlvbnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgY29uc3Qgb3B0aW9uID0gZWwub3B0aW9uc1tpXTtcbiAgICBjb25zdCBvcHRpb25WYWx1ZSA9IGdldFZhbHVlKG9wdGlvbik7XG4gICAgaWYgKGlzTXVsdGlwbGUpIHtcbiAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSBsb29zZUluZGV4T2YodmFsdWUsIG9wdGlvblZhbHVlKSA+IC0xO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3B0aW9uLnNlbGVjdGVkID0gdmFsdWUuaGFzKG9wdGlvblZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGxvb3NlRXF1YWwoZ2V0VmFsdWUob3B0aW9uKSwgdmFsdWUpKSB7XG4gICAgICAgIGlmIChlbC5zZWxlY3RlZEluZGV4ICE9PSBpKVxuICAgICAgICAgIGVsLnNlbGVjdGVkSW5kZXggPSBpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmICghaXNNdWx0aXBsZSAmJiBlbC5zZWxlY3RlZEluZGV4ICE9PSAtMSkge1xuICAgIGVsLnNlbGVjdGVkSW5kZXggPSAtMTtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0VmFsdWUoZWwpIHtcbiAgcmV0dXJuIFwiX3ZhbHVlXCIgaW4gZWwgPyBlbC5fdmFsdWUgOiBlbC52YWx1ZTtcbn1cbmZ1bmN0aW9uIGdldENoZWNrYm94VmFsdWUoZWwsIGNoZWNrZWQpIHtcbiAgY29uc3Qga2V5ID0gY2hlY2tlZCA/IFwiX3RydWVWYWx1ZVwiIDogXCJfZmFsc2VWYWx1ZVwiO1xuICByZXR1cm4ga2V5IGluIGVsID8gZWxba2V5XSA6IGNoZWNrZWQ7XG59XG5jb25zdCB2TW9kZWxEeW5hbWljID0ge1xuICBjcmVhdGVkKGVsLCBiaW5kaW5nLCB2bm9kZSkge1xuICAgIGNhbGxNb2RlbEhvb2soZWwsIGJpbmRpbmcsIHZub2RlLCBudWxsLCBcImNyZWF0ZWRcIik7XG4gIH0sXG4gIG1vdW50ZWQoZWwsIGJpbmRpbmcsIHZub2RlKSB7XG4gICAgY2FsbE1vZGVsSG9vayhlbCwgYmluZGluZywgdm5vZGUsIG51bGwsIFwibW91bnRlZFwiKTtcbiAgfSxcbiAgYmVmb3JlVXBkYXRlKGVsLCBiaW5kaW5nLCB2bm9kZSwgcHJldlZOb2RlKSB7XG4gICAgY2FsbE1vZGVsSG9vayhlbCwgYmluZGluZywgdm5vZGUsIHByZXZWTm9kZSwgXCJiZWZvcmVVcGRhdGVcIik7XG4gIH0sXG4gIHVwZGF0ZWQoZWwsIGJpbmRpbmcsIHZub2RlLCBwcmV2Vk5vZGUpIHtcbiAgICBjYWxsTW9kZWxIb29rKGVsLCBiaW5kaW5nLCB2bm9kZSwgcHJldlZOb2RlLCBcInVwZGF0ZWRcIik7XG4gIH1cbn07XG5mdW5jdGlvbiByZXNvbHZlRHluYW1pY01vZGVsKHRhZ05hbWUsIHR5cGUpIHtcbiAgc3dpdGNoICh0YWdOYW1lKSB7XG4gICAgY2FzZSBcIlNFTEVDVFwiOlxuICAgICAgcmV0dXJuIHZNb2RlbFNlbGVjdDtcbiAgICBjYXNlIFwiVEVYVEFSRUFcIjpcbiAgICAgIHJldHVybiB2TW9kZWxUZXh0O1xuICAgIGRlZmF1bHQ6XG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSBcImNoZWNrYm94XCI6XG4gICAgICAgICAgcmV0dXJuIHZNb2RlbENoZWNrYm94O1xuICAgICAgICBjYXNlIFwicmFkaW9cIjpcbiAgICAgICAgICByZXR1cm4gdk1vZGVsUmFkaW87XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIHZNb2RlbFRleHQ7XG4gICAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGNhbGxNb2RlbEhvb2soZWwsIGJpbmRpbmcsIHZub2RlLCBwcmV2Vk5vZGUsIGhvb2spIHtcbiAgY29uc3QgbW9kZWxUb1VzZSA9IHJlc29sdmVEeW5hbWljTW9kZWwoXG4gICAgZWwudGFnTmFtZSxcbiAgICB2bm9kZS5wcm9wcyAmJiB2bm9kZS5wcm9wcy50eXBlXG4gICk7XG4gIGNvbnN0IGZuID0gbW9kZWxUb1VzZVtob29rXTtcbiAgZm4gJiYgZm4oZWwsIGJpbmRpbmcsIHZub2RlLCBwcmV2Vk5vZGUpO1xufVxuZnVuY3Rpb24gaW5pdFZNb2RlbEZvclNTUigpIHtcbiAgdk1vZGVsVGV4dC5nZXRTU1JQcm9wcyA9ICh7IHZhbHVlIH0pID0+ICh7IHZhbHVlIH0pO1xuICB2TW9kZWxSYWRpby5nZXRTU1JQcm9wcyA9ICh7IHZhbHVlIH0sIHZub2RlKSA9PiB7XG4gICAgaWYgKHZub2RlLnByb3BzICYmIGxvb3NlRXF1YWwodm5vZGUucHJvcHMudmFsdWUsIHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHsgY2hlY2tlZDogdHJ1ZSB9O1xuICAgIH1cbiAgfTtcbiAgdk1vZGVsQ2hlY2tib3guZ2V0U1NSUHJvcHMgPSAoeyB2YWx1ZSB9LCB2bm9kZSkgPT4ge1xuICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgaWYgKHZub2RlLnByb3BzICYmIGxvb3NlSW5kZXhPZih2YWx1ZSwgdm5vZGUucHJvcHMudmFsdWUpID4gLTEpIHtcbiAgICAgICAgcmV0dXJuIHsgY2hlY2tlZDogdHJ1ZSB9O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNTZXQodmFsdWUpKSB7XG4gICAgICBpZiAodm5vZGUucHJvcHMgJiYgdmFsdWUuaGFzKHZub2RlLnByb3BzLnZhbHVlKSkge1xuICAgICAgICByZXR1cm4geyBjaGVja2VkOiB0cnVlIH07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHsgY2hlY2tlZDogdHJ1ZSB9O1xuICAgIH1cbiAgfTtcbiAgdk1vZGVsRHluYW1pYy5nZXRTU1JQcm9wcyA9IChiaW5kaW5nLCB2bm9kZSkgPT4ge1xuICAgIGlmICh0eXBlb2Ygdm5vZGUudHlwZSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBtb2RlbFRvVXNlID0gcmVzb2x2ZUR5bmFtaWNNb2RlbChcbiAgICAgIC8vIHJlc29sdmVEeW5hbWljTW9kZWwgZXhwZWN0cyBhbiB1cHBlcmNhc2UgdGFnIG5hbWUsIGJ1dCB2bm9kZS50eXBlIGlzIGxvd2VyY2FzZVxuICAgICAgdm5vZGUudHlwZS50b1VwcGVyQ2FzZSgpLFxuICAgICAgdm5vZGUucHJvcHMgJiYgdm5vZGUucHJvcHMudHlwZVxuICAgICk7XG4gICAgaWYgKG1vZGVsVG9Vc2UuZ2V0U1NSUHJvcHMpIHtcbiAgICAgIHJldHVybiBtb2RlbFRvVXNlLmdldFNTUlByb3BzKGJpbmRpbmcsIHZub2RlKTtcbiAgICB9XG4gIH07XG59XG5cbmNvbnN0IHN5c3RlbU1vZGlmaWVycyA9IFtcImN0cmxcIiwgXCJzaGlmdFwiLCBcImFsdFwiLCBcIm1ldGFcIl07XG5jb25zdCBtb2RpZmllckd1YXJkcyA9IHtcbiAgc3RvcDogKGUpID0+IGUuc3RvcFByb3BhZ2F0aW9uKCksXG4gIHByZXZlbnQ6IChlKSA9PiBlLnByZXZlbnREZWZhdWx0KCksXG4gIHNlbGY6IChlKSA9PiBlLnRhcmdldCAhPT0gZS5jdXJyZW50VGFyZ2V0LFxuICBjdHJsOiAoZSkgPT4gIWUuY3RybEtleSxcbiAgc2hpZnQ6IChlKSA9PiAhZS5zaGlmdEtleSxcbiAgYWx0OiAoZSkgPT4gIWUuYWx0S2V5LFxuICBtZXRhOiAoZSkgPT4gIWUubWV0YUtleSxcbiAgbGVmdDogKGUpID0+IFwiYnV0dG9uXCIgaW4gZSAmJiBlLmJ1dHRvbiAhPT0gMCxcbiAgbWlkZGxlOiAoZSkgPT4gXCJidXR0b25cIiBpbiBlICYmIGUuYnV0dG9uICE9PSAxLFxuICByaWdodDogKGUpID0+IFwiYnV0dG9uXCIgaW4gZSAmJiBlLmJ1dHRvbiAhPT0gMixcbiAgZXhhY3Q6IChlLCBtb2RpZmllcnMpID0+IHN5c3RlbU1vZGlmaWVycy5zb21lKChtKSA9PiBlW2Ake219S2V5YF0gJiYgIW1vZGlmaWVycy5pbmNsdWRlcyhtKSlcbn07XG5jb25zdCB3aXRoTW9kaWZpZXJzID0gKGZuLCBtb2RpZmllcnMpID0+IHtcbiAgcmV0dXJuIChldmVudCwgLi4uYXJncykgPT4ge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbW9kaWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBndWFyZCA9IG1vZGlmaWVyR3VhcmRzW21vZGlmaWVyc1tpXV07XG4gICAgICBpZiAoZ3VhcmQgJiYgZ3VhcmQoZXZlbnQsIG1vZGlmaWVycykpXG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmV0dXJuIGZuKGV2ZW50LCAuLi5hcmdzKTtcbiAgfTtcbn07XG5jb25zdCBrZXlOYW1lcyA9IHtcbiAgZXNjOiBcImVzY2FwZVwiLFxuICBzcGFjZTogXCIgXCIsXG4gIHVwOiBcImFycm93LXVwXCIsXG4gIGxlZnQ6IFwiYXJyb3ctbGVmdFwiLFxuICByaWdodDogXCJhcnJvdy1yaWdodFwiLFxuICBkb3duOiBcImFycm93LWRvd25cIixcbiAgZGVsZXRlOiBcImJhY2tzcGFjZVwiXG59O1xuY29uc3Qgd2l0aEtleXMgPSAoZm4sIG1vZGlmaWVycykgPT4ge1xuICByZXR1cm4gKGV2ZW50KSA9PiB7XG4gICAgaWYgKCEoXCJrZXlcIiBpbiBldmVudCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgZXZlbnRLZXkgPSBoeXBoZW5hdGUoZXZlbnQua2V5KTtcbiAgICBpZiAobW9kaWZpZXJzLnNvbWUoKGspID0+IGsgPT09IGV2ZW50S2V5IHx8IGtleU5hbWVzW2tdID09PSBldmVudEtleSkpIHtcbiAgICAgIHJldHVybiBmbihldmVudCk7XG4gICAgfVxuICB9O1xufTtcblxuY29uc3QgdlNob3cgPSB7XG4gIGJlZm9yZU1vdW50KGVsLCB7IHZhbHVlIH0sIHsgdHJhbnNpdGlvbiB9KSB7XG4gICAgZWwuX3ZvZCA9IGVsLnN0eWxlLmRpc3BsYXkgPT09IFwibm9uZVwiID8gXCJcIiA6IGVsLnN0eWxlLmRpc3BsYXk7XG4gICAgaWYgKHRyYW5zaXRpb24gJiYgdmFsdWUpIHtcbiAgICAgIHRyYW5zaXRpb24uYmVmb3JlRW50ZXIoZWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXREaXNwbGF5KGVsLCB2YWx1ZSk7XG4gICAgfVxuICB9LFxuICBtb3VudGVkKGVsLCB7IHZhbHVlIH0sIHsgdHJhbnNpdGlvbiB9KSB7XG4gICAgaWYgKHRyYW5zaXRpb24gJiYgdmFsdWUpIHtcbiAgICAgIHRyYW5zaXRpb24uZW50ZXIoZWwpO1xuICAgIH1cbiAgfSxcbiAgdXBkYXRlZChlbCwgeyB2YWx1ZSwgb2xkVmFsdWUgfSwgeyB0cmFuc2l0aW9uIH0pIHtcbiAgICBpZiAoIXZhbHVlID09PSAhb2xkVmFsdWUpXG4gICAgICByZXR1cm47XG4gICAgaWYgKHRyYW5zaXRpb24pIHtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICB0cmFuc2l0aW9uLmJlZm9yZUVudGVyKGVsKTtcbiAgICAgICAgc2V0RGlzcGxheShlbCwgdHJ1ZSk7XG4gICAgICAgIHRyYW5zaXRpb24uZW50ZXIoZWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHJhbnNpdGlvbi5sZWF2ZShlbCwgKCkgPT4ge1xuICAgICAgICAgIHNldERpc3BsYXkoZWwsIGZhbHNlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldERpc3BsYXkoZWwsIHZhbHVlKTtcbiAgICB9XG4gIH0sXG4gIGJlZm9yZVVubW91bnQoZWwsIHsgdmFsdWUgfSkge1xuICAgIHNldERpc3BsYXkoZWwsIHZhbHVlKTtcbiAgfVxufTtcbmZ1bmN0aW9uIHNldERpc3BsYXkoZWwsIHZhbHVlKSB7XG4gIGVsLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZSA/IGVsLl92b2QgOiBcIm5vbmVcIjtcbn1cbmZ1bmN0aW9uIGluaXRWU2hvd0ZvclNTUigpIHtcbiAgdlNob3cuZ2V0U1NSUHJvcHMgPSAoeyB2YWx1ZSB9KSA9PiB7XG4gICAgaWYgKCF2YWx1ZSkge1xuICAgICAgcmV0dXJuIHsgc3R5bGU6IHsgZGlzcGxheTogXCJub25lXCIgfSB9O1xuICAgIH1cbiAgfTtcbn1cblxuY29uc3QgcmVuZGVyZXJPcHRpb25zID0gLyogQF9fUFVSRV9fICovIGV4dGVuZCh7IHBhdGNoUHJvcCB9LCBub2RlT3BzKTtcbmxldCByZW5kZXJlcjtcbmxldCBlbmFibGVkSHlkcmF0aW9uID0gZmFsc2U7XG5mdW5jdGlvbiBlbnN1cmVSZW5kZXJlcigpIHtcbiAgcmV0dXJuIHJlbmRlcmVyIHx8IChyZW5kZXJlciA9IGNyZWF0ZVJlbmRlcmVyKHJlbmRlcmVyT3B0aW9ucykpO1xufVxuZnVuY3Rpb24gZW5zdXJlSHlkcmF0aW9uUmVuZGVyZXIoKSB7XG4gIHJlbmRlcmVyID0gZW5hYmxlZEh5ZHJhdGlvbiA/IHJlbmRlcmVyIDogY3JlYXRlSHlkcmF0aW9uUmVuZGVyZXIocmVuZGVyZXJPcHRpb25zKTtcbiAgZW5hYmxlZEh5ZHJhdGlvbiA9IHRydWU7XG4gIHJldHVybiByZW5kZXJlcjtcbn1cbmNvbnN0IHJlbmRlciA9ICguLi5hcmdzKSA9PiB7XG4gIGVuc3VyZVJlbmRlcmVyKCkucmVuZGVyKC4uLmFyZ3MpO1xufTtcbmNvbnN0IGh5ZHJhdGUgPSAoLi4uYXJncykgPT4ge1xuICBlbnN1cmVIeWRyYXRpb25SZW5kZXJlcigpLmh5ZHJhdGUoLi4uYXJncyk7XG59O1xuY29uc3QgY3JlYXRlQXBwID0gKC4uLmFyZ3MpID0+IHtcbiAgY29uc3QgYXBwID0gZW5zdXJlUmVuZGVyZXIoKS5jcmVhdGVBcHAoLi4uYXJncyk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBpbmplY3ROYXRpdmVUYWdDaGVjayhhcHApO1xuICAgIGluamVjdENvbXBpbGVyT3B0aW9uc0NoZWNrKGFwcCk7XG4gIH1cbiAgY29uc3QgeyBtb3VudCB9ID0gYXBwO1xuICBhcHAubW91bnQgPSAoY29udGFpbmVyT3JTZWxlY3RvcikgPT4ge1xuICAgIGNvbnN0IGNvbnRhaW5lciA9IG5vcm1hbGl6ZUNvbnRhaW5lcihjb250YWluZXJPclNlbGVjdG9yKTtcbiAgICBpZiAoIWNvbnRhaW5lcilcbiAgICAgIHJldHVybjtcbiAgICBjb25zdCBjb21wb25lbnQgPSBhcHAuX2NvbXBvbmVudDtcbiAgICBpZiAoIWlzRnVuY3Rpb24oY29tcG9uZW50KSAmJiAhY29tcG9uZW50LnJlbmRlciAmJiAhY29tcG9uZW50LnRlbXBsYXRlKSB7XG4gICAgICBjb21wb25lbnQudGVtcGxhdGUgPSBjb250YWluZXIuaW5uZXJIVE1MO1xuICAgIH1cbiAgICBjb250YWluZXIuaW5uZXJIVE1MID0gXCJcIjtcbiAgICBjb25zdCBwcm94eSA9IG1vdW50KGNvbnRhaW5lciwgZmFsc2UsIGNvbnRhaW5lciBpbnN0YW5jZW9mIFNWR0VsZW1lbnQpO1xuICAgIGlmIChjb250YWluZXIgaW5zdGFuY2VvZiBFbGVtZW50KSB7XG4gICAgICBjb250YWluZXIucmVtb3ZlQXR0cmlidXRlKFwidi1jbG9ha1wiKTtcbiAgICAgIGNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoXCJkYXRhLXYtYXBwXCIsIFwiXCIpO1xuICAgIH1cbiAgICByZXR1cm4gcHJveHk7XG4gIH07XG4gIHJldHVybiBhcHA7XG59O1xuY29uc3QgY3JlYXRlU1NSQXBwID0gKC4uLmFyZ3MpID0+IHtcbiAgY29uc3QgYXBwID0gZW5zdXJlSHlkcmF0aW9uUmVuZGVyZXIoKS5jcmVhdGVBcHAoLi4uYXJncyk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBpbmplY3ROYXRpdmVUYWdDaGVjayhhcHApO1xuICAgIGluamVjdENvbXBpbGVyT3B0aW9uc0NoZWNrKGFwcCk7XG4gIH1cbiAgY29uc3QgeyBtb3VudCB9ID0gYXBwO1xuICBhcHAubW91bnQgPSAoY29udGFpbmVyT3JTZWxlY3RvcikgPT4ge1xuICAgIGNvbnN0IGNvbnRhaW5lciA9IG5vcm1hbGl6ZUNvbnRhaW5lcihjb250YWluZXJPclNlbGVjdG9yKTtcbiAgICBpZiAoY29udGFpbmVyKSB7XG4gICAgICByZXR1cm4gbW91bnQoY29udGFpbmVyLCB0cnVlLCBjb250YWluZXIgaW5zdGFuY2VvZiBTVkdFbGVtZW50KTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBhcHA7XG59O1xuZnVuY3Rpb24gaW5qZWN0TmF0aXZlVGFnQ2hlY2soYXBwKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhcHAuY29uZmlnLCBcImlzTmF0aXZlVGFnXCIsIHtcbiAgICB2YWx1ZTogKHRhZykgPT4gaXNIVE1MVGFnKHRhZykgfHwgaXNTVkdUYWcodGFnKSxcbiAgICB3cml0YWJsZTogZmFsc2VcbiAgfSk7XG59XG5mdW5jdGlvbiBpbmplY3RDb21waWxlck9wdGlvbnNDaGVjayhhcHApIHtcbiAgaWYgKGlzUnVudGltZU9ubHkoKSkge1xuICAgIGNvbnN0IGlzQ3VzdG9tRWxlbWVudCA9IGFwcC5jb25maWcuaXNDdXN0b21FbGVtZW50O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhcHAuY29uZmlnLCBcImlzQ3VzdG9tRWxlbWVudFwiLCB7XG4gICAgICBnZXQoKSB7XG4gICAgICAgIHJldHVybiBpc0N1c3RvbUVsZW1lbnQ7XG4gICAgICB9LFxuICAgICAgc2V0KCkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIGBUaGUgXFxgaXNDdXN0b21FbGVtZW50XFxgIGNvbmZpZyBvcHRpb24gaXMgZGVwcmVjYXRlZC4gVXNlIFxcYGNvbXBpbGVyT3B0aW9ucy5pc0N1c3RvbUVsZW1lbnRcXGAgaW5zdGVhZC5gXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgY29uc3QgY29tcGlsZXJPcHRpb25zID0gYXBwLmNvbmZpZy5jb21waWxlck9wdGlvbnM7XG4gICAgY29uc3QgbXNnID0gYFRoZSBcXGBjb21waWxlck9wdGlvbnNcXGAgY29uZmlnIG9wdGlvbiBpcyBvbmx5IHJlc3BlY3RlZCB3aGVuIHVzaW5nIGEgYnVpbGQgb2YgVnVlLmpzIHRoYXQgaW5jbHVkZXMgdGhlIHJ1bnRpbWUgY29tcGlsZXIgKGFrYSBcImZ1bGwgYnVpbGRcIikuIFNpbmNlIHlvdSBhcmUgdXNpbmcgdGhlIHJ1bnRpbWUtb25seSBidWlsZCwgXFxgY29tcGlsZXJPcHRpb25zXFxgIG11c3QgYmUgcGFzc2VkIHRvIFxcYEB2dWUvY29tcGlsZXItZG9tXFxgIGluIHRoZSBidWlsZCBzZXR1cCBpbnN0ZWFkLlxuLSBGb3IgdnVlLWxvYWRlcjogcGFzcyBpdCB2aWEgdnVlLWxvYWRlcidzIFxcYGNvbXBpbGVyT3B0aW9uc1xcYCBsb2FkZXIgb3B0aW9uLlxuLSBGb3IgdnVlLWNsaTogc2VlIGh0dHBzOi8vY2xpLnZ1ZWpzLm9yZy9ndWlkZS93ZWJwYWNrLmh0bWwjbW9kaWZ5aW5nLW9wdGlvbnMtb2YtYS1sb2FkZXJcbi0gRm9yIHZpdGU6IHBhc3MgaXQgdmlhIEB2aXRlanMvcGx1Z2luLXZ1ZSBvcHRpb25zLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3ZpdGVqcy92aXRlLXBsdWdpbi12dWUvdHJlZS9tYWluL3BhY2thZ2VzL3BsdWdpbi12dWUjZXhhbXBsZS1mb3ItcGFzc2luZy1vcHRpb25zLXRvLXZ1ZWNvbXBpbGVyLXNmY2A7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGFwcC5jb25maWcsIFwiY29tcGlsZXJPcHRpb25zXCIsIHtcbiAgICAgIGdldCgpIHtcbiAgICAgICAgd2Fybihtc2cpO1xuICAgICAgICByZXR1cm4gY29tcGlsZXJPcHRpb25zO1xuICAgICAgfSxcbiAgICAgIHNldCgpIHtcbiAgICAgICAgd2Fybihtc2cpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5mdW5jdGlvbiBub3JtYWxpemVDb250YWluZXIoY29udGFpbmVyKSB7XG4gIGlmIChpc1N0cmluZyhjb250YWluZXIpKSB7XG4gICAgY29uc3QgcmVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihjb250YWluZXIpO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgIXJlcykge1xuICAgICAgd2FybihcbiAgICAgICAgYEZhaWxlZCB0byBtb3VudCBhcHA6IG1vdW50IHRhcmdldCBzZWxlY3RvciBcIiR7Y29udGFpbmVyfVwiIHJldHVybmVkIG51bGwuYFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmIHdpbmRvdy5TaGFkb3dSb290ICYmIGNvbnRhaW5lciBpbnN0YW5jZW9mIHdpbmRvdy5TaGFkb3dSb290ICYmIGNvbnRhaW5lci5tb2RlID09PSBcImNsb3NlZFwiKSB7XG4gICAgd2FybihcbiAgICAgIGBtb3VudGluZyBvbiBhIFNoYWRvd1Jvb3Qgd2l0aCBcXGB7bW9kZTogXCJjbG9zZWRcIn1cXGAgbWF5IGxlYWQgdG8gdW5wcmVkaWN0YWJsZSBidWdzYFxuICAgICk7XG4gIH1cbiAgcmV0dXJuIGNvbnRhaW5lcjtcbn1cbmxldCBzc3JEaXJlY3RpdmVJbml0aWFsaXplZCA9IGZhbHNlO1xuY29uc3QgaW5pdERpcmVjdGl2ZXNGb3JTU1IgPSAoKSA9PiB7XG4gIGlmICghc3NyRGlyZWN0aXZlSW5pdGlhbGl6ZWQpIHtcbiAgICBzc3JEaXJlY3RpdmVJbml0aWFsaXplZCA9IHRydWU7XG4gICAgaW5pdFZNb2RlbEZvclNTUigpO1xuICAgIGluaXRWU2hvd0ZvclNTUigpO1xuICB9XG59IDtcblxuZXhwb3J0IHsgVHJhbnNpdGlvbiwgVHJhbnNpdGlvbkdyb3VwLCBWdWVFbGVtZW50LCBjcmVhdGVBcHAsIGNyZWF0ZVNTUkFwcCwgZGVmaW5lQ3VzdG9tRWxlbWVudCwgZGVmaW5lU1NSQ3VzdG9tRWxlbWVudCwgaHlkcmF0ZSwgaW5pdERpcmVjdGl2ZXNGb3JTU1IsIHJlbmRlciwgdXNlQ3NzTW9kdWxlLCB1c2VDc3NWYXJzLCB2TW9kZWxDaGVja2JveCwgdk1vZGVsRHluYW1pYywgdk1vZGVsUmFkaW8sIHZNb2RlbFNlbGVjdCwgdk1vZGVsVGV4dCwgdlNob3csIHdpdGhLZXlzLCB3aXRoTW9kaWZpZXJzIH07XG4iLCJmdW5jdGlvbiBtYWtlTWFwKHN0ciwgZXhwZWN0c0xvd2VyQ2FzZSkge1xuICBjb25zdCBtYXAgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgY29uc3QgbGlzdCA9IHN0ci5zcGxpdChcIixcIik7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIG1hcFtsaXN0W2ldXSA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIGV4cGVjdHNMb3dlckNhc2UgPyAodmFsKSA9PiAhIW1hcFt2YWwudG9Mb3dlckNhc2UoKV0gOiAodmFsKSA9PiAhIW1hcFt2YWxdO1xufVxuXG5jb25zdCBFTVBUWV9PQkogPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBPYmplY3QuZnJlZXplKHt9KSA6IHt9O1xuY29uc3QgRU1QVFlfQVJSID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gT2JqZWN0LmZyZWV6ZShbXSkgOiBbXTtcbmNvbnN0IE5PT1AgPSAoKSA9PiB7XG59O1xuY29uc3QgTk8gPSAoKSA9PiBmYWxzZTtcbmNvbnN0IG9uUkUgPSAvXm9uW15hLXpdLztcbmNvbnN0IGlzT24gPSAoa2V5KSA9PiBvblJFLnRlc3Qoa2V5KTtcbmNvbnN0IGlzTW9kZWxMaXN0ZW5lciA9IChrZXkpID0+IGtleS5zdGFydHNXaXRoKFwib25VcGRhdGU6XCIpO1xuY29uc3QgZXh0ZW5kID0gT2JqZWN0LmFzc2lnbjtcbmNvbnN0IHJlbW92ZSA9IChhcnIsIGVsKSA9PiB7XG4gIGNvbnN0IGkgPSBhcnIuaW5kZXhPZihlbCk7XG4gIGlmIChpID4gLTEpIHtcbiAgICBhcnIuc3BsaWNlKGksIDEpO1xuICB9XG59O1xuY29uc3QgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuY29uc3QgaGFzT3duID0gKHZhbCwga2V5KSA9PiBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbCwga2V5KTtcbmNvbnN0IGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuY29uc3QgaXNNYXAgPSAodmFsKSA9PiB0b1R5cGVTdHJpbmcodmFsKSA9PT0gXCJbb2JqZWN0IE1hcF1cIjtcbmNvbnN0IGlzU2V0ID0gKHZhbCkgPT4gdG9UeXBlU3RyaW5nKHZhbCkgPT09IFwiW29iamVjdCBTZXRdXCI7XG5jb25zdCBpc0RhdGUgPSAodmFsKSA9PiB0b1R5cGVTdHJpbmcodmFsKSA9PT0gXCJbb2JqZWN0IERhdGVdXCI7XG5jb25zdCBpc1JlZ0V4cCA9ICh2YWwpID0+IHRvVHlwZVN0cmluZyh2YWwpID09PSBcIltvYmplY3QgUmVnRXhwXVwiO1xuY29uc3QgaXNGdW5jdGlvbiA9ICh2YWwpID0+IHR5cGVvZiB2YWwgPT09IFwiZnVuY3Rpb25cIjtcbmNvbnN0IGlzU3RyaW5nID0gKHZhbCkgPT4gdHlwZW9mIHZhbCA9PT0gXCJzdHJpbmdcIjtcbmNvbnN0IGlzU3ltYm9sID0gKHZhbCkgPT4gdHlwZW9mIHZhbCA9PT0gXCJzeW1ib2xcIjtcbmNvbnN0IGlzT2JqZWN0ID0gKHZhbCkgPT4gdmFsICE9PSBudWxsICYmIHR5cGVvZiB2YWwgPT09IFwib2JqZWN0XCI7XG5jb25zdCBpc1Byb21pc2UgPSAodmFsKSA9PiB7XG4gIHJldHVybiBpc09iamVjdCh2YWwpICYmIGlzRnVuY3Rpb24odmFsLnRoZW4pICYmIGlzRnVuY3Rpb24odmFsLmNhdGNoKTtcbn07XG5jb25zdCBvYmplY3RUb1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5jb25zdCB0b1R5cGVTdHJpbmcgPSAodmFsdWUpID0+IG9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuY29uc3QgdG9SYXdUeXBlID0gKHZhbHVlKSA9PiB7XG4gIHJldHVybiB0b1R5cGVTdHJpbmcodmFsdWUpLnNsaWNlKDgsIC0xKTtcbn07XG5jb25zdCBpc1BsYWluT2JqZWN0ID0gKHZhbCkgPT4gdG9UeXBlU3RyaW5nKHZhbCkgPT09IFwiW29iamVjdCBPYmplY3RdXCI7XG5jb25zdCBpc0ludGVnZXJLZXkgPSAoa2V5KSA9PiBpc1N0cmluZyhrZXkpICYmIGtleSAhPT0gXCJOYU5cIiAmJiBrZXlbMF0gIT09IFwiLVwiICYmIFwiXCIgKyBwYXJzZUludChrZXksIDEwKSA9PT0ga2V5O1xuY29uc3QgaXNSZXNlcnZlZFByb3AgPSAvKiBAX19QVVJFX18gKi8gbWFrZU1hcChcbiAgLy8gdGhlIGxlYWRpbmcgY29tbWEgaXMgaW50ZW50aW9uYWwgc28gZW1wdHkgc3RyaW5nIFwiXCIgaXMgYWxzbyBpbmNsdWRlZFxuICBcIixrZXkscmVmLHJlZl9mb3IscmVmX2tleSxvblZub2RlQmVmb3JlTW91bnQsb25Wbm9kZU1vdW50ZWQsb25Wbm9kZUJlZm9yZVVwZGF0ZSxvblZub2RlVXBkYXRlZCxvblZub2RlQmVmb3JlVW5tb3VudCxvblZub2RlVW5tb3VudGVkXCJcbik7XG5jb25zdCBpc0J1aWx0SW5EaXJlY3RpdmUgPSAvKiBAX19QVVJFX18gKi8gbWFrZU1hcChcbiAgXCJiaW5kLGNsb2FrLGVsc2UtaWYsZWxzZSxmb3IsaHRtbCxpZixtb2RlbCxvbixvbmNlLHByZSxzaG93LHNsb3QsdGV4dCxtZW1vXCJcbik7XG5jb25zdCBjYWNoZVN0cmluZ0Z1bmN0aW9uID0gKGZuKSA9PiB7XG4gIGNvbnN0IGNhY2hlID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHJldHVybiAoc3RyKSA9PiB7XG4gICAgY29uc3QgaGl0ID0gY2FjaGVbc3RyXTtcbiAgICByZXR1cm4gaGl0IHx8IChjYWNoZVtzdHJdID0gZm4oc3RyKSk7XG4gIH07XG59O1xuY29uc3QgY2FtZWxpemVSRSA9IC8tKFxcdykvZztcbmNvbnN0IGNhbWVsaXplID0gY2FjaGVTdHJpbmdGdW5jdGlvbigoc3RyKSA9PiB7XG4gIHJldHVybiBzdHIucmVwbGFjZShjYW1lbGl6ZVJFLCAoXywgYykgPT4gYyA/IGMudG9VcHBlckNhc2UoKSA6IFwiXCIpO1xufSk7XG5jb25zdCBoeXBoZW5hdGVSRSA9IC9cXEIoW0EtWl0pL2c7XG5jb25zdCBoeXBoZW5hdGUgPSBjYWNoZVN0cmluZ0Z1bmN0aW9uKFxuICAoc3RyKSA9PiBzdHIucmVwbGFjZShoeXBoZW5hdGVSRSwgXCItJDFcIikudG9Mb3dlckNhc2UoKVxuKTtcbmNvbnN0IGNhcGl0YWxpemUgPSBjYWNoZVN0cmluZ0Z1bmN0aW9uKFxuICAoc3RyKSA9PiBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc2xpY2UoMSlcbik7XG5jb25zdCB0b0hhbmRsZXJLZXkgPSBjYWNoZVN0cmluZ0Z1bmN0aW9uKFxuICAoc3RyKSA9PiBzdHIgPyBgb24ke2NhcGl0YWxpemUoc3RyKX1gIDogYGBcbik7XG5jb25zdCBoYXNDaGFuZ2VkID0gKHZhbHVlLCBvbGRWYWx1ZSkgPT4gIU9iamVjdC5pcyh2YWx1ZSwgb2xkVmFsdWUpO1xuY29uc3QgaW52b2tlQXJyYXlGbnMgPSAoZm5zLCBhcmcpID0+IHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBmbnMubGVuZ3RoOyBpKyspIHtcbiAgICBmbnNbaV0oYXJnKTtcbiAgfVxufTtcbmNvbnN0IGRlZiA9IChvYmosIGtleSwgdmFsdWUpID0+IHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIHZhbHVlXG4gIH0pO1xufTtcbmNvbnN0IGxvb3NlVG9OdW1iZXIgPSAodmFsKSA9PiB7XG4gIGNvbnN0IG4gPSBwYXJzZUZsb2F0KHZhbCk7XG4gIHJldHVybiBpc05hTihuKSA/IHZhbCA6IG47XG59O1xuY29uc3QgdG9OdW1iZXIgPSAodmFsKSA9PiB7XG4gIGNvbnN0IG4gPSBpc1N0cmluZyh2YWwpID8gTnVtYmVyKHZhbCkgOiBOYU47XG4gIHJldHVybiBpc05hTihuKSA/IHZhbCA6IG47XG59O1xubGV0IF9nbG9iYWxUaGlzO1xuY29uc3QgZ2V0R2xvYmFsVGhpcyA9ICgpID0+IHtcbiAgcmV0dXJuIF9nbG9iYWxUaGlzIHx8IChfZ2xvYmFsVGhpcyA9IHR5cGVvZiBnbG9iYWxUaGlzICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsVGhpcyA6IHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDoge30pO1xufTtcbmNvbnN0IGlkZW50UkUgPSAvXltfJGEtekEtWlxceEEwLVxcdUZGRkZdW18kYS16QS1aMC05XFx4QTAtXFx1RkZGRl0qJC87XG5mdW5jdGlvbiBnZW5Qcm9wc0FjY2Vzc0V4cChuYW1lKSB7XG4gIHJldHVybiBpZGVudFJFLnRlc3QobmFtZSkgPyBgX19wcm9wcy4ke25hbWV9YCA6IGBfX3Byb3BzWyR7SlNPTi5zdHJpbmdpZnkobmFtZSl9XWA7XG59XG5cbmNvbnN0IFBhdGNoRmxhZ05hbWVzID0ge1xuICBbMV06IGBURVhUYCxcbiAgWzJdOiBgQ0xBU1NgLFxuICBbNF06IGBTVFlMRWAsXG4gIFs4XTogYFBST1BTYCxcbiAgWzE2XTogYEZVTExfUFJPUFNgLFxuICBbMzJdOiBgSFlEUkFURV9FVkVOVFNgLFxuICBbNjRdOiBgU1RBQkxFX0ZSQUdNRU5UYCxcbiAgWzEyOF06IGBLRVlFRF9GUkFHTUVOVGAsXG4gIFsyNTZdOiBgVU5LRVlFRF9GUkFHTUVOVGAsXG4gIFs1MTJdOiBgTkVFRF9QQVRDSGAsXG4gIFsxMDI0XTogYERZTkFNSUNfU0xPVFNgLFxuICBbMjA0OF06IGBERVZfUk9PVF9GUkFHTUVOVGAsXG4gIFstMV06IGBIT0lTVEVEYCxcbiAgWy0yXTogYEJBSUxgXG59O1xuXG5jb25zdCBzbG90RmxhZ3NUZXh0ID0ge1xuICBbMV06IFwiU1RBQkxFXCIsXG4gIFsyXTogXCJEWU5BTUlDXCIsXG4gIFszXTogXCJGT1JXQVJERURcIlxufTtcblxuY29uc3QgR0xPQkFMU19XSElURV9MSVNURUQgPSBcIkluZmluaXR5LHVuZGVmaW5lZCxOYU4saXNGaW5pdGUsaXNOYU4scGFyc2VGbG9hdCxwYXJzZUludCxkZWNvZGVVUkksZGVjb2RlVVJJQ29tcG9uZW50LGVuY29kZVVSSSxlbmNvZGVVUklDb21wb25lbnQsTWF0aCxOdW1iZXIsRGF0ZSxBcnJheSxPYmplY3QsQm9vbGVhbixTdHJpbmcsUmVnRXhwLE1hcCxTZXQsSlNPTixJbnRsLEJpZ0ludCxjb25zb2xlXCI7XG5jb25zdCBpc0dsb2JhbGx5V2hpdGVsaXN0ZWQgPSAvKiBAX19QVVJFX18gKi8gbWFrZU1hcChHTE9CQUxTX1dISVRFX0xJU1RFRCk7XG5cbmNvbnN0IHJhbmdlID0gMjtcbmZ1bmN0aW9uIGdlbmVyYXRlQ29kZUZyYW1lKHNvdXJjZSwgc3RhcnQgPSAwLCBlbmQgPSBzb3VyY2UubGVuZ3RoKSB7XG4gIGxldCBsaW5lcyA9IHNvdXJjZS5zcGxpdCgvKFxccj9cXG4pLyk7XG4gIGNvbnN0IG5ld2xpbmVTZXF1ZW5jZXMgPSBsaW5lcy5maWx0ZXIoKF8sIGlkeCkgPT4gaWR4ICUgMiA9PT0gMSk7XG4gIGxpbmVzID0gbGluZXMuZmlsdGVyKChfLCBpZHgpID0+IGlkeCAlIDIgPT09IDApO1xuICBsZXQgY291bnQgPSAwO1xuICBjb25zdCByZXMgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xuICAgIGNvdW50ICs9IGxpbmVzW2ldLmxlbmd0aCArIChuZXdsaW5lU2VxdWVuY2VzW2ldICYmIG5ld2xpbmVTZXF1ZW5jZXNbaV0ubGVuZ3RoIHx8IDApO1xuICAgIGlmIChjb3VudCA+PSBzdGFydCkge1xuICAgICAgZm9yIChsZXQgaiA9IGkgLSByYW5nZTsgaiA8PSBpICsgcmFuZ2UgfHwgZW5kID4gY291bnQ7IGorKykge1xuICAgICAgICBpZiAoaiA8IDAgfHwgaiA+PSBsaW5lcy5sZW5ndGgpXG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIGNvbnN0IGxpbmUgPSBqICsgMTtcbiAgICAgICAgcmVzLnB1c2goXG4gICAgICAgICAgYCR7bGluZX0ke1wiIFwiLnJlcGVhdChNYXRoLm1heCgzIC0gU3RyaW5nKGxpbmUpLmxlbmd0aCwgMCkpfXwgICR7bGluZXNbal19YFxuICAgICAgICApO1xuICAgICAgICBjb25zdCBsaW5lTGVuZ3RoID0gbGluZXNbal0ubGVuZ3RoO1xuICAgICAgICBjb25zdCBuZXdMaW5lU2VxTGVuZ3RoID0gbmV3bGluZVNlcXVlbmNlc1tqXSAmJiBuZXdsaW5lU2VxdWVuY2VzW2pdLmxlbmd0aCB8fCAwO1xuICAgICAgICBpZiAoaiA9PT0gaSkge1xuICAgICAgICAgIGNvbnN0IHBhZCA9IHN0YXJ0IC0gKGNvdW50IC0gKGxpbmVMZW5ndGggKyBuZXdMaW5lU2VxTGVuZ3RoKSk7XG4gICAgICAgICAgY29uc3QgbGVuZ3RoID0gTWF0aC5tYXgoXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgZW5kID4gY291bnQgPyBsaW5lTGVuZ3RoIC0gcGFkIDogZW5kIC0gc3RhcnRcbiAgICAgICAgICApO1xuICAgICAgICAgIHJlcy5wdXNoKGAgICB8ICBgICsgXCIgXCIucmVwZWF0KHBhZCkgKyBcIl5cIi5yZXBlYXQobGVuZ3RoKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaiA+IGkpIHtcbiAgICAgICAgICBpZiAoZW5kID4gY291bnQpIHtcbiAgICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IE1hdGgubWF4KE1hdGgubWluKGVuZCAtIGNvdW50LCBsaW5lTGVuZ3RoKSwgMSk7XG4gICAgICAgICAgICByZXMucHVzaChgICAgfCAgYCArIFwiXlwiLnJlcGVhdChsZW5ndGgpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY291bnQgKz0gbGluZUxlbmd0aCArIG5ld0xpbmVTZXFMZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzLmpvaW4oXCJcXG5cIik7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVN0eWxlKHZhbHVlKSB7XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIGNvbnN0IHJlcyA9IHt9O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGl0ZW0gPSB2YWx1ZVtpXTtcbiAgICAgIGNvbnN0IG5vcm1hbGl6ZWQgPSBpc1N0cmluZyhpdGVtKSA/IHBhcnNlU3RyaW5nU3R5bGUoaXRlbSkgOiBub3JtYWxpemVTdHlsZShpdGVtKTtcbiAgICAgIGlmIChub3JtYWxpemVkKSB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIG5vcm1hbGl6ZWQpIHtcbiAgICAgICAgICByZXNba2V5XSA9IG5vcm1hbGl6ZWRba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9IGVsc2UgaWYgKGlzU3RyaW5nKHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfSBlbHNlIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbn1cbmNvbnN0IGxpc3REZWxpbWl0ZXJSRSA9IC87KD8hW14oXSpcXCkpL2c7XG5jb25zdCBwcm9wZXJ0eURlbGltaXRlclJFID0gLzooW15dKykvO1xuY29uc3Qgc3R5bGVDb21tZW50UkUgPSBuZXcgUmVnRXhwKFwiXFxcXC9cXFxcKi4qP1xcXFwqXFxcXC9cIiwgXCJnc1wiKTtcbmZ1bmN0aW9uIHBhcnNlU3RyaW5nU3R5bGUoY3NzVGV4dCkge1xuICBjb25zdCByZXQgPSB7fTtcbiAgY3NzVGV4dC5yZXBsYWNlKHN0eWxlQ29tbWVudFJFLCBcIlwiKS5zcGxpdChsaXN0RGVsaW1pdGVyUkUpLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICBpZiAoaXRlbSkge1xuICAgICAgY29uc3QgdG1wID0gaXRlbS5zcGxpdChwcm9wZXJ0eURlbGltaXRlclJFKTtcbiAgICAgIHRtcC5sZW5ndGggPiAxICYmIChyZXRbdG1wWzBdLnRyaW0oKV0gPSB0bXBbMV0udHJpbSgpKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmV0O1xufVxuZnVuY3Rpb24gc3RyaW5naWZ5U3R5bGUoc3R5bGVzKSB7XG4gIGxldCByZXQgPSBcIlwiO1xuICBpZiAoIXN0eWxlcyB8fCBpc1N0cmluZyhzdHlsZXMpKSB7XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuICBmb3IgKGNvbnN0IGtleSBpbiBzdHlsZXMpIHtcbiAgICBjb25zdCB2YWx1ZSA9IHN0eWxlc1trZXldO1xuICAgIGNvbnN0IG5vcm1hbGl6ZWRLZXkgPSBrZXkuc3RhcnRzV2l0aChgLS1gKSA/IGtleSA6IGh5cGhlbmF0ZShrZXkpO1xuICAgIGlmIChpc1N0cmluZyh2YWx1ZSkgfHwgdHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiKSB7XG4gICAgICByZXQgKz0gYCR7bm9ybWFsaXplZEtleX06JHt2YWx1ZX07YDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZUNsYXNzKHZhbHVlKSB7XG4gIGxldCByZXMgPSBcIlwiO1xuICBpZiAoaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgcmVzID0gdmFsdWU7XG4gIH0gZWxzZSBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBub3JtYWxpemVkID0gbm9ybWFsaXplQ2xhc3ModmFsdWVbaV0pO1xuICAgICAgaWYgKG5vcm1hbGl6ZWQpIHtcbiAgICAgICAgcmVzICs9IG5vcm1hbGl6ZWQgKyBcIiBcIjtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgZm9yIChjb25zdCBuYW1lIGluIHZhbHVlKSB7XG4gICAgICBpZiAodmFsdWVbbmFtZV0pIHtcbiAgICAgICAgcmVzICs9IG5hbWUgKyBcIiBcIjtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlcy50cmltKCk7XG59XG5mdW5jdGlvbiBub3JtYWxpemVQcm9wcyhwcm9wcykge1xuICBpZiAoIXByb3BzKVxuICAgIHJldHVybiBudWxsO1xuICBsZXQgeyBjbGFzczoga2xhc3MsIHN0eWxlIH0gPSBwcm9wcztcbiAgaWYgKGtsYXNzICYmICFpc1N0cmluZyhrbGFzcykpIHtcbiAgICBwcm9wcy5jbGFzcyA9IG5vcm1hbGl6ZUNsYXNzKGtsYXNzKTtcbiAgfVxuICBpZiAoc3R5bGUpIHtcbiAgICBwcm9wcy5zdHlsZSA9IG5vcm1hbGl6ZVN0eWxlKHN0eWxlKTtcbiAgfVxuICByZXR1cm4gcHJvcHM7XG59XG5cbmNvbnN0IEhUTUxfVEFHUyA9IFwiaHRtbCxib2R5LGJhc2UsaGVhZCxsaW5rLG1ldGEsc3R5bGUsdGl0bGUsYWRkcmVzcyxhcnRpY2xlLGFzaWRlLGZvb3RlcixoZWFkZXIsaGdyb3VwLGgxLGgyLGgzLGg0LGg1LGg2LG5hdixzZWN0aW9uLGRpdixkZCxkbCxkdCxmaWdjYXB0aW9uLGZpZ3VyZSxwaWN0dXJlLGhyLGltZyxsaSxtYWluLG9sLHAscHJlLHVsLGEsYixhYmJyLGJkaSxiZG8sYnIsY2l0ZSxjb2RlLGRhdGEsZGZuLGVtLGksa2JkLG1hcmsscSxycCxydCxydWJ5LHMsc2FtcCxzbWFsbCxzcGFuLHN0cm9uZyxzdWIsc3VwLHRpbWUsdSx2YXIsd2JyLGFyZWEsYXVkaW8sbWFwLHRyYWNrLHZpZGVvLGVtYmVkLG9iamVjdCxwYXJhbSxzb3VyY2UsY2FudmFzLHNjcmlwdCxub3NjcmlwdCxkZWwsaW5zLGNhcHRpb24sY29sLGNvbGdyb3VwLHRhYmxlLHRoZWFkLHRib2R5LHRkLHRoLHRyLGJ1dHRvbixkYXRhbGlzdCxmaWVsZHNldCxmb3JtLGlucHV0LGxhYmVsLGxlZ2VuZCxtZXRlcixvcHRncm91cCxvcHRpb24sb3V0cHV0LHByb2dyZXNzLHNlbGVjdCx0ZXh0YXJlYSxkZXRhaWxzLGRpYWxvZyxtZW51LHN1bW1hcnksdGVtcGxhdGUsYmxvY2txdW90ZSxpZnJhbWUsdGZvb3RcIjtcbmNvbnN0IFNWR19UQUdTID0gXCJzdmcsYW5pbWF0ZSxhbmltYXRlTW90aW9uLGFuaW1hdGVUcmFuc2Zvcm0sY2lyY2xlLGNsaXBQYXRoLGNvbG9yLXByb2ZpbGUsZGVmcyxkZXNjLGRpc2NhcmQsZWxsaXBzZSxmZUJsZW5kLGZlQ29sb3JNYXRyaXgsZmVDb21wb25lbnRUcmFuc2ZlcixmZUNvbXBvc2l0ZSxmZUNvbnZvbHZlTWF0cml4LGZlRGlmZnVzZUxpZ2h0aW5nLGZlRGlzcGxhY2VtZW50TWFwLGZlRGlzdGFudExpZ2h0LGZlRHJvcFNoYWRvdyxmZUZsb29kLGZlRnVuY0EsZmVGdW5jQixmZUZ1bmNHLGZlRnVuY1IsZmVHYXVzc2lhbkJsdXIsZmVJbWFnZSxmZU1lcmdlLGZlTWVyZ2VOb2RlLGZlTW9ycGhvbG9neSxmZU9mZnNldCxmZVBvaW50TGlnaHQsZmVTcGVjdWxhckxpZ2h0aW5nLGZlU3BvdExpZ2h0LGZlVGlsZSxmZVR1cmJ1bGVuY2UsZmlsdGVyLGZvcmVpZ25PYmplY3QsZyxoYXRjaCxoYXRjaHBhdGgsaW1hZ2UsbGluZSxsaW5lYXJHcmFkaWVudCxtYXJrZXIsbWFzayxtZXNoLG1lc2hncmFkaWVudCxtZXNocGF0Y2gsbWVzaHJvdyxtZXRhZGF0YSxtcGF0aCxwYXRoLHBhdHRlcm4scG9seWdvbixwb2x5bGluZSxyYWRpYWxHcmFkaWVudCxyZWN0LHNldCxzb2xpZGNvbG9yLHN0b3Asc3dpdGNoLHN5bWJvbCx0ZXh0LHRleHRQYXRoLHRpdGxlLHRzcGFuLHVua25vd24sdXNlLHZpZXdcIjtcbmNvbnN0IFZPSURfVEFHUyA9IFwiYXJlYSxiYXNlLGJyLGNvbCxlbWJlZCxocixpbWcsaW5wdXQsbGluayxtZXRhLHBhcmFtLHNvdXJjZSx0cmFjayx3YnJcIjtcbmNvbnN0IGlzSFRNTFRhZyA9IC8qIEBfX1BVUkVfXyAqLyBtYWtlTWFwKEhUTUxfVEFHUyk7XG5jb25zdCBpc1NWR1RhZyA9IC8qIEBfX1BVUkVfXyAqLyBtYWtlTWFwKFNWR19UQUdTKTtcbmNvbnN0IGlzVm9pZFRhZyA9IC8qIEBfX1BVUkVfXyAqLyBtYWtlTWFwKFZPSURfVEFHUyk7XG5cbmNvbnN0IHNwZWNpYWxCb29sZWFuQXR0cnMgPSBgaXRlbXNjb3BlLGFsbG93ZnVsbHNjcmVlbixmb3Jtbm92YWxpZGF0ZSxpc21hcCxub21vZHVsZSxub3ZhbGlkYXRlLHJlYWRvbmx5YDtcbmNvbnN0IGlzU3BlY2lhbEJvb2xlYW5BdHRyID0gLyogQF9fUFVSRV9fICovIG1ha2VNYXAoc3BlY2lhbEJvb2xlYW5BdHRycyk7XG5jb25zdCBpc0Jvb2xlYW5BdHRyID0gLyogQF9fUFVSRV9fICovIG1ha2VNYXAoXG4gIHNwZWNpYWxCb29sZWFuQXR0cnMgKyBgLGFzeW5jLGF1dG9mb2N1cyxhdXRvcGxheSxjb250cm9scyxkZWZhdWx0LGRlZmVyLGRpc2FibGVkLGhpZGRlbixpbmVydCxsb29wLG9wZW4scmVxdWlyZWQscmV2ZXJzZWQsc2NvcGVkLHNlYW1sZXNzLGNoZWNrZWQsbXV0ZWQsbXVsdGlwbGUsc2VsZWN0ZWRgXG4pO1xuZnVuY3Rpb24gaW5jbHVkZUJvb2xlYW5BdHRyKHZhbHVlKSB7XG4gIHJldHVybiAhIXZhbHVlIHx8IHZhbHVlID09PSBcIlwiO1xufVxuY29uc3QgdW5zYWZlQXR0ckNoYXJSRSA9IC9bPi89XCInXFx1MDAwOVxcdTAwMGFcXHUwMDBjXFx1MDAyMF0vO1xuY29uc3QgYXR0clZhbGlkYXRpb25DYWNoZSA9IHt9O1xuZnVuY3Rpb24gaXNTU1JTYWZlQXR0ck5hbWUobmFtZSkge1xuICBpZiAoYXR0clZhbGlkYXRpb25DYWNoZS5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgIHJldHVybiBhdHRyVmFsaWRhdGlvbkNhY2hlW25hbWVdO1xuICB9XG4gIGNvbnN0IGlzVW5zYWZlID0gdW5zYWZlQXR0ckNoYXJSRS50ZXN0KG5hbWUpO1xuICBpZiAoaXNVbnNhZmUpIHtcbiAgICBjb25zb2xlLmVycm9yKGB1bnNhZmUgYXR0cmlidXRlIG5hbWU6ICR7bmFtZX1gKTtcbiAgfVxuICByZXR1cm4gYXR0clZhbGlkYXRpb25DYWNoZVtuYW1lXSA9ICFpc1Vuc2FmZTtcbn1cbmNvbnN0IHByb3BzVG9BdHRyTWFwID0ge1xuICBhY2NlcHRDaGFyc2V0OiBcImFjY2VwdC1jaGFyc2V0XCIsXG4gIGNsYXNzTmFtZTogXCJjbGFzc1wiLFxuICBodG1sRm9yOiBcImZvclwiLFxuICBodHRwRXF1aXY6IFwiaHR0cC1lcXVpdlwiXG59O1xuY29uc3QgaXNLbm93bkh0bWxBdHRyID0gLyogQF9fUFVSRV9fICovIG1ha2VNYXAoXG4gIGBhY2NlcHQsYWNjZXB0LWNoYXJzZXQsYWNjZXNza2V5LGFjdGlvbixhbGlnbixhbGxvdyxhbHQsYXN5bmMsYXV0b2NhcGl0YWxpemUsYXV0b2NvbXBsZXRlLGF1dG9mb2N1cyxhdXRvcGxheSxiYWNrZ3JvdW5kLGJnY29sb3IsYm9yZGVyLGJ1ZmZlcmVkLGNhcHR1cmUsY2hhbGxlbmdlLGNoYXJzZXQsY2hlY2tlZCxjaXRlLGNsYXNzLGNvZGUsY29kZWJhc2UsY29sb3IsY29scyxjb2xzcGFuLGNvbnRlbnQsY29udGVudGVkaXRhYmxlLGNvbnRleHRtZW51LGNvbnRyb2xzLGNvb3Jkcyxjcm9zc29yaWdpbixjc3AsZGF0YSxkYXRldGltZSxkZWNvZGluZyxkZWZhdWx0LGRlZmVyLGRpcixkaXJuYW1lLGRpc2FibGVkLGRvd25sb2FkLGRyYWdnYWJsZSxkcm9wem9uZSxlbmN0eXBlLGVudGVya2V5aGludCxmb3IsZm9ybSxmb3JtYWN0aW9uLGZvcm1lbmN0eXBlLGZvcm1tZXRob2QsZm9ybW5vdmFsaWRhdGUsZm9ybXRhcmdldCxoZWFkZXJzLGhlaWdodCxoaWRkZW4saGlnaCxocmVmLGhyZWZsYW5nLGh0dHAtZXF1aXYsaWNvbixpZCxpbXBvcnRhbmNlLGluZXJ0LGludGVncml0eSxpc21hcCxpdGVtcHJvcCxrZXl0eXBlLGtpbmQsbGFiZWwsbGFuZyxsYW5ndWFnZSxsb2FkaW5nLGxpc3QsbG9vcCxsb3csbWFuaWZlc3QsbWF4LG1heGxlbmd0aCxtaW5sZW5ndGgsbWVkaWEsbWluLG11bHRpcGxlLG11dGVkLG5hbWUsbm92YWxpZGF0ZSxvcGVuLG9wdGltdW0scGF0dGVybixwaW5nLHBsYWNlaG9sZGVyLHBvc3RlcixwcmVsb2FkLHJhZGlvZ3JvdXAscmVhZG9ubHkscmVmZXJyZXJwb2xpY3kscmVsLHJlcXVpcmVkLHJldmVyc2VkLHJvd3Mscm93c3BhbixzYW5kYm94LHNjb3BlLHNjb3BlZCxzZWxlY3RlZCxzaGFwZSxzaXplLHNpemVzLHNsb3Qsc3BhbixzcGVsbGNoZWNrLHNyYyxzcmNkb2Msc3JjbGFuZyxzcmNzZXQsc3RhcnQsc3RlcCxzdHlsZSxzdW1tYXJ5LHRhYmluZGV4LHRhcmdldCx0aXRsZSx0cmFuc2xhdGUsdHlwZSx1c2VtYXAsdmFsdWUsd2lkdGgsd3JhcGBcbik7XG5jb25zdCBpc0tub3duU3ZnQXR0ciA9IC8qIEBfX1BVUkVfXyAqLyBtYWtlTWFwKFxuICBgeG1sbnMsYWNjZW50LWhlaWdodCxhY2N1bXVsYXRlLGFkZGl0aXZlLGFsaWdubWVudC1iYXNlbGluZSxhbHBoYWJldGljLGFtcGxpdHVkZSxhcmFiaWMtZm9ybSxhc2NlbnQsYXR0cmlidXRlTmFtZSxhdHRyaWJ1dGVUeXBlLGF6aW11dGgsYmFzZUZyZXF1ZW5jeSxiYXNlbGluZS1zaGlmdCxiYXNlUHJvZmlsZSxiYm94LGJlZ2luLGJpYXMsYnksY2FsY01vZGUsY2FwLWhlaWdodCxjbGFzcyxjbGlwLGNsaXBQYXRoVW5pdHMsY2xpcC1wYXRoLGNsaXAtcnVsZSxjb2xvcixjb2xvci1pbnRlcnBvbGF0aW9uLGNvbG9yLWludGVycG9sYXRpb24tZmlsdGVycyxjb2xvci1wcm9maWxlLGNvbG9yLXJlbmRlcmluZyxjb250ZW50U2NyaXB0VHlwZSxjb250ZW50U3R5bGVUeXBlLGNyb3Nzb3JpZ2luLGN1cnNvcixjeCxjeSxkLGRlY2VsZXJhdGUsZGVzY2VudCxkaWZmdXNlQ29uc3RhbnQsZGlyZWN0aW9uLGRpc3BsYXksZGl2aXNvcixkb21pbmFudC1iYXNlbGluZSxkdXIsZHgsZHksZWRnZU1vZGUsZWxldmF0aW9uLGVuYWJsZS1iYWNrZ3JvdW5kLGVuZCxleHBvbmVudCxmaWxsLGZpbGwtb3BhY2l0eSxmaWxsLXJ1bGUsZmlsdGVyLGZpbHRlclJlcyxmaWx0ZXJVbml0cyxmbG9vZC1jb2xvcixmbG9vZC1vcGFjaXR5LGZvbnQtZmFtaWx5LGZvbnQtc2l6ZSxmb250LXNpemUtYWRqdXN0LGZvbnQtc3RyZXRjaCxmb250LXN0eWxlLGZvbnQtdmFyaWFudCxmb250LXdlaWdodCxmb3JtYXQsZnJvbSxmcixmeCxmeSxnMSxnMixnbHlwaC1uYW1lLGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwsZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwsZ2x5cGhSZWYsZ3JhZGllbnRUcmFuc2Zvcm0sZ3JhZGllbnRVbml0cyxoYW5naW5nLGhlaWdodCxocmVmLGhyZWZsYW5nLGhvcml6LWFkdi14LGhvcml6LW9yaWdpbi14LGlkLGlkZW9ncmFwaGljLGltYWdlLXJlbmRlcmluZyxpbixpbjIsaW50ZXJjZXB0LGssazEsazIsazMsazQsa2VybmVsTWF0cml4LGtlcm5lbFVuaXRMZW5ndGgsa2VybmluZyxrZXlQb2ludHMsa2V5U3BsaW5lcyxrZXlUaW1lcyxsYW5nLGxlbmd0aEFkanVzdCxsZXR0ZXItc3BhY2luZyxsaWdodGluZy1jb2xvcixsaW1pdGluZ0NvbmVBbmdsZSxsb2NhbCxtYXJrZXItZW5kLG1hcmtlci1taWQsbWFya2VyLXN0YXJ0LG1hcmtlckhlaWdodCxtYXJrZXJVbml0cyxtYXJrZXJXaWR0aCxtYXNrLG1hc2tDb250ZW50VW5pdHMsbWFza1VuaXRzLG1hdGhlbWF0aWNhbCxtYXgsbWVkaWEsbWV0aG9kLG1pbixtb2RlLG5hbWUsbnVtT2N0YXZlcyxvZmZzZXQsb3BhY2l0eSxvcGVyYXRvcixvcmRlcixvcmllbnQsb3JpZW50YXRpb24sb3JpZ2luLG92ZXJmbG93LG92ZXJsaW5lLXBvc2l0aW9uLG92ZXJsaW5lLXRoaWNrbmVzcyxwYW5vc2UtMSxwYWludC1vcmRlcixwYXRoLHBhdGhMZW5ndGgscGF0dGVybkNvbnRlbnRVbml0cyxwYXR0ZXJuVHJhbnNmb3JtLHBhdHRlcm5Vbml0cyxwaW5nLHBvaW50ZXItZXZlbnRzLHBvaW50cyxwb2ludHNBdFgscG9pbnRzQXRZLHBvaW50c0F0WixwcmVzZXJ2ZUFscGhhLHByZXNlcnZlQXNwZWN0UmF0aW8scHJpbWl0aXZlVW5pdHMscixyYWRpdXMscmVmZXJyZXJQb2xpY3kscmVmWCxyZWZZLHJlbCxyZW5kZXJpbmctaW50ZW50LHJlcGVhdENvdW50LHJlcGVhdER1cixyZXF1aXJlZEV4dGVuc2lvbnMscmVxdWlyZWRGZWF0dXJlcyxyZXN0YXJ0LHJlc3VsdCxyb3RhdGUscngscnksc2NhbGUsc2VlZCxzaGFwZS1yZW5kZXJpbmcsc2xvcGUsc3BhY2luZyxzcGVjdWxhckNvbnN0YW50LHNwZWN1bGFyRXhwb25lbnQsc3BlZWQsc3ByZWFkTWV0aG9kLHN0YXJ0T2Zmc2V0LHN0ZERldmlhdGlvbixzdGVtaCxzdGVtdixzdGl0Y2hUaWxlcyxzdG9wLWNvbG9yLHN0b3Atb3BhY2l0eSxzdHJpa2V0aHJvdWdoLXBvc2l0aW9uLHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzLHN0cmluZyxzdHJva2Usc3Ryb2tlLWRhc2hhcnJheSxzdHJva2UtZGFzaG9mZnNldCxzdHJva2UtbGluZWNhcCxzdHJva2UtbGluZWpvaW4sc3Ryb2tlLW1pdGVybGltaXQsc3Ryb2tlLW9wYWNpdHksc3Ryb2tlLXdpZHRoLHN0eWxlLHN1cmZhY2VTY2FsZSxzeXN0ZW1MYW5ndWFnZSx0YWJpbmRleCx0YWJsZVZhbHVlcyx0YXJnZXQsdGFyZ2V0WCx0YXJnZXRZLHRleHQtYW5jaG9yLHRleHQtZGVjb3JhdGlvbix0ZXh0LXJlbmRlcmluZyx0ZXh0TGVuZ3RoLHRvLHRyYW5zZm9ybSx0cmFuc2Zvcm0tb3JpZ2luLHR5cGUsdTEsdTIsdW5kZXJsaW5lLXBvc2l0aW9uLHVuZGVybGluZS10aGlja25lc3MsdW5pY29kZSx1bmljb2RlLWJpZGksdW5pY29kZS1yYW5nZSx1bml0cy1wZXItZW0sdi1hbHBoYWJldGljLHYtaGFuZ2luZyx2LWlkZW9ncmFwaGljLHYtbWF0aGVtYXRpY2FsLHZhbHVlcyx2ZWN0b3ItZWZmZWN0LHZlcnNpb24sdmVydC1hZHYteSx2ZXJ0LW9yaWdpbi14LHZlcnQtb3JpZ2luLXksdmlld0JveCx2aWV3VGFyZ2V0LHZpc2liaWxpdHksd2lkdGgsd2lkdGhzLHdvcmQtc3BhY2luZyx3cml0aW5nLW1vZGUseCx4LWhlaWdodCx4MSx4Mix4Q2hhbm5lbFNlbGVjdG9yLHhsaW5rOmFjdHVhdGUseGxpbms6YXJjcm9sZSx4bGluazpocmVmLHhsaW5rOnJvbGUseGxpbms6c2hvdyx4bGluazp0aXRsZSx4bGluazp0eXBlLHhtbDpiYXNlLHhtbDpsYW5nLHhtbDpzcGFjZSx5LHkxLHkyLHlDaGFubmVsU2VsZWN0b3Iseix6b29tQW5kUGFuYFxuKTtcblxuY29uc3QgZXNjYXBlUkUgPSAvW1wiJyY8Pl0vO1xuZnVuY3Rpb24gZXNjYXBlSHRtbChzdHJpbmcpIHtcbiAgY29uc3Qgc3RyID0gXCJcIiArIHN0cmluZztcbiAgY29uc3QgbWF0Y2ggPSBlc2NhcGVSRS5leGVjKHN0cik7XG4gIGlmICghbWF0Y2gpIHtcbiAgICByZXR1cm4gc3RyO1xuICB9XG4gIGxldCBodG1sID0gXCJcIjtcbiAgbGV0IGVzY2FwZWQ7XG4gIGxldCBpbmRleDtcbiAgbGV0IGxhc3RJbmRleCA9IDA7XG4gIGZvciAoaW5kZXggPSBtYXRjaC5pbmRleDsgaW5kZXggPCBzdHIubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgc3dpdGNoIChzdHIuY2hhckNvZGVBdChpbmRleCkpIHtcbiAgICAgIGNhc2UgMzQ6XG4gICAgICAgIGVzY2FwZWQgPSBcIiZxdW90O1wiO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMzg6XG4gICAgICAgIGVzY2FwZWQgPSBcIiZhbXA7XCI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzOTpcbiAgICAgICAgZXNjYXBlZCA9IFwiJiMzOTtcIjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDYwOlxuICAgICAgICBlc2NhcGVkID0gXCImbHQ7XCI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA2MjpcbiAgICAgICAgZXNjYXBlZCA9IFwiJmd0O1wiO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAobGFzdEluZGV4ICE9PSBpbmRleCkge1xuICAgICAgaHRtbCArPSBzdHIuc2xpY2UobGFzdEluZGV4LCBpbmRleCk7XG4gICAgfVxuICAgIGxhc3RJbmRleCA9IGluZGV4ICsgMTtcbiAgICBodG1sICs9IGVzY2FwZWQ7XG4gIH1cbiAgcmV0dXJuIGxhc3RJbmRleCAhPT0gaW5kZXggPyBodG1sICsgc3RyLnNsaWNlKGxhc3RJbmRleCwgaW5kZXgpIDogaHRtbDtcbn1cbmNvbnN0IGNvbW1lbnRTdHJpcFJFID0gL14tPz58PCEtLXwtLT58LS0hPnw8IS0kL2c7XG5mdW5jdGlvbiBlc2NhcGVIdG1sQ29tbWVudChzcmMpIHtcbiAgcmV0dXJuIHNyYy5yZXBsYWNlKGNvbW1lbnRTdHJpcFJFLCBcIlwiKTtcbn1cblxuZnVuY3Rpb24gbG9vc2VDb21wYXJlQXJyYXlzKGEsIGIpIHtcbiAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aClcbiAgICByZXR1cm4gZmFsc2U7XG4gIGxldCBlcXVhbCA9IHRydWU7XG4gIGZvciAobGV0IGkgPSAwOyBlcXVhbCAmJiBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgIGVxdWFsID0gbG9vc2VFcXVhbChhW2ldLCBiW2ldKTtcbiAgfVxuICByZXR1cm4gZXF1YWw7XG59XG5mdW5jdGlvbiBsb29zZUVxdWFsKGEsIGIpIHtcbiAgaWYgKGEgPT09IGIpXG4gICAgcmV0dXJuIHRydWU7XG4gIGxldCBhVmFsaWRUeXBlID0gaXNEYXRlKGEpO1xuICBsZXQgYlZhbGlkVHlwZSA9IGlzRGF0ZShiKTtcbiAgaWYgKGFWYWxpZFR5cGUgfHwgYlZhbGlkVHlwZSkge1xuICAgIHJldHVybiBhVmFsaWRUeXBlICYmIGJWYWxpZFR5cGUgPyBhLmdldFRpbWUoKSA9PT0gYi5nZXRUaW1lKCkgOiBmYWxzZTtcbiAgfVxuICBhVmFsaWRUeXBlID0gaXNTeW1ib2woYSk7XG4gIGJWYWxpZFR5cGUgPSBpc1N5bWJvbChiKTtcbiAgaWYgKGFWYWxpZFR5cGUgfHwgYlZhbGlkVHlwZSkge1xuICAgIHJldHVybiBhID09PSBiO1xuICB9XG4gIGFWYWxpZFR5cGUgPSBpc0FycmF5KGEpO1xuICBiVmFsaWRUeXBlID0gaXNBcnJheShiKTtcbiAgaWYgKGFWYWxpZFR5cGUgfHwgYlZhbGlkVHlwZSkge1xuICAgIHJldHVybiBhVmFsaWRUeXBlICYmIGJWYWxpZFR5cGUgPyBsb29zZUNvbXBhcmVBcnJheXMoYSwgYikgOiBmYWxzZTtcbiAgfVxuICBhVmFsaWRUeXBlID0gaXNPYmplY3QoYSk7XG4gIGJWYWxpZFR5cGUgPSBpc09iamVjdChiKTtcbiAgaWYgKGFWYWxpZFR5cGUgfHwgYlZhbGlkVHlwZSkge1xuICAgIGlmICghYVZhbGlkVHlwZSB8fCAhYlZhbGlkVHlwZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBhS2V5c0NvdW50ID0gT2JqZWN0LmtleXMoYSkubGVuZ3RoO1xuICAgIGNvbnN0IGJLZXlzQ291bnQgPSBPYmplY3Qua2V5cyhiKS5sZW5ndGg7XG4gICAgaWYgKGFLZXlzQ291bnQgIT09IGJLZXlzQ291bnQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBrZXkgaW4gYSkge1xuICAgICAgY29uc3QgYUhhc0tleSA9IGEuaGFzT3duUHJvcGVydHkoa2V5KTtcbiAgICAgIGNvbnN0IGJIYXNLZXkgPSBiLmhhc093blByb3BlcnR5KGtleSk7XG4gICAgICBpZiAoYUhhc0tleSAmJiAhYkhhc0tleSB8fCAhYUhhc0tleSAmJiBiSGFzS2V5IHx8ICFsb29zZUVxdWFsKGFba2V5XSwgYltrZXldKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBTdHJpbmcoYSkgPT09IFN0cmluZyhiKTtcbn1cbmZ1bmN0aW9uIGxvb3NlSW5kZXhPZihhcnIsIHZhbCkge1xuICByZXR1cm4gYXJyLmZpbmRJbmRleCgoaXRlbSkgPT4gbG9vc2VFcXVhbChpdGVtLCB2YWwpKTtcbn1cblxuY29uc3QgdG9EaXNwbGF5U3RyaW5nID0gKHZhbCkgPT4ge1xuICByZXR1cm4gaXNTdHJpbmcodmFsKSA/IHZhbCA6IHZhbCA9PSBudWxsID8gXCJcIiA6IGlzQXJyYXkodmFsKSB8fCBpc09iamVjdCh2YWwpICYmICh2YWwudG9TdHJpbmcgPT09IG9iamVjdFRvU3RyaW5nIHx8ICFpc0Z1bmN0aW9uKHZhbC50b1N0cmluZykpID8gSlNPTi5zdHJpbmdpZnkodmFsLCByZXBsYWNlciwgMikgOiBTdHJpbmcodmFsKTtcbn07XG5jb25zdCByZXBsYWNlciA9IChfa2V5LCB2YWwpID0+IHtcbiAgaWYgKHZhbCAmJiB2YWwuX192X2lzUmVmKSB7XG4gICAgcmV0dXJuIHJlcGxhY2VyKF9rZXksIHZhbC52YWx1ZSk7XG4gIH0gZWxzZSBpZiAoaXNNYXAodmFsKSkge1xuICAgIHJldHVybiB7XG4gICAgICBbYE1hcCgke3ZhbC5zaXplfSlgXTogWy4uLnZhbC5lbnRyaWVzKCldLnJlZHVjZSgoZW50cmllcywgW2tleSwgdmFsMl0pID0+IHtcbiAgICAgICAgZW50cmllc1tgJHtrZXl9ID0+YF0gPSB2YWwyO1xuICAgICAgICByZXR1cm4gZW50cmllcztcbiAgICAgIH0sIHt9KVxuICAgIH07XG4gIH0gZWxzZSBpZiAoaXNTZXQodmFsKSkge1xuICAgIHJldHVybiB7XG4gICAgICBbYFNldCgke3ZhbC5zaXplfSlgXTogWy4uLnZhbC52YWx1ZXMoKV1cbiAgICB9O1xuICB9IGVsc2UgaWYgKGlzT2JqZWN0KHZhbCkgJiYgIWlzQXJyYXkodmFsKSAmJiAhaXNQbGFpbk9iamVjdCh2YWwpKSB7XG4gICAgcmV0dXJuIFN0cmluZyh2YWwpO1xuICB9XG4gIHJldHVybiB2YWw7XG59O1xuXG5leHBvcnQgeyBFTVBUWV9BUlIsIEVNUFRZX09CSiwgTk8sIE5PT1AsIFBhdGNoRmxhZ05hbWVzLCBjYW1lbGl6ZSwgY2FwaXRhbGl6ZSwgZGVmLCBlc2NhcGVIdG1sLCBlc2NhcGVIdG1sQ29tbWVudCwgZXh0ZW5kLCBnZW5Qcm9wc0FjY2Vzc0V4cCwgZ2VuZXJhdGVDb2RlRnJhbWUsIGdldEdsb2JhbFRoaXMsIGhhc0NoYW5nZWQsIGhhc093biwgaHlwaGVuYXRlLCBpbmNsdWRlQm9vbGVhbkF0dHIsIGludm9rZUFycmF5Rm5zLCBpc0FycmF5LCBpc0Jvb2xlYW5BdHRyLCBpc0J1aWx0SW5EaXJlY3RpdmUsIGlzRGF0ZSwgaXNGdW5jdGlvbiwgaXNHbG9iYWxseVdoaXRlbGlzdGVkLCBpc0hUTUxUYWcsIGlzSW50ZWdlcktleSwgaXNLbm93bkh0bWxBdHRyLCBpc0tub3duU3ZnQXR0ciwgaXNNYXAsIGlzTW9kZWxMaXN0ZW5lciwgaXNPYmplY3QsIGlzT24sIGlzUGxhaW5PYmplY3QsIGlzUHJvbWlzZSwgaXNSZWdFeHAsIGlzUmVzZXJ2ZWRQcm9wLCBpc1NTUlNhZmVBdHRyTmFtZSwgaXNTVkdUYWcsIGlzU2V0LCBpc1NwZWNpYWxCb29sZWFuQXR0ciwgaXNTdHJpbmcsIGlzU3ltYm9sLCBpc1ZvaWRUYWcsIGxvb3NlRXF1YWwsIGxvb3NlSW5kZXhPZiwgbG9vc2VUb051bWJlciwgbWFrZU1hcCwgbm9ybWFsaXplQ2xhc3MsIG5vcm1hbGl6ZVByb3BzLCBub3JtYWxpemVTdHlsZSwgb2JqZWN0VG9TdHJpbmcsIHBhcnNlU3RyaW5nU3R5bGUsIHByb3BzVG9BdHRyTWFwLCByZW1vdmUsIHNsb3RGbGFnc1RleHQsIHN0cmluZ2lmeVN0eWxlLCB0b0Rpc3BsYXlTdHJpbmcsIHRvSGFuZGxlcktleSwgdG9OdW1iZXIsIHRvUmF3VHlwZSwgdG9UeXBlU3RyaW5nIH07XG4iLCI8dGVtcGxhdGU+XG4gIDxhc2lkZVxuICAgIGlkPVwiY2F0YWxvZ1wiXG4gICAgY2xhc3M9XCJmaWx0ZXJzXCJcbiAgPlxuICAgIDxkaXYgY2xhc3M9XCJmaWx0ZXJzX193cmFwcGVyXCI+XG4gICAgICA8aDIgY2xhc3M9XCJ2aXNpYWxseS1oaWRkZW5cIj5cbiAgICAgICAgRmlsdGVyc1xuICAgICAgPC9oMj5cbiAgICAgIDxkaXYgY2xhc3M9XCJmaWx0ZXJzX19idXR0b24td3JhcHBlclwiPlxuICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgY2xhc3M9XCJmaWx0ZXJzX19idXR0b24tZmlyc3RcIlxuICAgICAgICAgIEBjbGljaz1cImFwcGVhcmFuY2VBY29yZGlvblwiXG4gICAgICAgID5cbiAgICAgICAgICBGaWx0ZXJzXG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgICA8c2VsZWN0XG4gICAgICAgICAgdi1tb2RlbD1cInNvcnRpbmdcIlxuICAgICAgICAgIGNsYXNzPVwiZmlsdGVyc19fYnV0dG9uLXNlY29uZFwiXG4gICAgICAgICAgbmFtZT1cInNvcnRpbmdcIlxuICAgICAgICA+XG4gICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cInBvcHVsYXJcIj5cbiAgICAgICAgICAgIFBvcHVsYXJcbiAgICAgICAgICA8L29wdGlvbj5cbiAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiY2hlYXBcIj5cbiAgICAgICAgICAgIENoZWFwZXN0IGZpcnN0XG4gICAgICAgICAgPC9vcHRpb24+XG4gICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cImV4cGVuc2l2ZVwiPlxuICAgICAgICAgICAgRXhwZW5zaXZlIGZpcnN0XG4gICAgICAgICAgPC9vcHRpb24+XG4gICAgICAgIDwvc2VsZWN0PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2XG4gICAgICAgIDpjbGFzcz1cInsgJ2ZpbHRlcnNfX2FjY29yZGlvbi13cmFwcGVyJzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICdhY3RpdmUtYWNjb3JkaW9uJzogaXNGaWx0ZXJzQWNjb3JkaW9uSGlkZGVuIH1cIlxuICAgICAgPlxuICAgICAgICA8aDMgY2xhc3M9XCJmaWx0ZXJzX190aXRsZVwiPlxuICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgIDpjbGFzcz1cInsgJ2FjY29yZGlvbic6IHRydWUsICdhY3RpdmUnOiBmaWx0ZXJzQWNjb3JkaW9uU3RhdHVzLmNhdGVnb3JpZXMgfVwiXG4gICAgICAgICAgICBAY2xpY2s9XCJmaWx0ZXJzQWNjb3JkaW9uXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICBDYXRlZ29yaWVzXG4gICAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDwvaDM+XG4gICAgICAgIDx1bFxuICAgICAgICAgIDpjbGFzcz1cInsncGFuZWwgZmlsdGVyc19fbGlzdC1jYXRlZ29yaWVzJzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAnYWN0aXZlJzogZmlsdGVyc0FjY29yZGlvblN0YXR1cy5jYXRlZ29yaWVzLFxuICAgICAgICAgICAgICAgICAgICdmaWx0ZXJzX19saXN0LWNhdGVnb3JpZXMtLXNjcm9sbCBwYW5lbC0tc2Nyb2xsJzogaXNDYXRlZ29yaWVzU2Nyb2xsSGlkZGVuLFxuICAgICAgICAgIH1cIlxuICAgICAgICA+XG4gICAgICAgICAgPGxpXG4gICAgICAgICAgICB2LWZvcj1cIml0ZW0gaW4gY2F0ZWdvcmllc1wiXG4gICAgICAgICAgICA6a2V5PVwiaXRlbVwiXG4gICAgICAgICAgICBjbGFzcz1cImZpbHRlcnNfX2l0ZW1cIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICA6aWQ9XCJpdGVtXCJcbiAgICAgICAgICAgICAgY2xhc3M9XCJmaWx0ZXJzX19jaGVja2JveFwiXG4gICAgICAgICAgICAgIHR5cGU9XCJjaGVja2JveFwiXG4gICAgICAgICAgICAgIG5hbWU9XCJjYXRlZ29yaWVzXCJcbiAgICAgICAgICAgICAgOnZhbHVlPVwiaXRlbVwiXG4gICAgICAgICAgICAgIEBjaGFuZ2U9XCJmaWx0ZXJJdGVtc1wiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICA8bGFiZWxcbiAgICAgICAgICAgICAgY2xhc3M9XCJmaWx0ZXJzX19sYWJlbFwiXG4gICAgICAgICAgICAgIDpmb3I9XCJpdGVtXCJcbiAgICAgICAgICAgID57eyBpdGVtLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgaXRlbS5zbGljZSgxKSB9fTwvbGFiZWw+XG4gICAgICAgICAgPC9saT5cbiAgICAgICAgPC91bD5cbiAgICAgICAgPGgzIGNsYXNzPVwiZmlsdGVyc19fdGl0bGVcIj5cbiAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICA6Y2xhc3M9XCJ7ICdhY2NvcmRpb24nOiB0cnVlLCAnYWN0aXZlJzogZmlsdGVyc0FjY29yZGlvblN0YXR1cy5wcmljZSB9XCJcbiAgICAgICAgICAgIEBjbGljaz1cImZpbHRlcnNBY2NvcmRpb25cIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIFByaWNlXG4gICAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDwvaDM+XG4gICAgICAgIDx1bCA6Y2xhc3M9XCJ7ICdwYW5lbCBmaWx0ZXJzX19saXN0JzogdHJ1ZSwgJ2FjdGl2ZSc6IGZpbHRlcnNBY2NvcmRpb25TdGF0dXMucHJpY2UgfVwiPlxuICAgICAgICAgIDxsaVxuICAgICAgICAgICAgdi1mb3I9XCJpdGVtIGluIHByaWNlUmFuZ2VcIlxuICAgICAgICAgICAgOmtleT1cIml0ZW1cIlxuICAgICAgICAgICAgY2xhc3M9XCJmaWx0ZXJzX19pdGVtXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgOmlkPVwiaXRlbS5pZFwiXG4gICAgICAgICAgICAgIGNsYXNzPVwiZmlsdGVyc19fY2hlY2tib3hcIlxuICAgICAgICAgICAgICB0eXBlPVwiY2hlY2tib3hcIlxuICAgICAgICAgICAgICBuYW1lPVwicHJpY2VcIlxuICAgICAgICAgICAgICA6dmFsdWU9XCJpdGVtLmlkXCJcbiAgICAgICAgICAgICAgQGNoYW5nZT1cImZpbHRlckl0ZW1zXCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgIDxsYWJlbFxuICAgICAgICAgICAgICBjbGFzcz1cImZpbHRlcnNfX2xhYmVsXCJcbiAgICAgICAgICAgICAgOmZvcj1cIml0ZW0uaWRcIlxuICAgICAgICAgICAgPnt7IGl0ZW0ubmFtZSB9fTwvbGFiZWw+XG4gICAgICAgICAgPC9saT5cbiAgICAgICAgPC91bD5cbiAgICAgICAgPGgzIGNsYXNzPVwiZmlsdGVyc19fdGl0bGVcIj5cbiAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICA6Y2xhc3M9XCJ7ICdhY2NvcmRpb24nOiB0cnVlLCAnYWN0aXZlJzogZmlsdGVyc0FjY29yZGlvblN0YXR1cy5icmFuZHMgfVwiXG4gICAgICAgICAgICBAY2xpY2s9XCJmaWx0ZXJzQWNjb3JkaW9uXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICBCcmFuZHNcbiAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPC9oMz5cbiAgICAgICAgPHVsXG4gICAgICAgICAgOmNsYXNzPVwie1xuICAgICAgICAgICAgJ3BhbmVsIHBhbmVsLS1zY3JvbGwgZmlsdGVyc19fbGlzdC0tc2Nyb2xsJzogdHJ1ZSxcbiAgICAgICAgICAgICdhY3RpdmUnOiBmaWx0ZXJzQWNjb3JkaW9uU3RhdHVzLmJyYW5kc1xuICAgICAgICAgIH1cIlxuICAgICAgICA+XG4gICAgICAgICAgPGxpXG4gICAgICAgICAgICB2LWZvcj1cIml0ZW0gaW4gYnJhbmRzXCJcbiAgICAgICAgICAgIDprZXk9XCJpdGVtXCJcbiAgICAgICAgICAgIGNsYXNzPVwiZmlsdGVyc19faXRlbVwiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgIDppZD1cIml0ZW1cIlxuICAgICAgICAgICAgICBjbGFzcz1cImZpbHRlcnNfX2NoZWNrYm94XCJcbiAgICAgICAgICAgICAgdHlwZT1cImNoZWNrYm94XCJcbiAgICAgICAgICAgICAgbmFtZT1cImJyYW5kc1wiXG4gICAgICAgICAgICAgIDp2YWx1ZT1cIml0ZW1cIlxuICAgICAgICAgICAgICBAY2hhbmdlPVwiZmlsdGVySXRlbXNcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgPGxhYmVsXG4gICAgICAgICAgICAgIGNsYXNzPVwiZmlsdGVyc19fbGFiZWxcIlxuICAgICAgICAgICAgICA6Zm9yPVwiaXRlbVwiXG4gICAgICAgICAgICA+e3sgaXRlbSB9fTwvbGFiZWw+XG4gICAgICAgICAgPC9saT5cbiAgICAgICAgPC91bD5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2FzaWRlPlxuICA8c2VjdGlvbiBjbGFzcz1cInByb2R1Y3RzLWNhdGFsb2dcIj5cbiAgICA8aDIgY2xhc3M9XCJ2aXNpYWxseS1oaWRkZW5cIj5cbiAgICAgIFByb2R1Y3RzIGNhdGFsb2dcbiAgICA8L2gyPlxuICAgIDx1bCBjbGFzcz1cInByb2R1Y3RzLWNhdGFsb2dfX2xpc3RcIj5cbiAgICAgIDxsaVxuICAgICAgICB2LWZvcj1cIml0ZW0gaW4gcHJvZHVjdHNTb3J0ZWRcIlxuICAgICAgICA6a2V5PVwiaXRlbVwiXG4gICAgICAgIGNsYXNzPVwicHJvZHVjdHMtY2F0YWxvZ19faXRlbVwiXG4gICAgICA+XG4gICAgICAgIDxhXG4gICAgICAgICAgY2xhc3M9XCJwcm9kdWN0cy1jYXRhbG9nX19saW5rXCJcbiAgICAgICAgICBocmVmPVwiI1wiXG4gICAgICAgID5cbiAgICAgICAgICA8aW1nXG4gICAgICAgICAgICBjbGFzcz1cInByb2R1Y3RzLWNhdGFsb2dfX2ltYWdlXCJcbiAgICAgICAgICAgIDpzcmM9XCJpdGVtLmltYWdlc1swXVwiXG4gICAgICAgICAgICBhbHQ9XCJpbWFnZS1maXJzdFwiXG4gICAgICAgICAgPlxuICAgICAgICAgIDxoMyBjbGFzcz1cInByb2R1Y3RzLWNhdGFsb2dfX3RpdGxlXCI+e3sgaXRlbS50aXRsZSB9fTwvaDM+XG4gICAgICAgICAgPHAgY2xhc3M9XCJwcm9kdWN0cy1jYXRhbG9nX190ZXh0XCI+wqN7eyBpdGVtLnByaWNlIH19PC9wPlxuICAgICAgICA8L2E+XG4gICAgICA8L2xpPlxuICAgIDwvdWw+XG4gICAgPGRpdlxuICAgICAgdi1zaG93PVwiIWZpbHRlcnMubGVuZ3RoICYmICFpc0xvYWRNb3JlSGlkZGVuXCJcbiAgICAgIGNsYXNzPVwicHJvZHVjdHMtY2F0YWxvZ19fYnV0dG9uLWxpbmstd3JhcHBlclwiXG4gICAgPlxuICAgICAgPGFcbiAgICAgICAgY2xhc3M9XCJwcm9kdWN0cy1jYXRhbG9nX19idXR0b24tbGlua1wiXG4gICAgICAgIGhyZWY9XCIjXCJcbiAgICAgICAgQGNsaWNrLnByZXZlbnQ9XCJsb2FkaW5nUHJvZHVjdHNcIlxuICAgICAgPkxvYWQgbW9yZTwvYT5cbiAgICA8L2Rpdj5cbiAgPC9zZWN0aW9uPlxuPC90ZW1wbGF0ZT5cbjxzY3JpcHQ+XG5leHBvcnQgZGVmYXVsdCB7XG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxpbWl0OiAzMCxcbiAgICAgIGNvdW50ZXI6IDEsXG4gICAgICBwcm9kdWN0czogW10sXG4gICAgICBjYXRlZ29yaWVzOiBbXSxcbiAgICAgIGJyYW5kczogW10sXG4gICAgICBtYXhQcmljZTogMCxcbiAgICAgIHByadGBZXM6IFtdLFxuICAgICAgZmlsdGVyczogW10sXG4gICAgICBzZWxlY3RlZFByaWNlQ2F0ZWdvcnk6IFtdLFxuICAgICAgcHJpY2VGaWx0ZXJzOiBbXSxcbiAgICAgIHNvcnRpbmc6ICdwb3B1bGFyJyxcbiAgICAgIGlzTG9hZE1vcmVIaWRkZW46IGZhbHNlLFxuICAgICAgaXNGaWx0ZXJzQWNjb3JkaW9uSGlkZGVuOiBmYWxzZSxcbiAgICAgIGlzQ2F0ZWdvcmllc1Njcm9sbEhpZGRlbjogZmFsc2UsXG4gICAgICBmaWx0ZXJzQWNjb3JkaW9uU3RhdHVzOiB7XG4gICAgICAgIGNhdGVnb3JpZXM6IGZhbHNlLFxuICAgICAgICBwcmljZTogZmFsc2UsXG4gICAgICAgIGJyYW5kczogZmFsc2UsXG4gICAgICB9LFxuICAgIH07XG4gIH0sXG4gIGNvbXB1dGVkOiB7XG4gICAgb25lVGhpcmRQcmljZSgpIHtcbiAgICAgIHJldHVybiBNYXRoLmNlaWwodGhpcy5tYXhQcmljZSAvIDMpO1xuICAgIH0sXG4gICAgcHJpY2VSYW5nZSgpIHtcbiAgICAgIHJldHVybiBbe1xuICAgICAgICBpZDogMSxcbiAgICAgICAgbmFtZTogYDAgLSAke3RoaXMub25lVGhpcmRQcmljZX1gLFxuICAgICAgICBtaW5WYWx1ZTogMCxcbiAgICAgICAgbWF4VmFsdWU6IHRoaXMub25lVGhpcmRQcmljZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGlkOiAyLFxuICAgICAgICBuYW1lOiBgJHt0aGlzLm9uZVRoaXJkUHJpY2UgKyAxfSAtICR7dGhpcy5vbmVUaGlyZFByaWNlICogMn1gLFxuICAgICAgICBtaW5WYWx1ZTogdGhpcy5vbmVUaGlyZFByaWNlICsgMSxcbiAgICAgICAgbWF4VmFsdWU6IHRoaXMub25lVGhpcmRQcmljZSAqIDIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpZDogMyxcbiAgICAgICAgbmFtZTogYCR7dGhpcy5vbmVUaGlyZFByaWNlICogMiArIDF9IC0gJHt0aGlzLm1heFByaWNlfWAsXG4gICAgICAgIG1pblZhbHVlOiB0aGlzLm9uZVRoaXJkUHJpY2UgKiAyICsgMSxcbiAgICAgICAgbWF4VmFsdWU6IHRoaXMubWF4UHJpY2UsXG4gICAgICB9LFxuICAgICAgXTtcbiAgICB9LFxuICAgIHByb2R1Y3RzZmlsdGVyZWQoKSB7XG4gICAgICBpZiAoIXRoaXMuZmlsdGVycy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvZHVjdHM7XG4gICAgICB9XG4gICAgICBjb25zdCByZXNBcnIgPSBbXTtcbiAgICAgIHRoaXMucHJvZHVjdHMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICB0aGlzLmZpbHRlcnMuZm9yRWFjaCgoZmlsdGVyKSA9PiB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBmaWx0ZXIgPT09ICdzdHJpbmcnICYmIChmaWx0ZXIgPT09IGl0ZW0uYnJhbmQgfHwgZmlsdGVyID09PSBpdGVtLmNhdGVnb3J5KSAmJiAhcmVzQXJyLmluY2x1ZGVzKGl0ZW0pKSB7XG4gICAgICAgICAgICByZXNBcnIucHVzaChpdGVtKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHR5cGVvZiBmaWx0ZXIgIT09ICdzdHJpbmcnICYmICgoaXRlbS5wcmljZSA+PSBmaWx0ZXIubWluVmFsdWUgJiYgaXRlbS5wcmljZSA8PSBmaWx0ZXIubWF4VmFsdWUpICYmICFyZXNBcnIuaW5jbHVkZXMoaXRlbSkpKSB7XG4gICAgICAgICAgICByZXNBcnIucHVzaChpdGVtKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiByZXNBcnI7XG4gICAgfSxcbiAgICBwcm9kdWN0c1NvcnRlZCgpIHtcbiAgICAgIGNvbnN0IHNvcnRlZCA9IFsuLi50aGlzLnByb2R1Y3RzZmlsdGVyZWRdO1xuICAgICAgaWYgKHRoaXMuc29ydGluZyA9PT0gJ3BvcHVsYXInKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb2R1Y3RzZmlsdGVyZWQ7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnNvcnRpbmcgPT09ICdjaGVhcCcpIHtcbiAgICAgICAgcmV0dXJuIHNvcnRlZC5zb3J0KChhLCBiKSA9PiBhLnByaWNlIC0gYi5wcmljZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnNvcnRpbmcgPT09ICdleHBlbnNpdmUnKSB7XG4gICAgICAgIHJldHVybiBzb3J0ZWQuc29ydCgoYSwgYikgPT4gYi5wcmljZSAtIGEucHJpY2UpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG4gIH0sXG4gIGNyZWF0ZWQoKSB7XG4gICAgZmV0Y2goJ2h0dHBzOi8vZHVtbXlqc29uLmNvbS9wcm9kdWN0cycpXG4gICAgICAudGhlbigocmVzKSA9PiByZXMuanNvbigpKVxuICAgICAgLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICB0aGlzLnByb2R1Y3RzID0gcmVzLnByb2R1Y3RzO1xuICAgICAgICBjb25zb2xlLmxvZyhyZXMpO1xuICAgICAgICB0aGlzLmNyZWF0ZUZpbHRlcnMoKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goY29uc29sZS5sb2cpO1xuICB9LFxuICBtZXRob2RzOiB7XG4gICAgYXBwZWFyYW5jZUFjb3JkaW9uKCkge1xuICAgICAgdGhpcy5pc0ZpbHRlcnNBY2NvcmRpb25IaWRkZW4gPSAhdGhpcy5pc0ZpbHRlcnNBY2NvcmRpb25IaWRkZW47XG4gICAgfSxcbiAgICBmaWx0ZXJzQWNjb3JkaW9uKGV2ZW50KSB7XG4gICAgICBjb25zdCBmaWx0ZXJOYW1lID0gZXZlbnQudGFyZ2V0LmlubmVyVGV4dC50b0xvd2VyQ2FzZSgpO1xuICAgICAgdGhpcy5maWx0ZXJzQWNjb3JkaW9uU3RhdHVzW2ZpbHRlck5hbWVdID0gIXRoaXMuZmlsdGVyc0FjY29yZGlvblN0YXR1c1tmaWx0ZXJOYW1lXTtcbiAgICB9LFxuICAgIGNyZWF0ZUZpbHRlcnMoKSB7XG4gICAgICB0aGlzLnByb2R1Y3RzLmZvckVhY2goKHByb2R1Y3QpID0+IHtcbiAgICAgICAgaWYgKCF0aGlzLmNhdGVnb3JpZXMuaW5jbHVkZXMocHJvZHVjdC5jYXRlZ29yeSkpIHtcbiAgICAgICAgICB0aGlzLmNhdGVnb3JpZXMucHVzaChwcm9kdWN0LmNhdGVnb3J5KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuYnJhbmRzLmluY2x1ZGVzKHByb2R1Y3QuYnJhbmQpKSB7XG4gICAgICAgICAgdGhpcy5icmFuZHMucHVzaChwcm9kdWN0LmJyYW5kKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1heFByaWNlID0gcHJvZHVjdC5wcmljZSA+IHRoaXMubWF4UHJpY2UgPyBwcm9kdWN0LnByaWNlIDogdGhpcy5tYXhQcmljZTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZmlsdGVySXRlbXMoZXZlbnQpIHtcbiAgICAgIGlmIChldmVudC50YXJnZXQuY2hlY2tlZCkge1xuICAgICAgICBpZiAoZXZlbnQudGFyZ2V0Lm5hbWUgPT09ICdwcmljZScpIHtcbiAgICAgICAgICB0aGlzLmZpbHRlcnMucHVzaCh0aGlzLnByaWNlUmFuZ2UuZmluZCgocHJpY2UpID0+IHByaWNlLmlkID09PSArZXZlbnQudGFyZ2V0LnZhbHVlKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5maWx0ZXJzLnB1c2goZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5maWx0ZXJzID0gdGhpcy5maWx0ZXJzLmZpbHRlcigoaXRlbSkgPT4gKHR5cGVvZiBpdGVtID09PSAnc3RyaW5nJyAmJiBpdGVtICE9PSBldmVudC50YXJnZXQudmFsdWUpIHx8ICh0eXBlb2YgaXRlbSA9PT0gJ29iamVjdCcgJiYgaXRlbS5pZCAhPT0gK2V2ZW50LnRhcmdldC52YWx1ZSkpO1xuICAgICAgfVxuICAgIH0sXG4gICAgbG9hZGluZ1Byb2R1Y3RzKCkge1xuICAgICAgZmV0Y2goYGh0dHBzOi8vZHVtbXlqc29uLmNvbS9wcm9kdWN0cz9saW1pdD0ke3RoaXMubGltaXR9JnNraXA9JHt0aGlzLmNvdW50ZXIgKiB0aGlzLmxpbWl0fWApXG4gICAgICAgIC50aGVuKChyZXMpID0+IHJlcy5qc29uKCkpXG4gICAgICAgIC50aGVuKChyZXMpID0+IHtcbiAgICAgICAgICB0aGlzLmNvdW50ZXIgKz0gMTtcbiAgICAgICAgICB0aGlzLnByb2R1Y3RzID0gdGhpcy5wcm9kdWN0cy5jb25jYXQocmVzLnByb2R1Y3RzKTtcbiAgICAgICAgICB0aGlzLmNyZWF0ZUZpbHRlcnMoKTtcbiAgICAgICAgICB0aGlzLmlzQ2F0ZWdvcmllc1Njcm9sbEhpZGRlbiA9IHRydWU7XG4gICAgICAgICAgaWYgKHJlcy5saW1pdCA8IHRoaXMubGltaXQpIHtcbiAgICAgICAgICAgIHRoaXMuaXNMb2FkTW9yZUhpZGRlbiA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goY29uc29sZS5sb2cpO1xuICAgIH0sXG4gIH0sXG59O1xuPC9zY3JpcHQ+XG5cbjxzdHlsZSBsYW5nPVwic2Nzc1wiPlxuQGltcG9ydCBcIi4uL3N0eWxlcy9jb21wb25lbnRzL3ZhcmlhYmxlcy5zY3NzXCI7XG5cbi5maWx0ZXJzIHtcbiAgJl9fc29ydGluZyB7XG4gICAgbWFyZ2luLWJvdHRvbTogMjBweDtcbiAgfVxuXG4gICZfX2FjY29yZGlvbi13cmFwcGVyIHtcbiAgICBtYXJnaW4tYm90dG9tOiA1MHB4O1xuICB9XG5cbiAgJl9fbGlzdC0tc2Nyb2xsIHtcbiAgICB3aWR0aDogMjcwcHg7XG4gICAgbWF4LWhlaWdodDogMjUwcHg7XG4gICAgb3ZlcmZsb3cteTogc2Nyb2xsO1xuICB9XG5cbiAgJl9fbGlzdC1jYXRlZ29yaWVzIHtcbiAgICBtYXJnaW4tYm90dG9tOiA0OHB4O1xuICAgIG1heC1oZWlnaHQ6IDEzMHB4O1xuICB9XG5cbiAgJl9fbGlzdC1jYXRlZ29yaWVzLS1zY3JvbGwge1xuICAgIG92ZXJmbG93LXk6IHNjcm9sbDtcbiAgfVxuXG4gICZfX2J1dHRvbi1maXJzdCB7XG4gICAgZGlzcGxheTogbm9uZTtcbiAgfVxuXG4gICZfX2J1dHRvbi13cmFwcGVyIHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgfVxuXG4gICZfX2J1dHRvbi1zZWNvbmQge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICB3aWR0aDogMTIwcHg7XG4gICAgaGVpZ2h0OiA0MHB4O1xuICAgIG1hcmdpbi1ib3R0b206IDIwcHg7XG4gICAgZm9udC1mYW1pbHk6ICRmb250LXNlY29uZGFyeTtcbiAgICBmb250LXNpemU6IDE0cHg7XG4gICAgY29sb3I6ICRiYWNrZ3JvdW5kLXByaW1hcnk7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJGJhY2tncm91bmQtdGhpcmQ7XG4gICAgYm9yZGVyLXdpZHRoOiAwO1xuICAgIGFwcGVhcmFuY2U6IG5vbmU7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICB9XG5cbiAgJl9fYnV0dG9uLXNlY29uZDpub3QoW211bHRpcGxlXSkge1xuICAgIHBhZGRpbmctcmlnaHQ6IDVweDtcbiAgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xuICAgIGJhY2tncm91bmQtcG9zaXRpb246IDEwNXB4IDE2cHg7XG4gICAgYmFja2dyb3VuZC1zaXplOiAxMHB4IDEwcHg7XG4gICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiZGF0YTppbWFnZS9zdmcreG1sLCUzQ3N2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZpZXdCb3g9JzAgMCA4MCA4MCclM0UlM0NwYXRoIGQ9J003MC4zIDEzLjhMNDAgNjYuMyA5LjcgMTMuOHonIGZpbGw9JyUyMzAwMCclM0UlM0MvcGF0aCUzRSUzQy9zdmclM0VcIik7XG4gIH1cblxuICAmX19jaGVja2JveCB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHdpZHRoOiAwO1xuICAgIGhlaWdodDogMDtcbiAgICBvcGFjaXR5OiAwO1xuICB9XG5cbiAgJl9fbGFiZWwge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBwYWRkaW5nLWxlZnQ6IDI1cHg7XG4gICAgZm9udC1mYW1pbHk6ICRmb250LXNlY29uZGFyeTtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gIH1cblxuICAmX19sYWJlbDo6YmVmb3JlIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiA1MCU7XG4gICAgbGVmdDogMDtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICB3aWR0aDogMTZweDtcbiAgICBoZWlnaHQ6IDE2cHg7XG4gICAgbWFyZ2luLXRvcDogLTEwcHg7XG4gICAgY29udGVudDogJyc7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjZGNkY2RjO1xuICAgIGJvcmRlci1yYWRpdXM6IDJweDtcbiAgICBvcGFjaXR5OiAxO1xuICB9XG5cbiAgJl9fbGFiZWw6OmFmdGVyIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiAycHg7XG4gICAgbGVmdDogNXB4O1xuICAgIHdpZHRoOiA1cHg7XG4gICAgaGVpZ2h0OiAxMHB4O1xuICAgIGNvbnRlbnQ6ICcnO1xuICAgIGJvcmRlcjogc29saWQgI2ZmZjtcbiAgICBib3JkZXItd2lkdGg6IDAgMXB4IDFweCAwO1xuICAgIG9wYWNpdHk6IDA7XG4gICAgdHJhbnNmb3JtOiByb3RhdGUoNDVkZWcpO1xuICB9XG5cbiAgJl9fY2hlY2tib3g6Y2hlY2tlZCsmX19sYWJlbDo6YWZ0ZXIge1xuICAgIG9wYWNpdHk6IDE7XG4gIH1cblxuICAmX19jaGVja2JveDpjaGVja2VkKyZfX2xhYmVsOjpiZWZvcmUge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICM0ZTRkOTM7XG4gICAgb3BhY2l0eTogMTtcbiAgfVxufVxuXG4uanMtc3RyaW5nLWxpc3Qge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHdpZHRoOiAxMjBweDtcbiAgbWFyZ2luLWJvdHRvbTogMzVweDtcbiAgbWFyZ2luLWxlZnQ6IDk1cHg7XG4gIGJhY2tncm91bmQtY29sb3I6ICRiYWNrZ3JvdW5kLXRoaXJkO1xuICB0ZXh0LWFsaWduOiBzdGFydDtcbn1cblxuLmpzLWhpZGRlbiB7XG4gIGRpc3BsYXk6IG5vbmU7XG59XG5cbi5wcm9kdWN0cy1jYXRhbG9nX19saXN0IHtcbiAgbWFyZ2luLWJvdHRvbTogNDVweDtcbn1cblxuLmFjY29yZGlvbiB7XG4gIGNvbG9yOiAjMmEyNTRiO1xuICBmb250LWZhbWlseTogJGZvbnQtcHJpbWFyeTtcbiAgY3Vyc29yOiBkZWZhdWx0O1xufVxuXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjdweCkge1xuICAuZmlsdGVycyB7XG4gICAgJl9fYWNjb3JkaW9uLXdyYXBwZXIge1xuICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgIG1hcmdpbi1yaWdodDogNTBweDtcbiAgICB9XG5cbiAgICAmX19idXR0b24td3JhcHBlciB7XG4gICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgIG1hcmdpbi1yaWdodDogYXV0bztcbiAgICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xuICAgIH1cblxuICAgICZfX2J1dHRvbi1maXJzdCB7XG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgfVxuXG4gICAgJl9fc29ydGluZyB7XG4gICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgIG1hcmdpbi10b3A6IDIwcHg7XG4gICAgfVxuICB9XG5cbiAgLmFjY29yZGlvbiB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2VlZTtcbiAgICBjb2xvcjogIzJhMjU0YjtcbiAgICBmb250LWZhbWlseTogJGZvbnQtcHJpbWFyeTtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgcGFkZGluZzogMThweDtcbiAgICB3aWR0aDogMTAwJTtcbiAgICB0ZXh0LWFsaWduOiBsZWZ0O1xuICAgIGJvcmRlcjogbm9uZTtcbiAgICBvdXRsaW5lOiBub25lO1xuICAgIHRyYW5zaXRpb246IDAuNHM7XG4gIH1cblxuICAuYWNjb3JkaW9uLS1icmFuZHMge1xuICAgIHBhZGRpbmctdG9wOiAyMHB4O1xuICB9XG5cbiAgLmFjdGl2ZS1hY2NvcmRpb24ge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICB9XG5cbiAgLmFjdGl2ZSxcbiAgLmFjY29yZGlvbjpob3ZlciB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2NjYztcbiAgfVxuXG4gIC5wYW5lbCB7XG4gICAgcGFkZGluZzogMCAxOHB4IDIwcHg7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gICAgZGlzcGxheTogbm9uZTtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuXG4gICAgJi5hY3RpdmUge1xuICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgfVxuICB9XG5cbiAgLnBhbmVsLS1zY3JvbGwge1xuICAgIHBhZGRpbmc6IDAgMThweDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgICBkaXNwbGF5OiBub25lO1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgd2lkdGg6IDMwMHB4O1xuICAgIG1heC1oZWlnaHQ6IDI1MHB4O1xuICAgIG92ZXJmbG93LXk6IHNjcm9sbDtcbiAgfVxufVxuPC9zdHlsZT5cbiIsIjx0ZW1wbGF0ZT5cbiAgPGFcbiAgICBpZD1cInByb2R1Y3QtY291bnRcIlxuICAgIGNsYXNzPVwibGluay1pY29ucyB3cmFwcGVyX19jYXJ0LWxpbmtcIlxuICAgIGhyZWY9XCIjXCJcbiAgPlxuICAgIDxkaXZcbiAgICAgIHYtaWY9XCJjb3VudFZpc2libGVcIlxuICAgICAgY2xhc3M9XCJ3cmFwcGVyX19wcm9kdWN0LWNvdW50XCJcbiAgICA+XG4gICAgICB7eyBhZGRDb3VudCB9fVxuICAgIDwvZGl2PlxuICAgIDxzdmdcbiAgICAgIGNsYXNzPVwid3JhcHBlcl9fY2FydFwiXG4gICAgICB3aWR0aD1cIjE2XCJcbiAgICAgIGhlaWdodD1cIjE2XCJcbiAgICAgIHZpZXdib3g9XCIwIDAgMTYgMTZcIlxuICAgICAgZmlsbD1cIm5vbmVcIlxuICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICAgPlxuICAgICAgPHJlY3RcbiAgICAgICAgd2lkdGg9XCIxNlwiXG4gICAgICAgIGhlaWdodD1cIjE2XCJcbiAgICAgICAgZmlsbD1cIndoaXRlXCJcbiAgICAgICAgc3R5bGU9XCJtaXgtYmxlbmQtbW9kZTptdWx0aXBseVwiXG4gICAgICAvPlxuICAgICAgPHBhdGhcbiAgICAgICAgZD1cIk01IDE1LjAwMDFDNS41NTIyOCAxNS4wMDAxXG4gICAgICAgIDYgMTQuNTUyNCA2IDE0LjAwMDFDNiAxMy40NDc4IDUuNTUyMjggMTMuMDAwMVxuICAgICAgICA1IDEzLjAwMDFDNC40NDc3MiAxMy4wMDAxIDQgMTMuNDQ3OCA0IDE0LjAwMDFDNCAxNC41NTI0IDQuNDQ3NzIgMTUuMDAwMSA1IDE1LjAwMDFaXCJcbiAgICAgICAgZmlsbD1cImN1cnJlbnRDb2xvclwiXG4gICAgICAvPlxuICAgICAgPHBhdGhcbiAgICAgICAgZD1cIk0xMiAxNS4wMDAxQzEyLjU1MjMgMTUuMDAwMSAxMyAxNC41NTI0IDEzXG4gICAgICAgIDE0LjAwMDFDMTMgMTMuNDQ3OCAxMi41NTIzIDEzLjAwMDEgMTIgMTMuMDAwMUMxMS40NDc3XG4gICAgICAgIDEzLjAwMDEgMTEgMTMuNDQ3OCAxMSAxNC4wMDAxQzExIDE0LjU1MjQgMTEuNDQ3NyAxNS4wMDAxIDEyIDE1LjAwMDFaXCJcbiAgICAgICAgZmlsbD1cImN1cnJlbnRDb2xvclwiXG4gICAgICAvPlxuICAgICAgPHBhdGhcbiAgICAgICAgZD1cIk0xNCAzLjUwMDFIMi45MUwyLjUgMS40MDAxQzIuNDc2NjIgMS4yODU0NlxuICAgICAgICAyLjQxMzc5IDEuMTgyNjUgMi4zMjI0MyAxLjEwOTU3QzIuMjMxMDcgMS4wMzY0OCAyLjExNjk3XG4gICAgICAgIDAuOTk3NzQzIDIgMS4wMDAxSDBWMi4wMDAxSDEuNTlMMy41IDExLjYwMDFDMy41MjMzOCAxMS43MTQ3IDMuNTg2MjFcbiAgICAgICAgMTEuODE3NiAzLjY3NzU3IDExLjg5MDZDMy43Njg5MyAxMS45NjM3IDMuODgzMDMgMTIuMDAyNVxuICAgICAgICA0IDEyLjAwMDFIMTNWMTEuMDAwMUg0LjQxTDQgOS4wMDAxSDEzQzEzLjExNTYgOS4wMDI5MyAxMy4yMjg2IDguOTY1NjFcbiAgICAgICAgMTMuMzE5NyA4Ljg5NDVDMTMuNDEwOSA4LjgyMzM5IDEzLjQ3NDYgOC43MjI4OSAxMy41IDguNjEwMUwxNC41XG4gICAgICAgIDQuMTEwMUMxNC41MTY4IDQuMDM1OTEgMTQuNTE2NCAzLjk1ODg4IDE0LjQ5ODkgMy44ODQ4N0MxNC40ODE0XG4gICAgICAgIDMuODEwODUgMTQuNDQ3MiAzLjc0MTgxIDE0LjM5OSAzLjY4Mjk5QzE0LjM1MDggMy42MjQxNyAxNC4yODk4XG4gICAgICAgIDMuNTc3MTIgMTQuMjIwNiAzLjU0NTQzQzE0LjE1MTUgMy41MTM3MyAxNC4wNzYgMy40OTgyMyAxNCAzLjUwMDFaTTEyLjZcbiAgICAgICAgOC4wMDAxSDMuODFMMy4xMSA0LjUwMDFIMTMuMzc1TDEyLjYgOC4wMDAxWlwiXG4gICAgICAgIGZpbGw9XCJjdXJyZW50Q29sb3JcIlxuICAgICAgLz5cbiAgICA8L3N2Zz5cbiAgPC9hPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCB7IHVzZUNvdW50U3RvcmUgfSBmcm9tICcuL3N0b3JlJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBjb21wdXRlZDoge1xuICAgIGNvdW50VmlzaWJsZSgpIHtcbiAgICAgIGNvbnN0IGNvdW50U3RvcmUgPSB1c2VDb3VudFN0b3JlKCk7XG4gICAgICByZXR1cm4gY291bnRTdG9yZS5jb3VudFZpc2libGU7XG4gICAgfSxcbiAgICBhZGRDb3VudCgpIHtcbiAgICAgIGNvbnN0IGNvdW50U3RvcmUgPSB1c2VDb3VudFN0b3JlKCk7XG4gICAgICByZXR1cm4gY291bnRTdG9yZS5jb3VudEFkZDtcbiAgICB9LFxuICB9LFxufTtcbjwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz1cInNjc3NcIj5cbkBpbXBvcnQgXCIuLi9zdHlsZXMvY29tcG9uZW50cy92YXJpYWJsZXMuc2Nzc1wiO1xuLndyYXBwZXJfX3Byb2R1Y3QtY291bnQge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICByaWdodDogMTBweDtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICB3aWR0aDogMTdweDtcbiAgICBoZWlnaHQ6IDE3cHg7XG4gICAgcGFkZGluZzogMnB4IDJweDtcbiAgICBwYWRkaW5nLWxlZnQ6IDA7XG4gICAgZm9udC1zaXplOiAxMHB4O1xuICAgIGxpbmUtaGVpZ2h0OiAxMHB4O1xuICAgIGNvbG9yOiAkY29sb3ItcHJpbWFyeTtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJGJhY2tncm91bmQtcHJpbWFyeTtcbiAgICBib3JkZXI6IDJweCBzb2xpZCAkYmFja2dyb3VuZC1wcmltYXJ5O1xuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgfVxuXG48L3N0eWxlPlxuIiwiPHRlbXBsYXRlPlxuICA8c2VjdGlvblxuICAgIGNsYXNzPVwicHJvZHVjdC1kZXRhaWxzIGNvbnRhaW5lciBqcy1wcm9kdWN0LWRldGFpbHNcIlxuICA+XG4gICAgPGRpdiBjbGFzcz1cInByb2R1Y3QtZGV0YWlsc19fd3JhcHBlciBjb250YWluZXJfX2dyZXktd3JhcHBlclwiPlxuICAgICAgPGRpdiBjbGFzcz1cInByb2R1Y3QtZGV0YWlsc19faW1hZ2UtaW5uZXItd3JhcHBlclwiPlxuICAgICAgICA8aW1nXG4gICAgICAgICAgY2xhc3M9XCJwcm9kdWN0LWRldGFpbHNfX2ltYWdlXCJcbiAgICAgICAgICBzcmM9XCIuLi9pbWcvY29udGVudC1pbWFnZS9pbWFnZS1mb3VydGVlbi5wbmdcIlxuICAgICAgICAgIGFsdD1cImltYWdlLWZvdXJ0ZWVuXCJcbiAgICAgICAgPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwicHJvZHVjdC1kZXRhaWxzX19kZXNjcmlwdGlvbi1pbm5lci13cmFwcGVyXCI+XG4gICAgICAgIDxoMSBjbGFzcz1cInByb2R1Y3QtZGV0YWlsc19faGVhZGluZ1wiPlxuICAgICAgICAgIFRoZSBEYW5keSBDaGFpclxuICAgICAgICA8L2gxPlxuICAgICAgICA8cCBjbGFzcz1cInByb2R1Y3QtZGV0YWlsc19fcHJpY2UtdGV4dFwiPlxuICAgICAgICAgIMKjMjUwXG4gICAgICAgIDwvcD5cbiAgICAgICAgPGgyIGNsYXNzPVwicHJvZHVjdC1kZXRhaWxzX190aXRsZVwiPlxuICAgICAgICAgIFByb2R1Y3QgZGVzY3JpcHRpb25cbiAgICAgICAgPC9oMj5cbiAgICAgICAgPHBcbiAgICAgICAgICBjbGFzcz1cInByb2R1Y3QtZGV0YWlsc19fZGVzY3JpcHRpb24tdGV4dFwiXG4gICAgICAgID5cbiAgICAgICAgICBBIHRpbWVsZXNzIGRlc2lnbixcbiAgICAgICAgICB3aXRoIHByZW1pdW0gbWF0ZXJpYWxzIGZlYXR1cmVzIGFzIG9uZSBvZiBvdXIgbW9zdCBwb3B1bGFyIGFuZCBpY29uaWMgcGllY2VzLlxuICAgICAgICAgIFRoZSBkYW5keSBjaGFpciBpcyBwZXJmZWN0IGZvclxuICAgICAgICAgIGFueSBzdHlsaXNoIGxpdmluZyBzcGFjZSB3aXRoIGJlZWNoIGxlZ3MgYW5kIGxhbWJza2luIGxlYXRoZXIgdXBob2xzdGVyeS5cbiAgICAgICAgPC9wPlxuICAgICAgICA8aDIgY2xhc3M9XCJwcm9kdWN0LWRldGFpbHNfX3RpdGxlXCI+XG4gICAgICAgICAgRGltZW5zaW9uc1xuICAgICAgICA8L2gyPlxuICAgICAgICA8ZGl2IGNsYXNzPVwicHJvZHVjdC1kZXRhaWxzX190YWJsZS13cmFwcGVyXCI+XG4gICAgICAgICAgPGRsIGNsYXNzPVwicHJvZHVjdC1kZXRhaWxzX190YWJsZS1pbm5lci13cmFwcGVyXCI+XG4gICAgICAgICAgICA8ZHQgY2xhc3M9XCJwcm9kdWN0LWRldGFpbHNfX3RpdGxlLXRhYmxlXCI+XG4gICAgICAgICAgICAgIEhlaWdodFxuICAgICAgICAgICAgPC9kdD5cbiAgICAgICAgICAgIDxkZCBjbGFzcz1cInByb2R1Y3QtZGV0YWlsc19fdGV4dC10YWJsZVwiPlxuICAgICAgICAgICAgICAxMTBjbVxuICAgICAgICAgICAgPC9kZD5cbiAgICAgICAgICA8L2RsPlxuICAgICAgICAgIDxkbCBjbGFzcz1cInByb2R1Y3QtZGV0YWlsc19fdGFibGUtaW5uZXItd3JhcHBlclwiPlxuICAgICAgICAgICAgPGR0IGNsYXNzPVwicHJvZHVjdC1kZXRhaWxzX190aXRsZS10YWJsZVwiPlxuICAgICAgICAgICAgICBXaWR0aFxuICAgICAgICAgICAgPC9kdD5cbiAgICAgICAgICAgIDxkZCBjbGFzcz1cInByb2R1Y3QtZGV0YWlsc19fdGV4dC10YWJsZVwiPlxuICAgICAgICAgICAgICA3NWNtXG4gICAgICAgICAgICA8L2RkPlxuICAgICAgICAgIDwvZGw+XG4gICAgICAgICAgPGRsIGNsYXNzPVwicHJvZHVjdC1kZXRhaWxzX190YWJsZS1pbm5lci13cmFwcGVyXCI+XG4gICAgICAgICAgICA8ZHQgY2xhc3M9XCJwcm9kdWN0LWRldGFpbHNfX3RpdGxlLXRhYmxlXCI+XG4gICAgICAgICAgICAgIERlcHRoXG4gICAgICAgICAgICA8L2R0PlxuICAgICAgICAgICAgPGRkIGNsYXNzPVwicHJvZHVjdC1kZXRhaWxzX190ZXh0LXRhYmxlXCI+XG4gICAgICAgICAgICAgIDUwY21cbiAgICAgICAgICAgIDwvZGQ+XG4gICAgICAgICAgPC9kbD5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxmb3JtXG4gICAgICAgICAgYWN0aW9uPVwiXCJcbiAgICAgICAgICBtZXRob2Q9XCJHRVRcIlxuICAgICAgICA+XG4gICAgICAgICAgPGxhYmVsXG4gICAgICAgICAgICBjbGFzcz1cInByb2R1Y3QtZGV0YWlsc19fdGl0bGUtdGV4dFwiXG4gICAgICAgICAgICBmb3I9XCJwcm9kdWN0LXF1YW50aXR5XCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICBRdWFudGl0aXR5XG4gICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjbGFzcz1cInByb2R1Y3QtZGV0YWlsc19faW5wdXQtd3JhcHBlclwiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICBjbGFzcz1cInByb2R1Y3QtZGV0YWlsc19fbWludXNcIlxuICAgICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgICAgQGNsaWNrPVwiYWRkTWludXNcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAtXG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICBpZD1cInByb2R1Y3QtcXVhbnRpdHlcIlxuICAgICAgICAgICAgICBjbGFzcz1cInByb2R1Y3QtZGV0YWlsc19faW5wdXRcIlxuICAgICAgICAgICAgICB0eXBlPVwibnVtYmVyXCJcbiAgICAgICAgICAgICAgbmFtZT1cInByb2R1Y3QtcXVhbnRpdHlcIlxuICAgICAgICAgICAgICA6dmFsdWU9XCJjb3VudFwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgIGNsYXNzPVwicHJvZHVjdC1kZXRhaWxzX19wbHVzXCJcbiAgICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgICAgIEBjbGljaz1cImFkZFBsdXNcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICArXG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjbGFzcz1cInByb2R1Y3QtZGV0YWlsc19fYnV0dG9uLXdyYXBwZXJcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgY2xhc3M9XCJwcm9kdWN0LWRldGFpbHNfX2J1dHRvblwiXG4gICAgICAgICAgICAgIHR5cGU9XCJzdWJtaXRcIlxuICAgICAgICAgICAgICBAY2xpY2sucHJldmVudD1cImFkZENhcnRcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICBBZGQgdG8gY2FydFxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgIGNsYXNzPVwicHJvZHVjdC1kZXRhaWxzX19idXR0b24tbGluay13cmFwcGVyXCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPGFcbiAgICAgICAgICAgICAgICBjbGFzcz1cInByb2R1Y3QtZGV0YWlsc19fYnV0dG9uLWxpbmtcIlxuICAgICAgICAgICAgICAgIGhyZWY9XCIjXCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIFNhdmUgdG8gZmF2b3JpdGVzXG4gICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Zvcm0+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwicHJvZHVjdC1kZXRhaWxzX19tb2RhbFwiPlxuICAgICAgPGRpdiBjbGFzcz1cInByb2R1Y3QtZGV0YWlsc19fbW9kYWwtY29udGVudFwiPlxuICAgICAgICA8cCBjbGFzcz1cInByb2R1Y3QtZGV0YWlsc19fbW9kYWwtdGV4dFwiPlxuICAgICAgICAgIEFsbCBwcm9kdWN0cyBhZGRlZCB0byBjYXJ0XG4gICAgICAgIDwvcD5cbiAgICAgICAgPGRpdiBjbGFzcz1cInByb2R1Y3QtZGV0YWlsc19fbW9kYWwtd3JhcHBlclwiPlxuICAgICAgICAgIDxhXG4gICAgICAgICAgICBjbGFzcz1cInByb2R1Y3QtZGV0YWlscy1tb2RhbC1saW5rXCJcbiAgICAgICAgICAgIGhyZWY9XCIjXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwicHJvZHVjdC1kZXRhaWxzX19tb2RhbC1idXR0b24tbGlua1wiPlxuICAgICAgICAgICAgICBHbyB0byBjYXJ0XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICA8L2E+XG4gICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInByb2R1Y3QtZGV0YWlsc19fbW9kYWwtYnV0dG9uXCI+XG4gICAgICAgICAgICBTdGF5IG9uIHRoaXMgcGFnZVxuICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L3NlY3Rpb24+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgdXNlQ291bnRTdG9yZSB9IGZyb20gJy4vc3RvcmUnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvdW50OiAxLFxuICAgICAgaXNNb2RhbEFjdGl2ZTogZmFsc2UsXG4gICAgfTtcbiAgfSxcbiAgY29tcHV0ZWQ6IHtcbiAgICBsaW1pdGVkQ291bnRlcigpIHtcbiAgICAgIHJldHVybiBNYXRoLm1heCh0aGlzLmNvdW50LCAxKTtcbiAgICB9LFxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgYWRkUGx1cygpIHtcbiAgICAgIHRoaXMuY291bnQgKz0gMTtcbiAgICB9LFxuICAgIGFkZE1pbnVzKCkge1xuICAgICAgdGhpcy5jb3VudCAtPSAxO1xuICAgICAgdGhpcy5jb3VudCA9IHRoaXMubGltaXRlZENvdW50ZXI7XG4gICAgfSxcbiAgICBhZGRDYXJ0KCkge1xuICAgICAgY29uc3QgY291bnRTdG9yZSA9IHVzZUNvdW50U3RvcmUoKTtcbiAgICAgIGNvdW50U3RvcmUuYWRkQ291bnQodGhpcy5jb3VudCk7XG4gICAgfSxcbiAgfSxcbn07XG48L3NjcmlwdD5cblxuPHN0eWxlIGxhbmc9XCJzY3NzXCI+XG5AaW1wb3J0IFwiLi4vc3R5bGVzL2NvbXBvbmVudHMvdmFyaWFibGVzLnNjc3NcIjtcblxuLnByb2R1Y3QtZGV0YWlscyB7XG4gICZfX21vZGFsIHtcbiAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgdG9wOiAwO1xuICAgIGxlZnQ6IDA7XG4gICAgei1pbmRleDogLTE7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjUpO1xuICAgIG9wYWNpdHk6IDA7XG4gIH1cblxuICAmX19tb2RhbC1jb250ZW50IHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBtYXgtd2lkdGg6IDgwMHB4O1xuICAgIHBhZGRpbmc6IDIwcHg7XG4gICAgbWFyZ2luOiBhdXRvO1xuICAgIG1hcmdpbi10b3A6IDIwJTtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xuICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJGJhY2tncm91bmQtdGhpcmQ7XG4gICAgYm9yZGVyOiAxcHggc29saWQgIzg4ODtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7XG4gIH1cblxuICAmX19tb2RhbC10ZXh0IHtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIH1cblxuICAmX19tb2RhbC13cmFwcGVyIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICBtYXJnaW4tdG9wOiAyMHB4O1xuICB9XG5cbiAgJl9fbW9kYWwtYnV0dG9uLWxpbmsge1xuICAgIHdpZHRoOiAxMjBweDtcbiAgICBoZWlnaHQ6IDUwcHg7XG4gICAgbWFyZ2luLXJpZ2h0OiAxNnB4O1xuICAgIGZvbnQtZmFtaWx5OiAkZm9udC1zZWNvbmRhcnk7XG4gICAgY29sb3I6ICRjb2xvci1wcmltYXJ5O1xuICAgIGJhY2tncm91bmQtY29sb3I6ICRiYWNrZ3JvdW5kLXByaW1hcnk7XG4gIH1cblxuICAmX19tb2RhbC1idXR0b24ge1xuICAgIHdpZHRoOiAxNTVweDtcbiAgICBoZWlnaHQ6IDUwcHg7XG4gICAgZm9udC1mYW1pbHk6ICRmb250LXNlY29uZGFyeTtcbiAgICBjb2xvcjogJGJhY2tncm91bmQtcHJpbWFyeTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY29sb3ItcHJpbWFyeTtcbiAgfVxuXG4gIC5qcy1tb2RhbC1hY3RpdmUge1xuICB6LWluZGV4OiA0O1xufVxuXG4uanMtbW9kYWwtYWN0aXZlLWFuaW1hdGlvbiB7XG4gIGFuaW1hdGlvbjogbW9kYWxGYWRlSW4gMC41cyBlYXNlIGZvcndhcmRzO1xufVxuXG5Aa2V5ZnJhbWVzIG1vZGFsRmFkZUluIHtcbiAgMCUge1xuICAgIG9wYWNpdHk6IDA7XG4gIH1cblxuICAxMDAlIHtcbiAgICBvcGFjaXR5OiAxO1xuICB9XG59XG59XG48L3N0eWxlPlxuIiwiJCgnLmpzLWhhbWJ1cmdlci1saW5rJykuY2xpY2soKGV2ZW50KSA9PiB7XG4gIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICQoJyNoZWFkZXInKS50b2dnbGVDbGFzcygnanMtaGVhZGVyLS1zaG93LW1lbnUnKS5yZW1vdmVDbGFzcygnanMtaGVhZGVyLS1zaG93LXNlYXJjaCcpO1xufSk7XG5cbiQoJy5qcy1zZWFyY2gtbGluaycpLmNsaWNrKChldmVudCkgPT4ge1xuICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAkKCcjaGVhZGVyJykudG9nZ2xlQ2xhc3MoJ2pzLWhlYWRlci0tc2hvdy1zZWFyY2gnKS5yZW1vdmVDbGFzcygnanMtaGVhZGVyLS1zaG93LW1lbnUnKTtcbn0pO1xuIiwiJCgnLmluZm8tYmFubmVyX19jbG9zZS1idXR0b24tbGluaycpLmNsaWNrKCgpID0+IHtcbiAgJCgnLmluZm8tYmFubmVyJykuZmFkZU91dCgyMDAwKTtcbiAgJCgnI2hlYWRlcicpLmFkZENsYXNzKCdoZWFkZXItYW5pbWF0aW9uJyk7XG4gIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdpbmZvQmFubmVyQ2xvc2VkJywgJ3RydWUnKTtcbn0pO1xuIiwiaW1wb3J0IHsgZGVmaW5lU3RvcmUgfSBmcm9tICdwaW5pYSc7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvcHJlZmVyLWRlZmF1bHQtZXhwb3J0XG5leHBvcnQgY29uc3QgdXNlQ291bnRTdG9yZSA9IGRlZmluZVN0b3JlKCdDb3VudFN0b3JlJywge1xuICBzdGF0ZTogKCkgPT4gKHtcbiAgICBjb3VudFZpc2libGU6IGZhbHNlLFxuICAgIGNvdW50QWRkOiAwLFxuICB9KSxcbiAgYWN0aW9uczoge1xuICAgIGFkZENvdW50KHZhbHVlKSB7XG4gICAgICB0aGlzLmNvdW50VmlzaWJsZSA9IHRydWU7XG4gICAgICB0aGlzLmNvdW50QWRkICs9IE51bWJlcih2YWx1ZSk7XG4gICAgfSxcblxuICB9LFxufSk7XG4iLCJjb25zdCBmb3JtU3Vic2NyaXB0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmpzLXN1YnNjcmlwdGlvbi1mb3JtJyk7XG5cbmZvcm1TdWJzY3JpcHRpb24uZm9yRWFjaCgoZWxlbSkgPT4ge1xuICBlbGVtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIChldmVudCkgPT4ge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgY29uc3QgYnV0dG9uU3Vic2NyaXB0aW9uID0gZXZlbnQudGFyZ2V0LnF1ZXJ5U2VsZWN0b3JBbGwoJy5qcy1zdWJzY3JpcHRpb24tYnV0dG9uJyk7XG4gICAgYnV0dG9uU3Vic2NyaXB0aW9uLmZvckVhY2goKGVsKSA9PiB7XG4gICAgICBjb25zdCBidG50ZXh0ID0gZWwudGV4dENvbnRlbnQ7XG4gICAgICBlbC50ZXh0Q29udGVudCA9ICcnO1xuICAgICAgZWwuaW5uZXJIVE1MICs9ICc8aSBjbGFzcz1cImZhIGZhLXNwaW5uZXIgZmEtc3BpblwiLz4nO1xuICAgICAgZWwuZGlzYWJsZWQgPSB0cnVlO1xuXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgZWwudGV4dENvbnRlbnQgPSBidG50ZXh0O1xuICAgICAgICBlbC5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICBlbGVtLmlubmVySFRNTCArPSAnPGRpdiBjbGFzcz1cIndpbmRvd1wiPtCh0L/QsNGB0LjQsdC+INC30LAg0LfQsNGP0LLQutGDPC9kaXY+JztcbiAgICAgIH0sIDEwMDAwKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyA9IG5ldyBVUkwoXCJkYXRhOmltYWdlL3N2Zyt4bWwsJTNDc3ZnIHhtbG5zPSUyN2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJTI3IHZpZXdCb3g9JTI3MCAwIDgwIDgwJTI3JTNFJTNDcGF0aCBkPSUyN003MC4zIDEzLjhMNDAgNjYuMyA5LjcgMTMuOHolMjcgZmlsbD0lMjclMjMwMDAlMjclM0UlM0MvcGF0aCUzRSUzQy9zdmclM0VcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuZmlsdGVyc19fc29ydGluZyB7XFxuICBtYXJnaW4tYm90dG9tOiAyMHB4O1xcbn1cXG4uZmlsdGVyc19fYWNjb3JkaW9uLXdyYXBwZXIge1xcbiAgbWFyZ2luLWJvdHRvbTogNTBweDtcXG59XFxuLmZpbHRlcnNfX2xpc3QtLXNjcm9sbCB7XFxuICB3aWR0aDogMjcwcHg7XFxuICBtYXgtaGVpZ2h0OiAyNTBweDtcXG4gIG92ZXJmbG93LXk6IHNjcm9sbDtcXG59XFxuLmZpbHRlcnNfX2xpc3QtY2F0ZWdvcmllcyB7XFxuICBtYXJnaW4tYm90dG9tOiA0OHB4O1xcbiAgbWF4LWhlaWdodDogMTMwcHg7XFxufVxcbi5maWx0ZXJzX19saXN0LWNhdGVnb3JpZXMtLXNjcm9sbCB7XFxuICBvdmVyZmxvdy15OiBzY3JvbGw7XFxufVxcbi5maWx0ZXJzX19idXR0b24tZmlyc3Qge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuLmZpbHRlcnNfX2J1dHRvbi13cmFwcGVyIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbn1cXG4uZmlsdGVyc19fYnV0dG9uLXNlY29uZCB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB3aWR0aDogMTIwcHg7XFxuICBoZWlnaHQ6IDQwcHg7XFxuICBtYXJnaW4tYm90dG9tOiAyMHB4O1xcbiAgZm9udC1mYW1pbHk6IFxcXCJTYXRvc2hpXFxcIjtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG4gIGNvbG9yOiAjMmEyNTRiO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Y5ZjlmOTtcXG4gIGJvcmRlci13aWR0aDogMDtcXG4gIGFwcGVhcmFuY2U6IG5vbmU7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcbi5maWx0ZXJzX19idXR0b24tc2Vjb25kOm5vdChbbXVsdGlwbGVdKSB7XFxuICBwYWRkaW5nLXJpZ2h0OiA1cHg7XFxuICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogMTA1cHggMTZweDtcXG4gIGJhY2tncm91bmQtc2l6ZTogMTBweCAxMHB4O1xcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyArIFwiKTtcXG59XFxuLmZpbHRlcnNfX2NoZWNrYm94IHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHdpZHRoOiAwO1xcbiAgaGVpZ2h0OiAwO1xcbiAgb3BhY2l0eTogMDtcXG59XFxuLmZpbHRlcnNfX2xhYmVsIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgcGFkZGluZy1sZWZ0OiAyNXB4O1xcbiAgZm9udC1mYW1pbHk6IFxcXCJTYXRvc2hpXFxcIjtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuLmZpbHRlcnNfX2xhYmVsOjpiZWZvcmUge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiA1MCU7XFxuICBsZWZ0OiAwO1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICB3aWR0aDogMTZweDtcXG4gIGhlaWdodDogMTZweDtcXG4gIG1hcmdpbi10b3A6IC0xMHB4O1xcbiAgY29udGVudDogXFxcIlxcXCI7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcbiAgYm9yZGVyOiAxcHggc29saWQgI2RjZGNkYztcXG4gIGJvcmRlci1yYWRpdXM6IDJweDtcXG4gIG9wYWNpdHk6IDE7XFxufVxcbi5maWx0ZXJzX19sYWJlbDo6YWZ0ZXIge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiAycHg7XFxuICBsZWZ0OiA1cHg7XFxuICB3aWR0aDogNXB4O1xcbiAgaGVpZ2h0OiAxMHB4O1xcbiAgY29udGVudDogXFxcIlxcXCI7XFxuICBib3JkZXI6IHNvbGlkICNmZmY7XFxuICBib3JkZXItd2lkdGg6IDAgMXB4IDFweCAwO1xcbiAgb3BhY2l0eTogMDtcXG4gIHRyYW5zZm9ybTogcm90YXRlKDQ1ZGVnKTtcXG59XFxuLmZpbHRlcnNfX2NoZWNrYm94OmNoZWNrZWQgKyAuZmlsdGVyc19fbGFiZWw6OmFmdGVyIHtcXG4gIG9wYWNpdHk6IDE7XFxufVxcbi5maWx0ZXJzX19jaGVja2JveDpjaGVja2VkICsgLmZpbHRlcnNfX2xhYmVsOjpiZWZvcmUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzRlNGQ5MztcXG4gIG9wYWNpdHk6IDE7XFxufVxcbi5qcy1zdHJpbmctbGlzdCB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB3aWR0aDogMTIwcHg7XFxuICBtYXJnaW4tYm90dG9tOiAzNXB4O1xcbiAgbWFyZ2luLWxlZnQ6IDk1cHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjlmOWY5O1xcbiAgdGV4dC1hbGlnbjogc3RhcnQ7XFxufVxcbi5qcy1oaWRkZW4ge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuLnByb2R1Y3RzLWNhdGFsb2dfX2xpc3Qge1xcbiAgbWFyZ2luLWJvdHRvbTogNDVweDtcXG59XFxuLmFjY29yZGlvbiB7XFxuICBjb2xvcjogIzJhMjU0YjtcXG4gIGZvbnQtZmFtaWx5OiBcXFwiQ2xhc2ggRGlzcGxheVxcXCI7XFxuICBjdXJzb3I6IGRlZmF1bHQ7XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2N3B4KSB7XFxuLmZpbHRlcnNfX2FjY29yZGlvbi13cmFwcGVyIHtcXG4gICAgZGlzcGxheTogbm9uZTtcXG4gICAgbWFyZ2luLXJpZ2h0OiA1MHB4O1xcbn1cXG4uZmlsdGVyc19fYnV0dG9uLXdyYXBwZXIge1xcbiAgICBkaXNwbGF5OiBibG9jaztcXG4gICAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xcbiAgICBtYXJnaW4tbGVmdDogYXV0bztcXG59XFxuLmZpbHRlcnNfX2J1dHRvbi1maXJzdCB7XFxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG59XFxuLmZpbHRlcnNfX3NvcnRpbmcge1xcbiAgICBkaXNwbGF5OiBibG9jaztcXG4gICAgbWFyZ2luLXRvcDogMjBweDtcXG59XFxuLmFjY29yZGlvbiB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNlZWU7XFxuICAgIGNvbG9yOiAjMmEyNTRiO1xcbiAgICBmb250LWZhbWlseTogXFxcIkNsYXNoIERpc3BsYXlcXFwiO1xcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgIHBhZGRpbmc6IDE4cHg7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICB0ZXh0LWFsaWduOiBsZWZ0O1xcbiAgICBib3JkZXI6IG5vbmU7XFxuICAgIG91dGxpbmU6IG5vbmU7XFxuICAgIHRyYW5zaXRpb246IDAuNHM7XFxufVxcbi5hY2NvcmRpb24tLWJyYW5kcyB7XFxuICAgIHBhZGRpbmctdG9wOiAyMHB4O1xcbn1cXG4uYWN0aXZlLWFjY29yZGlvbiB7XFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcbn1cXG4uYWN0aXZlLFxcbiAgLmFjY29yZGlvbjpob3ZlciB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNjY2M7XFxufVxcbi5wYW5lbCB7XFxuICAgIHBhZGRpbmc6IDAgMThweCAyMHB4O1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gICAgZGlzcGxheTogbm9uZTtcXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcXG59XFxuLnBhbmVsLmFjdGl2ZSB7XFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcbn1cXG4ucGFuZWwtLXNjcm9sbCB7XFxuICAgIHBhZGRpbmc6IDAgMThweDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxuICAgIGRpc3BsYXk6IG5vbmU7XFxuICAgIG92ZXJmbG93OiBoaWRkZW47XFxuICAgIHdpZHRoOiAzMDBweDtcXG4gICAgbWF4LWhlaWdodDogMjUwcHg7XFxuICAgIG92ZXJmbG93LXk6IHNjcm9sbDtcXG59XFxufVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9qcy1tb2R1bGVzL0NhdGFsb2ctcHJvZHVjdHMudnVlXCIsXCJ3ZWJwYWNrOi8vLi9DYXRhbG9nLXByb2R1Y3RzLnZ1ZVwiLFwid2VicGFjazovLy4vc3JjL3N0eWxlcy9jb21wb25lbnRzL3ZhcmlhYmxlcy5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUlFO0VBQ0UsbUJBQUE7QUNISjtBRE1FO0VBQ0UsbUJBQUE7QUNKSjtBRE9FO0VBQ0UsWUFBQTtFQUNBLGlCQUFBO0VBQ0Esa0JBQUE7QUNMSjtBRFFFO0VBQ0UsbUJBQUE7RUFDQSxpQkFBQTtBQ05KO0FEU0U7RUFDRSxrQkFBQTtBQ1BKO0FEVUU7RUFDRSxhQUFBO0FDUko7QURXRTtFQUNFLGNBQUE7QUNUSjtBRFlFO0VBQ0Usa0JBQUE7RUFDQSxZQUFBO0VBQ0EsWUFBQTtFQUNBLG1CQUFBO0VBQ0Esc0JFdkNhO0VGd0NiLGVBQUE7RUFDQSxjRXhDaUI7RUZ5Q2pCLHlCRXRDZTtFRnVDZixlQUFBO0VBQ0EsZ0JBQUE7RUFDQSxrQkFBQTtBQ1ZKO0FEYUU7RUFDRSxrQkFBQTtFQUNBLDRCQUFBO0VBQ0EsK0JBQUE7RUFDQSwwQkFBQTtFQUNBLHlEQUFBO0FDWEo7QURjRTtFQUNFLGtCQUFBO0VBQ0EsUUFBQTtFQUNBLFNBQUE7RUFDQSxVQUFBO0FDWko7QURlRTtFQUNFLGtCQUFBO0VBQ0EsY0FBQTtFQUNBLGtCQUFBO0VBQ0Esc0JFbkVhO0VGb0ViLGVBQUE7QUNiSjtBRGdCRTtFQUNFLGtCQUFBO0VBQ0EsUUFBQTtFQUNBLE9BQUE7RUFDQSxjQUFBO0VBQ0EsV0FBQTtFQUNBLFlBQUE7RUFDQSxpQkFBQTtFQUNBLFdBQUE7RUFDQSxzQkFBQTtFQUNBLHlCQUFBO0VBQ0Esa0JBQUE7RUFDQSxVQUFBO0FDZEo7QURpQkU7RUFDRSxrQkFBQTtFQUNBLFFBQUE7RUFDQSxTQUFBO0VBQ0EsVUFBQTtFQUNBLFlBQUE7RUFDQSxXQUFBO0VBQ0Esa0JBQUE7RUFDQSx5QkFBQTtFQUNBLFVBQUE7RUFDQSx3QkFBQTtBQ2ZKO0FEa0JFO0VBQ0UsVUFBQTtBQ2hCSjtBRG1CRTtFQUNFLHlCQUFBO0VBQ0EsVUFBQTtBQ2pCSjtBRHFCQTtFQUNFLGtCQUFBO0VBQ0EsWUFBQTtFQUNBLG1CQUFBO0VBQ0EsaUJBQUE7RUFDQSx5QkU5R2lCO0VGK0dqQixpQkFBQTtBQ2xCRjtBRHFCQTtFQUNFLGFBQUE7QUNsQkY7QURxQkE7RUFDRSxtQkFBQTtBQ2xCRjtBRHFCQTtFQUNFLGNBQUE7RUFDQSw0QkVqSWE7RUZrSWIsZUFBQTtBQ2xCRjtBRHFCQTtBQUVJO0lBQ0UsYUFBQTtJQUNBLGtCQUFBO0FDbkJKO0FEc0JFO0lBQ0UsY0FBQTtJQUNBLGtCQUFBO0lBQ0EsaUJBQUE7QUNwQko7QUR1QkU7SUFDRSxxQkFBQTtBQ3JCSjtBRHdCRTtJQUNFLGNBQUE7SUFDQSxnQkFBQTtBQ3RCSjtBRDBCQTtJQUNFLHNCQUFBO0lBQ0EsY0FBQTtJQUNBLDRCRS9KVztJRmdLWCxlQUFBO0lBQ0EsYUFBQTtJQUNBLFdBQUE7SUFDQSxnQkFBQTtJQUNBLFlBQUE7SUFDQSxhQUFBO0lBQ0EsZ0JBQUE7QUN4QkY7QUQyQkE7SUFDRSxpQkFBQTtBQ3pCRjtBRDRCQTtJQUNFLGNBQUE7QUMxQkY7QUQ2QkE7O0lBRUUsc0JBQUE7QUMzQkY7QUQ4QkE7SUFDRSxvQkFBQTtJQUNBLHVCQUFBO0lBQ0EsYUFBQTtJQUNBLGdCQUFBO0FDNUJGO0FEOEJFO0lBQ0UsY0FBQTtBQzVCSjtBRGdDQTtJQUNFLGVBQUE7SUFDQSx1QkFBQTtJQUNBLGFBQUE7SUFDQSxnQkFBQTtJQUNBLFlBQUE7SUFDQSxpQkFBQTtJQUNBLGtCQUFBO0FDOUJGO0FBQ0ZcIixcInNvdXJjZXNDb250ZW50XCI6W1wiXFxuQGltcG9ydCBcXFwiLi4vc3R5bGVzL2NvbXBvbmVudHMvdmFyaWFibGVzLnNjc3NcXFwiO1xcblxcbi5maWx0ZXJzIHtcXG4gICZfX3NvcnRpbmcge1xcbiAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xcbiAgfVxcblxcbiAgJl9fYWNjb3JkaW9uLXdyYXBwZXIge1xcbiAgICBtYXJnaW4tYm90dG9tOiA1MHB4O1xcbiAgfVxcblxcbiAgJl9fbGlzdC0tc2Nyb2xsIHtcXG4gICAgd2lkdGg6IDI3MHB4O1xcbiAgICBtYXgtaGVpZ2h0OiAyNTBweDtcXG4gICAgb3ZlcmZsb3cteTogc2Nyb2xsO1xcbiAgfVxcblxcbiAgJl9fbGlzdC1jYXRlZ29yaWVzIHtcXG4gICAgbWFyZ2luLWJvdHRvbTogNDhweDtcXG4gICAgbWF4LWhlaWdodDogMTMwcHg7XFxuICB9XFxuXFxuICAmX19saXN0LWNhdGVnb3JpZXMtLXNjcm9sbCB7XFxuICAgIG92ZXJmbG93LXk6IHNjcm9sbDtcXG4gIH1cXG5cXG4gICZfX2J1dHRvbi1maXJzdCB7XFxuICAgIGRpc3BsYXk6IG5vbmU7XFxuICB9XFxuXFxuICAmX19idXR0b24td3JhcHBlciB7XFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgfVxcblxcbiAgJl9fYnV0dG9uLXNlY29uZCB7XFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgd2lkdGg6IDEyMHB4O1xcbiAgICBoZWlnaHQ6IDQwcHg7XFxuICAgIG1hcmdpbi1ib3R0b206IDIwcHg7XFxuICAgIGZvbnQtZmFtaWx5OiAkZm9udC1zZWNvbmRhcnk7XFxuICAgIGZvbnQtc2l6ZTogMTRweDtcXG4gICAgY29sb3I6ICRiYWNrZ3JvdW5kLXByaW1hcnk7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICRiYWNrZ3JvdW5kLXRoaXJkO1xcbiAgICBib3JkZXItd2lkdGg6IDA7XFxuICAgIGFwcGVhcmFuY2U6IG5vbmU7XFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIH1cXG5cXG4gICZfX2J1dHRvbi1zZWNvbmQ6bm90KFttdWx0aXBsZV0pIHtcXG4gICAgcGFkZGluZy1yaWdodDogNXB4O1xcbiAgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xcbiAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAxMDVweCAxNnB4O1xcbiAgICBiYWNrZ3JvdW5kLXNpemU6IDEwcHggMTBweDtcXG4gICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFxcXCJkYXRhOmltYWdlL3N2Zyt4bWwsJTNDc3ZnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zycgdmlld0JveD0nMCAwIDgwIDgwJyUzRSUzQ3BhdGggZD0nTTcwLjMgMTMuOEw0MCA2Ni4zIDkuNyAxMy44eicgZmlsbD0nJTIzMDAwJyUzRSUzQy9wYXRoJTNFJTNDL3N2ZyUzRVxcXCIpO1xcbiAgfVxcblxcbiAgJl9fY2hlY2tib3gge1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIHdpZHRoOiAwO1xcbiAgICBoZWlnaHQ6IDA7XFxuICAgIG9wYWNpdHk6IDA7XFxuICB9XFxuXFxuICAmX19sYWJlbCB7XFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgZGlzcGxheTogYmxvY2s7XFxuICAgIHBhZGRpbmctbGVmdDogMjVweDtcXG4gICAgZm9udC1mYW1pbHk6ICRmb250LXNlY29uZGFyeTtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgfVxcblxcbiAgJl9fbGFiZWw6OmJlZm9yZSB7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgdG9wOiA1MCU7XFxuICAgIGxlZnQ6IDA7XFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgICB3aWR0aDogMTZweDtcXG4gICAgaGVpZ2h0OiAxNnB4O1xcbiAgICBtYXJnaW4tdG9wOiAtMTBweDtcXG4gICAgY29udGVudDogJyc7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxuICAgIGJvcmRlcjogMXB4IHNvbGlkICNkY2RjZGM7XFxuICAgIGJvcmRlci1yYWRpdXM6IDJweDtcXG4gICAgb3BhY2l0eTogMTtcXG4gIH1cXG5cXG4gICZfX2xhYmVsOjphZnRlciB7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgdG9wOiAycHg7XFxuICAgIGxlZnQ6IDVweDtcXG4gICAgd2lkdGg6IDVweDtcXG4gICAgaGVpZ2h0OiAxMHB4O1xcbiAgICBjb250ZW50OiAnJztcXG4gICAgYm9yZGVyOiBzb2xpZCAjZmZmO1xcbiAgICBib3JkZXItd2lkdGg6IDAgMXB4IDFweCAwO1xcbiAgICBvcGFjaXR5OiAwO1xcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSg0NWRlZyk7XFxuICB9XFxuXFxuICAmX19jaGVja2JveDpjaGVja2VkKyZfX2xhYmVsOjphZnRlciB7XFxuICAgIG9wYWNpdHk6IDE7XFxuICB9XFxuXFxuICAmX19jaGVja2JveDpjaGVja2VkKyZfX2xhYmVsOjpiZWZvcmUge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNGU0ZDkzO1xcbiAgICBvcGFjaXR5OiAxO1xcbiAgfVxcbn1cXG5cXG4uanMtc3RyaW5nLWxpc3Qge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgd2lkdGg6IDEyMHB4O1xcbiAgbWFyZ2luLWJvdHRvbTogMzVweDtcXG4gIG1hcmdpbi1sZWZ0OiA5NXB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogJGJhY2tncm91bmQtdGhpcmQ7XFxuICB0ZXh0LWFsaWduOiBzdGFydDtcXG59XFxuXFxuLmpzLWhpZGRlbiB7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG5cXG4ucHJvZHVjdHMtY2F0YWxvZ19fbGlzdCB7XFxuICBtYXJnaW4tYm90dG9tOiA0NXB4O1xcbn1cXG5cXG4uYWNjb3JkaW9uIHtcXG4gIGNvbG9yOiAjMmEyNTRiO1xcbiAgZm9udC1mYW1pbHk6ICRmb250LXByaW1hcnk7XFxuICBjdXJzb3I6IGRlZmF1bHQ7XFxufVxcblxcbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2N3B4KSB7XFxuICAuZmlsdGVycyB7XFxuICAgICZfX2FjY29yZGlvbi13cmFwcGVyIHtcXG4gICAgICBkaXNwbGF5OiBub25lO1xcbiAgICAgIG1hcmdpbi1yaWdodDogNTBweDtcXG4gICAgfVxcblxcbiAgICAmX19idXR0b24td3JhcHBlciB7XFxuICAgICAgZGlzcGxheTogYmxvY2s7XFxuICAgICAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xcbiAgICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xcbiAgICB9XFxuXFxuICAgICZfX2J1dHRvbi1maXJzdCB7XFxuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgICB9XFxuXFxuICAgICZfX3NvcnRpbmcge1xcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgICAgIG1hcmdpbi10b3A6IDIwcHg7XFxuICAgIH1cXG4gIH1cXG5cXG4gIC5hY2NvcmRpb24ge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWVlO1xcbiAgICBjb2xvcjogIzJhMjU0YjtcXG4gICAgZm9udC1mYW1pbHk6ICRmb250LXByaW1hcnk7XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG4gICAgcGFkZGluZzogMThweDtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIHRleHQtYWxpZ246IGxlZnQ7XFxuICAgIGJvcmRlcjogbm9uZTtcXG4gICAgb3V0bGluZTogbm9uZTtcXG4gICAgdHJhbnNpdGlvbjogMC40cztcXG4gIH1cXG5cXG4gIC5hY2NvcmRpb24tLWJyYW5kcyB7XFxuICAgIHBhZGRpbmctdG9wOiAyMHB4O1xcbiAgfVxcblxcbiAgLmFjdGl2ZS1hY2NvcmRpb24ge1xcbiAgICBkaXNwbGF5OiBibG9jaztcXG4gIH1cXG5cXG4gIC5hY3RpdmUsXFxuICAuYWNjb3JkaW9uOmhvdmVyIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2NjYztcXG4gIH1cXG5cXG4gIC5wYW5lbCB7XFxuICAgIHBhZGRpbmc6IDAgMThweCAyMHB4O1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gICAgZGlzcGxheTogbm9uZTtcXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcXG5cXG4gICAgJi5hY3RpdmUge1xcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgICB9XFxuICB9XFxuXFxuICAucGFuZWwtLXNjcm9sbCB7XFxuICAgIHBhZGRpbmc6IDAgMThweDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxuICAgIGRpc3BsYXk6IG5vbmU7XFxuICAgIG92ZXJmbG93OiBoaWRkZW47XFxuICAgIHdpZHRoOiAzMDBweDtcXG4gICAgbWF4LWhlaWdodDogMjUwcHg7XFxuICAgIG92ZXJmbG93LXk6IHNjcm9sbDtcXG4gIH1cXG59XFxuXCIsXCIuZmlsdGVyc19fc29ydGluZyB7XFxuICBtYXJnaW4tYm90dG9tOiAyMHB4O1xcbn1cXG4uZmlsdGVyc19fYWNjb3JkaW9uLXdyYXBwZXIge1xcbiAgbWFyZ2luLWJvdHRvbTogNTBweDtcXG59XFxuLmZpbHRlcnNfX2xpc3QtLXNjcm9sbCB7XFxuICB3aWR0aDogMjcwcHg7XFxuICBtYXgtaGVpZ2h0OiAyNTBweDtcXG4gIG92ZXJmbG93LXk6IHNjcm9sbDtcXG59XFxuLmZpbHRlcnNfX2xpc3QtY2F0ZWdvcmllcyB7XFxuICBtYXJnaW4tYm90dG9tOiA0OHB4O1xcbiAgbWF4LWhlaWdodDogMTMwcHg7XFxufVxcbi5maWx0ZXJzX19saXN0LWNhdGVnb3JpZXMtLXNjcm9sbCB7XFxuICBvdmVyZmxvdy15OiBzY3JvbGw7XFxufVxcbi5maWx0ZXJzX19idXR0b24tZmlyc3Qge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuLmZpbHRlcnNfX2J1dHRvbi13cmFwcGVyIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbn1cXG4uZmlsdGVyc19fYnV0dG9uLXNlY29uZCB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB3aWR0aDogMTIwcHg7XFxuICBoZWlnaHQ6IDQwcHg7XFxuICBtYXJnaW4tYm90dG9tOiAyMHB4O1xcbiAgZm9udC1mYW1pbHk6IFxcXCJTYXRvc2hpXFxcIjtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG4gIGNvbG9yOiAjMmEyNTRiO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Y5ZjlmOTtcXG4gIGJvcmRlci13aWR0aDogMDtcXG4gIGFwcGVhcmFuY2U6IG5vbmU7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcbi5maWx0ZXJzX19idXR0b24tc2Vjb25kOm5vdChbbXVsdGlwbGVdKSB7XFxuICBwYWRkaW5nLXJpZ2h0OiA1cHg7XFxuICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogMTA1cHggMTZweDtcXG4gIGJhY2tncm91bmQtc2l6ZTogMTBweCAxMHB4O1xcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFxcXCJkYXRhOmltYWdlL3N2Zyt4bWwsJTNDc3ZnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zycgdmlld0JveD0nMCAwIDgwIDgwJyUzRSUzQ3BhdGggZD0nTTcwLjMgMTMuOEw0MCA2Ni4zIDkuNyAxMy44eicgZmlsbD0nJTIzMDAwJyUzRSUzQy9wYXRoJTNFJTNDL3N2ZyUzRVxcXCIpO1xcbn1cXG4uZmlsdGVyc19fY2hlY2tib3gge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgd2lkdGg6IDA7XFxuICBoZWlnaHQ6IDA7XFxuICBvcGFjaXR5OiAwO1xcbn1cXG4uZmlsdGVyc19fbGFiZWwge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBwYWRkaW5nLWxlZnQ6IDI1cHg7XFxuICBmb250LWZhbWlseTogXFxcIlNhdG9zaGlcXFwiO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG4uZmlsdGVyc19fbGFiZWw6OmJlZm9yZSB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDUwJTtcXG4gIGxlZnQ6IDA7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHdpZHRoOiAxNnB4O1xcbiAgaGVpZ2h0OiAxNnB4O1xcbiAgbWFyZ2luLXRvcDogLTEwcHg7XFxuICBjb250ZW50OiBcXFwiXFxcIjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjZGNkY2RjO1xcbiAgYm9yZGVyLXJhZGl1czogMnB4O1xcbiAgb3BhY2l0eTogMTtcXG59XFxuLmZpbHRlcnNfX2xhYmVsOjphZnRlciB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDJweDtcXG4gIGxlZnQ6IDVweDtcXG4gIHdpZHRoOiA1cHg7XFxuICBoZWlnaHQ6IDEwcHg7XFxuICBjb250ZW50OiBcXFwiXFxcIjtcXG4gIGJvcmRlcjogc29saWQgI2ZmZjtcXG4gIGJvcmRlci13aWR0aDogMCAxcHggMXB4IDA7XFxuICBvcGFjaXR5OiAwO1xcbiAgdHJhbnNmb3JtOiByb3RhdGUoNDVkZWcpO1xcbn1cXG4uZmlsdGVyc19fY2hlY2tib3g6Y2hlY2tlZCArIC5maWx0ZXJzX19sYWJlbDo6YWZ0ZXIge1xcbiAgb3BhY2l0eTogMTtcXG59XFxuLmZpbHRlcnNfX2NoZWNrYm94OmNoZWNrZWQgKyAuZmlsdGVyc19fbGFiZWw6OmJlZm9yZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNGU0ZDkzO1xcbiAgb3BhY2l0eTogMTtcXG59XFxuXFxuLmpzLXN0cmluZy1saXN0IHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHdpZHRoOiAxMjBweDtcXG4gIG1hcmdpbi1ib3R0b206IDM1cHg7XFxuICBtYXJnaW4tbGVmdDogOTVweDtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmOWY5Zjk7XFxuICB0ZXh0LWFsaWduOiBzdGFydDtcXG59XFxuXFxuLmpzLWhpZGRlbiB7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG5cXG4ucHJvZHVjdHMtY2F0YWxvZ19fbGlzdCB7XFxuICBtYXJnaW4tYm90dG9tOiA0NXB4O1xcbn1cXG5cXG4uYWNjb3JkaW9uIHtcXG4gIGNvbG9yOiAjMmEyNTRiO1xcbiAgZm9udC1mYW1pbHk6IFxcXCJDbGFzaCBEaXNwbGF5XFxcIjtcXG4gIGN1cnNvcjogZGVmYXVsdDtcXG59XFxuXFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY3cHgpIHtcXG4gIC5maWx0ZXJzX19hY2NvcmRpb24td3JhcHBlciB7XFxuICAgIGRpc3BsYXk6IG5vbmU7XFxuICAgIG1hcmdpbi1yaWdodDogNTBweDtcXG4gIH1cXG4gIC5maWx0ZXJzX19idXR0b24td3JhcHBlciB7XFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgICBtYXJnaW4tcmlnaHQ6IGF1dG87XFxuICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xcbiAgfVxcbiAgLmZpbHRlcnNfX2J1dHRvbi1maXJzdCB7XFxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIH1cXG4gIC5maWx0ZXJzX19zb3J0aW5nIHtcXG4gICAgZGlzcGxheTogYmxvY2s7XFxuICAgIG1hcmdpbi10b3A6IDIwcHg7XFxuICB9XFxuICAuYWNjb3JkaW9uIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2VlZTtcXG4gICAgY29sb3I6ICMyYTI1NGI7XFxuICAgIGZvbnQtZmFtaWx5OiBcXFwiQ2xhc2ggRGlzcGxheVxcXCI7XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG4gICAgcGFkZGluZzogMThweDtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIHRleHQtYWxpZ246IGxlZnQ7XFxuICAgIGJvcmRlcjogbm9uZTtcXG4gICAgb3V0bGluZTogbm9uZTtcXG4gICAgdHJhbnNpdGlvbjogMC40cztcXG4gIH1cXG4gIC5hY2NvcmRpb24tLWJyYW5kcyB7XFxuICAgIHBhZGRpbmctdG9wOiAyMHB4O1xcbiAgfVxcbiAgLmFjdGl2ZS1hY2NvcmRpb24ge1xcbiAgICBkaXNwbGF5OiBibG9jaztcXG4gIH1cXG4gIC5hY3RpdmUsXFxuICAuYWNjb3JkaW9uOmhvdmVyIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2NjYztcXG4gIH1cXG4gIC5wYW5lbCB7XFxuICAgIHBhZGRpbmc6IDAgMThweCAyMHB4O1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gICAgZGlzcGxheTogbm9uZTtcXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIH1cXG4gIC5wYW5lbC5hY3RpdmUge1xcbiAgICBkaXNwbGF5OiBibG9jaztcXG4gIH1cXG4gIC5wYW5lbC0tc2Nyb2xsIHtcXG4gICAgcGFkZGluZzogMCAxOHB4O1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gICAgZGlzcGxheTogbm9uZTtcXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gICAgd2lkdGg6IDMwMHB4O1xcbiAgICBtYXgtaGVpZ2h0OiAyNTBweDtcXG4gICAgb3ZlcmZsb3cteTogc2Nyb2xsO1xcbiAgfVxcbn1cIixcIiRmb250LXByaW1hcnk6IFxcXCJDbGFzaCBEaXNwbGF5XFxcIjtcXG4kZm9udC1zZWNvbmRhcnk6IFxcXCJTYXRvc2hpXFxcIjtcXG4kYmFja2dyb3VuZC1wcmltYXJ5OiAjMmEyNTRiO1xcbiRjb2xvci1wcmltYXJ5OiAjZmZmO1xcbiRiYWNrZ3JvdW5kLXNlY29uZGFyeTogcmdiYSgyNDkgMjQ5IDI0OSAvIDE1JSk7XFxuJGJhY2tncm91bmQtdGhpcmQ6ICNmOWY5Zjk7XFxuJGNvbG9yLXNlY29uZGFyeTogIzIyMjAyZTtcXG4kY29sb3ItdGhpcmQ6ICM3MjZlOGQ7XFxuJGNvbG9yLWZvdXJ0aDogIzgwMDA4MDtcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIud3JhcHBlcl9fcHJvZHVjdC1jb3VudCB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICByaWdodDogMTBweDtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgd2lkdGg6IDE3cHg7XFxuICBoZWlnaHQ6IDE3cHg7XFxuICBwYWRkaW5nOiAycHggMnB4O1xcbiAgcGFkZGluZy1sZWZ0OiAwO1xcbiAgZm9udC1zaXplOiAxMHB4O1xcbiAgbGluZS1oZWlnaHQ6IDEwcHg7XFxuICBjb2xvcjogI2ZmZjtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMyYTI1NGI7XFxuICBib3JkZXI6IDJweCBzb2xpZCAjMmEyNTRiO1xcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xcbn1cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvanMtbW9kdWxlcy9Qcm9kdWN0LWNvdW50LnZ1ZVwiLFwid2VicGFjazovLy4vc3JjL3N0eWxlcy9jb21wb25lbnRzL3ZhcmlhYmxlcy5zY3NzXCIsXCJ3ZWJwYWNrOi8vLi9Qcm9kdWN0LWNvdW50LnZ1ZVwiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFFQTtFQUNJLGtCQUFBO0VBQ0EsV0FBQTtFQUNBLGNBQUE7RUFDQSxXQUFBO0VBQ0EsWUFBQTtFQUNBLGdCQUFBO0VBQ0EsZUFBQTtFQUNBLGVBQUE7RUFDQSxpQkFBQTtFQUNBLFdDVFk7RURVWixrQkFBQTtFQUNBLHlCQ1ppQjtFRGFqQix5QkFBQTtFQUNBLGtCQUFBO0FFREpcIixcInNvdXJjZXNDb250ZW50XCI6W1wiXFxuQGltcG9ydCBcXFwiLi4vc3R5bGVzL2NvbXBvbmVudHMvdmFyaWFibGVzLnNjc3NcXFwiO1xcbi53cmFwcGVyX19wcm9kdWN0LWNvdW50IHtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICByaWdodDogMTBweDtcXG4gICAgZGlzcGxheTogYmxvY2s7XFxuICAgIHdpZHRoOiAxN3B4O1xcbiAgICBoZWlnaHQ6IDE3cHg7XFxuICAgIHBhZGRpbmc6IDJweCAycHg7XFxuICAgIHBhZGRpbmctbGVmdDogMDtcXG4gICAgZm9udC1zaXplOiAxMHB4O1xcbiAgICBsaW5lLWhlaWdodDogMTBweDtcXG4gICAgY29sb3I6ICRjb2xvci1wcmltYXJ5O1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICRiYWNrZ3JvdW5kLXByaW1hcnk7XFxuICAgIGJvcmRlcjogMnB4IHNvbGlkICRiYWNrZ3JvdW5kLXByaW1hcnk7XFxuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcXG4gIH1cXG5cXG5cIixcIiRmb250LXByaW1hcnk6IFxcXCJDbGFzaCBEaXNwbGF5XFxcIjtcXG4kZm9udC1zZWNvbmRhcnk6IFxcXCJTYXRvc2hpXFxcIjtcXG4kYmFja2dyb3VuZC1wcmltYXJ5OiAjMmEyNTRiO1xcbiRjb2xvci1wcmltYXJ5OiAjZmZmO1xcbiRiYWNrZ3JvdW5kLXNlY29uZGFyeTogcmdiYSgyNDkgMjQ5IDI0OSAvIDE1JSk7XFxuJGJhY2tncm91bmQtdGhpcmQ6ICNmOWY5Zjk7XFxuJGNvbG9yLXNlY29uZGFyeTogIzIyMjAyZTtcXG4kY29sb3ItdGhpcmQ6ICM3MjZlOGQ7XFxuJGNvbG9yLWZvdXJ0aDogIzgwMDA4MDtcXG5cIixcIi53cmFwcGVyX19wcm9kdWN0LWNvdW50IHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHJpZ2h0OiAxMHB4O1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICB3aWR0aDogMTdweDtcXG4gIGhlaWdodDogMTdweDtcXG4gIHBhZGRpbmc6IDJweCAycHg7XFxuICBwYWRkaW5nLWxlZnQ6IDA7XFxuICBmb250LXNpemU6IDEwcHg7XFxuICBsaW5lLWhlaWdodDogMTBweDtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzJhMjU0YjtcXG4gIGJvcmRlcjogMnB4IHNvbGlkICMyYTI1NGI7XFxuICBib3JkZXItcmFkaXVzOiA1MCU7XFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5wcm9kdWN0LWRldGFpbHNfX21vZGFsIHtcXG4gIHBvc2l0aW9uOiBmaXhlZDtcXG4gIHRvcDogMDtcXG4gIGxlZnQ6IDA7XFxuICB6LWluZGV4OiAtMTtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjUpO1xcbiAgb3BhY2l0eTogMDtcXG59XFxuLnByb2R1Y3QtZGV0YWlsc19fbW9kYWwtY29udGVudCB7XFxuICB3aWR0aDogMTAwJTtcXG4gIG1heC13aWR0aDogODAwcHg7XFxuICBwYWRkaW5nOiAyMHB4O1xcbiAgbWFyZ2luOiBhdXRvO1xcbiAgbWFyZ2luLXRvcDogMjAlO1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmOWY5Zjk7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjODg4O1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01MCUpO1xcbn1cXG4ucHJvZHVjdC1kZXRhaWxzX19tb2RhbC10ZXh0IHtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxuLnByb2R1Y3QtZGV0YWlsc19fbW9kYWwtd3JhcHBlciB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgbWFyZ2luLXRvcDogMjBweDtcXG59XFxuLnByb2R1Y3QtZGV0YWlsc19fbW9kYWwtYnV0dG9uLWxpbmsge1xcbiAgd2lkdGg6IDEyMHB4O1xcbiAgaGVpZ2h0OiA1MHB4O1xcbiAgbWFyZ2luLXJpZ2h0OiAxNnB4O1xcbiAgZm9udC1mYW1pbHk6IFxcXCJTYXRvc2hpXFxcIjtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzJhMjU0YjtcXG59XFxuLnByb2R1Y3QtZGV0YWlsc19fbW9kYWwtYnV0dG9uIHtcXG4gIHdpZHRoOiAxNTVweDtcXG4gIGhlaWdodDogNTBweDtcXG4gIGZvbnQtZmFtaWx5OiBcXFwiU2F0b3NoaVxcXCI7XFxuICBjb2xvcjogIzJhMjU0YjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxufVxcbi5wcm9kdWN0LWRldGFpbHMgLmpzLW1vZGFsLWFjdGl2ZSB7XFxuICB6LWluZGV4OiA0O1xcbn1cXG4ucHJvZHVjdC1kZXRhaWxzIC5qcy1tb2RhbC1hY3RpdmUtYW5pbWF0aW9uIHtcXG4gIGFuaW1hdGlvbjogbW9kYWxGYWRlSW4gMC41cyBlYXNlIGZvcndhcmRzO1xcbn1cXG5Aa2V5ZnJhbWVzIG1vZGFsRmFkZUluIHtcXG4wJSB7XFxuICAgIG9wYWNpdHk6IDA7XFxufVxcbjEwMCUge1xcbiAgICBvcGFjaXR5OiAxO1xcbn1cXG59XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2pzLW1vZHVsZXMvUHJvZHVjdC1kZXRhaWxzLnZ1ZVwiLFwid2VicGFjazovLy4vUHJvZHVjdC1kZXRhaWxzLnZ1ZVwiLFwid2VicGFjazovLy4vc3JjL3N0eWxlcy9jb21wb25lbnRzL3ZhcmlhYmxlcy5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUlFO0VBQ0UsZUFBQTtFQUNBLE1BQUE7RUFDQSxPQUFBO0VBQ0EsV0FBQTtFQUNBLGNBQUE7RUFDQSxXQUFBO0VBQ0EsWUFBQTtFQUNBLGdCQUFBO0VBQ0Esb0NBQUE7RUFDQSxVQUFBO0FDSEo7QURNRTtFQUNFLFdBQUE7RUFDQSxnQkFBQTtFQUNBLGFBQUE7RUFDQSxZQUFBO0VBQ0EsZUFBQTtFQUNBLGdCQUFBO0VBQ0EsdUJBQUE7RUFDQSxtQkFBQTtFQUNBLHlCRXJCZTtFRnNCZixzQkFBQTtFQUNBLDJCQUFBO0FDSko7QURPRTtFQUNFLGtCQUFBO0FDTEo7QURRRTtFQUNFLGFBQUE7RUFDQSw4QkFBQTtFQUNBLGdCQUFBO0FDTko7QURTRTtFQUNFLFlBQUE7RUFDQSxZQUFBO0VBQ0Esa0JBQUE7RUFDQSxzQkU1Q2E7RUY2Q2IsV0UzQ1k7RUY0Q1oseUJFN0NpQjtBRHNDckI7QURVRTtFQUNFLFlBQUE7RUFDQSxZQUFBO0VBQ0Esc0JFcERhO0VGcURiLGNFcERpQjtFRnFEakIsc0JFcERZO0FENENoQjtBRFdFO0VBQ0EsVUFBQTtBQ1RGO0FEWUE7RUFDRSx5Q0FBQTtBQ1ZGO0FEYUE7QUFDRTtJQUNFLFVBQUE7QUNYRjtBRGNBO0lBQ0UsVUFBQTtBQ1pGO0FBQ0ZcIixcInNvdXJjZXNDb250ZW50XCI6W1wiXFxuQGltcG9ydCBcXFwiLi4vc3R5bGVzL2NvbXBvbmVudHMvdmFyaWFibGVzLnNjc3NcXFwiO1xcblxcbi5wcm9kdWN0LWRldGFpbHMge1xcbiAgJl9fbW9kYWwge1xcbiAgICBwb3NpdGlvbjogZml4ZWQ7XFxuICAgIHRvcDogMDtcXG4gICAgbGVmdDogMDtcXG4gICAgei1pbmRleDogLTE7XFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgaGVpZ2h0OiAxMDAlO1xcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNSk7XFxuICAgIG9wYWNpdHk6IDA7XFxuICB9XFxuXFxuICAmX19tb2RhbC1jb250ZW50IHtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIG1heC13aWR0aDogODAwcHg7XFxuICAgIHBhZGRpbmc6IDIwcHg7XFxuICAgIG1hcmdpbjogYXV0bztcXG4gICAgbWFyZ2luLXRvcDogMjAlO1xcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcXG4gICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogJGJhY2tncm91bmQtdGhpcmQ7XFxuICAgIGJvcmRlcjogMXB4IHNvbGlkICM4ODg7XFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTtcXG4gIH1cXG5cXG4gICZfX21vZGFsLXRleHQge1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICB9XFxuXFxuICAmX19tb2RhbC13cmFwcGVyIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgICBtYXJnaW4tdG9wOiAyMHB4O1xcbiAgfVxcblxcbiAgJl9fbW9kYWwtYnV0dG9uLWxpbmsge1xcbiAgICB3aWR0aDogMTIwcHg7XFxuICAgIGhlaWdodDogNTBweDtcXG4gICAgbWFyZ2luLXJpZ2h0OiAxNnB4O1xcbiAgICBmb250LWZhbWlseTogJGZvbnQtc2Vjb25kYXJ5O1xcbiAgICBjb2xvcjogJGNvbG9yLXByaW1hcnk7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICRiYWNrZ3JvdW5kLXByaW1hcnk7XFxuICB9XFxuXFxuICAmX19tb2RhbC1idXR0b24ge1xcbiAgICB3aWR0aDogMTU1cHg7XFxuICAgIGhlaWdodDogNTBweDtcXG4gICAgZm9udC1mYW1pbHk6ICRmb250LXNlY29uZGFyeTtcXG4gICAgY29sb3I6ICRiYWNrZ3JvdW5kLXByaW1hcnk7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICRjb2xvci1wcmltYXJ5O1xcbiAgfVxcblxcbiAgLmpzLW1vZGFsLWFjdGl2ZSB7XFxuICB6LWluZGV4OiA0O1xcbn1cXG5cXG4uanMtbW9kYWwtYWN0aXZlLWFuaW1hdGlvbiB7XFxuICBhbmltYXRpb246IG1vZGFsRmFkZUluIDAuNXMgZWFzZSBmb3J3YXJkcztcXG59XFxuXFxuQGtleWZyYW1lcyBtb2RhbEZhZGVJbiB7XFxuICAwJSB7XFxuICAgIG9wYWNpdHk6IDA7XFxuICB9XFxuXFxuICAxMDAlIHtcXG4gICAgb3BhY2l0eTogMTtcXG4gIH1cXG59XFxufVxcblwiLFwiLnByb2R1Y3QtZGV0YWlsc19fbW9kYWwge1xcbiAgcG9zaXRpb246IGZpeGVkO1xcbiAgdG9wOiAwO1xcbiAgbGVmdDogMDtcXG4gIHotaW5kZXg6IC0xO1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMTAwJTtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNSk7XFxuICBvcGFjaXR5OiAwO1xcbn1cXG4ucHJvZHVjdC1kZXRhaWxzX19tb2RhbC1jb250ZW50IHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgbWF4LXdpZHRoOiA4MDBweDtcXG4gIHBhZGRpbmc6IDIwcHg7XFxuICBtYXJnaW46IGF1dG87XFxuICBtYXJnaW4tdG9wOiAyMCU7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XFxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Y5ZjlmOTtcXG4gIGJvcmRlcjogMXB4IHNvbGlkICM4ODg7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7XFxufVxcbi5wcm9kdWN0LWRldGFpbHNfX21vZGFsLXRleHQge1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG4ucHJvZHVjdC1kZXRhaWxzX19tb2RhbC13cmFwcGVyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICBtYXJnaW4tdG9wOiAyMHB4O1xcbn1cXG4ucHJvZHVjdC1kZXRhaWxzX19tb2RhbC1idXR0b24tbGluayB7XFxuICB3aWR0aDogMTIwcHg7XFxuICBoZWlnaHQ6IDUwcHg7XFxuICBtYXJnaW4tcmlnaHQ6IDE2cHg7XFxuICBmb250LWZhbWlseTogXFxcIlNhdG9zaGlcXFwiO1xcbiAgY29sb3I6ICNmZmY7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMmEyNTRiO1xcbn1cXG4ucHJvZHVjdC1kZXRhaWxzX19tb2RhbC1idXR0b24ge1xcbiAgd2lkdGg6IDE1NXB4O1xcbiAgaGVpZ2h0OiA1MHB4O1xcbiAgZm9udC1mYW1pbHk6IFxcXCJTYXRvc2hpXFxcIjtcXG4gIGNvbG9yOiAjMmEyNTRiO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG59XFxuLnByb2R1Y3QtZGV0YWlscyAuanMtbW9kYWwtYWN0aXZlIHtcXG4gIHotaW5kZXg6IDQ7XFxufVxcbi5wcm9kdWN0LWRldGFpbHMgLmpzLW1vZGFsLWFjdGl2ZS1hbmltYXRpb24ge1xcbiAgYW5pbWF0aW9uOiBtb2RhbEZhZGVJbiAwLjVzIGVhc2UgZm9yd2FyZHM7XFxufVxcbkBrZXlmcmFtZXMgbW9kYWxGYWRlSW4ge1xcbiAgMCUge1xcbiAgICBvcGFjaXR5OiAwO1xcbiAgfVxcbiAgMTAwJSB7XFxuICAgIG9wYWNpdHk6IDE7XFxuICB9XFxufVwiLFwiJGZvbnQtcHJpbWFyeTogXFxcIkNsYXNoIERpc3BsYXlcXFwiO1xcbiRmb250LXNlY29uZGFyeTogXFxcIlNhdG9zaGlcXFwiO1xcbiRiYWNrZ3JvdW5kLXByaW1hcnk6ICMyYTI1NGI7XFxuJGNvbG9yLXByaW1hcnk6ICNmZmY7XFxuJGJhY2tncm91bmQtc2Vjb25kYXJ5OiByZ2JhKDI0OSAyNDkgMjQ5IC8gMTUlKTtcXG4kYmFja2dyb3VuZC10aGlyZDogI2Y5ZjlmOTtcXG4kY29sb3Itc2Vjb25kYXJ5OiAjMjIyMDJlO1xcbiRjb2xvci10aGlyZDogIzcyNmU4ZDtcXG4kY29sb3ItZm91cnRoOiAjODAwMDgwO1xcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTtcblxuICAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTtcblxuICAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1cmwsIG9wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG4gIGlmICghdXJsKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuICB1cmwgPSBTdHJpbmcodXJsLl9fZXNNb2R1bGUgPyB1cmwuZGVmYXVsdCA6IHVybCk7XG5cbiAgLy8gSWYgdXJsIGlzIGFscmVhZHkgd3JhcHBlZCBpbiBxdW90ZXMsIHJlbW92ZSB0aGVtXG4gIGlmICgvXlsnXCJdLipbJ1wiXSQvLnRlc3QodXJsKSkge1xuICAgIHVybCA9IHVybC5zbGljZSgxLCAtMSk7XG4gIH1cbiAgaWYgKG9wdGlvbnMuaGFzaCkge1xuICAgIHVybCArPSBvcHRpb25zLmhhc2g7XG4gIH1cblxuICAvLyBTaG91bGQgdXJsIGJlIHdyYXBwZWQ/XG4gIC8vIFNlZSBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXZhbHVlcy0zLyN1cmxzXG4gIGlmICgvW1wiJygpIFxcdFxcbl18KCUyMCkvLnRlc3QodXJsKSB8fCBvcHRpb25zLm5lZWRRdW90ZXMpIHtcbiAgICByZXR1cm4gXCJcXFwiXCIuY29uY2F0KHVybC5yZXBsYWNlKC9cIi9nLCAnXFxcXFwiJykucmVwbGFjZSgvXFxuL2csIFwiXFxcXG5cIiksIFwiXFxcIlwiKTtcbiAgfVxuICByZXR1cm4gdXJsO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJlM2FmMDU5NzFmNTkyNTRhNmJiMTljNDRjYTZiNGYwYS5wbmdcIjsiLCIvKiFcbiAqIGpRdWVyeSBKYXZhU2NyaXB0IExpYnJhcnkgdjMuNi40XG4gKiBodHRwczovL2pxdWVyeS5jb20vXG4gKlxuICogSW5jbHVkZXMgU2l6emxlLmpzXG4gKiBodHRwczovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgT3BlbkpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2pxdWVyeS5vcmcvbGljZW5zZVxuICpcbiAqIERhdGU6IDIwMjMtMDMtMDhUMTU6MjhaXG4gKi9cbiggZnVuY3Rpb24oIGdsb2JhbCwgZmFjdG9yeSApIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHRpZiAoIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gRm9yIENvbW1vbkpTIGFuZCBDb21tb25KUy1saWtlIGVudmlyb25tZW50cyB3aGVyZSBhIHByb3BlciBgd2luZG93YFxuXHRcdC8vIGlzIHByZXNlbnQsIGV4ZWN1dGUgdGhlIGZhY3RvcnkgYW5kIGdldCBqUXVlcnkuXG5cdFx0Ly8gRm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBoYXZlIGEgYHdpbmRvd2Agd2l0aCBhIGBkb2N1bWVudGBcblx0XHQvLyAoc3VjaCBhcyBOb2RlLmpzKSwgZXhwb3NlIGEgZmFjdG9yeSBhcyBtb2R1bGUuZXhwb3J0cy5cblx0XHQvLyBUaGlzIGFjY2VudHVhdGVzIHRoZSBuZWVkIGZvciB0aGUgY3JlYXRpb24gb2YgYSByZWFsIGB3aW5kb3dgLlxuXHRcdC8vIGUuZy4gdmFyIGpRdWVyeSA9IHJlcXVpcmUoXCJqcXVlcnlcIikod2luZG93KTtcblx0XHQvLyBTZWUgdGlja2V0IHRyYWMtMTQ1NDkgZm9yIG1vcmUgaW5mby5cblx0XHRtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5kb2N1bWVudCA/XG5cdFx0XHRmYWN0b3J5KCBnbG9iYWwsIHRydWUgKSA6XG5cdFx0XHRmdW5jdGlvbiggdyApIHtcblx0XHRcdFx0aWYgKCAhdy5kb2N1bWVudCApIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoIFwialF1ZXJ5IHJlcXVpcmVzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGZhY3RvcnkoIHcgKTtcblx0XHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0ZmFjdG9yeSggZ2xvYmFsICk7XG5cdH1cblxuLy8gUGFzcyB0aGlzIGlmIHdpbmRvdyBpcyBub3QgZGVmaW5lZCB5ZXRcbn0gKSggdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uKCB3aW5kb3csIG5vR2xvYmFsICkge1xuXG4vLyBFZGdlIDw9IDEyIC0gMTMrLCBGaXJlZm94IDw9MTggLSA0NSssIElFIDEwIC0gMTEsIFNhZmFyaSA1LjEgLSA5KywgaU9TIDYgLSA5LjFcbi8vIHRocm93IGV4Y2VwdGlvbnMgd2hlbiBub24tc3RyaWN0IGNvZGUgKGUuZy4sIEFTUC5ORVQgNC41KSBhY2Nlc3NlcyBzdHJpY3QgbW9kZVxuLy8gYXJndW1lbnRzLmNhbGxlZS5jYWxsZXIgKHRyYWMtMTMzMzUpLiBCdXQgYXMgb2YgalF1ZXJ5IDMuMCAoMjAxNiksIHN0cmljdCBtb2RlIHNob3VsZCBiZSBjb21tb25cbi8vIGVub3VnaCB0aGF0IGFsbCBzdWNoIGF0dGVtcHRzIGFyZSBndWFyZGVkIGluIGEgdHJ5IGJsb2NrLlxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBhcnIgPSBbXTtcblxudmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuXG52YXIgc2xpY2UgPSBhcnIuc2xpY2U7XG5cbnZhciBmbGF0ID0gYXJyLmZsYXQgPyBmdW5jdGlvbiggYXJyYXkgKSB7XG5cdHJldHVybiBhcnIuZmxhdC5jYWxsKCBhcnJheSApO1xufSA6IGZ1bmN0aW9uKCBhcnJheSApIHtcblx0cmV0dXJuIGFyci5jb25jYXQuYXBwbHkoIFtdLCBhcnJheSApO1xufTtcblxuXG52YXIgcHVzaCA9IGFyci5wdXNoO1xuXG52YXIgaW5kZXhPZiA9IGFyci5pbmRleE9mO1xuXG52YXIgY2xhc3MydHlwZSA9IHt9O1xuXG52YXIgdG9TdHJpbmcgPSBjbGFzczJ0eXBlLnRvU3RyaW5nO1xuXG52YXIgaGFzT3duID0gY2xhc3MydHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIGZuVG9TdHJpbmcgPSBoYXNPd24udG9TdHJpbmc7XG5cbnZhciBPYmplY3RGdW5jdGlvblN0cmluZyA9IGZuVG9TdHJpbmcuY2FsbCggT2JqZWN0ICk7XG5cbnZhciBzdXBwb3J0ID0ge307XG5cbnZhciBpc0Z1bmN0aW9uID0gZnVuY3Rpb24gaXNGdW5jdGlvbiggb2JqICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9NTcsIEZpcmVmb3ggPD01MlxuXHRcdC8vIEluIHNvbWUgYnJvd3NlcnMsIHR5cGVvZiByZXR1cm5zIFwiZnVuY3Rpb25cIiBmb3IgSFRNTCA8b2JqZWN0PiBlbGVtZW50c1xuXHRcdC8vIChpLmUuLCBgdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib2JqZWN0XCIgKSA9PT0gXCJmdW5jdGlvblwiYCkuXG5cdFx0Ly8gV2UgZG9uJ3Qgd2FudCB0byBjbGFzc2lmeSAqYW55KiBET00gbm9kZSBhcyBhIGZ1bmN0aW9uLlxuXHRcdC8vIFN1cHBvcnQ6IFF0V2ViIDw9My44LjUsIFdlYktpdCA8PTUzNC4zNCwgd2todG1sdG9wZGYgdG9vbCA8PTAuMTIuNVxuXHRcdC8vIFBsdXMgZm9yIG9sZCBXZWJLaXQsIHR5cGVvZiByZXR1cm5zIFwiZnVuY3Rpb25cIiBmb3IgSFRNTCBjb2xsZWN0aW9uc1xuXHRcdC8vIChlLmcuLCBgdHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiZGl2XCIpID09PSBcImZ1bmN0aW9uXCJgKS4gKGdoLTQ3NTYpXG5cdFx0cmV0dXJuIHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2Ygb2JqLm5vZGVUeXBlICE9PSBcIm51bWJlclwiICYmXG5cdFx0XHR0eXBlb2Ygb2JqLml0ZW0gIT09IFwiZnVuY3Rpb25cIjtcblx0fTtcblxuXG52YXIgaXNXaW5kb3cgPSBmdW5jdGlvbiBpc1dpbmRvdyggb2JqICkge1xuXHRcdHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmogPT09IG9iai53aW5kb3c7XG5cdH07XG5cblxudmFyIGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50O1xuXG5cblxuXHR2YXIgcHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyA9IHtcblx0XHR0eXBlOiB0cnVlLFxuXHRcdHNyYzogdHJ1ZSxcblx0XHRub25jZTogdHJ1ZSxcblx0XHRub01vZHVsZTogdHJ1ZVxuXHR9O1xuXG5cdGZ1bmN0aW9uIERPTUV2YWwoIGNvZGUsIG5vZGUsIGRvYyApIHtcblx0XHRkb2MgPSBkb2MgfHwgZG9jdW1lbnQ7XG5cblx0XHR2YXIgaSwgdmFsLFxuXHRcdFx0c2NyaXB0ID0gZG9jLmNyZWF0ZUVsZW1lbnQoIFwic2NyaXB0XCIgKTtcblxuXHRcdHNjcmlwdC50ZXh0ID0gY29kZTtcblx0XHRpZiAoIG5vZGUgKSB7XG5cdFx0XHRmb3IgKCBpIGluIHByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA2NCssIEVkZ2UgMTgrXG5cdFx0XHRcdC8vIFNvbWUgYnJvd3NlcnMgZG9uJ3Qgc3VwcG9ydCB0aGUgXCJub25jZVwiIHByb3BlcnR5IG9uIHNjcmlwdHMuXG5cdFx0XHRcdC8vIE9uIHRoZSBvdGhlciBoYW5kLCBqdXN0IHVzaW5nIGBnZXRBdHRyaWJ1dGVgIGlzIG5vdCBlbm91Z2ggYXNcblx0XHRcdFx0Ly8gdGhlIGBub25jZWAgYXR0cmlidXRlIGlzIHJlc2V0IHRvIGFuIGVtcHR5IHN0cmluZyB3aGVuZXZlciBpdFxuXHRcdFx0XHQvLyBiZWNvbWVzIGJyb3dzaW5nLWNvbnRleHQgY29ubmVjdGVkLlxuXHRcdFx0XHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3doYXR3Zy9odG1sL2lzc3Vlcy8yMzY5XG5cdFx0XHRcdC8vIFNlZSBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNub25jZS1hdHRyaWJ1dGVzXG5cdFx0XHRcdC8vIFRoZSBgbm9kZS5nZXRBdHRyaWJ1dGVgIGNoZWNrIHdhcyBhZGRlZCBmb3IgdGhlIHNha2Ugb2Zcblx0XHRcdFx0Ly8gYGpRdWVyeS5nbG9iYWxFdmFsYCBzbyB0aGF0IGl0IGNhbiBmYWtlIGEgbm9uY2UtY29udGFpbmluZyBub2RlXG5cdFx0XHRcdC8vIHZpYSBhbiBvYmplY3QuXG5cdFx0XHRcdHZhbCA9IG5vZGVbIGkgXSB8fCBub2RlLmdldEF0dHJpYnV0ZSAmJiBub2RlLmdldEF0dHJpYnV0ZSggaSApO1xuXHRcdFx0XHRpZiAoIHZhbCApIHtcblx0XHRcdFx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKCBpLCB2YWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRkb2MuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0ICkucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggc2NyaXB0ICk7XG5cdH1cblxuXG5mdW5jdGlvbiB0b1R5cGUoIG9iaiApIHtcblx0aWYgKCBvYmogPT0gbnVsbCApIHtcblx0XHRyZXR1cm4gb2JqICsgXCJcIjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seSAoZnVuY3Rpb25pc2ggUmVnRXhwKVxuXHRyZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgP1xuXHRcdGNsYXNzMnR5cGVbIHRvU3RyaW5nLmNhbGwoIG9iaiApIF0gfHwgXCJvYmplY3RcIiA6XG5cdFx0dHlwZW9mIG9iajtcbn1cbi8qIGdsb2JhbCBTeW1ib2wgKi9cbi8vIERlZmluaW5nIHRoaXMgZ2xvYmFsIGluIC5lc2xpbnRyYy5qc29uIHdvdWxkIGNyZWF0ZSBhIGRhbmdlciBvZiB1c2luZyB0aGUgZ2xvYmFsXG4vLyB1bmd1YXJkZWQgaW4gYW5vdGhlciBwbGFjZSwgaXQgc2VlbXMgc2FmZXIgdG8gZGVmaW5lIGdsb2JhbCBvbmx5IGZvciB0aGlzIG1vZHVsZVxuXG5cblxudmFyXG5cdHZlcnNpb24gPSBcIjMuNi40XCIsXG5cblx0Ly8gRGVmaW5lIGEgbG9jYWwgY29weSBvZiBqUXVlcnlcblx0alF1ZXJ5ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXG5cdFx0Ly8gVGhlIGpRdWVyeSBvYmplY3QgaXMgYWN0dWFsbHkganVzdCB0aGUgaW5pdCBjb25zdHJ1Y3RvciAnZW5oYW5jZWQnXG5cdFx0Ly8gTmVlZCBpbml0IGlmIGpRdWVyeSBpcyBjYWxsZWQgKGp1c3QgYWxsb3cgZXJyb3IgdG8gYmUgdGhyb3duIGlmIG5vdCBpbmNsdWRlZClcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5mbi5pbml0KCBzZWxlY3RvciwgY29udGV4dCApO1xuXHR9O1xuXG5qUXVlcnkuZm4gPSBqUXVlcnkucHJvdG90eXBlID0ge1xuXG5cdC8vIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgalF1ZXJ5IGJlaW5nIHVzZWRcblx0anF1ZXJ5OiB2ZXJzaW9uLFxuXG5cdGNvbnN0cnVjdG9yOiBqUXVlcnksXG5cblx0Ly8gVGhlIGRlZmF1bHQgbGVuZ3RoIG9mIGEgalF1ZXJ5IG9iamVjdCBpcyAwXG5cdGxlbmd0aDogMCxcblxuXHR0b0FycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHR9LFxuXG5cdC8vIEdldCB0aGUgTnRoIGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgZWxlbWVudCBzZXQgT1Jcblx0Ly8gR2V0IHRoZSB3aG9sZSBtYXRjaGVkIGVsZW1lbnQgc2V0IGFzIGEgY2xlYW4gYXJyYXlcblx0Z2V0OiBmdW5jdGlvbiggbnVtICkge1xuXG5cdFx0Ly8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgaW4gYSBjbGVhbiBhcnJheVxuXHRcdGlmICggbnVtID09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiBqdXN0IHRoZSBvbmUgZWxlbWVudCBmcm9tIHRoZSBzZXRcblx0XHRyZXR1cm4gbnVtIDwgMCA/IHRoaXNbIG51bSArIHRoaXMubGVuZ3RoIF0gOiB0aGlzWyBudW0gXTtcblx0fSxcblxuXHQvLyBUYWtlIGFuIGFycmF5IG9mIGVsZW1lbnRzIGFuZCBwdXNoIGl0IG9udG8gdGhlIHN0YWNrXG5cdC8vIChyZXR1cm5pbmcgdGhlIG5ldyBtYXRjaGVkIGVsZW1lbnQgc2V0KVxuXHRwdXNoU3RhY2s6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblxuXHRcdC8vIEJ1aWxkIGEgbmV3IGpRdWVyeSBtYXRjaGVkIGVsZW1lbnQgc2V0XG5cdFx0dmFyIHJldCA9IGpRdWVyeS5tZXJnZSggdGhpcy5jb25zdHJ1Y3RvcigpLCBlbGVtcyApO1xuXG5cdFx0Ly8gQWRkIHRoZSBvbGQgb2JqZWN0IG9udG8gdGhlIHN0YWNrIChhcyBhIHJlZmVyZW5jZSlcblx0XHRyZXQucHJldk9iamVjdCA9IHRoaXM7XG5cblx0XHQvLyBSZXR1cm4gdGhlIG5ld2x5LWZvcm1lZCBlbGVtZW50IHNldFxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0Ly8gRXhlY3V0ZSBhIGNhbGxiYWNrIGZvciBldmVyeSBlbGVtZW50IGluIHRoZSBtYXRjaGVkIHNldC5cblx0ZWFjaDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZWFjaCggdGhpcywgY2FsbGJhY2sgKTtcblx0fSxcblxuXHRtYXA6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5tYXAoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuIGNhbGxiYWNrLmNhbGwoIGVsZW0sIGksIGVsZW0gKTtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRzbGljZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBzbGljZS5hcHBseSggdGhpcywgYXJndW1lbnRzICkgKTtcblx0fSxcblxuXHRmaXJzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIDAgKTtcblx0fSxcblxuXHRsYXN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggLTEgKTtcblx0fSxcblxuXHRldmVuOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5ncmVwKCB0aGlzLCBmdW5jdGlvbiggX2VsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gKCBpICsgMSApICUgMjtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRvZGQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5LmdyZXAoIHRoaXMsIGZ1bmN0aW9uKCBfZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiBpICUgMjtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRlcTogZnVuY3Rpb24oIGkgKSB7XG5cdFx0dmFyIGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0aiA9ICtpICsgKCBpIDwgMCA/IGxlbiA6IDAgKTtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGogPj0gMCAmJiBqIDwgbGVuID8gWyB0aGlzWyBqIF0gXSA6IFtdICk7XG5cdH0sXG5cblx0ZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wcmV2T2JqZWN0IHx8IHRoaXMuY29uc3RydWN0b3IoKTtcblx0fSxcblxuXHQvLyBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG5cdC8vIEJlaGF2ZXMgbGlrZSBhbiBBcnJheSdzIG1ldGhvZCwgbm90IGxpa2UgYSBqUXVlcnkgbWV0aG9kLlxuXHRwdXNoOiBwdXNoLFxuXHRzb3J0OiBhcnIuc29ydCxcblx0c3BsaWNlOiBhcnIuc3BsaWNlXG59O1xuXG5qUXVlcnkuZXh0ZW5kID0galF1ZXJ5LmZuLmV4dGVuZCA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgb3B0aW9ucywgbmFtZSwgc3JjLCBjb3B5LCBjb3B5SXNBcnJheSwgY2xvbmUsXG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyAwIF0gfHwge30sXG5cdFx0aSA9IDEsXG5cdFx0bGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcblx0XHRkZWVwID0gZmFsc2U7XG5cblx0Ly8gSGFuZGxlIGEgZGVlcCBjb3B5IHNpdHVhdGlvblxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGRlZXAgPSB0YXJnZXQ7XG5cblx0XHQvLyBTa2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyBpIF0gfHwge307XG5cdFx0aSsrO1xuXHR9XG5cblx0Ly8gSGFuZGxlIGNhc2Ugd2hlbiB0YXJnZXQgaXMgYSBzdHJpbmcgb3Igc29tZXRoaW5nIChwb3NzaWJsZSBpbiBkZWVwIGNvcHkpXG5cdGlmICggdHlwZW9mIHRhcmdldCAhPT0gXCJvYmplY3RcIiAmJiAhaXNGdW5jdGlvbiggdGFyZ2V0ICkgKSB7XG5cdFx0dGFyZ2V0ID0ge307XG5cdH1cblxuXHQvLyBFeHRlbmQgalF1ZXJ5IGl0c2VsZiBpZiBvbmx5IG9uZSBhcmd1bWVudCBpcyBwYXNzZWRcblx0aWYgKCBpID09PSBsZW5ndGggKSB7XG5cdFx0dGFyZ2V0ID0gdGhpcztcblx0XHRpLS07XG5cdH1cblxuXHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblxuXHRcdC8vIE9ubHkgZGVhbCB3aXRoIG5vbi1udWxsL3VuZGVmaW5lZCB2YWx1ZXNcblx0XHRpZiAoICggb3B0aW9ucyA9IGFyZ3VtZW50c1sgaSBdICkgIT0gbnVsbCApIHtcblxuXHRcdFx0Ly8gRXh0ZW5kIHRoZSBiYXNlIG9iamVjdFxuXHRcdFx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdFx0XHRjb3B5ID0gb3B0aW9uc1sgbmFtZSBdO1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgT2JqZWN0LnByb3RvdHlwZSBwb2xsdXRpb25cblx0XHRcdFx0Ly8gUHJldmVudCBuZXZlci1lbmRpbmcgbG9vcFxuXHRcdFx0XHRpZiAoIG5hbWUgPT09IFwiX19wcm90b19fXCIgfHwgdGFyZ2V0ID09PSBjb3B5ICkge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVjdXJzZSBpZiB3ZSdyZSBtZXJnaW5nIHBsYWluIG9iamVjdHMgb3IgYXJyYXlzXG5cdFx0XHRcdGlmICggZGVlcCAmJiBjb3B5ICYmICggalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvcHkgKSB8fFxuXHRcdFx0XHRcdCggY29weUlzQXJyYXkgPSBBcnJheS5pc0FycmF5KCBjb3B5ICkgKSApICkge1xuXHRcdFx0XHRcdHNyYyA9IHRhcmdldFsgbmFtZSBdO1xuXG5cdFx0XHRcdFx0Ly8gRW5zdXJlIHByb3BlciB0eXBlIGZvciB0aGUgc291cmNlIHZhbHVlXG5cdFx0XHRcdFx0aWYgKCBjb3B5SXNBcnJheSAmJiAhQXJyYXkuaXNBcnJheSggc3JjICkgKSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IFtdO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoICFjb3B5SXNBcnJheSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHNyYyApICkge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSB7fTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmM7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGNvcHlJc0FycmF5ID0gZmFsc2U7XG5cblx0XHRcdFx0XHQvLyBOZXZlciBtb3ZlIG9yaWdpbmFsIG9iamVjdHMsIGNsb25lIHRoZW1cblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGpRdWVyeS5leHRlbmQoIGRlZXAsIGNsb25lLCBjb3B5ICk7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgYnJpbmcgaW4gdW5kZWZpbmVkIHZhbHVlc1xuXHRcdFx0XHR9IGVsc2UgaWYgKCBjb3B5ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBjb3B5O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBtb2RpZmllZCBvYmplY3Rcblx0cmV0dXJuIHRhcmdldDtcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBVbmlxdWUgZm9yIGVhY2ggY29weSBvZiBqUXVlcnkgb24gdGhlIHBhZ2Vcblx0ZXhwYW5kbzogXCJqUXVlcnlcIiArICggdmVyc2lvbiArIE1hdGgucmFuZG9tKCkgKS5yZXBsYWNlKCAvXFxEL2csIFwiXCIgKSxcblxuXHQvLyBBc3N1bWUgalF1ZXJ5IGlzIHJlYWR5IHdpdGhvdXQgdGhlIHJlYWR5IG1vZHVsZVxuXHRpc1JlYWR5OiB0cnVlLFxuXG5cdGVycm9yOiBmdW5jdGlvbiggbXNnICkge1xuXHRcdHRocm93IG5ldyBFcnJvciggbXNnICk7XG5cdH0sXG5cblx0bm9vcDogZnVuY3Rpb24oKSB7fSxcblxuXHRpc1BsYWluT2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHZhciBwcm90bywgQ3RvcjtcblxuXHRcdC8vIERldGVjdCBvYnZpb3VzIG5lZ2F0aXZlc1xuXHRcdC8vIFVzZSB0b1N0cmluZyBpbnN0ZWFkIG9mIGpRdWVyeS50eXBlIHRvIGNhdGNoIGhvc3Qgb2JqZWN0c1xuXHRcdGlmICggIW9iaiB8fCB0b1N0cmluZy5jYWxsKCBvYmogKSAhPT0gXCJbb2JqZWN0IE9iamVjdF1cIiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRwcm90byA9IGdldFByb3RvKCBvYmogKTtcblxuXHRcdC8vIE9iamVjdHMgd2l0aCBubyBwcm90b3R5cGUgKGUuZy4sIGBPYmplY3QuY3JlYXRlKCBudWxsIClgKSBhcmUgcGxhaW5cblx0XHRpZiAoICFwcm90byApIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdC8vIE9iamVjdHMgd2l0aCBwcm90b3R5cGUgYXJlIHBsYWluIGlmZiB0aGV5IHdlcmUgY29uc3RydWN0ZWQgYnkgYSBnbG9iYWwgT2JqZWN0IGZ1bmN0aW9uXG5cdFx0Q3RvciA9IGhhc093bi5jYWxsKCBwcm90bywgXCJjb25zdHJ1Y3RvclwiICkgJiYgcHJvdG8uY29uc3RydWN0b3I7XG5cdFx0cmV0dXJuIHR5cGVvZiBDdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgZm5Ub1N0cmluZy5jYWxsKCBDdG9yICkgPT09IE9iamVjdEZ1bmN0aW9uU3RyaW5nO1xuXHR9LFxuXG5cdGlzRW1wdHlPYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIG5hbWU7XG5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cblx0Ly8gRXZhbHVhdGVzIGEgc2NyaXB0IGluIGEgcHJvdmlkZWQgY29udGV4dDsgZmFsbHMgYmFjayB0byB0aGUgZ2xvYmFsIG9uZVxuXHQvLyBpZiBub3Qgc3BlY2lmaWVkLlxuXHRnbG9iYWxFdmFsOiBmdW5jdGlvbiggY29kZSwgb3B0aW9ucywgZG9jICkge1xuXHRcdERPTUV2YWwoIGNvZGUsIHsgbm9uY2U6IG9wdGlvbnMgJiYgb3B0aW9ucy5ub25jZSB9LCBkb2MgKTtcblx0fSxcblxuXHRlYWNoOiBmdW5jdGlvbiggb2JqLCBjYWxsYmFjayApIHtcblx0XHR2YXIgbGVuZ3RoLCBpID0gMDtcblxuXHRcdGlmICggaXNBcnJheUxpa2UoIG9iaiApICkge1xuXHRcdFx0bGVuZ3RoID0gb2JqLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gb2JqO1xuXHR9LFxuXG5cdC8vIHJlc3VsdHMgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFrZUFycmF5OiBmdW5jdGlvbiggYXJyLCByZXN1bHRzICkge1xuXHRcdHZhciByZXQgPSByZXN1bHRzIHx8IFtdO1xuXG5cdFx0aWYgKCBhcnIgIT0gbnVsbCApIHtcblx0XHRcdGlmICggaXNBcnJheUxpa2UoIE9iamVjdCggYXJyICkgKSApIHtcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCByZXQsXG5cdFx0XHRcdFx0dHlwZW9mIGFyciA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0XHRbIGFyciBdIDogYXJyXG5cdFx0XHRcdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmNhbGwoIHJldCwgYXJyICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHRpbkFycmF5OiBmdW5jdGlvbiggZWxlbSwgYXJyLCBpICkge1xuXHRcdHJldHVybiBhcnIgPT0gbnVsbCA/IC0xIDogaW5kZXhPZi5jYWxsKCBhcnIsIGVsZW0sIGkgKTtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRtZXJnZTogZnVuY3Rpb24oIGZpcnN0LCBzZWNvbmQgKSB7XG5cdFx0dmFyIGxlbiA9ICtzZWNvbmQubGVuZ3RoLFxuXHRcdFx0aiA9IDAsXG5cdFx0XHRpID0gZmlyc3QubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRmaXJzdFsgaSsrIF0gPSBzZWNvbmRbIGogXTtcblx0XHR9XG5cblx0XHRmaXJzdC5sZW5ndGggPSBpO1xuXG5cdFx0cmV0dXJuIGZpcnN0O1xuXHR9LFxuXG5cdGdyZXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGludmVydCApIHtcblx0XHR2YXIgY2FsbGJhY2tJbnZlcnNlLFxuXHRcdFx0bWF0Y2hlcyA9IFtdLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGgsXG5cdFx0XHRjYWxsYmFja0V4cGVjdCA9ICFpbnZlcnQ7XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgb25seSBzYXZpbmcgdGhlIGl0ZW1zXG5cdFx0Ly8gdGhhdCBwYXNzIHRoZSB2YWxpZGF0b3IgZnVuY3Rpb25cblx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdGNhbGxiYWNrSW52ZXJzZSA9ICFjYWxsYmFjayggZWxlbXNbIGkgXSwgaSApO1xuXHRcdFx0aWYgKCBjYWxsYmFja0ludmVyc2UgIT09IGNhbGxiYWNrRXhwZWN0ICkge1xuXHRcdFx0XHRtYXRjaGVzLnB1c2goIGVsZW1zWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbWF0Y2hlcztcblx0fSxcblxuXHQvLyBhcmcgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBhcmcgKSB7XG5cdFx0dmFyIGxlbmd0aCwgdmFsdWUsXG5cdFx0XHRpID0gMCxcblx0XHRcdHJldCA9IFtdO1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIHRyYW5zbGF0aW5nIGVhY2ggb2YgdGhlIGl0ZW1zIHRvIHRoZWlyIG5ldyB2YWx1ZXNcblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBlbGVtcyApICkge1xuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gR28gdGhyb3VnaCBldmVyeSBrZXkgb24gdGhlIG9iamVjdCxcblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBlbGVtcyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRcdHJldHVybiBmbGF0KCByZXQgKTtcblx0fSxcblxuXHQvLyBBIGdsb2JhbCBHVUlEIGNvdW50ZXIgZm9yIG9iamVjdHNcblx0Z3VpZDogMSxcblxuXHQvLyBqUXVlcnkuc3VwcG9ydCBpcyBub3QgdXNlZCBpbiBDb3JlIGJ1dCBvdGhlciBwcm9qZWN0cyBhdHRhY2ggdGhlaXJcblx0Ly8gcHJvcGVydGllcyB0byBpdCBzbyBpdCBuZWVkcyB0byBleGlzdC5cblx0c3VwcG9ydDogc3VwcG9ydFxufSApO1xuXG5pZiAoIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiApIHtcblx0alF1ZXJ5LmZuWyBTeW1ib2wuaXRlcmF0b3IgXSA9IGFyclsgU3ltYm9sLml0ZXJhdG9yIF07XG59XG5cbi8vIFBvcHVsYXRlIHRoZSBjbGFzczJ0eXBlIG1hcFxualF1ZXJ5LmVhY2goIFwiQm9vbGVhbiBOdW1iZXIgU3RyaW5nIEZ1bmN0aW9uIEFycmF5IERhdGUgUmVnRXhwIE9iamVjdCBFcnJvciBTeW1ib2xcIi5zcGxpdCggXCIgXCIgKSxcblx0ZnVuY3Rpb24oIF9pLCBuYW1lICkge1xuXHRcdGNsYXNzMnR5cGVbIFwiW29iamVjdCBcIiArIG5hbWUgKyBcIl1cIiBdID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXHR9ICk7XG5cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKCBvYmogKSB7XG5cblx0Ly8gU3VwcG9ydDogcmVhbCBpT1MgOC4yIG9ubHkgKG5vdCByZXByb2R1Y2libGUgaW4gc2ltdWxhdG9yKVxuXHQvLyBgaW5gIGNoZWNrIHVzZWQgdG8gcHJldmVudCBKSVQgZXJyb3IgKGdoLTIxNDUpXG5cdC8vIGhhc093biBpc24ndCB1c2VkIGhlcmUgZHVlIHRvIGZhbHNlIG5lZ2F0aXZlc1xuXHQvLyByZWdhcmRpbmcgTm9kZWxpc3QgbGVuZ3RoIGluIElFXG5cdHZhciBsZW5ndGggPSAhIW9iaiAmJiBcImxlbmd0aFwiIGluIG9iaiAmJiBvYmoubGVuZ3RoLFxuXHRcdHR5cGUgPSB0b1R5cGUoIG9iaiApO1xuXG5cdGlmICggaXNGdW5jdGlvbiggb2JqICkgfHwgaXNXaW5kb3coIG9iaiApICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiB0eXBlID09PSBcImFycmF5XCIgfHwgbGVuZ3RoID09PSAwIHx8XG5cdFx0dHlwZW9mIGxlbmd0aCA9PT0gXCJudW1iZXJcIiAmJiBsZW5ndGggPiAwICYmICggbGVuZ3RoIC0gMSApIGluIG9iajtcbn1cbnZhciBTaXp6bGUgPVxuLyohXG4gKiBTaXp6bGUgQ1NTIFNlbGVjdG9yIEVuZ2luZSB2Mi4zLjEwXG4gKiBodHRwczovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHBzOi8vanMuZm91bmRhdGlvbi9cbiAqXG4gKiBEYXRlOiAyMDIzLTAyLTE0XG4gKi9cbiggZnVuY3Rpb24oIHdpbmRvdyApIHtcbnZhciBpLFxuXHRzdXBwb3J0LFxuXHRFeHByLFxuXHRnZXRUZXh0LFxuXHRpc1hNTCxcblx0dG9rZW5pemUsXG5cdGNvbXBpbGUsXG5cdHNlbGVjdCxcblx0b3V0ZXJtb3N0Q29udGV4dCxcblx0c29ydElucHV0LFxuXHRoYXNEdXBsaWNhdGUsXG5cblx0Ly8gTG9jYWwgZG9jdW1lbnQgdmFyc1xuXHRzZXREb2N1bWVudCxcblx0ZG9jdW1lbnQsXG5cdGRvY0VsZW0sXG5cdGRvY3VtZW50SXNIVE1MLFxuXHRyYnVnZ3lRU0EsXG5cdHJidWdneU1hdGNoZXMsXG5cdG1hdGNoZXMsXG5cdGNvbnRhaW5zLFxuXG5cdC8vIEluc3RhbmNlLXNwZWNpZmljIGRhdGFcblx0ZXhwYW5kbyA9IFwic2l6emxlXCIgKyAxICogbmV3IERhdGUoKSxcblx0cHJlZmVycmVkRG9jID0gd2luZG93LmRvY3VtZW50LFxuXHRkaXJydW5zID0gMCxcblx0ZG9uZSA9IDAsXG5cdGNsYXNzQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHR0b2tlbkNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0Y29tcGlsZXJDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdG5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRzb3J0T3JkZXIgPSBmdW5jdGlvbiggYSwgYiApIHtcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gMDtcblx0fSxcblxuXHQvLyBJbnN0YW5jZSBtZXRob2RzXG5cdGhhc093biA9ICgge30gKS5oYXNPd25Qcm9wZXJ0eSxcblx0YXJyID0gW10sXG5cdHBvcCA9IGFyci5wb3AsXG5cdHB1c2hOYXRpdmUgPSBhcnIucHVzaCxcblx0cHVzaCA9IGFyci5wdXNoLFxuXHRzbGljZSA9IGFyci5zbGljZSxcblxuXHQvLyBVc2UgYSBzdHJpcHBlZC1kb3duIGluZGV4T2YgYXMgaXQncyBmYXN0ZXIgdGhhbiBuYXRpdmVcblx0Ly8gaHR0cHM6Ly9qc3BlcmYuY29tL3Rob3ItaW5kZXhvZi12cy1mb3IvNVxuXHRpbmRleE9mID0gZnVuY3Rpb24oIGxpc3QsIGVsZW0gKSB7XG5cdFx0dmFyIGkgPSAwLFxuXHRcdFx0bGVuID0gbGlzdC5sZW5ndGg7XG5cdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRpZiAoIGxpc3RbIGkgXSA9PT0gZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiAtMTtcblx0fSxcblxuXHRib29sZWFucyA9IFwiY2hlY2tlZHxzZWxlY3RlZHxhc3luY3xhdXRvZm9jdXN8YXV0b3BsYXl8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufFwiICtcblx0XHRcImlzbWFwfGxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWRcIixcblxuXHQvLyBSZWd1bGFyIGV4cHJlc3Npb25zXG5cblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1zZWxlY3RvcnMvI3doaXRlc3BhY2Vcblx0d2hpdGVzcGFjZSA9IFwiW1xcXFx4MjBcXFxcdFxcXFxyXFxcXG5cXFxcZl1cIixcblxuXHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvY3NzLXN5bnRheC0zLyNpZGVudC10b2tlbi1kaWFncmFtXG5cdGlkZW50aWZpZXIgPSBcIig/OlxcXFxcXFxcW1xcXFxkYS1mQS1GXXsxLDZ9XCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcIj98XFxcXFxcXFxbXlxcXFxyXFxcXG5cXFxcZl18W1xcXFx3LV18W15cXDAtXFxcXHg3Zl0pK1wiLFxuXG5cdC8vIEF0dHJpYnV0ZSBzZWxlY3RvcnM6IGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jYXR0cmlidXRlLXNlbGVjdG9yc1xuXHRhdHRyaWJ1dGVzID0gXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcIiArIHdoaXRlc3BhY2UgK1xuXG5cdFx0Ly8gT3BlcmF0b3IgKGNhcHR1cmUgMilcblx0XHRcIiooWypeJHwhfl0/PSlcIiArIHdoaXRlc3BhY2UgK1xuXG5cdFx0Ly8gXCJBdHRyaWJ1dGUgdmFsdWVzIG11c3QgYmUgQ1NTIGlkZW50aWZpZXJzIFtjYXB0dXJlIDVdXG5cdFx0Ly8gb3Igc3RyaW5ncyBbY2FwdHVyZSAzIG9yIGNhcHR1cmUgNF1cIlxuXHRcdFwiKig/OicoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcInwoXCIgKyBpZGVudGlmaWVyICsgXCIpKXwpXCIgK1xuXHRcdHdoaXRlc3BhY2UgKyBcIipcXFxcXVwiLFxuXG5cdHBzZXVkb3MgPSBcIjooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XFxcXCgoXCIgK1xuXG5cdFx0Ly8gVG8gcmVkdWNlIHRoZSBudW1iZXIgb2Ygc2VsZWN0b3JzIG5lZWRpbmcgdG9rZW5pemUgaW4gdGhlIHByZUZpbHRlciwgcHJlZmVyIGFyZ3VtZW50czpcblx0XHQvLyAxLiBxdW90ZWQgKGNhcHR1cmUgMzsgY2FwdHVyZSA0IG9yIGNhcHR1cmUgNSlcblx0XHRcIignKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCIpfFwiICtcblxuXHRcdC8vIDIuIHNpbXBsZSAoY2FwdHVyZSA2KVxuXHRcdFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKClbXFxcXF1dfFwiICsgYXR0cmlidXRlcyArIFwiKSopfFwiICtcblxuXHRcdC8vIDMuIGFueXRoaW5nIGVsc2UgKGNhcHR1cmUgMilcblx0XHRcIi4qXCIgK1xuXHRcdFwiKVxcXFwpfClcIixcblxuXHQvLyBMZWFkaW5nIGFuZCBub24tZXNjYXBlZCB0cmFpbGluZyB3aGl0ZXNwYWNlLCBjYXB0dXJpbmcgc29tZSBub24td2hpdGVzcGFjZSBjaGFyYWN0ZXJzIHByZWNlZGluZyB0aGUgbGF0dGVyXG5cdHJ3aGl0ZXNwYWNlID0gbmV3IFJlZ0V4cCggd2hpdGVzcGFjZSArIFwiK1wiLCBcImdcIiApLFxuXHRydHJpbSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiK3woKD86XnxbXlxcXFxcXFxcXSkoPzpcXFxcXFxcXC4pKilcIiArXG5cdFx0d2hpdGVzcGFjZSArIFwiKyRcIiwgXCJnXCIgKSxcblxuXHRyY29tbWEgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiosXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblx0cmxlYWRpbmdDb21iaW5hdG9yID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFs+K35dfFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XCIqXCIgKSxcblx0cmRlc2NlbmQgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCJ8PlwiICksXG5cblx0cnBzZXVkbyA9IG5ldyBSZWdFeHAoIHBzZXVkb3MgKSxcblx0cmlkZW50aWZpZXIgPSBuZXcgUmVnRXhwKCBcIl5cIiArIGlkZW50aWZpZXIgKyBcIiRcIiApLFxuXG5cdG1hdGNoRXhwciA9IHtcblx0XHRcIklEXCI6IG5ldyBSZWdFeHAoIFwiXiMoXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIkNMQVNTXCI6IG5ldyBSZWdFeHAoIFwiXlxcXFwuKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJUQUdcIjogbmV3IFJlZ0V4cCggXCJeKFwiICsgaWRlbnRpZmllciArIFwifFsqXSlcIiApLFxuXHRcdFwiQVRUUlwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIGF0dHJpYnV0ZXMgKSxcblx0XHRcIlBTRVVET1wiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHBzZXVkb3MgKSxcblx0XHRcIkNISUxEXCI6IG5ldyBSZWdFeHAoIFwiXjoob25seXxmaXJzdHxsYXN0fG50aHxudGgtbGFzdCktKGNoaWxkfG9mLXR5cGUpKD86XFxcXChcIiArXG5cdFx0XHR3aGl0ZXNwYWNlICsgXCIqKGV2ZW58b2RkfCgoWystXXwpKFxcXFxkKilufClcIiArIHdoaXRlc3BhY2UgKyBcIiooPzooWystXXwpXCIgK1xuXHRcdFx0d2hpdGVzcGFjZSArIFwiKihcXFxcZCspfCkpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KVwiLCBcImlcIiApLFxuXHRcdFwiYm9vbFwiOiBuZXcgUmVnRXhwKCBcIl4oPzpcIiArIGJvb2xlYW5zICsgXCIpJFwiLCBcImlcIiApLFxuXG5cdFx0Ly8gRm9yIHVzZSBpbiBsaWJyYXJpZXMgaW1wbGVtZW50aW5nIC5pcygpXG5cdFx0Ly8gV2UgdXNlIHRoaXMgZm9yIFBPUyBtYXRjaGluZyBpbiBgc2VsZWN0YFxuXHRcdFwibmVlZHNDb250ZXh0XCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIipbPit+XXw6KGV2ZW58b2RkfGVxfGd0fGx0fG50aHxmaXJzdHxsYXN0KSg/OlxcXFwoXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKigoPzotXFxcXGQpP1xcXFxkKilcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpKD89W14tXXwkKVwiLCBcImlcIiApXG5cdH0sXG5cblx0cmh0bWwgPSAvSFRNTCQvaSxcblx0cmlucHV0cyA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJoZWFkZXIgPSAvXmhcXGQkL2ksXG5cblx0cm5hdGl2ZSA9IC9eW157XStcXHtcXHMqXFxbbmF0aXZlIFxcdy8sXG5cblx0Ly8gRWFzaWx5LXBhcnNlYWJsZS9yZXRyaWV2YWJsZSBJRCBvciBUQUcgb3IgQ0xBU1Mgc2VsZWN0b3JzXG5cdHJxdWlja0V4cHIgPSAvXig/OiMoW1xcdy1dKyl8KFxcdyspfFxcLihbXFx3LV0rKSkkLyxcblxuXHRyc2libGluZyA9IC9bK35dLyxcblxuXHQvLyBDU1MgZXNjYXBlc1xuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjZXNjYXBlZC1jaGFyYWN0ZXJzXG5cdHJ1bmVzY2FwZSA9IG5ldyBSZWdFeHAoIFwiXFxcXFxcXFxbXFxcXGRhLWZBLUZdezEsNn1cIiArIHdoaXRlc3BhY2UgKyBcIj98XFxcXFxcXFwoW15cXFxcclxcXFxuXFxcXGZdKVwiLCBcImdcIiApLFxuXHRmdW5lc2NhcGUgPSBmdW5jdGlvbiggZXNjYXBlLCBub25IZXggKSB7XG5cdFx0dmFyIGhpZ2ggPSBcIjB4XCIgKyBlc2NhcGUuc2xpY2UoIDEgKSAtIDB4MTAwMDA7XG5cblx0XHRyZXR1cm4gbm9uSGV4ID9cblxuXHRcdFx0Ly8gU3RyaXAgdGhlIGJhY2tzbGFzaCBwcmVmaXggZnJvbSBhIG5vbi1oZXggZXNjYXBlIHNlcXVlbmNlXG5cdFx0XHRub25IZXggOlxuXG5cdFx0XHQvLyBSZXBsYWNlIGEgaGV4YWRlY2ltYWwgZXNjYXBlIHNlcXVlbmNlIHdpdGggdGhlIGVuY29kZWQgVW5pY29kZSBjb2RlIHBvaW50XG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTExK1xuXHRcdFx0Ly8gRm9yIHZhbHVlcyBvdXRzaWRlIHRoZSBCYXNpYyBNdWx0aWxpbmd1YWwgUGxhbmUgKEJNUCksIG1hbnVhbGx5IGNvbnN0cnVjdCBhXG5cdFx0XHQvLyBzdXJyb2dhdGUgcGFpclxuXHRcdFx0aGlnaCA8IDAgP1xuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoICsgMHgxMDAwMCApIDpcblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCA+PiAxMCB8IDB4RDgwMCwgaGlnaCAmIDB4M0ZGIHwgMHhEQzAwICk7XG5cdH0sXG5cblx0Ly8gQ1NTIHN0cmluZy9pZGVudGlmaWVyIHNlcmlhbGl6YXRpb25cblx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNjb21tb24tc2VyaWFsaXppbmctaWRpb21zXG5cdHJjc3Nlc2NhcGUgPSAvKFtcXDAtXFx4MWZcXHg3Zl18Xi0/XFxkKXxeLSR8W15cXDAtXFx4MWZcXHg3Zi1cXHVGRkZGXFx3LV0vZyxcblx0ZmNzc2VzY2FwZSA9IGZ1bmN0aW9uKCBjaCwgYXNDb2RlUG9pbnQgKSB7XG5cdFx0aWYgKCBhc0NvZGVQb2ludCApIHtcblxuXHRcdFx0Ly8gVSswMDAwIE5VTEwgYmVjb21lcyBVK0ZGRkQgUkVQTEFDRU1FTlQgQ0hBUkFDVEVSXG5cdFx0XHRpZiAoIGNoID09PSBcIlxcMFwiICkge1xuXHRcdFx0XHRyZXR1cm4gXCJcXHVGRkZEXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnRyb2wgY2hhcmFjdGVycyBhbmQgKGRlcGVuZGVudCB1cG9uIHBvc2l0aW9uKSBudW1iZXJzIGdldCBlc2NhcGVkIGFzIGNvZGUgcG9pbnRzXG5cdFx0XHRyZXR1cm4gY2guc2xpY2UoIDAsIC0xICkgKyBcIlxcXFxcIiArXG5cdFx0XHRcdGNoLmNoYXJDb2RlQXQoIGNoLmxlbmd0aCAtIDEgKS50b1N0cmluZyggMTYgKSArIFwiIFwiO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyIHBvdGVudGlhbGx5LXNwZWNpYWwgQVNDSUkgY2hhcmFjdGVycyBnZXQgYmFja3NsYXNoLWVzY2FwZWRcblx0XHRyZXR1cm4gXCJcXFxcXCIgKyBjaDtcblx0fSxcblxuXHQvLyBVc2VkIGZvciBpZnJhbWVzXG5cdC8vIFNlZSBzZXREb2N1bWVudCgpXG5cdC8vIFJlbW92aW5nIHRoZSBmdW5jdGlvbiB3cmFwcGVyIGNhdXNlcyBhIFwiUGVybWlzc2lvbiBEZW5pZWRcIlxuXHQvLyBlcnJvciBpbiBJRVxuXHR1bmxvYWRIYW5kbGVyID0gZnVuY3Rpb24oKSB7XG5cdFx0c2V0RG9jdW1lbnQoKTtcblx0fSxcblxuXHRpbkRpc2FibGVkRmllbGRzZXQgPSBhZGRDb21iaW5hdG9yKFxuXHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IHRydWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImZpZWxkc2V0XCI7XG5cdFx0fSxcblx0XHR7IGRpcjogXCJwYXJlbnROb2RlXCIsIG5leHQ6IFwibGVnZW5kXCIgfVxuXHQpO1xuXG4vLyBPcHRpbWl6ZSBmb3IgcHVzaC5hcHBseSggXywgTm9kZUxpc3QgKVxudHJ5IHtcblx0cHVzaC5hcHBseShcblx0XHQoIGFyciA9IHNsaWNlLmNhbGwoIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzICkgKSxcblx0XHRwcmVmZXJyZWREb2MuY2hpbGROb2Rlc1xuXHQpO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4wXG5cdC8vIERldGVjdCBzaWxlbnRseSBmYWlsaW5nIHB1c2guYXBwbHlcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC1leHByZXNzaW9uc1xuXHRhcnJbIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzLmxlbmd0aCBdLm5vZGVUeXBlO1xufSBjYXRjaCAoIGUgKSB7XG5cdHB1c2ggPSB7IGFwcGx5OiBhcnIubGVuZ3RoID9cblxuXHRcdC8vIExldmVyYWdlIHNsaWNlIGlmIHBvc3NpYmxlXG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0cHVzaE5hdGl2ZS5hcHBseSggdGFyZ2V0LCBzbGljZS5jYWxsKCBlbHMgKSApO1xuXHRcdH0gOlxuXG5cdFx0Ly8gU3VwcG9ydDogSUU8OVxuXHRcdC8vIE90aGVyd2lzZSBhcHBlbmQgZGlyZWN0bHlcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHR2YXIgaiA9IHRhcmdldC5sZW5ndGgsXG5cdFx0XHRcdGkgPSAwO1xuXG5cdFx0XHQvLyBDYW4ndCB0cnVzdCBOb2RlTGlzdC5sZW5ndGhcblx0XHRcdHdoaWxlICggKCB0YXJnZXRbIGorKyBdID0gZWxzWyBpKysgXSApICkge31cblx0XHRcdHRhcmdldC5sZW5ndGggPSBqIC0gMTtcblx0XHR9XG5cdH07XG59XG5cbmZ1bmN0aW9uIFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBtLCBpLCBlbGVtLCBuaWQsIG1hdGNoLCBncm91cHMsIG5ld1NlbGVjdG9yLFxuXHRcdG5ld0NvbnRleHQgPSBjb250ZXh0ICYmIGNvbnRleHQub3duZXJEb2N1bWVudCxcblxuXHRcdC8vIG5vZGVUeXBlIGRlZmF1bHRzIHRvIDksIHNpbmNlIGNvbnRleHQgZGVmYXVsdHMgdG8gZG9jdW1lbnRcblx0XHRub2RlVHlwZSA9IGNvbnRleHQgPyBjb250ZXh0Lm5vZGVUeXBlIDogOTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBSZXR1cm4gZWFybHkgZnJvbSBjYWxscyB3aXRoIGludmFsaWQgc2VsZWN0b3Igb3IgY29udGV4dFxuXHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiB8fCAhc2VsZWN0b3IgfHxcblx0XHRub2RlVHlwZSAhPT0gMSAmJiBub2RlVHlwZSAhPT0gOSAmJiBub2RlVHlwZSAhPT0gMTEgKSB7XG5cblx0XHRyZXR1cm4gcmVzdWx0cztcblx0fVxuXG5cdC8vIFRyeSB0byBzaG9ydGN1dCBmaW5kIG9wZXJhdGlvbnMgKGFzIG9wcG9zZWQgdG8gZmlsdGVycykgaW4gSFRNTCBkb2N1bWVudHNcblx0aWYgKCAhc2VlZCApIHtcblx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHRcdGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xuXG5cdFx0aWYgKCBkb2N1bWVudElzSFRNTCApIHtcblxuXHRcdFx0Ly8gSWYgdGhlIHNlbGVjdG9yIGlzIHN1ZmZpY2llbnRseSBzaW1wbGUsIHRyeSB1c2luZyBhIFwiZ2V0KkJ5KlwiIERPTSBtZXRob2Rcblx0XHRcdC8vIChleGNlcHRpbmcgRG9jdW1lbnRGcmFnbWVudCBjb250ZXh0LCB3aGVyZSB0aGUgbWV0aG9kcyBkb24ndCBleGlzdClcblx0XHRcdGlmICggbm9kZVR5cGUgIT09IDExICYmICggbWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICkgKSApIHtcblxuXHRcdFx0XHQvLyBJRCBzZWxlY3RvclxuXHRcdFx0XHRpZiAoICggbSA9IG1hdGNoWyAxIF0gKSApIHtcblxuXHRcdFx0XHRcdC8vIERvY3VtZW50IGNvbnRleHRcblx0XHRcdFx0XHRpZiAoIG5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkgKSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRcdGlmICggZWxlbS5pZCA9PT0gbSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBFbGVtZW50IGNvbnRleHRcblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdGlmICggbmV3Q29udGV4dCAmJiAoIGVsZW0gPSBuZXdDb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkgKSAmJlxuXHRcdFx0XHRcdFx0XHRjb250YWlucyggY29udGV4dCwgZWxlbSApICYmXG5cdFx0XHRcdFx0XHRcdGVsZW0uaWQgPT09IG0gKSB7XG5cblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUeXBlIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWyAyIF0gKSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggc2VsZWN0b3IgKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHRcdC8vIENsYXNzIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoICggbSA9IG1hdGNoWyAzIF0gKSAmJiBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiZcblx0XHRcdFx0XHRjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKSB7XG5cblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIG0gKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRha2UgYWR2YW50YWdlIG9mIHF1ZXJ5U2VsZWN0b3JBbGxcblx0XHRcdGlmICggc3VwcG9ydC5xc2EgJiZcblx0XHRcdFx0IW5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXSAmJlxuXHRcdFx0XHQoICFyYnVnZ3lRU0EgfHwgIXJidWdneVFTQS50ZXN0KCBzZWxlY3RvciApICkgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA4IG9ubHlcblx0XHRcdFx0Ly8gRXhjbHVkZSBvYmplY3QgZWxlbWVudHNcblx0XHRcdFx0KCBub2RlVHlwZSAhPT0gMSB8fCBjb250ZXh0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09IFwib2JqZWN0XCIgKSApIHtcblxuXHRcdFx0XHRuZXdTZWxlY3RvciA9IHNlbGVjdG9yO1xuXHRcdFx0XHRuZXdDb250ZXh0ID0gY29udGV4dDtcblxuXHRcdFx0XHQvLyBxU0EgY29uc2lkZXJzIGVsZW1lbnRzIG91dHNpZGUgYSBzY29waW5nIHJvb3Qgd2hlbiBldmFsdWF0aW5nIGNoaWxkIG9yXG5cdFx0XHRcdC8vIGRlc2NlbmRhbnQgY29tYmluYXRvcnMsIHdoaWNoIGlzIG5vdCB3aGF0IHdlIHdhbnQuXG5cdFx0XHRcdC8vIEluIHN1Y2ggY2FzZXMsIHdlIHdvcmsgYXJvdW5kIHRoZSBiZWhhdmlvciBieSBwcmVmaXhpbmcgZXZlcnkgc2VsZWN0b3IgaW4gdGhlXG5cdFx0XHRcdC8vIGxpc3Qgd2l0aCBhbiBJRCBzZWxlY3RvciByZWZlcmVuY2luZyB0aGUgc2NvcGUgY29udGV4dC5cblx0XHRcdFx0Ly8gVGhlIHRlY2huaXF1ZSBoYXMgdG8gYmUgdXNlZCBhcyB3ZWxsIHdoZW4gYSBsZWFkaW5nIGNvbWJpbmF0b3IgaXMgdXNlZFxuXHRcdFx0XHQvLyBhcyBzdWNoIHNlbGVjdG9ycyBhcmUgbm90IHJlY29nbml6ZWQgYnkgcXVlcnlTZWxlY3RvckFsbC5cblx0XHRcdFx0Ly8gVGhhbmtzIHRvIEFuZHJldyBEdXBvbnQgZm9yIHRoaXMgdGVjaG5pcXVlLlxuXHRcdFx0XHRpZiAoIG5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdFx0KCByZGVzY2VuZC50ZXN0KCBzZWxlY3RvciApIHx8IHJsZWFkaW5nQ29tYmluYXRvci50ZXN0KCBzZWxlY3RvciApICkgKSB7XG5cblx0XHRcdFx0XHQvLyBFeHBhbmQgY29udGV4dCBmb3Igc2libGluZyBzZWxlY3RvcnNcblx0XHRcdFx0XHRuZXdDb250ZXh0ID0gcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHxcblx0XHRcdFx0XHRcdGNvbnRleHQ7XG5cblx0XHRcdFx0XHQvLyBXZSBjYW4gdXNlIDpzY29wZSBpbnN0ZWFkIG9mIHRoZSBJRCBoYWNrIGlmIHRoZSBicm93c2VyXG5cdFx0XHRcdFx0Ly8gc3VwcG9ydHMgaXQgJiBpZiB3ZSdyZSBub3QgY2hhbmdpbmcgdGhlIGNvbnRleHQuXG5cdFx0XHRcdFx0aWYgKCBuZXdDb250ZXh0ICE9PSBjb250ZXh0IHx8ICFzdXBwb3J0LnNjb3BlICkge1xuXG5cdFx0XHRcdFx0XHQvLyBDYXB0dXJlIHRoZSBjb250ZXh0IElELCBzZXR0aW5nIGl0IGZpcnN0IGlmIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdFx0aWYgKCAoIG5pZCA9IGNvbnRleHQuZ2V0QXR0cmlidXRlKCBcImlkXCIgKSApICkge1xuXHRcdFx0XHRcdFx0XHRuaWQgPSBuaWQucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Y29udGV4dC5zZXRBdHRyaWJ1dGUoIFwiaWRcIiwgKCBuaWQgPSBleHBhbmRvICkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmVmaXggZXZlcnkgc2VsZWN0b3IgaW4gdGhlIGxpc3Rcblx0XHRcdFx0XHRncm91cHMgPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHRcdFx0XHRpID0gZ3JvdXBzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGdyb3Vwc1sgaSBdID0gKCBuaWQgPyBcIiNcIiArIG5pZCA6IFwiOnNjb3BlXCIgKSArIFwiIFwiICtcblx0XHRcdFx0XHRcdFx0dG9TZWxlY3RvciggZ3JvdXBzWyBpIF0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bmV3U2VsZWN0b3IgPSBncm91cHMuam9pbiggXCIsXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cyxcblx0XHRcdFx0XHRcdG5ld0NvbnRleHQucXVlcnlTZWxlY3RvckFsbCggbmV3U2VsZWN0b3IgKVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdH0gY2F0Y2ggKCBxc2FFcnJvciApIHtcblx0XHRcdFx0XHRub25uYXRpdmVTZWxlY3RvckNhY2hlKCBzZWxlY3RvciwgdHJ1ZSApO1xuXHRcdFx0XHR9IGZpbmFsbHkge1xuXHRcdFx0XHRcdGlmICggbmlkID09PSBleHBhbmRvICkge1xuXHRcdFx0XHRcdFx0Y29udGV4dC5yZW1vdmVBdHRyaWJ1dGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFsbCBvdGhlcnNcblx0cmV0dXJuIHNlbGVjdCggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICk7XG59XG5cbi8qKlxuICogQ3JlYXRlIGtleS12YWx1ZSBjYWNoZXMgb2YgbGltaXRlZCBzaXplXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb24oc3RyaW5nLCBvYmplY3QpfSBSZXR1cm5zIHRoZSBPYmplY3QgZGF0YSBhZnRlciBzdG9yaW5nIGl0IG9uIGl0c2VsZiB3aXRoXG4gKlx0cHJvcGVydHkgbmFtZSB0aGUgKHNwYWNlLXN1ZmZpeGVkKSBzdHJpbmcgYW5kIChpZiB0aGUgY2FjaGUgaXMgbGFyZ2VyIHRoYW4gRXhwci5jYWNoZUxlbmd0aClcbiAqXHRkZWxldGluZyB0aGUgb2xkZXN0IGVudHJ5XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNhY2hlKCkge1xuXHR2YXIga2V5cyA9IFtdO1xuXG5cdGZ1bmN0aW9uIGNhY2hlKCBrZXksIHZhbHVlICkge1xuXG5cdFx0Ly8gVXNlIChrZXkgKyBcIiBcIikgdG8gYXZvaWQgY29sbGlzaW9uIHdpdGggbmF0aXZlIHByb3RvdHlwZSBwcm9wZXJ0aWVzIChzZWUgSXNzdWUgIzE1Nylcblx0XHRpZiAoIGtleXMucHVzaCgga2V5ICsgXCIgXCIgKSA+IEV4cHIuY2FjaGVMZW5ndGggKSB7XG5cblx0XHRcdC8vIE9ubHkga2VlcCB0aGUgbW9zdCByZWNlbnQgZW50cmllc1xuXHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlzLnNoaWZ0KCkgXTtcblx0XHR9XG5cdFx0cmV0dXJuICggY2FjaGVbIGtleSArIFwiIFwiIF0gPSB2YWx1ZSApO1xuXHR9XG5cdHJldHVybiBjYWNoZTtcbn1cblxuLyoqXG4gKiBNYXJrIGEgZnVuY3Rpb24gZm9yIHNwZWNpYWwgdXNlIGJ5IFNpenpsZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIG1hcmtcbiAqL1xuZnVuY3Rpb24gbWFya0Z1bmN0aW9uKCBmbiApIHtcblx0Zm5bIGV4cGFuZG8gXSA9IHRydWU7XG5cdHJldHVybiBmbjtcbn1cblxuLyoqXG4gKiBTdXBwb3J0IHRlc3RpbmcgdXNpbmcgYW4gZWxlbWVudFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gUGFzc2VkIHRoZSBjcmVhdGVkIGVsZW1lbnQgYW5kIHJldHVybnMgYSBib29sZWFuIHJlc3VsdFxuICovXG5mdW5jdGlvbiBhc3NlcnQoIGZuICkge1xuXHR2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImZpZWxkc2V0XCIgKTtcblxuXHR0cnkge1xuXHRcdHJldHVybiAhIWZuKCBlbCApO1xuXHR9IGNhdGNoICggZSApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0gZmluYWxseSB7XG5cblx0XHQvLyBSZW1vdmUgZnJvbSBpdHMgcGFyZW50IGJ5IGRlZmF1bHRcblx0XHRpZiAoIGVsLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBlbCApO1xuXHRcdH1cblxuXHRcdC8vIHJlbGVhc2UgbWVtb3J5IGluIElFXG5cdFx0ZWwgPSBudWxsO1xuXHR9XG59XG5cbi8qKlxuICogQWRkcyB0aGUgc2FtZSBoYW5kbGVyIGZvciBhbGwgb2YgdGhlIHNwZWNpZmllZCBhdHRyc1xuICogQHBhcmFtIHtTdHJpbmd9IGF0dHJzIFBpcGUtc2VwYXJhdGVkIGxpc3Qgb2YgYXR0cmlidXRlc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciBUaGUgbWV0aG9kIHRoYXQgd2lsbCBiZSBhcHBsaWVkXG4gKi9cbmZ1bmN0aW9uIGFkZEhhbmRsZSggYXR0cnMsIGhhbmRsZXIgKSB7XG5cdHZhciBhcnIgPSBhdHRycy5zcGxpdCggXCJ8XCIgKSxcblx0XHRpID0gYXJyLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRFeHByLmF0dHJIYW5kbGVbIGFyclsgaSBdIF0gPSBoYW5kbGVyO1xuXHR9XG59XG5cbi8qKlxuICogQ2hlY2tzIGRvY3VtZW50IG9yZGVyIG9mIHR3byBzaWJsaW5nc1xuICogQHBhcmFtIHtFbGVtZW50fSBhXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFJldHVybnMgbGVzcyB0aGFuIDAgaWYgYSBwcmVjZWRlcyBiLCBncmVhdGVyIHRoYW4gMCBpZiBhIGZvbGxvd3MgYlxuICovXG5mdW5jdGlvbiBzaWJsaW5nQ2hlY2soIGEsIGIgKSB7XG5cdHZhciBjdXIgPSBiICYmIGEsXG5cdFx0ZGlmZiA9IGN1ciAmJiBhLm5vZGVUeXBlID09PSAxICYmIGIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdGEuc291cmNlSW5kZXggLSBiLnNvdXJjZUluZGV4O1xuXG5cdC8vIFVzZSBJRSBzb3VyY2VJbmRleCBpZiBhdmFpbGFibGUgb24gYm90aCBub2Rlc1xuXHRpZiAoIGRpZmYgKSB7XG5cdFx0cmV0dXJuIGRpZmY7XG5cdH1cblxuXHQvLyBDaGVjayBpZiBiIGZvbGxvd3MgYVxuXHRpZiAoIGN1ciApIHtcblx0XHR3aGlsZSAoICggY3VyID0gY3VyLm5leHRTaWJsaW5nICkgKSB7XG5cdFx0XHRpZiAoIGN1ciA9PT0gYiApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBhID8gMSA6IC0xO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgaW5wdXQgdHlwZXNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUlucHV0UHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBidXR0b25zXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVCdXR0b25Qc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gKCBuYW1lID09PSBcImlucHV0XCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIiApICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIDplbmFibGVkLzpkaXNhYmxlZFxuICogQHBhcmFtIHtCb29sZWFufSBkaXNhYmxlZCB0cnVlIGZvciA6ZGlzYWJsZWQ7IGZhbHNlIGZvciA6ZW5hYmxlZFxuICovXG5mdW5jdGlvbiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZGlzYWJsZWQgKSB7XG5cblx0Ly8gS25vd24gOmRpc2FibGVkIGZhbHNlIHBvc2l0aXZlczogZmllbGRzZXRbZGlzYWJsZWRdID4gbGVnZW5kOm50aC1vZi10eXBlKG4rMikgOmNhbi1kaXNhYmxlXG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE9ubHkgY2VydGFpbiBlbGVtZW50cyBjYW4gbWF0Y2ggOmVuYWJsZWQgb3IgOmRpc2FibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZW5hYmxlZFxuXHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3NlbGVjdG9yLWRpc2FibGVkXG5cdFx0aWYgKCBcImZvcm1cIiBpbiBlbGVtICkge1xuXG5cdFx0XHQvLyBDaGVjayBmb3IgaW5oZXJpdGVkIGRpc2FibGVkbmVzcyBvbiByZWxldmFudCBub24tZGlzYWJsZWQgZWxlbWVudHM6XG5cdFx0XHQvLyAqIGxpc3RlZCBmb3JtLWFzc29jaWF0ZWQgZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBmaWVsZHNldFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NhdGVnb3J5LWxpc3RlZFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtZmUtZGlzYWJsZWRcblx0XHRcdC8vICogb3B0aW9uIGVsZW1lbnRzIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LW9wdGlvbi1kaXNhYmxlZFxuXHRcdFx0Ly8gQWxsIHN1Y2ggZWxlbWVudHMgaGF2ZSBhIFwiZm9ybVwiIHByb3BlcnR5LlxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgJiYgZWxlbS5kaXNhYmxlZCA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0Ly8gT3B0aW9uIGVsZW1lbnRzIGRlZmVyIHRvIGEgcGFyZW50IG9wdGdyb3VwIGlmIHByZXNlbnRcblx0XHRcdFx0aWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcblx0XHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5wYXJlbnROb2RlLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDYgLSAxMVxuXHRcdFx0XHQvLyBVc2UgdGhlIGlzRGlzYWJsZWQgc2hvcnRjdXQgcHJvcGVydHkgdG8gY2hlY2sgZm9yIGRpc2FibGVkIGZpZWxkc2V0IGFuY2VzdG9yc1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pc0Rpc2FibGVkID09PSBkaXNhYmxlZCB8fFxuXG5cdFx0XHRcdFx0Ly8gV2hlcmUgdGhlcmUgaXMgbm8gaXNEaXNhYmxlZCwgY2hlY2sgbWFudWFsbHlcblx0XHRcdFx0XHQvKiBqc2hpbnQgLVcwMTggKi9cblx0XHRcdFx0XHRlbGVtLmlzRGlzYWJsZWQgIT09ICFkaXNhYmxlZCAmJlxuXHRcdFx0XHRcdGluRGlzYWJsZWRGaWVsZHNldCggZWxlbSApID09PSBkaXNhYmxlZDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXG5cdFx0Ly8gVHJ5IHRvIHdpbm5vdyBvdXQgZWxlbWVudHMgdGhhdCBjYW4ndCBiZSBkaXNhYmxlZCBiZWZvcmUgdHJ1c3RpbmcgdGhlIGRpc2FibGVkIHByb3BlcnR5LlxuXHRcdC8vIFNvbWUgdmljdGltcyBnZXQgY2F1Z2h0IGluIG91ciBuZXQgKGxhYmVsLCBsZWdlbmQsIG1lbnUsIHRyYWNrKSwgYnV0IGl0IHNob3VsZG4ndFxuXHRcdC8vIGV2ZW4gZXhpc3Qgb24gdGhlbSwgbGV0IGFsb25lIGhhdmUgYSBib29sZWFuIHZhbHVlLlxuXHRcdH0gZWxzZSBpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdH1cblxuXHRcdC8vIFJlbWFpbmluZyBlbGVtZW50cyBhcmUgbmVpdGhlciA6ZW5hYmxlZCBub3IgOmRpc2FibGVkXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgcG9zaXRpb25hbHNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZuICkge1xuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggYXJndW1lbnQgKSB7XG5cdFx0YXJndW1lbnQgPSArYXJndW1lbnQ7XG5cdFx0cmV0dXJuIG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHR2YXIgaixcblx0XHRcdFx0bWF0Y2hJbmRleGVzID0gZm4oIFtdLCBzZWVkLmxlbmd0aCwgYXJndW1lbnQgKSxcblx0XHRcdFx0aSA9IG1hdGNoSW5kZXhlcy5sZW5ndGg7XG5cblx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIGZvdW5kIGF0IHRoZSBzcGVjaWZpZWQgaW5kZXhlc1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggc2VlZFsgKCBqID0gbWF0Y2hJbmRleGVzWyBpIF0gKSBdICkge1xuXHRcdFx0XHRcdHNlZWRbIGogXSA9ICEoIG1hdGNoZXNbIGogXSA9IHNlZWRbIGogXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9ICk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGEgbm9kZSBmb3IgdmFsaWRpdHkgYXMgYSBTaXp6bGUgY29udGV4dFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdD19IGNvbnRleHRcbiAqIEByZXR1cm5zIHtFbGVtZW50fE9iamVjdHxCb29sZWFufSBUaGUgaW5wdXQgbm9kZSBpZiBhY2NlcHRhYmxlLCBvdGhlcndpc2UgYSBmYWxzeSB2YWx1ZVxuICovXG5mdW5jdGlvbiB0ZXN0Q29udGV4dCggY29udGV4dCApIHtcblx0cmV0dXJuIGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgY29udGV4dDtcbn1cblxuLy8gRXhwb3NlIHN1cHBvcnQgdmFycyBmb3IgY29udmVuaWVuY2VcbnN1cHBvcnQgPSBTaXp6bGUuc3VwcG9ydCA9IHt9O1xuXG4vKipcbiAqIERldGVjdHMgWE1MIG5vZGVzXG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBlbGVtIEFuIGVsZW1lbnQgb3IgYSBkb2N1bWVudFxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWZmIGVsZW0gaXMgYSBub24tSFRNTCBYTUwgbm9kZVxuICovXG5pc1hNTCA9IFNpenpsZS5pc1hNTCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHR2YXIgbmFtZXNwYWNlID0gZWxlbSAmJiBlbGVtLm5hbWVzcGFjZVVSSSxcblx0XHRkb2NFbGVtID0gZWxlbSAmJiAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkuZG9jdW1lbnRFbGVtZW50O1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OFxuXHQvLyBBc3N1bWUgSFRNTCB3aGVuIGRvY3VtZW50RWxlbWVudCBkb2Vzbid0IHlldCBleGlzdCwgc3VjaCBhcyBpbnNpZGUgbG9hZGluZyBpZnJhbWVzXG5cdC8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC80ODMzXG5cdHJldHVybiAhcmh0bWwudGVzdCggbmFtZXNwYWNlIHx8IGRvY0VsZW0gJiYgZG9jRWxlbS5ub2RlTmFtZSB8fCBcIkhUTUxcIiApO1xufTtcblxuLyoqXG4gKiBTZXRzIGRvY3VtZW50LXJlbGF0ZWQgdmFyaWFibGVzIG9uY2UgYmFzZWQgb24gdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IFtkb2NdIEFuIGVsZW1lbnQgb3IgZG9jdW1lbnQgb2JqZWN0IHRvIHVzZSB0byBzZXQgdGhlIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKi9cbnNldERvY3VtZW50ID0gU2l6emxlLnNldERvY3VtZW50ID0gZnVuY3Rpb24oIG5vZGUgKSB7XG5cdHZhciBoYXNDb21wYXJlLCBzdWJXaW5kb3csXG5cdFx0ZG9jID0gbm9kZSA/IG5vZGUub3duZXJEb2N1bWVudCB8fCBub2RlIDogcHJlZmVycmVkRG9jO1xuXG5cdC8vIFJldHVybiBlYXJseSBpZiBkb2MgaXMgaW52YWxpZCBvciBhbHJlYWR5IHNlbGVjdGVkXG5cdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdGlmICggZG9jID09IGRvY3VtZW50IHx8IGRvYy5ub2RlVHlwZSAhPT0gOSB8fCAhZG9jLmRvY3VtZW50RWxlbWVudCApIHtcblx0XHRyZXR1cm4gZG9jdW1lbnQ7XG5cdH1cblxuXHQvLyBVcGRhdGUgZ2xvYmFsIHZhcmlhYmxlc1xuXHRkb2N1bWVudCA9IGRvYztcblx0ZG9jRWxlbSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblx0ZG9jdW1lbnRJc0hUTUwgPSAhaXNYTUwoIGRvY3VtZW50ICk7XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExKywgRWRnZSAxMiAtIDE4K1xuXHQvLyBBY2Nlc3NpbmcgaWZyYW1lIGRvY3VtZW50cyBhZnRlciB1bmxvYWQgdGhyb3dzIFwicGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvcnMgKGpRdWVyeSAjMTM5MzYpXG5cdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdGlmICggcHJlZmVycmVkRG9jICE9IGRvY3VtZW50ICYmXG5cdFx0KCBzdWJXaW5kb3cgPSBkb2N1bWVudC5kZWZhdWx0VmlldyApICYmIHN1YldpbmRvdy50b3AgIT09IHN1YldpbmRvdyApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDExLCBFZGdlXG5cdFx0aWYgKCBzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcInVubG9hZFwiLCB1bmxvYWRIYW5kbGVyLCBmYWxzZSApO1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDEwIG9ubHlcblx0XHR9IGVsc2UgaWYgKCBzdWJXaW5kb3cuYXR0YWNoRXZlbnQgKSB7XG5cdFx0XHRzdWJXaW5kb3cuYXR0YWNoRXZlbnQoIFwib251bmxvYWRcIiwgdW5sb2FkSGFuZGxlciApO1xuXHRcdH1cblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDggLSAxMSssIEVkZ2UgMTIgLSAxOCssIENocm9tZSA8PTE2IC0gMjUgb25seSwgRmlyZWZveCA8PTMuNiAtIDMxIG9ubHksXG5cdC8vIFNhZmFyaSA0IC0gNSBvbmx5LCBPcGVyYSA8PTExLjYgLSAxMi54IG9ubHlcblx0Ly8gSUUvRWRnZSAmIG9sZGVyIGJyb3dzZXJzIGRvbid0IHN1cHBvcnQgdGhlIDpzY29wZSBwc2V1ZG8tY2xhc3MuXG5cdC8vIFN1cHBvcnQ6IFNhZmFyaSA2LjAgb25seVxuXHQvLyBTYWZhcmkgNi4wIHN1cHBvcnRzIDpzY29wZSBidXQgaXQncyBhbiBhbGlhcyBvZiA6cm9vdCB0aGVyZS5cblx0c3VwcG9ydC5zY29wZSA9IGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApO1xuXHRcdHJldHVybiB0eXBlb2YgZWwucXVlcnlTZWxlY3RvckFsbCAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0IWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiOnNjb3BlIGZpZWxkc2V0IGRpdlwiICkubGVuZ3RoO1xuXHR9ICk7XG5cblx0Ly8gU3VwcG9ydDogQ2hyb21lIDEwNSAtIDExMCssIFNhZmFyaSAxNS40IC0gMTYuMytcblx0Ly8gTWFrZSBzdXJlIHRoZSB0aGUgYDpoYXMoKWAgYXJndW1lbnQgaXMgcGFyc2VkIHVuZm9yZ2l2aW5nbHkuXG5cdC8vIFdlIGluY2x1ZGUgYCpgIGluIHRoZSB0ZXN0IHRvIGRldGVjdCBidWdneSBpbXBsZW1lbnRhdGlvbnMgdGhhdCBhcmVcblx0Ly8gX3NlbGVjdGl2ZWx5XyBmb3JnaXZpbmcgKHNwZWNpZmljYWxseSB3aGVuIHRoZSBsaXN0IGluY2x1ZGVzIGF0IGxlYXN0XG5cdC8vIG9uZSB2YWxpZCBzZWxlY3RvcikuXG5cdC8vIE5vdGUgdGhhdCB3ZSB0cmVhdCBjb21wbGV0ZSBsYWNrIG9mIHN1cHBvcnQgZm9yIGA6aGFzKClgIGFzIGlmIGl0IHdlcmVcblx0Ly8gc3BlYy1jb21wbGlhbnQgc3VwcG9ydCwgd2hpY2ggaXMgZmluZSBiZWNhdXNlIHVzZSBvZiBgOmhhcygpYCBpbiBzdWNoXG5cdC8vIGVudmlyb25tZW50cyB3aWxsIGZhaWwgaW4gdGhlIHFTQSBwYXRoIGFuZCBmYWxsIGJhY2sgdG8galF1ZXJ5IHRyYXZlcnNhbFxuXHQvLyBhbnl3YXkuXG5cdHN1cHBvcnQuY3NzSGFzID0gYXNzZXJ0KCBmdW5jdGlvbigpIHtcblx0XHR0cnkge1xuXHRcdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvciggXCI6aGFzKCosOmpxZmFrZSlcIiApO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHR9ICk7XG5cblx0LyogQXR0cmlidXRlc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gU3VwcG9ydDogSUU8OFxuXHQvLyBWZXJpZnkgdGhhdCBnZXRBdHRyaWJ1dGUgcmVhbGx5IHJldHVybnMgYXR0cmlidXRlcyBhbmQgbm90IHByb3BlcnRpZXNcblx0Ly8gKGV4Y2VwdGluZyBJRTggYm9vbGVhbnMpXG5cdHN1cHBvcnQuYXR0cmlidXRlcyA9IGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmNsYXNzTmFtZSA9IFwiaVwiO1xuXHRcdHJldHVybiAhZWwuZ2V0QXR0cmlidXRlKCBcImNsYXNzTmFtZVwiICk7XG5cdH0gKTtcblxuXHQvKiBnZXRFbGVtZW50KHMpQnkqXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikgcmV0dXJucyBvbmx5IGVsZW1lbnRzXG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRlbC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlQ29tbWVudCggXCJcIiApICk7XG5cdFx0cmV0dXJuICFlbC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCIqXCIgKS5sZW5ndGg7XG5cdH0gKTtcblxuXHQvLyBTdXBwb3J0OiBJRTw5XG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDEwXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRCeUlkIHJldHVybnMgZWxlbWVudHMgYnkgbmFtZVxuXHQvLyBUaGUgYnJva2VuIGdldEVsZW1lbnRCeUlkIG1ldGhvZHMgZG9uJ3QgcGljayB1cCBwcm9ncmFtbWF0aWNhbGx5LXNldCBuYW1lcyxcblx0Ly8gc28gdXNlIGEgcm91bmRhYm91dCBnZXRFbGVtZW50c0J5TmFtZSB0ZXN0XG5cdHN1cHBvcnQuZ2V0QnlJZCA9IGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuaWQgPSBleHBhbmRvO1xuXHRcdHJldHVybiAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUgfHwgIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKCBleHBhbmRvICkubGVuZ3RoO1xuXHR9ICk7XG5cblx0Ly8gSUQgZmlsdGVyIGFuZCBmaW5kXG5cdGlmICggc3VwcG9ydC5nZXRCeUlkICkge1xuXHRcdEV4cHIuZmlsdGVyWyBcIklEXCIgXSA9IGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIFwiaWRcIiApID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cdFx0RXhwci5maW5kWyBcIklEXCIgXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblx0XHRcdFx0cmV0dXJuIGVsZW0gPyBbIGVsZW0gXSA6IFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0RXhwci5maWx0ZXJbIFwiSURcIiBdID0gIGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgbm9kZSA9IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZU5vZGUgIT09IFwidW5kZWZpbmVkXCIgJiZcblx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIFwiaWRcIiApO1xuXHRcdFx0XHRyZXR1cm4gbm9kZSAmJiBub2RlLnZhbHVlID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gNyBvbmx5XG5cdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgaXMgbm90IHJlbGlhYmxlIGFzIGEgZmluZCBzaG9ydGN1dFxuXHRcdEV4cHIuZmluZFsgXCJJRFwiIF0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgbm9kZSwgaSwgZWxlbXMsXG5cdFx0XHRcdFx0ZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtICkge1xuXG5cdFx0XHRcdFx0Ly8gVmVyaWZ5IHRoZSBpZCBhdHRyaWJ1dGVcblx0XHRcdFx0XHRub2RlID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBcImlkXCIgKTtcblx0XHRcdFx0XHRpZiAoIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gaWQgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRmFsbCBiYWNrIG9uIGdldEVsZW1lbnRzQnlOYW1lXG5cdFx0XHRcdFx0ZWxlbXMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlOYW1lKCBpZCApO1xuXHRcdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBlbGVtID0gZWxlbXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdFx0XHRub2RlID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBcImlkXCIgKTtcblx0XHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIFsgZWxlbSBdO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHR9XG5cblx0Ly8gVGFnXG5cdEV4cHIuZmluZFsgXCJUQUdcIiBdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA/XG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRG9jdW1lbnRGcmFnbWVudCBub2RlcyBkb24ndCBoYXZlIGdFQlROXG5cdFx0XHR9IGVsc2UgaWYgKCBzdXBwb3J0LnFzYSApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnICk7XG5cdFx0XHR9XG5cdFx0fSA6XG5cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdHRtcCA9IFtdLFxuXHRcdFx0XHRpID0gMCxcblxuXHRcdFx0XHQvLyBCeSBoYXBweSBjb2luY2lkZW5jZSwgYSAoYnJva2VuKSBnRUJUTiBhcHBlYXJzIG9uIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgdG9vXG5cdFx0XHRcdHJlc3VsdHMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRmlsdGVyIG91dCBwb3NzaWJsZSBjb21tZW50c1xuXHRcdFx0aWYgKCB0YWcgPT09IFwiKlwiICkge1xuXHRcdFx0XHR3aGlsZSAoICggZWxlbSA9IHJlc3VsdHNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0dG1wLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdG1wO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0fTtcblxuXHQvLyBDbGFzc1xuXHRFeHByLmZpbmRbIFwiQ0xBU1NcIiBdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmIGZ1bmN0aW9uKCBjbGFzc05hbWUsIGNvbnRleHQgKSB7XG5cdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggY2xhc3NOYW1lICk7XG5cdFx0fVxuXHR9O1xuXG5cdC8qIFFTQS9tYXRjaGVzU2VsZWN0b3Jcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFFTQSBhbmQgbWF0Y2hlc1NlbGVjdG9yIHN1cHBvcnRcblxuXHQvLyBtYXRjaGVzU2VsZWN0b3IoOmFjdGl2ZSkgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKElFOS9PcGVyYSAxMS41KVxuXHRyYnVnZ3lNYXRjaGVzID0gW107XG5cblx0Ly8gcVNhKDpmb2N1cykgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKENocm9tZSAyMSlcblx0Ly8gV2UgYWxsb3cgdGhpcyBiZWNhdXNlIG9mIGEgYnVnIGluIElFOC85IHRoYXQgdGhyb3dzIGFuIGVycm9yXG5cdC8vIHdoZW5ldmVyIGBkb2N1bWVudC5hY3RpdmVFbGVtZW50YCBpcyBhY2Nlc3NlZCBvbiBhbiBpZnJhbWVcblx0Ly8gU28sIHdlIGFsbG93IDpmb2N1cyB0byBwYXNzIHRocm91Z2ggUVNBIGFsbCB0aGUgdGltZSB0byBhdm9pZCB0aGUgSUUgZXJyb3Jcblx0Ly8gU2VlIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMzM3OFxuXHRyYnVnZ3lRU0EgPSBbXTtcblxuXHRpZiAoICggc3VwcG9ydC5xc2EgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwgKSApICkge1xuXG5cdFx0Ly8gQnVpbGQgUVNBIHJlZ2V4XG5cdFx0Ly8gUmVnZXggc3RyYXRlZ3kgYWRvcHRlZCBmcm9tIERpZWdvIFBlcmluaVxuXHRcdGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXG5cdFx0XHR2YXIgaW5wdXQ7XG5cblx0XHRcdC8vIFNlbGVjdCBpcyBzZXQgdG8gZW1wdHkgc3RyaW5nIG9uIHB1cnBvc2Vcblx0XHRcdC8vIFRoaXMgaXMgdG8gdGVzdCBJRSdzIHRyZWF0bWVudCBvZiBub3QgZXhwbGljaXRseVxuXHRcdFx0Ly8gc2V0dGluZyBhIGJvb2xlYW4gY29udGVudCBhdHRyaWJ1dGUsXG5cdFx0XHQvLyBzaW5jZSBpdHMgcHJlc2VuY2Ugc2hvdWxkIGJlIGVub3VnaFxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEyMzU5XG5cdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmlubmVySFRNTCA9IFwiPGEgaWQ9J1wiICsgZXhwYW5kbyArIFwiJz48L2E+XCIgK1xuXHRcdFx0XHRcIjxzZWxlY3QgaWQ9J1wiICsgZXhwYW5kbyArIFwiLVxcclxcXFwnIG1zYWxsb3djYXB0dXJlPScnPlwiICtcblx0XHRcdFx0XCI8b3B0aW9uIHNlbGVjdGVkPScnPjwvb3B0aW9uPjwvc2VsZWN0PlwiO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTgsIE9wZXJhIDExLTEyLjE2XG5cdFx0XHQvLyBOb3RoaW5nIHNob3VsZCBiZSBzZWxlY3RlZCB3aGVuIGVtcHR5IHN0cmluZ3MgZm9sbG93IF49IG9yICQ9IG9yICo9XG5cdFx0XHQvLyBUaGUgdGVzdCBhdHRyaWJ1dGUgbXVzdCBiZSB1bmtub3duIGluIE9wZXJhIGJ1dCBcInNhZmVcIiBmb3IgV2luUlRcblx0XHRcdC8vIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvaGg0NjUzODguYXNweCNhdHRyaWJ1dGVfc2VjdGlvblxuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIlttc2FsbG93Y2FwdHVyZV49JyddXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlsqXiRdPVwiICsgd2hpdGVzcGFjZSArIFwiKig/OicnfFxcXCJcXFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gQm9vbGVhbiBhdHRyaWJ1dGVzIGFuZCBcInZhbHVlXCIgYXJlIG5vdCB0cmVhdGVkIGNvcnJlY3RseVxuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJbc2VsZWN0ZWRdXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86dmFsdWV8XCIgKyBib29sZWFucyArIFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZTwyOSwgQW5kcm9pZDw0LjQsIFNhZmFyaTw3LjArLCBpT1M8Ny4wKywgUGhhbnRvbUpTPDEuOS44K1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJbaWR+PVwiICsgZXhwYW5kbyArIFwiLV1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwifj1cIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTUgLSAxOCtcblx0XHRcdC8vIElFIDExL0VkZ2UgZG9uJ3QgZmluZCBlbGVtZW50cyBvbiBhIGBbbmFtZT0nJ11gIHF1ZXJ5IGluIHNvbWUgY2FzZXMuXG5cdFx0XHQvLyBBZGRpbmcgYSB0ZW1wb3JhcnkgYXR0cmlidXRlIHRvIHRoZSBkb2N1bWVudCBiZWZvcmUgdGhlIHNlbGVjdGlvbiB3b3Jrc1xuXHRcdFx0Ly8gYXJvdW5kIHRoZSBpc3N1ZS5cblx0XHRcdC8vIEludGVyZXN0aW5nbHksIElFIDEwICYgb2xkZXIgZG9uJ3Qgc2VlbSB0byBoYXZlIHRoZSBpc3N1ZS5cblx0XHRcdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcIlwiICk7XG5cdFx0XHRlbC5hcHBlbmRDaGlsZCggaW5wdXQgKTtcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW25hbWU9JyddXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqbmFtZVwiICsgd2hpdGVzcGFjZSArIFwiKj1cIiArXG5cdFx0XHRcdFx0d2hpdGVzcGFjZSArIFwiKig/OicnfFxcXCJcXFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFdlYmtpdC9PcGVyYSAtIDpjaGVja2VkIHNob3VsZCByZXR1cm4gc2VsZWN0ZWQgb3B0aW9uIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiOmNoZWNrZWRcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmNoZWNrZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCssIGlPUyA4K1xuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNjg1MVxuXHRcdFx0Ly8gSW4tcGFnZSBgc2VsZWN0b3IjaWQgc2libGluZy1jb21iaW5hdG9yIHNlbGVjdG9yYCBmYWlsc1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJhI1wiICsgZXhwYW5kbyArIFwiKypcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiLiMuK1srfl1cIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9My42IC0gNSBvbmx5XG5cdFx0XHQvLyBPbGQgRmlyZWZveCBkb2Vzbid0IHRocm93IG9uIGEgYmFkbHktZXNjYXBlZCBpZGVudGlmaWVyLlxuXHRcdFx0ZWwucXVlcnlTZWxlY3RvckFsbCggXCJcXFxcXFxmXCIgKTtcblx0XHRcdHJidWdneVFTQS5wdXNoKCBcIltcXFxcclxcXFxuXFxcXGZdXCIgKTtcblx0XHR9ICk7XG5cblx0XHRhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nJyBkaXNhYmxlZD0nZGlzYWJsZWQnPjwvYT5cIiArXG5cdFx0XHRcdFwiPHNlbGVjdCBkaXNhYmxlZD0nZGlzYWJsZWQnPjxvcHRpb24vPjwvc2VsZWN0PlwiO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBXaW5kb3dzIDggTmF0aXZlIEFwcHNcblx0XHRcdC8vIFRoZSB0eXBlIGFuZCBuYW1lIGF0dHJpYnV0ZXMgYXJlIHJlc3RyaWN0ZWQgZHVyaW5nIC5pbm5lckhUTUwgYXNzaWdubWVudFxuXHRcdFx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcImhpZGRlblwiICk7XG5cdFx0XHRlbC5hcHBlbmRDaGlsZCggaW5wdXQgKS5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcIkRcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEVuZm9yY2UgY2FzZS1zZW5zaXRpdml0eSBvZiBuYW1lIGF0dHJpYnV0ZVxuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltuYW1lPWRdXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIm5hbWVcIiArIHdoaXRlc3BhY2UgKyBcIipbKl4kfCF+XT89XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRkYgMy41IC0gOmVuYWJsZWQvOmRpc2FibGVkIGFuZCBoaWRkZW4gZWxlbWVudHMgKGhpZGRlbiBlbGVtZW50cyBhcmUgc3RpbGwgZW5hYmxlZClcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiOmVuYWJsZWRcIiApLmxlbmd0aCAhPT0gMiApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTktMTErXG5cdFx0XHQvLyBJRSdzIDpkaXNhYmxlZCBzZWxlY3RvciBkb2VzIG5vdCBwaWNrIHVwIHRoZSBjaGlsZHJlbiBvZiBkaXNhYmxlZCBmaWVsZHNldHNcblx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuZGlzYWJsZWQgPSB0cnVlO1xuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIjpkaXNhYmxlZFwiICkubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IE9wZXJhIDEwIC0gMTEgb25seVxuXHRcdFx0Ly8gT3BlcmEgMTAtMTEgZG9lcyBub3QgdGhyb3cgb24gcG9zdC1jb21tYSBpbnZhbGlkIHBzZXVkb3Ncblx0XHRcdGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiKiw6eFwiICk7XG5cdFx0XHRyYnVnZ3lRU0EucHVzaCggXCIsLio6XCIgKTtcblx0XHR9ICk7XG5cdH1cblxuXHRpZiAoICggc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgPSBybmF0aXZlLnRlc3QoICggbWF0Y2hlcyA9IGRvY0VsZW0ubWF0Y2hlcyB8fFxuXHRcdGRvY0VsZW0ud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tb3pNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm9NYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1zTWF0Y2hlc1NlbGVjdG9yICkgKSApICkge1xuXG5cdFx0YXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cblx0XHRcdC8vIENoZWNrIHRvIHNlZSBpZiBpdCdzIHBvc3NpYmxlIHRvIGRvIG1hdGNoZXNTZWxlY3RvclxuXHRcdFx0Ly8gb24gYSBkaXNjb25uZWN0ZWQgbm9kZSAoSUUgOSlcblx0XHRcdHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggPSBtYXRjaGVzLmNhbGwoIGVsLCBcIipcIiApO1xuXG5cdFx0XHQvLyBUaGlzIHNob3VsZCBmYWlsIHdpdGggYW4gZXhjZXB0aW9uXG5cdFx0XHQvLyBHZWNrbyBkb2VzIG5vdCBlcnJvciwgcmV0dXJucyBmYWxzZSBpbnN0ZWFkXG5cdFx0XHRtYXRjaGVzLmNhbGwoIGVsLCBcIltzIT0nJ106eFwiICk7XG5cdFx0XHRyYnVnZ3lNYXRjaGVzLnB1c2goIFwiIT1cIiwgcHNldWRvcyApO1xuXHRcdH0gKTtcblx0fVxuXG5cdGlmICggIXN1cHBvcnQuY3NzSGFzICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDEwNSAtIDExMCssIFNhZmFyaSAxNS40IC0gMTYuMytcblx0XHQvLyBPdXIgcmVndWxhciBgdHJ5LWNhdGNoYCBtZWNoYW5pc20gZmFpbHMgdG8gZGV0ZWN0IG5hdGl2ZWx5LXVuc3VwcG9ydGVkXG5cdFx0Ly8gcHNldWRvLWNsYXNzZXMgaW5zaWRlIGA6aGFzKClgIChzdWNoIGFzIGA6aGFzKDpjb250YWlucyhcIkZvb1wiKSlgKVxuXHRcdC8vIGluIGJyb3dzZXJzIHRoYXQgcGFyc2UgdGhlIGA6aGFzKClgIGFyZ3VtZW50IGFzIGEgZm9yZ2l2aW5nIHNlbGVjdG9yIGxpc3QuXG5cdFx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL3NlbGVjdG9ycy8jcmVsYXRpb25hbCBub3cgcmVxdWlyZXMgdGhlIGFyZ3VtZW50XG5cdFx0Ly8gdG8gYmUgcGFyc2VkIHVuZm9yZ2l2aW5nbHksIGJ1dCBicm93c2VycyBoYXZlIG5vdCB5ZXQgZnVsbHkgYWRqdXN0ZWQuXG5cdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmhhc1wiICk7XG5cdH1cblxuXHRyYnVnZ3lRU0EgPSByYnVnZ3lRU0EubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneVFTQS5qb2luKCBcInxcIiApICk7XG5cdHJidWdneU1hdGNoZXMgPSByYnVnZ3lNYXRjaGVzLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lNYXRjaGVzLmpvaW4oIFwifFwiICkgKTtcblxuXHQvKiBDb250YWluc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cdGhhc0NvbXBhcmUgPSBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29tcGFyZURvY3VtZW50UG9zaXRpb24gKTtcblxuXHQvLyBFbGVtZW50IGNvbnRhaW5zIGFub3RoZXJcblx0Ly8gUHVycG9zZWZ1bGx5IHNlbGYtZXhjbHVzaXZlXG5cdC8vIEFzIGluLCBhbiBlbGVtZW50IGRvZXMgbm90IGNvbnRhaW4gaXRzZWxmXG5cdGNvbnRhaW5zID0gaGFzQ29tcGFyZSB8fCBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29udGFpbnMgKSA/XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdC8vIElFIGRvZXNuJ3QgaGF2ZSBgY29udGFpbnNgIG9uIGBkb2N1bWVudGAgc28gd2UgbmVlZCB0byBjaGVjayBmb3Jcblx0XHRcdC8vIGBkb2N1bWVudEVsZW1lbnRgIHByZXNlbmNlLlxuXHRcdFx0Ly8gV2UgbmVlZCB0byBmYWxsIGJhY2sgdG8gYGFgIHdoZW4gYGRvY3VtZW50RWxlbWVudGAgaXMgbWlzc2luZ1xuXHRcdFx0Ly8gYXMgYG93bmVyRG9jdW1lbnRgIG9mIGVsZW1lbnRzIHdpdGhpbiBgPHRlbXBsYXRlLz5gIG1heSBoYXZlXG5cdFx0XHQvLyBhIG51bGwgb25lIC0gYSBkZWZhdWx0IGJlaGF2aW9yIG9mIGFsbCBtb2Rlcm4gYnJvd3NlcnMuXG5cdFx0XHR2YXIgYWRvd24gPSBhLm5vZGVUeXBlID09PSA5ICYmIGEuZG9jdW1lbnRFbGVtZW50IHx8IGEsXG5cdFx0XHRcdGJ1cCA9IGIgJiYgYi5wYXJlbnROb2RlO1xuXHRcdFx0cmV0dXJuIGEgPT09IGJ1cCB8fCAhISggYnVwICYmIGJ1cC5ub2RlVHlwZSA9PT0gMSAmJiAoXG5cdFx0XHRcdGFkb3duLmNvbnRhaW5zID9cblx0XHRcdFx0XHRhZG93bi5jb250YWlucyggYnVwICkgOlxuXHRcdFx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gJiYgYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYnVwICkgJiAxNlxuXHRcdFx0KSApO1xuXHRcdH0gOlxuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0aWYgKCBiICkge1xuXHRcdFx0XHR3aGlsZSAoICggYiA9IGIucGFyZW50Tm9kZSApICkge1xuXHRcdFx0XHRcdGlmICggYiA9PT0gYSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG5cblx0LyogU29ydGluZ1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gRG9jdW1lbnQgb3JkZXIgc29ydGluZ1xuXHRzb3J0T3JkZXIgPSBoYXNDb21wYXJlID9cblx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cblx0XHQvLyBGbGFnIGZvciBkdXBsaWNhdGUgcmVtb3ZhbFxuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHQvLyBTb3J0IG9uIG1ldGhvZCBleGlzdGVuY2UgaWYgb25seSBvbmUgaW5wdXQgaGFzIGNvbXBhcmVEb2N1bWVudFBvc2l0aW9uXG5cdFx0dmFyIGNvbXBhcmUgPSAhYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAtICFiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uO1xuXHRcdGlmICggY29tcGFyZSApIHtcblx0XHRcdHJldHVybiBjb21wYXJlO1xuXHRcdH1cblxuXHRcdC8vIENhbGN1bGF0ZSBwb3NpdGlvbiBpZiBib3RoIGlucHV0cyBiZWxvbmcgdG8gdGhlIHNhbWUgZG9jdW1lbnRcblx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdGNvbXBhcmUgPSAoIGEub3duZXJEb2N1bWVudCB8fCBhICkgPT0gKCBiLm93bmVyRG9jdW1lbnQgfHwgYiApID9cblx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGIgKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSB3ZSBrbm93IHRoZXkgYXJlIGRpc2Nvbm5lY3RlZFxuXHRcdFx0MTtcblxuXHRcdC8vIERpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdGlmICggY29tcGFyZSAmIDEgfHxcblx0XHRcdCggIXN1cHBvcnQuc29ydERldGFjaGVkICYmIGIuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGEgKSA9PT0gY29tcGFyZSApICkge1xuXG5cdFx0XHQvLyBDaG9vc2UgdGhlIGZpcnN0IGVsZW1lbnQgdGhhdCBpcyByZWxhdGVkIHRvIG91ciBwcmVmZXJyZWQgZG9jdW1lbnRcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHRpZiAoIGEgPT0gZG9jdW1lbnQgfHwgYS5vd25lckRvY3VtZW50ID09IHByZWZlcnJlZERvYyAmJlxuXHRcdFx0XHRjb250YWlucyggcHJlZmVycmVkRG9jLCBhICkgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdGlmICggYiA9PSBkb2N1bWVudCB8fCBiLm93bmVyRG9jdW1lbnQgPT0gcHJlZmVycmVkRG9jICYmXG5cdFx0XHRcdGNvbnRhaW5zKCBwcmVmZXJyZWREb2MsIGIgKSApIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1haW50YWluIG9yaWdpbmFsIG9yZGVyXG5cdFx0XHRyZXR1cm4gc29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXHRcdH1cblxuXHRcdHJldHVybiBjb21wYXJlICYgNCA/IC0xIDogMTtcblx0fSA6XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXG5cdFx0Ly8gRXhpdCBlYXJseSBpZiB0aGUgbm9kZXMgYXJlIGlkZW50aWNhbFxuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRhdXAgPSBhLnBhcmVudE5vZGUsXG5cdFx0XHRidXAgPSBiLnBhcmVudE5vZGUsXG5cdFx0XHRhcCA9IFsgYSBdLFxuXHRcdFx0YnAgPSBbIGIgXTtcblxuXHRcdC8vIFBhcmVudGxlc3Mgbm9kZXMgYXJlIGVpdGhlciBkb2N1bWVudHMgb3IgZGlzY29ubmVjdGVkXG5cdFx0aWYgKCAhYXVwIHx8ICFidXAgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBlcWVxZXEgKi9cblx0XHRcdHJldHVybiBhID09IGRvY3VtZW50ID8gLTEgOlxuXHRcdFx0XHRiID09IGRvY3VtZW50ID8gMSA6XG5cdFx0XHRcdC8qIGVzbGludC1lbmFibGUgZXFlcWVxICovXG5cdFx0XHRcdGF1cCA/IC0xIDpcblx0XHRcdFx0YnVwID8gMSA6XG5cdFx0XHRcdHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblxuXHRcdC8vIElmIHRoZSBub2RlcyBhcmUgc2libGluZ3MsIHdlIGNhbiBkbyBhIHF1aWNrIGNoZWNrXG5cdFx0fSBlbHNlIGlmICggYXVwID09PSBidXAgKSB7XG5cdFx0XHRyZXR1cm4gc2libGluZ0NoZWNrKCBhLCBiICk7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlIHdlIG5lZWQgZnVsbCBsaXN0cyBvZiB0aGVpciBhbmNlc3RvcnMgZm9yIGNvbXBhcmlzb25cblx0XHRjdXIgPSBhO1xuXHRcdHdoaWxlICggKCBjdXIgPSBjdXIucGFyZW50Tm9kZSApICkge1xuXHRcdFx0YXAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXHRcdGN1ciA9IGI7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGN1ci5wYXJlbnROb2RlICkgKSB7XG5cdFx0XHRicC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cblx0XHQvLyBXYWxrIGRvd24gdGhlIHRyZWUgbG9va2luZyBmb3IgYSBkaXNjcmVwYW5jeVxuXHRcdHdoaWxlICggYXBbIGkgXSA9PT0gYnBbIGkgXSApIHtcblx0XHRcdGkrKztcblx0XHR9XG5cblx0XHRyZXR1cm4gaSA/XG5cblx0XHRcdC8vIERvIGEgc2libGluZyBjaGVjayBpZiB0aGUgbm9kZXMgaGF2ZSBhIGNvbW1vbiBhbmNlc3RvclxuXHRcdFx0c2libGluZ0NoZWNrKCBhcFsgaSBdLCBicFsgaSBdICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugbm9kZXMgaW4gb3VyIGRvY3VtZW50IHNvcnQgZmlyc3Rcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBlcWVxZXEgKi9cblx0XHRcdGFwWyBpIF0gPT0gcHJlZmVycmVkRG9jID8gLTEgOlxuXHRcdFx0YnBbIGkgXSA9PSBwcmVmZXJyZWREb2MgPyAxIDpcblx0XHRcdC8qIGVzbGludC1lbmFibGUgZXFlcWVxICovXG5cdFx0XHQwO1xuXHR9O1xuXG5cdHJldHVybiBkb2N1bWVudDtcbn07XG5cblNpenpsZS5tYXRjaGVzID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1lbnRzICkge1xuXHRyZXR1cm4gU2l6emxlKCBleHByLCBudWxsLCBudWxsLCBlbGVtZW50cyApO1xufTtcblxuU2l6emxlLm1hdGNoZXNTZWxlY3RvciA9IGZ1bmN0aW9uKCBlbGVtLCBleHByICkge1xuXHRzZXREb2N1bWVudCggZWxlbSApO1xuXG5cdGlmICggc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgJiYgZG9jdW1lbnRJc0hUTUwgJiZcblx0XHQhbm9ubmF0aXZlU2VsZWN0b3JDYWNoZVsgZXhwciArIFwiIFwiIF0gJiZcblx0XHQoICFyYnVnZ3lNYXRjaGVzIHx8ICFyYnVnZ3lNYXRjaGVzLnRlc3QoIGV4cHIgKSApICYmXG5cdFx0KCAhcmJ1Z2d5UVNBICAgICB8fCAhcmJ1Z2d5UVNBLnRlc3QoIGV4cHIgKSApICkge1xuXG5cdFx0dHJ5IHtcblx0XHRcdHZhciByZXQgPSBtYXRjaGVzLmNhbGwoIGVsZW0sIGV4cHIgKTtcblxuXHRcdFx0Ly8gSUUgOSdzIG1hdGNoZXNTZWxlY3RvciByZXR1cm5zIGZhbHNlIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdFx0aWYgKCByZXQgfHwgc3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCB8fFxuXG5cdFx0XHRcdC8vIEFzIHdlbGwsIGRpc2Nvbm5lY3RlZCBub2RlcyBhcmUgc2FpZCB0byBiZSBpbiBhIGRvY3VtZW50XG5cdFx0XHRcdC8vIGZyYWdtZW50IGluIElFIDlcblx0XHRcdFx0ZWxlbS5kb2N1bWVudCAmJiBlbGVtLmRvY3VtZW50Lm5vZGVUeXBlICE9PSAxMSApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdG5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUoIGV4cHIsIHRydWUgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gU2l6emxlKCBleHByLCBkb2N1bWVudCwgbnVsbCwgWyBlbGVtIF0gKS5sZW5ndGggPiAwO1xufTtcblxuU2l6emxlLmNvbnRhaW5zID0gZnVuY3Rpb24oIGNvbnRleHQsIGVsZW0gKSB7XG5cblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdGlmICggKCBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCApICE9IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdH1cblx0cmV0dXJuIGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICk7XG59O1xuXG5TaXp6bGUuYXR0ciA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHR9XG5cblx0dmFyIGZuID0gRXhwci5hdHRySGFuZGxlWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSxcblxuXHRcdC8vIERvbid0IGdldCBmb29sZWQgYnkgT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzIChqUXVlcnkgIzEzODA3KVxuXHRcdHZhbCA9IGZuICYmIGhhc093bi5jYWxsKCBFeHByLmF0dHJIYW5kbGUsIG5hbWUudG9Mb3dlckNhc2UoKSApID9cblx0XHRcdGZuKCBlbGVtLCBuYW1lLCAhZG9jdW1lbnRJc0hUTUwgKSA6XG5cdFx0XHR1bmRlZmluZWQ7XG5cblx0cmV0dXJuIHZhbCAhPT0gdW5kZWZpbmVkID9cblx0XHR2YWwgOlxuXHRcdHN1cHBvcnQuYXR0cmlidXRlcyB8fCAhZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKSA6XG5cdFx0XHQoIHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggbmFtZSApICkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdG51bGw7XG59O1xuXG5TaXp6bGUuZXNjYXBlID0gZnVuY3Rpb24oIHNlbCApIHtcblx0cmV0dXJuICggc2VsICsgXCJcIiApLnJlcGxhY2UoIHJjc3Nlc2NhcGUsIGZjc3Nlc2NhcGUgKTtcbn07XG5cblNpenpsZS5lcnJvciA9IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdHRocm93IG5ldyBFcnJvciggXCJTeW50YXggZXJyb3IsIHVucmVjb2duaXplZCBleHByZXNzaW9uOiBcIiArIG1zZyApO1xufTtcblxuLyoqXG4gKiBEb2N1bWVudCBzb3J0aW5nIGFuZCByZW1vdmluZyBkdXBsaWNhdGVzXG4gKiBAcGFyYW0ge0FycmF5TGlrZX0gcmVzdWx0c1xuICovXG5TaXp6bGUudW5pcXVlU29ydCA9IGZ1bmN0aW9uKCByZXN1bHRzICkge1xuXHR2YXIgZWxlbSxcblx0XHRkdXBsaWNhdGVzID0gW10sXG5cdFx0aiA9IDAsXG5cdFx0aSA9IDA7XG5cblx0Ly8gVW5sZXNzIHdlICprbm93KiB3ZSBjYW4gZGV0ZWN0IGR1cGxpY2F0ZXMsIGFzc3VtZSB0aGVpciBwcmVzZW5jZVxuXHRoYXNEdXBsaWNhdGUgPSAhc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzO1xuXHRzb3J0SW5wdXQgPSAhc3VwcG9ydC5zb3J0U3RhYmxlICYmIHJlc3VsdHMuc2xpY2UoIDAgKTtcblx0cmVzdWx0cy5zb3J0KCBzb3J0T3JkZXIgKTtcblxuXHRpZiAoIGhhc0R1cGxpY2F0ZSApIHtcblx0XHR3aGlsZSAoICggZWxlbSA9IHJlc3VsdHNbIGkrKyBdICkgKSB7XG5cdFx0XHRpZiAoIGVsZW0gPT09IHJlc3VsdHNbIGkgXSApIHtcblx0XHRcdFx0aiA9IGR1cGxpY2F0ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdHJlc3VsdHMuc3BsaWNlKCBkdXBsaWNhdGVzWyBqIF0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDbGVhciBpbnB1dCBhZnRlciBzb3J0aW5nIHRvIHJlbGVhc2Ugb2JqZWN0c1xuXHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9zaXp6bGUvcHVsbC8yMjVcblx0c29ydElucHV0ID0gbnVsbDtcblxuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbi8qKlxuICogVXRpbGl0eSBmdW5jdGlvbiBmb3IgcmV0cmlldmluZyB0aGUgdGV4dCB2YWx1ZSBvZiBhbiBhcnJheSBvZiBET00gbm9kZXNcbiAqIEBwYXJhbSB7QXJyYXl8RWxlbWVudH0gZWxlbVxuICovXG5nZXRUZXh0ID0gU2l6emxlLmdldFRleHQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0dmFyIG5vZGUsXG5cdFx0cmV0ID0gXCJcIixcblx0XHRpID0gMCxcblx0XHRub2RlVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0aWYgKCAhbm9kZVR5cGUgKSB7XG5cblx0XHQvLyBJZiBubyBub2RlVHlwZSwgdGhpcyBpcyBleHBlY3RlZCB0byBiZSBhbiBhcnJheVxuXHRcdHdoaWxlICggKCBub2RlID0gZWxlbVsgaSsrIF0gKSApIHtcblxuXHRcdFx0Ly8gRG8gbm90IHRyYXZlcnNlIGNvbW1lbnQgbm9kZXNcblx0XHRcdHJldCArPSBnZXRUZXh0KCBub2RlICk7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMSB8fCBub2RlVHlwZSA9PT0gOSB8fCBub2RlVHlwZSA9PT0gMTEgKSB7XG5cblx0XHQvLyBVc2UgdGV4dENvbnRlbnQgZm9yIGVsZW1lbnRzXG5cdFx0Ly8gaW5uZXJUZXh0IHVzYWdlIHJlbW92ZWQgZm9yIGNvbnNpc3RlbmN5IG9mIG5ldyBsaW5lcyAoalF1ZXJ5ICMxMTE1Mylcblx0XHRpZiAoIHR5cGVvZiBlbGVtLnRleHRDb250ZW50ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0udGV4dENvbnRlbnQ7XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gVHJhdmVyc2UgaXRzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0cmV0ICs9IGdldFRleHQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAzIHx8IG5vZGVUeXBlID09PSA0ICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVWYWx1ZTtcblx0fVxuXG5cdC8vIERvIG5vdCBpbmNsdWRlIGNvbW1lbnQgb3IgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbiBub2Rlc1xuXG5cdHJldHVybiByZXQ7XG59O1xuXG5FeHByID0gU2l6emxlLnNlbGVjdG9ycyA9IHtcblxuXHQvLyBDYW4gYmUgYWRqdXN0ZWQgYnkgdGhlIHVzZXJcblx0Y2FjaGVMZW5ndGg6IDUwLFxuXG5cdGNyZWF0ZVBzZXVkbzogbWFya0Z1bmN0aW9uLFxuXG5cdG1hdGNoOiBtYXRjaEV4cHIsXG5cblx0YXR0ckhhbmRsZToge30sXG5cblx0ZmluZDoge30sXG5cblx0cmVsYXRpdmU6IHtcblx0XHRcIj5cIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiIFwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIgfSxcblx0XHRcIitcIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCJ+XCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiIH1cblx0fSxcblxuXHRwcmVGaWx0ZXI6IHtcblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0bWF0Y2hbIDEgXSA9IG1hdGNoWyAxIF0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0Ly8gTW92ZSB0aGUgZ2l2ZW4gdmFsdWUgdG8gbWF0Y2hbM10gd2hldGhlciBxdW90ZWQgb3IgdW5xdW90ZWRcblx0XHRcdG1hdGNoWyAzIF0gPSAoIG1hdGNoWyAzIF0gfHwgbWF0Y2hbIDQgXSB8fFxuXHRcdFx0XHRtYXRjaFsgNSBdIHx8IFwiXCIgKS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHRpZiAoIG1hdGNoWyAyIF0gPT09IFwifj1cIiApIHtcblx0XHRcdFx0bWF0Y2hbIDMgXSA9IFwiIFwiICsgbWF0Y2hbIDMgXSArIFwiIFwiO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDQgKTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cblx0XHRcdC8qIG1hdGNoZXMgZnJvbSBtYXRjaEV4cHJbXCJDSElMRFwiXVxuXHRcdFx0XHQxIHR5cGUgKG9ubHl8bnRofC4uLilcblx0XHRcdFx0MiB3aGF0IChjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHQzIGFyZ3VtZW50IChldmVufG9kZHxcXGQqfFxcZCpuKFsrLV1cXGQrKT98Li4uKVxuXHRcdFx0XHQ0IHhuLWNvbXBvbmVudCBvZiB4bit5IGFyZ3VtZW50IChbKy1dP1xcZCpufClcblx0XHRcdFx0NSBzaWduIG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ2IHggb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDcgc2lnbiBvZiB5LWNvbXBvbmVudFxuXHRcdFx0XHQ4IHkgb2YgeS1jb21wb25lbnRcblx0XHRcdCovXG5cdFx0XHRtYXRjaFsgMSBdID0gbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0XHRpZiAoIG1hdGNoWyAxIF0uc2xpY2UoIDAsIDMgKSA9PT0gXCJudGhcIiApIHtcblxuXHRcdFx0XHQvLyBudGgtKiByZXF1aXJlcyBhcmd1bWVudFxuXHRcdFx0XHRpZiAoICFtYXRjaFsgMyBdICkge1xuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbIDAgXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gbnVtZXJpYyB4IGFuZCB5IHBhcmFtZXRlcnMgZm9yIEV4cHIuZmlsdGVyLkNISUxEXG5cdFx0XHRcdC8vIHJlbWVtYmVyIHRoYXQgZmFsc2UvdHJ1ZSBjYXN0IHJlc3BlY3RpdmVseSB0byAwLzFcblx0XHRcdFx0bWF0Y2hbIDQgXSA9ICsoIG1hdGNoWyA0IF0gP1xuXHRcdFx0XHRcdG1hdGNoWyA1IF0gKyAoIG1hdGNoWyA2IF0gfHwgMSApIDpcblx0XHRcdFx0XHQyICogKCBtYXRjaFsgMyBdID09PSBcImV2ZW5cIiB8fCBtYXRjaFsgMyBdID09PSBcIm9kZFwiICkgKTtcblx0XHRcdFx0bWF0Y2hbIDUgXSA9ICsoICggbWF0Y2hbIDcgXSArIG1hdGNoWyA4IF0gKSB8fCBtYXRjaFsgMyBdID09PSBcIm9kZFwiICk7XG5cblx0XHRcdFx0Ly8gb3RoZXIgdHlwZXMgcHJvaGliaXQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFsgMyBdICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoO1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHR2YXIgZXhjZXNzLFxuXHRcdFx0XHR1bnF1b3RlZCA9ICFtYXRjaFsgNiBdICYmIG1hdGNoWyAyIF07XG5cblx0XHRcdGlmICggbWF0Y2hFeHByWyBcIkNISUxEXCIgXS50ZXN0KCBtYXRjaFsgMCBdICkgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBY2NlcHQgcXVvdGVkIGFyZ3VtZW50cyBhcy1pc1xuXHRcdFx0aWYgKCBtYXRjaFsgMyBdICkge1xuXHRcdFx0XHRtYXRjaFsgMiBdID0gbWF0Y2hbIDQgXSB8fCBtYXRjaFsgNSBdIHx8IFwiXCI7XG5cblx0XHRcdC8vIFN0cmlwIGV4Y2VzcyBjaGFyYWN0ZXJzIGZyb20gdW5xdW90ZWQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCB1bnF1b3RlZCAmJiBycHNldWRvLnRlc3QoIHVucXVvdGVkICkgJiZcblxuXHRcdFx0XHQvLyBHZXQgZXhjZXNzIGZyb20gdG9rZW5pemUgKHJlY3Vyc2l2ZWx5KVxuXHRcdFx0XHQoIGV4Y2VzcyA9IHRva2VuaXplKCB1bnF1b3RlZCwgdHJ1ZSApICkgJiZcblxuXHRcdFx0XHQvLyBhZHZhbmNlIHRvIHRoZSBuZXh0IGNsb3NpbmcgcGFyZW50aGVzaXNcblx0XHRcdFx0KCBleGNlc3MgPSB1bnF1b3RlZC5pbmRleE9mKCBcIilcIiwgdW5xdW90ZWQubGVuZ3RoIC0gZXhjZXNzICkgLSB1bnF1b3RlZC5sZW5ndGggKSApIHtcblxuXHRcdFx0XHQvLyBleGNlc3MgaXMgYSBuZWdhdGl2ZSBpbmRleFxuXHRcdFx0XHRtYXRjaFsgMCBdID0gbWF0Y2hbIDAgXS5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHRcdG1hdGNoWyAyIF0gPSB1bnF1b3RlZC5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldHVybiBvbmx5IGNhcHR1cmVzIG5lZWRlZCBieSB0aGUgcHNldWRvIGZpbHRlciBtZXRob2QgKHR5cGUgYW5kIGFyZ3VtZW50KVxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCAzICk7XG5cdFx0fVxuXHR9LFxuXG5cdGZpbHRlcjoge1xuXG5cdFx0XCJUQUdcIjogZnVuY3Rpb24oIG5vZGVOYW1lU2VsZWN0b3IgKSB7XG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBub2RlTmFtZVNlbGVjdG9yLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBub2RlTmFtZVNlbGVjdG9yID09PSBcIipcIiA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9IDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBub2RlTmFtZTtcblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDTEFTU1wiOiBmdW5jdGlvbiggY2xhc3NOYW1lICkge1xuXHRcdFx0dmFyIHBhdHRlcm4gPSBjbGFzc0NhY2hlWyBjbGFzc05hbWUgKyBcIiBcIiBdO1xuXG5cdFx0XHRyZXR1cm4gcGF0dGVybiB8fFxuXHRcdFx0XHQoIHBhdHRlcm4gPSBuZXcgUmVnRXhwKCBcIihefFwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcdFx0XCIpXCIgKyBjbGFzc05hbWUgKyBcIihcIiArIHdoaXRlc3BhY2UgKyBcInwkKVwiICkgKSAmJiBjbGFzc0NhY2hlKFxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHBhdHRlcm4udGVzdChcblx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgZWxlbS5jbGFzc05hbWUgPT09IFwic3RyaW5nXCIgJiYgZWxlbS5jbGFzc05hbWUgfHxcblx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgIT09IFwidW5kZWZpbmVkXCIgJiZcblx0XHRcdFx0XHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKCBcImNsYXNzXCIgKSB8fFxuXHRcdFx0XHRcdFx0XHRcdFwiXCJcblx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0fSApO1xuXHRcdH0sXG5cblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG5hbWUsIG9wZXJhdG9yLCBjaGVjayApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHJlc3VsdCA9IFNpenpsZS5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHRcdFx0aWYgKCByZXN1bHQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiIT1cIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoICFvcGVyYXRvciApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJlc3VsdCArPSBcIlwiO1xuXG5cdFx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG1heC1sZW4gKi9cblxuXHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiPVwiID8gcmVzdWx0ID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiIT1cIiA/IHJlc3VsdCAhPT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIl49XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA9PT0gMCA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiKj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiQ9XCIgPyBjaGVjayAmJiByZXN1bHQuc2xpY2UoIC1jaGVjay5sZW5ndGggKSA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIn49XCIgPyAoIFwiIFwiICsgcmVzdWx0LnJlcGxhY2UoIHJ3aGl0ZXNwYWNlLCBcIiBcIiApICsgXCIgXCIgKS5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcInw9XCIgPyByZXN1bHQgPT09IGNoZWNrIHx8IHJlc3VsdC5zbGljZSggMCwgY2hlY2subGVuZ3RoICsgMSApID09PSBjaGVjayArIFwiLVwiIDpcblx0XHRcdFx0XHRmYWxzZTtcblx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBtYXgtbGVuICovXG5cblx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIHR5cGUsIHdoYXQsIF9hcmd1bWVudCwgZmlyc3QsIGxhc3QgKSB7XG5cdFx0XHR2YXIgc2ltcGxlID0gdHlwZS5zbGljZSggMCwgMyApICE9PSBcIm50aFwiLFxuXHRcdFx0XHRmb3J3YXJkID0gdHlwZS5zbGljZSggLTQgKSAhPT0gXCJsYXN0XCIsXG5cdFx0XHRcdG9mVHlwZSA9IHdoYXQgPT09IFwib2YtdHlwZVwiO1xuXG5cdFx0XHRyZXR1cm4gZmlyc3QgPT09IDEgJiYgbGFzdCA9PT0gMCA/XG5cblx0XHRcdFx0Ly8gU2hvcnRjdXQgZm9yIDpudGgtKihuKVxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gISFlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRcdH0gOlxuXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBfY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBjYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsIG5vZGUsIG5vZGVJbmRleCwgc3RhcnQsXG5cdFx0XHRcdFx0XHRkaXIgPSBzaW1wbGUgIT09IGZvcndhcmQgPyBcIm5leHRTaWJsaW5nXCIgOiBcInByZXZpb3VzU2libGluZ1wiLFxuXHRcdFx0XHRcdFx0cGFyZW50ID0gZWxlbS5wYXJlbnROb2RlLFxuXHRcdFx0XHRcdFx0bmFtZSA9IG9mVHlwZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksXG5cdFx0XHRcdFx0XHR1c2VDYWNoZSA9ICF4bWwgJiYgIW9mVHlwZSxcblx0XHRcdFx0XHRcdGRpZmYgPSBmYWxzZTtcblxuXHRcdFx0XHRcdGlmICggcGFyZW50ICkge1xuXG5cdFx0XHRcdFx0XHQvLyA6KGZpcnN0fGxhc3R8b25seSktKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdFx0XHRpZiAoIHNpbXBsZSApIHtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCBkaXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG5vZGUgPSBub2RlWyBkaXIgXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBSZXZlcnNlIGRpcmVjdGlvbiBmb3IgOm9ubHktKiAoaWYgd2UgaGF2ZW4ndCB5ZXQgZG9uZSBzbylcblx0XHRcdFx0XHRcdFx0XHRzdGFydCA9IGRpciA9IHR5cGUgPT09IFwib25seVwiICYmICFzdGFydCAmJiBcIm5leHRTaWJsaW5nXCI7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHN0YXJ0ID0gWyBmb3J3YXJkID8gcGFyZW50LmZpcnN0Q2hpbGQgOiBwYXJlbnQubGFzdENoaWxkIF07XG5cblx0XHRcdFx0XHRcdC8vIG5vbi14bWwgOm50aC1jaGlsZCguLi4pIHN0b3JlcyBjYWNoZSBkYXRhIG9uIGBwYXJlbnRgXG5cdFx0XHRcdFx0XHRpZiAoIGZvcndhcmQgJiYgdXNlQ2FjaGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU2VlayBgZWxlbWAgZnJvbSBhIHByZXZpb3VzbHktY2FjaGVkIGluZGV4XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRub2RlID0gcGFyZW50O1xuXHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8ICggbm9kZVsgZXhwYW5kbyBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdCggb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0ZGlmZiA9IG5vZGVJbmRleCAmJiBjYWNoZVsgMiBdO1xuXHRcdFx0XHRcdFx0XHRub2RlID0gbm9kZUluZGV4ICYmIHBhcmVudC5jaGlsZE5vZGVzWyBub2RlSW5kZXggXTtcblxuXHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEZhbGxiYWNrIHRvIHNlZWtpbmcgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0KCBkaWZmID0gbm9kZUluZGV4ID0gMCApIHx8IHN0YXJ0LnBvcCgpICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBXaGVuIGZvdW5kLCBjYWNoZSBpbmRleGVzIG9uIGBwYXJlbnRgIGFuZCBicmVha1xuXHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZS5ub2RlVHlwZSA9PT0gMSAmJiArK2RpZmYgJiYgbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIG5vZGVJbmRleCwgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gVXNlIHByZXZpb3VzbHktY2FjaGVkIGVsZW1lbnQgaW5kZXggaWYgYXZhaWxhYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAoIG5vZGVbIGV4cGFuZG8gXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdCggb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdFx0ZGlmZiA9IG5vZGVJbmRleDtcblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdC8vIHhtbCA6bnRoLWNoaWxkKC4uLilcblx0XHRcdFx0XHRcdFx0Ly8gb3IgOm50aC1sYXN0LWNoaWxkKC4uLikgb3IgOm50aCgtbGFzdCk/LW9mLXR5cGUoLi4uKVxuXHRcdFx0XHRcdFx0XHRpZiAoIGRpZmYgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gVXNlIHRoZSBzYW1lIGxvb3AgYXMgYWJvdmUgdG8gc2VlayBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdCggZGlmZiA9IG5vZGVJbmRleCA9IDAgKSB8fCBzdGFydC5wb3AoKSApICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCsrZGlmZiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBDYWNoZSB0aGUgaW5kZXggb2YgZWFjaCBlbmNvdW50ZXJlZCBlbGVtZW50XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KCBub2RlWyBleHBhbmRvIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQoIG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgdGhlIG9mZnNldCwgdGhlbiBjaGVjayBhZ2FpbnN0IGN5Y2xlIHNpemVcblx0XHRcdFx0XHRcdGRpZmYgLT0gbGFzdDtcblx0XHRcdFx0XHRcdHJldHVybiBkaWZmID09PSBmaXJzdCB8fCAoIGRpZmYgJSBmaXJzdCA9PT0gMCAmJiBkaWZmIC8gZmlyc3QgPj0gMCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIHBzZXVkbywgYXJndW1lbnQgKSB7XG5cblx0XHRcdC8vIHBzZXVkby1jbGFzcyBuYW1lcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZVxuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNwc2V1ZG8tY2xhc3Nlc1xuXHRcdFx0Ly8gUHJpb3JpdGl6ZSBieSBjYXNlIHNlbnNpdGl2aXR5IGluIGNhc2UgY3VzdG9tIHBzZXVkb3MgYXJlIGFkZGVkIHdpdGggdXBwZXJjYXNlIGxldHRlcnNcblx0XHRcdC8vIFJlbWVtYmVyIHRoYXQgc2V0RmlsdGVycyBpbmhlcml0cyBmcm9tIHBzZXVkb3Ncblx0XHRcdHZhciBhcmdzLFxuXHRcdFx0XHRmbiA9IEV4cHIucHNldWRvc1sgcHNldWRvIF0gfHwgRXhwci5zZXRGaWx0ZXJzWyBwc2V1ZG8udG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIHBzZXVkbzogXCIgKyBwc2V1ZG8gKTtcblxuXHRcdFx0Ly8gVGhlIHVzZXIgbWF5IHVzZSBjcmVhdGVQc2V1ZG8gdG8gaW5kaWNhdGUgdGhhdFxuXHRcdFx0Ly8gYXJndW1lbnRzIGFyZSBuZWVkZWQgdG8gY3JlYXRlIHRoZSBmaWx0ZXIgZnVuY3Rpb25cblx0XHRcdC8vIGp1c3QgYXMgU2l6emxlIGRvZXNcblx0XHRcdGlmICggZm5bIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0cmV0dXJuIGZuKCBhcmd1bWVudCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBCdXQgbWFpbnRhaW4gc3VwcG9ydCBmb3Igb2xkIHNpZ25hdHVyZXNcblx0XHRcdGlmICggZm4ubGVuZ3RoID4gMSApIHtcblx0XHRcdFx0YXJncyA9IFsgcHNldWRvLCBwc2V1ZG8sIFwiXCIsIGFyZ3VtZW50IF07XG5cdFx0XHRcdHJldHVybiBFeHByLnNldEZpbHRlcnMuaGFzT3duUHJvcGVydHkoIHBzZXVkby50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0XHRcdG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHRcdFx0XHR2YXIgaWR4LFxuXHRcdFx0XHRcdFx0XHRtYXRjaGVkID0gZm4oIHNlZWQsIGFyZ3VtZW50ICksXG5cdFx0XHRcdFx0XHRcdGkgPSBtYXRjaGVkLmxlbmd0aDtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZHggPSBpbmRleE9mKCBzZWVkLCBtYXRjaGVkWyBpIF0gKTtcblx0XHRcdFx0XHRcdFx0c2VlZFsgaWR4IF0gPSAhKCBtYXRjaGVzWyBpZHggXSA9IG1hdGNoZWRbIGkgXSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gKSA6XG5cdFx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZm4oIGVsZW0sIDAsIGFyZ3MgKTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZm47XG5cdFx0fVxuXHR9LFxuXG5cdHBzZXVkb3M6IHtcblxuXHRcdC8vIFBvdGVudGlhbGx5IGNvbXBsZXggcHNldWRvc1xuXHRcdFwibm90XCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXG5cdFx0XHQvLyBUcmltIHRoZSBzZWxlY3RvciBwYXNzZWQgdG8gY29tcGlsZVxuXHRcdFx0Ly8gdG8gYXZvaWQgdHJlYXRpbmcgbGVhZGluZyBhbmQgdHJhaWxpbmdcblx0XHRcdC8vIHNwYWNlcyBhcyBjb21iaW5hdG9yc1xuXHRcdFx0dmFyIGlucHV0ID0gW10sXG5cdFx0XHRcdHJlc3VsdHMgPSBbXSxcblx0XHRcdFx0bWF0Y2hlciA9IGNvbXBpbGUoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSApO1xuXG5cdFx0XHRyZXR1cm4gbWF0Y2hlclsgZXhwYW5kbyBdID9cblx0XHRcdFx0bWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcywgX2NvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0XHRcdHVubWF0Y2hlZCA9IG1hdGNoZXIoIHNlZWQsIG51bGwsIHhtbCwgW10gKSxcblx0XHRcdFx0XHRcdGkgPSBzZWVkLmxlbmd0aDtcblxuXHRcdFx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIHVubWF0Y2hlZCBieSBgbWF0Y2hlcmBcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKCBlbGVtID0gdW5tYXRjaGVkWyBpIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0c2VlZFsgaSBdID0gISggbWF0Y2hlc1sgaSBdID0gZWxlbSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApIDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIF9jb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0aW5wdXRbIDAgXSA9IGVsZW07XG5cdFx0XHRcdFx0bWF0Y2hlciggaW5wdXQsIG51bGwsIHhtbCwgcmVzdWx0cyApO1xuXG5cdFx0XHRcdFx0Ly8gRG9uJ3Qga2VlcCB0aGUgZWxlbWVudCAoaXNzdWUgIzI5OSlcblx0XHRcdFx0XHRpbnB1dFsgMCBdID0gbnVsbDtcblx0XHRcdFx0XHRyZXR1cm4gIXJlc3VsdHMucG9wKCk7XG5cdFx0XHRcdH07XG5cdFx0fSApLFxuXG5cdFx0XCJoYXNcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBTaXp6bGUoIHNlbGVjdG9yLCBlbGVtICkubGVuZ3RoID4gMDtcblx0XHRcdH07XG5cdFx0fSApLFxuXG5cdFx0XCJjb250YWluc1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0dGV4dCA9IHRleHQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS50ZXh0Q29udGVudCB8fCBnZXRUZXh0KCBlbGVtICkgKS5pbmRleE9mKCB0ZXh0ICkgPiAtMTtcblx0XHRcdH07XG5cdFx0fSApLFxuXG5cdFx0Ly8gXCJXaGV0aGVyIGFuIGVsZW1lbnQgaXMgcmVwcmVzZW50ZWQgYnkgYSA6bGFuZygpIHNlbGVjdG9yXG5cdFx0Ly8gaXMgYmFzZWQgc29sZWx5IG9uIHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWVcblx0XHQvLyBiZWluZyBlcXVhbCB0byB0aGUgaWRlbnRpZmllciBDLFxuXHRcdC8vIG9yIGJlZ2lubmluZyB3aXRoIHRoZSBpZGVudGlmaWVyIEMgaW1tZWRpYXRlbHkgZm9sbG93ZWQgYnkgXCItXCIuXG5cdFx0Ly8gVGhlIG1hdGNoaW5nIG9mIEMgYWdhaW5zdCB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlIGlzIHBlcmZvcm1lZCBjYXNlLWluc2Vuc2l0aXZlbHkuXG5cdFx0Ly8gVGhlIGlkZW50aWZpZXIgQyBkb2VzIG5vdCBoYXZlIHRvIGJlIGEgdmFsaWQgbGFuZ3VhZ2UgbmFtZS5cIlxuXHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jbGFuZy1wc2V1ZG9cblx0XHRcImxhbmdcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggbGFuZyApIHtcblxuXHRcdFx0Ly8gbGFuZyB2YWx1ZSBtdXN0IGJlIGEgdmFsaWQgaWRlbnRpZmllclxuXHRcdFx0aWYgKCAhcmlkZW50aWZpZXIudGVzdCggbGFuZyB8fCBcIlwiICkgKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBsYW5nOiBcIiArIGxhbmcgKTtcblx0XHRcdH1cblx0XHRcdGxhbmcgPSBsYW5nLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIGVsZW1MYW5nO1xuXHRcdFx0XHRkbyB7XG5cdFx0XHRcdFx0aWYgKCAoIGVsZW1MYW5nID0gZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0XHRcdFx0ZWxlbS5sYW5nIDpcblx0XHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKCBcInhtbDpsYW5nXCIgKSB8fCBlbGVtLmdldEF0dHJpYnV0ZSggXCJsYW5nXCIgKSApICkge1xuXG5cdFx0XHRcdFx0XHRlbGVtTGFuZyA9IGVsZW1MYW5nLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbUxhbmcgPT09IGxhbmcgfHwgZWxlbUxhbmcuaW5kZXhPZiggbGFuZyArIFwiLVwiICkgPT09IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IHdoaWxlICggKCBlbGVtID0gZWxlbS5wYXJlbnROb2RlICkgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9O1xuXHRcdH0gKSxcblxuXHRcdC8vIE1pc2NlbGxhbmVvdXNcblx0XHRcInRhcmdldFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBoYXNoID0gd2luZG93LmxvY2F0aW9uICYmIHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xuXHRcdFx0cmV0dXJuIGhhc2ggJiYgaGFzaC5zbGljZSggMSApID09PSBlbGVtLmlkO1xuXHRcdH0sXG5cblx0XHRcInJvb3RcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jRWxlbTtcblx0XHR9LFxuXG5cdFx0XCJmb2N1c1wiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmXG5cdFx0XHRcdCggIWRvY3VtZW50Lmhhc0ZvY3VzIHx8IGRvY3VtZW50Lmhhc0ZvY3VzKCkgKSAmJlxuXHRcdFx0XHQhISggZWxlbS50eXBlIHx8IGVsZW0uaHJlZiB8fCB+ZWxlbS50YWJJbmRleCApO1xuXHRcdH0sXG5cblx0XHQvLyBCb29sZWFuIHByb3BlcnRpZXNcblx0XHRcImVuYWJsZWRcIjogY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIGZhbHNlICksXG5cdFx0XCJkaXNhYmxlZFwiOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggdHJ1ZSApLFxuXG5cdFx0XCJjaGVja2VkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvLyBJbiBDU1MzLCA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIGJvdGggY2hlY2tlZCBhbmQgc2VsZWN0ZWQgZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmICEhZWxlbS5jaGVja2VkICkgfHxcblx0XHRcdFx0KCBub2RlTmFtZSA9PT0gXCJvcHRpb25cIiAmJiAhIWVsZW0uc2VsZWN0ZWQgKTtcblx0XHR9LFxuXG5cdFx0XCJzZWxlY3RlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0Ly8gQWNjZXNzaW5nIHRoaXMgcHJvcGVydHkgbWFrZXMgc2VsZWN0ZWQtYnktZGVmYXVsdFxuXHRcdFx0Ly8gb3B0aW9ucyBpbiBTYWZhcmkgd29yayBwcm9wZXJseVxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtZXhwcmVzc2lvbnNcblx0XHRcdFx0ZWxlbS5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLnNlbGVjdGVkID09PSB0cnVlO1xuXHRcdH0sXG5cblx0XHQvLyBDb250ZW50c1xuXHRcdFwiZW1wdHlcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jZW1wdHktcHNldWRvXG5cdFx0XHQvLyA6ZW1wdHkgaXMgbmVnYXRlZCBieSBlbGVtZW50ICgxKSBvciBjb250ZW50IG5vZGVzICh0ZXh0OiAzOyBjZGF0YTogNDsgZW50aXR5IHJlZjogNSksXG5cdFx0XHQvLyAgIGJ1dCBub3QgYnkgb3RoZXJzIChjb21tZW50OiA4OyBwcm9jZXNzaW5nIGluc3RydWN0aW9uOiA3OyBldGMuKVxuXHRcdFx0Ly8gbm9kZVR5cGUgPCA2IHdvcmtzIGJlY2F1c2UgYXR0cmlidXRlcyAoMikgZG8gbm90IGFwcGVhciBhcyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA8IDYgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0XCJwYXJlbnRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gIUV4cHIucHNldWRvc1sgXCJlbXB0eVwiIF0oIGVsZW0gKTtcblx0XHR9LFxuXG5cdFx0Ly8gRWxlbWVudC9pbnB1dCB0eXBlc1xuXHRcdFwiaGVhZGVyXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJoZWFkZXIudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImlucHV0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJpbnB1dHMudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImJ1dHRvblwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IFwiYnV0dG9uXCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIjtcblx0XHR9LFxuXG5cdFx0XCJ0ZXh0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGF0dHI7XG5cdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgJiZcblx0XHRcdFx0ZWxlbS50eXBlID09PSBcInRleHRcIiAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDwxMCBvbmx5XG5cdFx0XHRcdC8vIE5ldyBIVE1MNSBhdHRyaWJ1dGUgdmFsdWVzIChlLmcuLCBcInNlYXJjaFwiKSBhcHBlYXIgd2l0aCBlbGVtLnR5cGUgPT09IFwidGV4dFwiXG5cdFx0XHRcdCggKCBhdHRyID0gZWxlbS5nZXRBdHRyaWJ1dGUoIFwidHlwZVwiICkgKSA9PSBudWxsIHx8XG5cdFx0XHRcdFx0YXR0ci50b0xvd2VyQ2FzZSgpID09PSBcInRleHRcIiApO1xuXHRcdH0sXG5cblx0XHQvLyBQb3NpdGlvbi1pbi1jb2xsZWN0aW9uXG5cdFx0XCJmaXJzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBbIDAgXTtcblx0XHR9ICksXG5cblx0XHRcImxhc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIF9tYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHJldHVybiBbIGxlbmd0aCAtIDEgXTtcblx0XHR9ICksXG5cblx0XHRcImVxXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBfbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0cmV0dXJuIFsgYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudCBdO1xuXHRcdH0gKSxcblxuXHRcdFwiZXZlblwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSApLFxuXG5cdFx0XCJvZGRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAxO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0gKSxcblxuXHRcdFwibHRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID9cblx0XHRcdFx0YXJndW1lbnQgKyBsZW5ndGggOlxuXHRcdFx0XHRhcmd1bWVudCA+IGxlbmd0aCA/XG5cdFx0XHRcdFx0bGVuZ3RoIDpcblx0XHRcdFx0XHRhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgLS1pID49IDA7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9ICksXG5cblx0XHRcImd0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7ICsraSA8IGxlbmd0aDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0gKVxuXHR9XG59O1xuXG5FeHByLnBzZXVkb3NbIFwibnRoXCIgXSA9IEV4cHIucHNldWRvc1sgXCJlcVwiIF07XG5cbi8vIEFkZCBidXR0b24vaW5wdXQgdHlwZSBwc2V1ZG9zXG5mb3IgKCBpIGluIHsgcmFkaW86IHRydWUsIGNoZWNrYm94OiB0cnVlLCBmaWxlOiB0cnVlLCBwYXNzd29yZDogdHJ1ZSwgaW1hZ2U6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVJbnB1dFBzZXVkbyggaSApO1xufVxuZm9yICggaSBpbiB7IHN1Ym1pdDogdHJ1ZSwgcmVzZXQ6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVCdXR0b25Qc2V1ZG8oIGkgKTtcbn1cblxuLy8gRWFzeSBBUEkgZm9yIGNyZWF0aW5nIG5ldyBzZXRGaWx0ZXJzXG5mdW5jdGlvbiBzZXRGaWx0ZXJzKCkge31cbnNldEZpbHRlcnMucHJvdG90eXBlID0gRXhwci5maWx0ZXJzID0gRXhwci5wc2V1ZG9zO1xuRXhwci5zZXRGaWx0ZXJzID0gbmV3IHNldEZpbHRlcnMoKTtcblxudG9rZW5pemUgPSBTaXp6bGUudG9rZW5pemUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIHBhcnNlT25seSApIHtcblx0dmFyIG1hdGNoZWQsIG1hdGNoLCB0b2tlbnMsIHR5cGUsXG5cdFx0c29GYXIsIGdyb3VwcywgcHJlRmlsdGVycyxcblx0XHRjYWNoZWQgPSB0b2tlbkNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCBjYWNoZWQgKSB7XG5cdFx0cmV0dXJuIHBhcnNlT25seSA/IDAgOiBjYWNoZWQuc2xpY2UoIDAgKTtcblx0fVxuXG5cdHNvRmFyID0gc2VsZWN0b3I7XG5cdGdyb3VwcyA9IFtdO1xuXHRwcmVGaWx0ZXJzID0gRXhwci5wcmVGaWx0ZXI7XG5cblx0d2hpbGUgKCBzb0ZhciApIHtcblxuXHRcdC8vIENvbW1hIGFuZCBmaXJzdCBydW5cblx0XHRpZiAoICFtYXRjaGVkIHx8ICggbWF0Y2ggPSByY29tbWEuZXhlYyggc29GYXIgKSApICkge1xuXHRcdFx0aWYgKCBtYXRjaCApIHtcblxuXHRcdFx0XHQvLyBEb24ndCBjb25zdW1lIHRyYWlsaW5nIGNvbW1hcyBhcyB2YWxpZFxuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaFsgMCBdLmxlbmd0aCApIHx8IHNvRmFyO1xuXHRcdFx0fVxuXHRcdFx0Z3JvdXBzLnB1c2goICggdG9rZW5zID0gW10gKSApO1xuXHRcdH1cblxuXHRcdG1hdGNoZWQgPSBmYWxzZTtcblxuXHRcdC8vIENvbWJpbmF0b3JzXG5cdFx0aWYgKCAoIG1hdGNoID0gcmxlYWRpbmdDb21iaW5hdG9yLmV4ZWMoIHNvRmFyICkgKSApIHtcblx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0dG9rZW5zLnB1c2goIHtcblx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cblx0XHRcdFx0Ly8gQ2FzdCBkZXNjZW5kYW50IGNvbWJpbmF0b3JzIHRvIHNwYWNlXG5cdFx0XHRcdHR5cGU6IG1hdGNoWyAwIF0ucmVwbGFjZSggcnRyaW0sIFwiIFwiIClcblx0XHRcdH0gKTtcblx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmlsdGVyc1xuXHRcdGZvciAoIHR5cGUgaW4gRXhwci5maWx0ZXIgKSB7XG5cdFx0XHRpZiAoICggbWF0Y2ggPSBtYXRjaEV4cHJbIHR5cGUgXS5leGVjKCBzb0ZhciApICkgJiYgKCAhcHJlRmlsdGVyc1sgdHlwZSBdIHx8XG5cdFx0XHRcdCggbWF0Y2ggPSBwcmVGaWx0ZXJzWyB0eXBlIF0oIG1hdGNoICkgKSApICkge1xuXHRcdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdFx0dG9rZW5zLnB1c2goIHtcblx0XHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRcdG1hdGNoZXM6IG1hdGNoXG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoICFtYXRjaGVkICkge1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBsZW5ndGggb2YgdGhlIGludmFsaWQgZXhjZXNzXG5cdC8vIGlmIHdlJ3JlIGp1c3QgcGFyc2luZ1xuXHQvLyBPdGhlcndpc2UsIHRocm93IGFuIGVycm9yIG9yIHJldHVybiB0b2tlbnNcblx0cmV0dXJuIHBhcnNlT25seSA/XG5cdFx0c29GYXIubGVuZ3RoIDpcblx0XHRzb0ZhciA/XG5cdFx0XHRTaXp6bGUuZXJyb3IoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHQvLyBDYWNoZSB0aGUgdG9rZW5zXG5cdFx0XHR0b2tlbkNhY2hlKCBzZWxlY3RvciwgZ3JvdXBzICkuc2xpY2UoIDAgKTtcbn07XG5cbmZ1bmN0aW9uIHRvU2VsZWN0b3IoIHRva2VucyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0c2VsZWN0b3IgPSBcIlwiO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRzZWxlY3RvciArPSB0b2tlbnNbIGkgXS52YWx1ZTtcblx0fVxuXHRyZXR1cm4gc2VsZWN0b3I7XG59XG5cbmZ1bmN0aW9uIGFkZENvbWJpbmF0b3IoIG1hdGNoZXIsIGNvbWJpbmF0b3IsIGJhc2UgKSB7XG5cdHZhciBkaXIgPSBjb21iaW5hdG9yLmRpcixcblx0XHRza2lwID0gY29tYmluYXRvci5uZXh0LFxuXHRcdGtleSA9IHNraXAgfHwgZGlyLFxuXHRcdGNoZWNrTm9uRWxlbWVudHMgPSBiYXNlICYmIGtleSA9PT0gXCJwYXJlbnROb2RlXCIsXG5cdFx0ZG9uZU5hbWUgPSBkb25lKys7XG5cblx0cmV0dXJuIGNvbWJpbmF0b3IuZmlyc3QgP1xuXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBjbG9zZXN0IGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSA6XG5cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGFsbCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudHNcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIG9sZENhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSxcblx0XHRcdFx0bmV3Q2FjaGUgPSBbIGRpcnJ1bnMsIGRvbmVOYW1lIF07XG5cblx0XHRcdC8vIFdlIGNhbid0IHNldCBhcmJpdHJhcnkgZGF0YSBvbiBYTUwgbm9kZXMsIHNvIHRoZXkgZG9uJ3QgYmVuZWZpdCBmcm9tIGNvbWJpbmF0b3IgY2FjaGluZ1xuXHRcdFx0aWYgKCB4bWwgKSB7XG5cdFx0XHRcdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IGVsZW1bIGV4cGFuZG8gXSB8fCAoIGVsZW1bIGV4cGFuZG8gXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0KCBvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRpZiAoIHNraXAgJiYgc2tpcCA9PT0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICkge1xuXHRcdFx0XHRcdFx0XHRlbGVtID0gZWxlbVsgZGlyIF0gfHwgZWxlbTtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoICggb2xkQ2FjaGUgPSB1bmlxdWVDYWNoZVsga2V5IF0gKSAmJlxuXHRcdFx0XHRcdFx0XHRvbGRDYWNoZVsgMCBdID09PSBkaXJydW5zICYmIG9sZENhY2hlWyAxIF0gPT09IGRvbmVOYW1lICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFzc2lnbiB0byBuZXdDYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHJldHVybiAoIG5ld0NhY2hlWyAyIF0gPSBvbGRDYWNoZVsgMiBdICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFJldXNlIG5ld2NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIGtleSBdID0gbmV3Q2FjaGU7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQSBtYXRjaCBtZWFucyB3ZSdyZSBkb25lOyBhIGZhaWwgbWVhbnMgd2UgaGF2ZSB0byBrZWVwIGNoZWNraW5nXG5cdFx0XHRcdFx0XHRcdGlmICggKCBuZXdDYWNoZVsgMiBdID0gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG59XG5cbmZ1bmN0aW9uIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApIHtcblx0cmV0dXJuIG1hdGNoZXJzLmxlbmd0aCA+IDEgP1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgaSA9IG1hdGNoZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoICFtYXRjaGVyc1sgaSBdKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0gOlxuXHRcdG1hdGNoZXJzWyAwIF07XG59XG5cbmZ1bmN0aW9uIG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yLCBjb250ZXh0cywgcmVzdWx0cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGNvbnRleHRzLmxlbmd0aDtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0U2l6emxlKCBzZWxlY3RvciwgY29udGV4dHNbIGkgXSwgcmVzdWx0cyApO1xuXHR9XG5cdHJldHVybiByZXN1bHRzO1xufVxuXG5mdW5jdGlvbiBjb25kZW5zZSggdW5tYXRjaGVkLCBtYXAsIGZpbHRlciwgY29udGV4dCwgeG1sICkge1xuXHR2YXIgZWxlbSxcblx0XHRuZXdVbm1hdGNoZWQgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsZW4gPSB1bm1hdGNoZWQubGVuZ3RoLFxuXHRcdG1hcHBlZCA9IG1hcCAhPSBudWxsO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKCBlbGVtID0gdW5tYXRjaGVkWyBpIF0gKSApIHtcblx0XHRcdGlmICggIWZpbHRlciB8fCBmaWx0ZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRuZXdVbm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRpZiAoIG1hcHBlZCApIHtcblx0XHRcdFx0XHRtYXAucHVzaCggaSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG5ld1VubWF0Y2hlZDtcbn1cblxuZnVuY3Rpb24gc2V0TWF0Y2hlciggcHJlRmlsdGVyLCBzZWxlY3RvciwgbWF0Y2hlciwgcG9zdEZpbHRlciwgcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICkge1xuXHRpZiAoIHBvc3RGaWx0ZXIgJiYgIXBvc3RGaWx0ZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmlsdGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbHRlciApO1xuXHR9XG5cdGlmICggcG9zdEZpbmRlciAmJiAhcG9zdEZpbmRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaW5kZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKTtcblx0fVxuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VlZCwgcmVzdWx0cywgY29udGV4dCwgeG1sICkge1xuXHRcdHZhciB0ZW1wLCBpLCBlbGVtLFxuXHRcdFx0cHJlTWFwID0gW10sXG5cdFx0XHRwb3N0TWFwID0gW10sXG5cdFx0XHRwcmVleGlzdGluZyA9IHJlc3VsdHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBHZXQgaW5pdGlhbCBlbGVtZW50cyBmcm9tIHNlZWQgb3IgY29udGV4dFxuXHRcdFx0ZWxlbXMgPSBzZWVkIHx8IG11bHRpcGxlQ29udGV4dHMoXG5cdFx0XHRcdHNlbGVjdG9yIHx8IFwiKlwiLFxuXHRcdFx0XHRjb250ZXh0Lm5vZGVUeXBlID8gWyBjb250ZXh0IF0gOiBjb250ZXh0LFxuXHRcdFx0XHRbXVxuXHRcdFx0KSxcblxuXHRcdFx0Ly8gUHJlZmlsdGVyIHRvIGdldCBtYXRjaGVyIGlucHV0LCBwcmVzZXJ2aW5nIGEgbWFwIGZvciBzZWVkLXJlc3VsdHMgc3luY2hyb25pemF0aW9uXG5cdFx0XHRtYXRjaGVySW4gPSBwcmVGaWx0ZXIgJiYgKCBzZWVkIHx8ICFzZWxlY3RvciApID9cblx0XHRcdFx0Y29uZGVuc2UoIGVsZW1zLCBwcmVNYXAsIHByZUZpbHRlciwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRlbGVtcyxcblxuXHRcdFx0bWF0Y2hlck91dCA9IG1hdGNoZXIgP1xuXG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgYSBwb3N0RmluZGVyLCBvciBmaWx0ZXJlZCBzZWVkLCBvciBub24tc2VlZCBwb3N0RmlsdGVyIG9yIHByZWV4aXN0aW5nIHJlc3VsdHMsXG5cdFx0XHRcdHBvc3RGaW5kZXIgfHwgKCBzZWVkID8gcHJlRmlsdGVyIDogcHJlZXhpc3RpbmcgfHwgcG9zdEZpbHRlciApID9cblxuXHRcdFx0XHRcdC8vIC4uLmludGVybWVkaWF0ZSBwcm9jZXNzaW5nIGlzIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdFtdIDpcblxuXHRcdFx0XHRcdC8vIC4uLm90aGVyd2lzZSB1c2UgcmVzdWx0cyBkaXJlY3RseVxuXHRcdFx0XHRcdHJlc3VsdHMgOlxuXHRcdFx0XHRtYXRjaGVySW47XG5cblx0XHQvLyBGaW5kIHByaW1hcnkgbWF0Y2hlc1xuXHRcdGlmICggbWF0Y2hlciApIHtcblx0XHRcdG1hdGNoZXIoIG1hdGNoZXJJbiwgbWF0Y2hlck91dCwgY29udGV4dCwgeG1sICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcG9zdEZpbHRlclxuXHRcdGlmICggcG9zdEZpbHRlciApIHtcblx0XHRcdHRlbXAgPSBjb25kZW5zZSggbWF0Y2hlck91dCwgcG9zdE1hcCApO1xuXHRcdFx0cG9zdEZpbHRlciggdGVtcCwgW10sIGNvbnRleHQsIHhtbCApO1xuXG5cdFx0XHQvLyBVbi1tYXRjaCBmYWlsaW5nIGVsZW1lbnRzIGJ5IG1vdmluZyB0aGVtIGJhY2sgdG8gbWF0Y2hlckluXG5cdFx0XHRpID0gdGVtcC5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAoIGVsZW0gPSB0ZW1wWyBpIF0gKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyT3V0WyBwb3N0TWFwWyBpIF0gXSA9ICEoIG1hdGNoZXJJblsgcG9zdE1hcFsgaSBdIF0gPSBlbGVtICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgfHwgcHJlRmlsdGVyICkge1xuXHRcdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cblx0XHRcdFx0XHQvLyBHZXQgdGhlIGZpbmFsIG1hdGNoZXJPdXQgYnkgY29uZGVuc2luZyB0aGlzIGludGVybWVkaWF0ZSBpbnRvIHBvc3RGaW5kZXIgY29udGV4dHNcblx0XHRcdFx0XHR0ZW1wID0gW107XG5cdFx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSBtYXRjaGVyT3V0WyBpIF0gKSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBSZXN0b3JlIG1hdGNoZXJJbiBzaW5jZSBlbGVtIGlzIG5vdCB5ZXQgYSBmaW5hbCBtYXRjaFxuXHRcdFx0XHRcdFx0XHR0ZW1wLnB1c2goICggbWF0Y2hlckluWyBpIF0gPSBlbGVtICkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgKCBtYXRjaGVyT3V0ID0gW10gKSwgdGVtcCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBNb3ZlIG1hdGNoZWQgZWxlbWVudHMgZnJvbSBzZWVkIHRvIHJlc3VsdHMgdG8ga2VlcCB0aGVtIHN5bmNocm9uaXplZFxuXHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdGlmICggKCBlbGVtID0gbWF0Y2hlck91dFsgaSBdICkgJiZcblx0XHRcdFx0XHRcdCggdGVtcCA9IHBvc3RGaW5kZXIgPyBpbmRleE9mKCBzZWVkLCBlbGVtICkgOiBwcmVNYXBbIGkgXSApID4gLTEgKSB7XG5cblx0XHRcdFx0XHRcdHNlZWRbIHRlbXAgXSA9ICEoIHJlc3VsdHNbIHRlbXAgXSA9IGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEFkZCBlbGVtZW50cyB0byByZXN1bHRzLCB0aHJvdWdoIHBvc3RGaW5kZXIgaWYgZGVmaW5lZFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyT3V0ID0gY29uZGVuc2UoXG5cdFx0XHRcdG1hdGNoZXJPdXQgPT09IHJlc3VsdHMgP1xuXHRcdFx0XHRcdG1hdGNoZXJPdXQuc3BsaWNlKCBwcmVleGlzdGluZywgbWF0Y2hlck91dC5sZW5ndGggKSA6XG5cdFx0XHRcdFx0bWF0Y2hlck91dFxuXHRcdFx0KTtcblx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgcmVzdWx0cywgbWF0Y2hlck91dCwgeG1sICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBtYXRjaGVyT3V0ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9ICk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMgKSB7XG5cdHZhciBjaGVja0NvbnRleHQsIG1hdGNoZXIsIGosXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRsZWFkaW5nUmVsYXRpdmUgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbIDAgXS50eXBlIF0sXG5cdFx0aW1wbGljaXRSZWxhdGl2ZSA9IGxlYWRpbmdSZWxhdGl2ZSB8fCBFeHByLnJlbGF0aXZlWyBcIiBcIiBdLFxuXHRcdGkgPSBsZWFkaW5nUmVsYXRpdmUgPyAxIDogMCxcblxuXHRcdC8vIFRoZSBmb3VuZGF0aW9uYWwgbWF0Y2hlciBlbnN1cmVzIHRoYXQgZWxlbWVudHMgYXJlIHJlYWNoYWJsZSBmcm9tIHRvcC1sZXZlbCBjb250ZXh0KHMpXG5cdFx0bWF0Y2hDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gY2hlY2tDb250ZXh0O1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaEFueUNvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBpbmRleE9mKCBjaGVja0NvbnRleHQsIGVsZW0gKSA+IC0xO1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaGVycyA9IFsgZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciByZXQgPSAoICFsZWFkaW5nUmVsYXRpdmUgJiYgKCB4bWwgfHwgY29udGV4dCAhPT0gb3V0ZXJtb3N0Q29udGV4dCApICkgfHwgKFxuXHRcdFx0XHQoIGNoZWNrQ29udGV4dCA9IGNvbnRleHQgKS5ub2RlVHlwZSA/XG5cdFx0XHRcdFx0bWF0Y2hDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdFx0bWF0Y2hBbnlDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSApO1xuXG5cdFx0XHQvLyBBdm9pZCBoYW5naW5nIG9udG8gZWxlbWVudCAoaXNzdWUgIzI5OSlcblx0XHRcdGNoZWNrQ29udGV4dCA9IG51bGw7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH0gXTtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoICggbWF0Y2hlciA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1sgaSBdLnR5cGUgXSApICkge1xuXHRcdFx0bWF0Y2hlcnMgPSBbIGFkZENvbWJpbmF0b3IoIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLCBtYXRjaGVyICkgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlciA9IEV4cHIuZmlsdGVyWyB0b2tlbnNbIGkgXS50eXBlIF0uYXBwbHkoIG51bGwsIHRva2Vuc1sgaSBdLm1hdGNoZXMgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIHNwZWNpYWwgdXBvbiBzZWVpbmcgYSBwb3NpdGlvbmFsIG1hdGNoZXJcblx0XHRcdGlmICggbWF0Y2hlclsgZXhwYW5kbyBdICkge1xuXG5cdFx0XHRcdC8vIEZpbmQgdGhlIG5leHQgcmVsYXRpdmUgb3BlcmF0b3IgKGlmIGFueSkgZm9yIHByb3BlciBoYW5kbGluZ1xuXHRcdFx0XHRqID0gKytpO1xuXHRcdFx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcblx0XHRcdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbIHRva2Vuc1sgaiBdLnR5cGUgXSApIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gc2V0TWF0Y2hlcihcblx0XHRcdFx0XHRpID4gMSAmJiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSxcblx0XHRcdFx0XHRpID4gMSAmJiB0b1NlbGVjdG9yKFxuXG5cdFx0XHRcdFx0Ly8gSWYgdGhlIHByZWNlZGluZyB0b2tlbiB3YXMgYSBkZXNjZW5kYW50IGNvbWJpbmF0b3IsIGluc2VydCBhbiBpbXBsaWNpdCBhbnktZWxlbWVudCBgKmBcblx0XHRcdFx0XHR0b2tlbnNcblx0XHRcdFx0XHRcdC5zbGljZSggMCwgaSAtIDEgKVxuXHRcdFx0XHRcdFx0LmNvbmNhdCggeyB2YWx1ZTogdG9rZW5zWyBpIC0gMiBdLnR5cGUgPT09IFwiIFwiID8gXCIqXCIgOiBcIlwiIH0gKVxuXHRcdFx0XHRcdCkucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLFxuXHRcdFx0XHRcdG1hdGNoZXIsXG5cdFx0XHRcdFx0aSA8IGogJiYgbWF0Y2hlckZyb21Ub2tlbnMoIHRva2Vucy5zbGljZSggaSwgaiApICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiBtYXRjaGVyRnJvbVRva2VucyggKCB0b2tlbnMgPSB0b2tlbnMuc2xpY2UoIGogKSApICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlcnMucHVzaCggbWF0Y2hlciApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkge1xuXHR2YXIgYnlTZXQgPSBzZXRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdGJ5RWxlbWVudCA9IGVsZW1lbnRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdHN1cGVyTWF0Y2hlciA9IGZ1bmN0aW9uKCBzZWVkLCBjb250ZXh0LCB4bWwsIHJlc3VsdHMsIG91dGVybW9zdCApIHtcblx0XHRcdHZhciBlbGVtLCBqLCBtYXRjaGVyLFxuXHRcdFx0XHRtYXRjaGVkQ291bnQgPSAwLFxuXHRcdFx0XHRpID0gXCIwXCIsXG5cdFx0XHRcdHVubWF0Y2hlZCA9IHNlZWQgJiYgW10sXG5cdFx0XHRcdHNldE1hdGNoZWQgPSBbXSxcblx0XHRcdFx0Y29udGV4dEJhY2t1cCA9IG91dGVybW9zdENvbnRleHQsXG5cblx0XHRcdFx0Ly8gV2UgbXVzdCBhbHdheXMgaGF2ZSBlaXRoZXIgc2VlZCBlbGVtZW50cyBvciBvdXRlcm1vc3QgY29udGV4dFxuXHRcdFx0XHRlbGVtcyA9IHNlZWQgfHwgYnlFbGVtZW50ICYmIEV4cHIuZmluZFsgXCJUQUdcIiBdKCBcIipcIiwgb3V0ZXJtb3N0ICksXG5cblx0XHRcdFx0Ly8gVXNlIGludGVnZXIgZGlycnVucyBpZmYgdGhpcyBpcyB0aGUgb3V0ZXJtb3N0IG1hdGNoZXJcblx0XHRcdFx0ZGlycnVuc1VuaXF1ZSA9ICggZGlycnVucyArPSBjb250ZXh0QmFja3VwID09IG51bGwgPyAxIDogTWF0aC5yYW5kb20oKSB8fCAwLjEgKSxcblx0XHRcdFx0bGVuID0gZWxlbXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dCA9PSBkb2N1bWVudCB8fCBjb250ZXh0IHx8IG91dGVybW9zdDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIGVsZW1lbnRzIHBhc3NpbmcgZWxlbWVudE1hdGNoZXJzIGRpcmVjdGx5IHRvIHJlc3VsdHNcblx0XHRcdC8vIFN1cHBvcnQ6IElFPDksIFNhZmFyaVxuXHRcdFx0Ly8gVG9sZXJhdGUgTm9kZUxpc3QgcHJvcGVydGllcyAoSUU6IFwibGVuZ3RoXCI7IFNhZmFyaTogPG51bWJlcj4pIG1hdGNoaW5nIGVsZW1lbnRzIGJ5IGlkXG5cdFx0XHRmb3IgKCA7IGkgIT09IGxlbiAmJiAoIGVsZW0gPSBlbGVtc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGJ5RWxlbWVudCAmJiBlbGVtICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdFx0XHRpZiAoICFjb250ZXh0ICYmIGVsZW0ub3duZXJEb2N1bWVudCAhPSBkb2N1bWVudCApIHtcblx0XHRcdFx0XHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdFx0XHRcdFx0XHR4bWwgPSAhZG9jdW1lbnRJc0hUTUw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHdoaWxlICggKCBtYXRjaGVyID0gZWxlbWVudE1hdGNoZXJzWyBqKysgXSApICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0IHx8IGRvY3VtZW50LCB4bWwgKSApIHtcblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFRyYWNrIHVubWF0Y2hlZCBlbGVtZW50cyBmb3Igc2V0IGZpbHRlcnNcblx0XHRcdFx0aWYgKCBieVNldCApIHtcblxuXHRcdFx0XHRcdC8vIFRoZXkgd2lsbCBoYXZlIGdvbmUgdGhyb3VnaCBhbGwgcG9zc2libGUgbWF0Y2hlcnNcblx0XHRcdFx0XHRpZiAoICggZWxlbSA9ICFtYXRjaGVyICYmIGVsZW0gKSApIHtcblx0XHRcdFx0XHRcdG1hdGNoZWRDb3VudC0tO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIExlbmd0aGVuIHRoZSBhcnJheSBmb3IgZXZlcnkgZWxlbWVudCwgbWF0Y2hlZCBvciBub3Rcblx0XHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBgaWAgaXMgbm93IHRoZSBjb3VudCBvZiBlbGVtZW50cyB2aXNpdGVkIGFib3ZlLCBhbmQgYWRkaW5nIGl0IHRvIGBtYXRjaGVkQ291bnRgXG5cdFx0XHQvLyBtYWtlcyB0aGUgbGF0dGVyIG5vbm5lZ2F0aXZlLlxuXHRcdFx0bWF0Y2hlZENvdW50ICs9IGk7XG5cblx0XHRcdC8vIEFwcGx5IHNldCBmaWx0ZXJzIHRvIHVubWF0Y2hlZCBlbGVtZW50c1xuXHRcdFx0Ly8gTk9URTogVGhpcyBjYW4gYmUgc2tpcHBlZCBpZiB0aGVyZSBhcmUgbm8gdW5tYXRjaGVkIGVsZW1lbnRzIChpLmUuLCBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gZXF1YWxzIGBpYCksIHVubGVzcyB3ZSBkaWRuJ3QgdmlzaXQgX2FueV8gZWxlbWVudHMgaW4gdGhlIGFib3ZlIGxvb3AgYmVjYXVzZSB3ZSBoYXZlXG5cdFx0XHQvLyBubyBlbGVtZW50IG1hdGNoZXJzIGFuZCBubyBzZWVkLlxuXHRcdFx0Ly8gSW5jcmVtZW50aW5nIGFuIGluaXRpYWxseS1zdHJpbmcgXCIwXCIgYGlgIGFsbG93cyBgaWAgdG8gcmVtYWluIGEgc3RyaW5nIG9ubHkgaW4gdGhhdFxuXHRcdFx0Ly8gY2FzZSwgd2hpY2ggd2lsbCByZXN1bHQgaW4gYSBcIjAwXCIgYG1hdGNoZWRDb3VudGAgdGhhdCBkaWZmZXJzIGZyb20gYGlgIGJ1dCBpcyBhbHNvXG5cdFx0XHQvLyBudW1lcmljYWxseSB6ZXJvLlxuXHRcdFx0aWYgKCBieVNldCAmJiBpICE9PSBtYXRjaGVkQ291bnQgKSB7XG5cdFx0XHRcdGogPSAwO1xuXHRcdFx0XHR3aGlsZSAoICggbWF0Y2hlciA9IHNldE1hdGNoZXJzWyBqKysgXSApICkge1xuXHRcdFx0XHRcdG1hdGNoZXIoIHVubWF0Y2hlZCwgc2V0TWF0Y2hlZCwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cblx0XHRcdFx0XHQvLyBSZWludGVncmF0ZSBlbGVtZW50IG1hdGNoZXMgdG8gZWxpbWluYXRlIHRoZSBuZWVkIGZvciBzb3J0aW5nXG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkQ291bnQgPiAwICkge1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggISggdW5tYXRjaGVkWyBpIF0gfHwgc2V0TWF0Y2hlZFsgaSBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0c2V0TWF0Y2hlZFsgaSBdID0gcG9wLmNhbGwoIHJlc3VsdHMgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIERpc2NhcmQgaW5kZXggcGxhY2Vob2xkZXIgdmFsdWVzIHRvIGdldCBvbmx5IGFjdHVhbCBtYXRjaGVzXG5cdFx0XHRcdFx0c2V0TWF0Y2hlZCA9IGNvbmRlbnNlKCBzZXRNYXRjaGVkICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBZGQgbWF0Y2hlcyB0byByZXN1bHRzXG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNldE1hdGNoZWQgKTtcblxuXHRcdFx0XHQvLyBTZWVkbGVzcyBzZXQgbWF0Y2hlcyBzdWNjZWVkaW5nIG11bHRpcGxlIHN1Y2Nlc3NmdWwgbWF0Y2hlcnMgc3RpcHVsYXRlIHNvcnRpbmdcblx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgJiYgIXNlZWQgJiYgc2V0TWF0Y2hlZC5sZW5ndGggPiAwICYmXG5cdFx0XHRcdFx0KCBtYXRjaGVkQ291bnQgKyBzZXRNYXRjaGVycy5sZW5ndGggKSA+IDEgKSB7XG5cblx0XHRcdFx0XHRTaXp6bGUudW5pcXVlU29ydCggcmVzdWx0cyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIE92ZXJyaWRlIG1hbmlwdWxhdGlvbiBvZiBnbG9iYWxzIGJ5IG5lc3RlZCBtYXRjaGVyc1xuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dEJhY2t1cDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHVubWF0Y2hlZDtcblx0XHR9O1xuXG5cdHJldHVybiBieVNldCA/XG5cdFx0bWFya0Z1bmN0aW9uKCBzdXBlck1hdGNoZXIgKSA6XG5cdFx0c3VwZXJNYXRjaGVyO1xufVxuXG5jb21waWxlID0gU2l6emxlLmNvbXBpbGUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIG1hdGNoIC8qIEludGVybmFsIFVzZSBPbmx5ICovICkge1xuXHR2YXIgaSxcblx0XHRzZXRNYXRjaGVycyA9IFtdLFxuXHRcdGVsZW1lbnRNYXRjaGVycyA9IFtdLFxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoICFjYWNoZWQgKSB7XG5cblx0XHQvLyBHZW5lcmF0ZSBhIGZ1bmN0aW9uIG9mIHJlY3Vyc2l2ZSBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgdXNlZCB0byBjaGVjayBlYWNoIGVsZW1lbnRcblx0XHRpZiAoICFtYXRjaCApIHtcblx0XHRcdG1hdGNoID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0fVxuXHRcdGkgPSBtYXRjaC5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRjYWNoZWQgPSBtYXRjaGVyRnJvbVRva2VucyggbWF0Y2hbIGkgXSApO1xuXHRcdFx0aWYgKCBjYWNoZWRbIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0c2V0TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtZW50TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FjaGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZShcblx0XHRcdHNlbGVjdG9yLFxuXHRcdFx0bWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzIClcblx0XHQpO1xuXG5cdFx0Ly8gU2F2ZSBzZWxlY3RvciBhbmQgdG9rZW5pemF0aW9uXG5cdFx0Y2FjaGVkLnNlbGVjdG9yID0gc2VsZWN0b3I7XG5cdH1cblx0cmV0dXJuIGNhY2hlZDtcbn07XG5cbi8qKlxuICogQSBsb3ctbGV2ZWwgc2VsZWN0aW9uIGZ1bmN0aW9uIHRoYXQgd29ya3Mgd2l0aCBTaXp6bGUncyBjb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IHNlbGVjdG9yIEEgc2VsZWN0b3Igb3IgYSBwcmUtY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbiBidWlsdCB3aXRoIFNpenpsZS5jb21waWxlXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGNvbnRleHRcbiAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHRzXVxuICogQHBhcmFtIHtBcnJheX0gW3NlZWRdIEEgc2V0IG9mIGVsZW1lbnRzIHRvIG1hdGNoIGFnYWluc3RcbiAqL1xuc2VsZWN0ID0gU2l6emxlLnNlbGVjdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIGksIHRva2VucywgdG9rZW4sIHR5cGUsIGZpbmQsXG5cdFx0Y29tcGlsZWQgPSB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBzZWxlY3Rvcixcblx0XHRtYXRjaCA9ICFzZWVkICYmIHRva2VuaXplKCAoIHNlbGVjdG9yID0gY29tcGlsZWQuc2VsZWN0b3IgfHwgc2VsZWN0b3IgKSApO1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFRyeSB0byBtaW5pbWl6ZSBvcGVyYXRpb25zIGlmIHRoZXJlIGlzIG9ubHkgb25lIHNlbGVjdG9yIGluIHRoZSBsaXN0IGFuZCBubyBzZWVkXG5cdC8vICh0aGUgbGF0dGVyIG9mIHdoaWNoIGd1YXJhbnRlZXMgdXMgY29udGV4dClcblx0aWYgKCBtYXRjaC5sZW5ndGggPT09IDEgKSB7XG5cblx0XHQvLyBSZWR1Y2UgY29udGV4dCBpZiB0aGUgbGVhZGluZyBjb21wb3VuZCBzZWxlY3RvciBpcyBhbiBJRFxuXHRcdHRva2VucyA9IG1hdGNoWyAwIF0gPSBtYXRjaFsgMCBdLnNsaWNlKCAwICk7XG5cdFx0aWYgKCB0b2tlbnMubGVuZ3RoID4gMiAmJiAoIHRva2VuID0gdG9rZW5zWyAwIF0gKS50eXBlID09PSBcIklEXCIgJiZcblx0XHRcdGNvbnRleHQubm9kZVR5cGUgPT09IDkgJiYgZG9jdW1lbnRJc0hUTUwgJiYgRXhwci5yZWxhdGl2ZVsgdG9rZW5zWyAxIF0udHlwZSBdICkge1xuXG5cdFx0XHRjb250ZXh0ID0gKCBFeHByLmZpbmRbIFwiSURcIiBdKCB0b2tlbi5tYXRjaGVzWyAwIF1cblx0XHRcdFx0LnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksIGNvbnRleHQgKSB8fCBbXSApWyAwIF07XG5cdFx0XHRpZiAoICFjb250ZXh0ICkge1xuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0Ly8gUHJlY29tcGlsZWQgbWF0Y2hlcnMgd2lsbCBzdGlsbCB2ZXJpZnkgYW5jZXN0cnksIHNvIHN0ZXAgdXAgYSBsZXZlbFxuXHRcdFx0fSBlbHNlIGlmICggY29tcGlsZWQgKSB7XG5cdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cblx0XHRcdHNlbGVjdG9yID0gc2VsZWN0b3Iuc2xpY2UoIHRva2Vucy5zaGlmdCgpLnZhbHVlLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZldGNoIGEgc2VlZCBzZXQgZm9yIHJpZ2h0LXRvLWxlZnQgbWF0Y2hpbmdcblx0XHRpID0gbWF0Y2hFeHByWyBcIm5lZWRzQ29udGV4dFwiIF0udGVzdCggc2VsZWN0b3IgKSA/IDAgOiB0b2tlbnMubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG9rZW4gPSB0b2tlbnNbIGkgXTtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgd2UgaGl0IGEgY29tYmluYXRvclxuXHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyAoIHR5cGUgPSB0b2tlbi50eXBlICkgXSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoICggZmluZCA9IEV4cHIuZmluZFsgdHlwZSBdICkgKSB7XG5cblx0XHRcdFx0Ly8gU2VhcmNoLCBleHBhbmRpbmcgY29udGV4dCBmb3IgbGVhZGluZyBzaWJsaW5nIGNvbWJpbmF0b3JzXG5cdFx0XHRcdGlmICggKCBzZWVkID0gZmluZChcblx0XHRcdFx0XHR0b2tlbi5tYXRjaGVzWyAwIF0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKSxcblx0XHRcdFx0XHRyc2libGluZy50ZXN0KCB0b2tlbnNbIDAgXS50eXBlICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8XG5cdFx0XHRcdFx0XHRjb250ZXh0XG5cdFx0XHRcdCkgKSApIHtcblxuXHRcdFx0XHRcdC8vIElmIHNlZWQgaXMgZW1wdHkgb3Igbm8gdG9rZW5zIHJlbWFpbiwgd2UgY2FuIHJldHVybiBlYXJseVxuXHRcdFx0XHRcdHRva2Vucy5zcGxpY2UoIGksIDEgKTtcblx0XHRcdFx0XHRzZWxlY3RvciA9IHNlZWQubGVuZ3RoICYmIHRvU2VsZWN0b3IoIHRva2VucyApO1xuXHRcdFx0XHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2VlZCApO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDb21waWxlIGFuZCBleGVjdXRlIGEgZmlsdGVyaW5nIGZ1bmN0aW9uIGlmIG9uZSBpcyBub3QgcHJvdmlkZWRcblx0Ly8gUHJvdmlkZSBgbWF0Y2hgIHRvIGF2b2lkIHJldG9rZW5pemF0aW9uIGlmIHdlIG1vZGlmaWVkIHRoZSBzZWxlY3RvciBhYm92ZVxuXHQoIGNvbXBpbGVkIHx8IGNvbXBpbGUoIHNlbGVjdG9yLCBtYXRjaCApICkoXG5cdFx0c2VlZCxcblx0XHRjb250ZXh0LFxuXHRcdCFkb2N1bWVudElzSFRNTCxcblx0XHRyZXN1bHRzLFxuXHRcdCFjb250ZXh0IHx8IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0KTtcblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vLyBPbmUtdGltZSBhc3NpZ25tZW50c1xuXG4vLyBTb3J0IHN0YWJpbGl0eVxuc3VwcG9ydC5zb3J0U3RhYmxlID0gZXhwYW5kby5zcGxpdCggXCJcIiApLnNvcnQoIHNvcnRPcmRlciApLmpvaW4oIFwiXCIgKSA9PT0gZXhwYW5kbztcblxuLy8gU3VwcG9ydDogQ2hyb21lIDE0LTM1K1xuLy8gQWx3YXlzIGFzc3VtZSBkdXBsaWNhdGVzIGlmIHRoZXkgYXJlbid0IHBhc3NlZCB0byB0aGUgY29tcGFyaXNvbiBmdW5jdGlvblxuc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzID0gISFoYXNEdXBsaWNhdGU7XG5cbi8vIEluaXRpYWxpemUgYWdhaW5zdCB0aGUgZGVmYXVsdCBkb2N1bWVudFxuc2V0RG9jdW1lbnQoKTtcblxuLy8gU3VwcG9ydDogV2Via2l0PDUzNy4zMiAtIFNhZmFyaSA2LjAuMy9DaHJvbWUgMjUgKGZpeGVkIGluIENocm9tZSAyNylcbi8vIERldGFjaGVkIG5vZGVzIGNvbmZvdW5kaW5nbHkgZm9sbG93ICplYWNoIG90aGVyKlxuc3VwcG9ydC5zb3J0RGV0YWNoZWQgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblxuXHQvLyBTaG91bGQgcmV0dXJuIDEsIGJ1dCByZXR1cm5zIDQgKGZvbGxvd2luZylcblx0cmV0dXJuIGVsLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImZpZWxkc2V0XCIgKSApICYgMTtcbn0gKTtcblxuLy8gU3VwcG9ydDogSUU8OFxuLy8gUHJldmVudCBhdHRyaWJ1dGUvcHJvcGVydHkgXCJpbnRlcnBvbGF0aW9uXCJcbi8vIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvbXM1MzY0MjklMjhWUy44NSUyOS5hc3B4XG5pZiAoICFhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScjJz48L2E+XCI7XG5cdHJldHVybiBlbC5maXJzdENoaWxkLmdldEF0dHJpYnV0ZSggXCJocmVmXCIgKSA9PT0gXCIjXCI7XG59ICkgKSB7XG5cdGFkZEhhbmRsZSggXCJ0eXBlfGhyZWZ8aGVpZ2h0fHdpZHRoXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSwgbmFtZS50b0xvd2VyQ2FzZSgpID09PSBcInR5cGVcIiA/IDEgOiAyICk7XG5cdFx0fVxuXHR9ICk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBkZWZhdWx0VmFsdWUgaW4gcGxhY2Ugb2YgZ2V0QXR0cmlidXRlKFwidmFsdWVcIilcbmlmICggIXN1cHBvcnQuYXR0cmlidXRlcyB8fCAhYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGlucHV0Lz5cIjtcblx0ZWwuZmlyc3RDaGlsZC5zZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiwgXCJcIiApO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBcIlwiO1xufSApICkge1xuXHRhZGRIYW5kbGUoIFwidmFsdWVcIiwgZnVuY3Rpb24oIGVsZW0sIF9uYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLmRlZmF1bHRWYWx1ZTtcblx0XHR9XG5cdH0gKTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGdldEF0dHJpYnV0ZU5vZGUgdG8gZmV0Y2ggYm9vbGVhbnMgd2hlbiBnZXRBdHRyaWJ1dGUgbGllc1xuaWYgKCAhYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdHJldHVybiBlbC5nZXRBdHRyaWJ1dGUoIFwiZGlzYWJsZWRcIiApID09IG51bGw7XG59ICkgKSB7XG5cdGFkZEhhbmRsZSggYm9vbGVhbnMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgdmFsO1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW1bIG5hbWUgXSA9PT0gdHJ1ZSA/IG5hbWUudG9Mb3dlckNhc2UoKSA6XG5cdFx0XHRcdCggdmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkgKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRcdG51bGw7XG5cdFx0fVxuXHR9ICk7XG59XG5cbnJldHVybiBTaXp6bGU7XG5cbn0gKSggd2luZG93ICk7XG5cblxuXG5qUXVlcnkuZmluZCA9IFNpenpsZTtcbmpRdWVyeS5leHByID0gU2l6emxlLnNlbGVjdG9ycztcblxuLy8gRGVwcmVjYXRlZFxualF1ZXJ5LmV4cHJbIFwiOlwiIF0gPSBqUXVlcnkuZXhwci5wc2V1ZG9zO1xualF1ZXJ5LnVuaXF1ZVNvcnQgPSBqUXVlcnkudW5pcXVlID0gU2l6emxlLnVuaXF1ZVNvcnQ7XG5qUXVlcnkudGV4dCA9IFNpenpsZS5nZXRUZXh0O1xualF1ZXJ5LmlzWE1MRG9jID0gU2l6emxlLmlzWE1MO1xualF1ZXJ5LmNvbnRhaW5zID0gU2l6emxlLmNvbnRhaW5zO1xualF1ZXJ5LmVzY2FwZVNlbGVjdG9yID0gU2l6emxlLmVzY2FwZTtcblxuXG5cblxudmFyIGRpciA9IGZ1bmN0aW9uKCBlbGVtLCBkaXIsIHVudGlsICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdLFxuXHRcdHRydW5jYXRlID0gdW50aWwgIT09IHVuZGVmaW5lZDtcblxuXHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgJiYgZWxlbS5ub2RlVHlwZSAhPT0gOSApIHtcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRpZiAoIHRydW5jYXRlICYmIGpRdWVyeSggZWxlbSApLmlzKCB1bnRpbCApICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdG1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHNpYmxpbmdzID0gZnVuY3Rpb24oIG4sIGVsZW0gKSB7XG5cdHZhciBtYXRjaGVkID0gW107XG5cblx0Zm9yICggOyBuOyBuID0gbi5uZXh0U2libGluZyApIHtcblx0XHRpZiAoIG4ubm9kZVR5cGUgPT09IDEgJiYgbiAhPT0gZWxlbSApIHtcblx0XHRcdG1hdGNoZWQucHVzaCggbiApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBtYXRjaGVkO1xufTtcblxuXG52YXIgcm5lZWRzQ29udGV4dCA9IGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dDtcblxuXG5cbmZ1bmN0aW9uIG5vZGVOYW1lKCBlbGVtLCBuYW1lICkge1xuXG5cdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG59XG52YXIgcnNpbmdsZVRhZyA9ICggL148KFthLXpdW15cXC9cXDA+OlxceDIwXFx0XFxyXFxuXFxmXSopW1xceDIwXFx0XFxyXFxuXFxmXSpcXC8/Pig/OjxcXC9cXDE+fCkkL2kgKTtcblxuXG5cbi8vIEltcGxlbWVudCB0aGUgaWRlbnRpY2FsIGZ1bmN0aW9uYWxpdHkgZm9yIGZpbHRlciBhbmQgbm90XG5mdW5jdGlvbiB3aW5ub3coIGVsZW1lbnRzLCBxdWFsaWZpZXIsIG5vdCApIHtcblx0aWYgKCBpc0Z1bmN0aW9uKCBxdWFsaWZpZXIgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiAhIXF1YWxpZmllci5jYWxsKCBlbGVtLCBpLCBlbGVtICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBTaW5nbGUgZWxlbWVudFxuXHRpZiAoIHF1YWxpZmllci5ub2RlVHlwZSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGVsZW0gPT09IHF1YWxpZmllciApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gQXJyYXlsaWtlIG9mIGVsZW1lbnRzIChqUXVlcnksIGFyZ3VtZW50cywgQXJyYXkpXG5cdGlmICggdHlwZW9mIHF1YWxpZmllciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGluZGV4T2YuY2FsbCggcXVhbGlmaWVyLCBlbGVtICkgPiAtMSApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gRmlsdGVyZWQgZGlyZWN0bHkgZm9yIGJvdGggc2ltcGxlIGFuZCBjb21wbGV4IHNlbGVjdG9yc1xuXHRyZXR1cm4galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cywgbm90ICk7XG59XG5cbmpRdWVyeS5maWx0ZXIgPSBmdW5jdGlvbiggZXhwciwgZWxlbXMsIG5vdCApIHtcblx0dmFyIGVsZW0gPSBlbGVtc1sgMCBdO1xuXG5cdGlmICggbm90ICkge1xuXHRcdGV4cHIgPSBcIjpub3QoXCIgKyBleHByICsgXCIpXCI7XG5cdH1cblxuXHRpZiAoIGVsZW1zLmxlbmd0aCA9PT0gMSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGVsZW0sIGV4cHIgKSA/IFsgZWxlbSBdIDogW107XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlcyggZXhwciwgalF1ZXJ5LmdyZXAoIGVsZW1zLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVHlwZSA9PT0gMTtcblx0fSApICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZpbmQ6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgaSwgcmV0LFxuXHRcdFx0bGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRzZWxmID0gdGhpcztcblxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkoIHNlbGVjdG9yICkuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggc2VsZlsgaSBdLCB0aGlzICkgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gKSApO1xuXHRcdH1cblxuXHRcdHJldCA9IHRoaXMucHVzaFN0YWNrKCBbXSApO1xuXG5cdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGpRdWVyeS5maW5kKCBzZWxlY3Rvciwgc2VsZlsgaSBdLCByZXQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbGVuID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCByZXQgKSA6IHJldDtcblx0fSxcblx0ZmlsdGVyOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCBmYWxzZSApICk7XG5cdH0sXG5cdG5vdDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgdHJ1ZSApICk7XG5cdH0sXG5cdGlzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuICEhd2lubm93KFxuXHRcdFx0dGhpcyxcblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIHBvc2l0aW9uYWwvcmVsYXRpdmUgc2VsZWN0b3IsIGNoZWNrIG1lbWJlcnNoaXAgaW4gdGhlIHJldHVybmVkIHNldFxuXHRcdFx0Ly8gc28gJChcInA6Zmlyc3RcIikuaXMoXCJwOmxhc3RcIikgd29uJ3QgcmV0dXJuIHRydWUgZm9yIGEgZG9jIHdpdGggdHdvIFwicFwiLlxuXHRcdFx0dHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICYmIHJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGpRdWVyeSggc2VsZWN0b3IgKSA6XG5cdFx0XHRcdHNlbGVjdG9yIHx8IFtdLFxuXHRcdFx0ZmFsc2Vcblx0XHQpLmxlbmd0aDtcblx0fVxufSApO1xuXG5cbi8vIEluaXRpYWxpemUgYSBqUXVlcnkgb2JqZWN0XG5cblxuLy8gQSBjZW50cmFsIHJlZmVyZW5jZSB0byB0aGUgcm9vdCBqUXVlcnkoZG9jdW1lbnQpXG52YXIgcm9vdGpRdWVyeSxcblxuXHQvLyBBIHNpbXBsZSB3YXkgdG8gY2hlY2sgZm9yIEhUTUwgc3RyaW5nc1xuXHQvLyBQcmlvcml0aXplICNpZCBvdmVyIDx0YWc+IHRvIGF2b2lkIFhTUyB2aWEgbG9jYXRpb24uaGFzaCAodHJhYy05NTIxKVxuXHQvLyBTdHJpY3QgSFRNTCByZWNvZ25pdGlvbiAodHJhYy0xMTI5MDogbXVzdCBzdGFydCB3aXRoIDwpXG5cdC8vIFNob3J0Y3V0IHNpbXBsZSAjaWQgY2FzZSBmb3Igc3BlZWRcblx0cnF1aWNrRXhwciA9IC9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKnwjKFtcXHctXSspKSQvLFxuXG5cdGluaXQgPSBqUXVlcnkuZm4uaW5pdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcm9vdCApIHtcblx0XHR2YXIgbWF0Y2gsIGVsZW07XG5cblx0XHQvLyBIQU5ETEU6ICQoXCJcIiksICQobnVsbCksICQodW5kZWZpbmVkKSwgJChmYWxzZSlcblx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdC8vIE1ldGhvZCBpbml0KCkgYWNjZXB0cyBhbiBhbHRlcm5hdGUgcm9vdGpRdWVyeVxuXHRcdC8vIHNvIG1pZ3JhdGUgY2FuIHN1cHBvcnQgalF1ZXJ5LnN1YiAoZ2gtMjEwMSlcblx0XHRyb290ID0gcm9vdCB8fCByb290alF1ZXJ5O1xuXG5cdFx0Ly8gSGFuZGxlIEhUTUwgc3RyaW5nc1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0aWYgKCBzZWxlY3RvclsgMCBdID09PSBcIjxcIiAmJlxuXHRcdFx0XHRzZWxlY3Rvclsgc2VsZWN0b3IubGVuZ3RoIC0gMSBdID09PSBcIj5cIiAmJlxuXHRcdFx0XHRzZWxlY3Rvci5sZW5ndGggPj0gMyApIHtcblxuXHRcdFx0XHQvLyBBc3N1bWUgdGhhdCBzdHJpbmdzIHRoYXQgc3RhcnQgYW5kIGVuZCB3aXRoIDw+IGFyZSBIVE1MIGFuZCBza2lwIHRoZSByZWdleCBjaGVja1xuXHRcdFx0XHRtYXRjaCA9IFsgbnVsbCwgc2VsZWN0b3IsIG51bGwgXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1hdGNoIGh0bWwgb3IgbWFrZSBzdXJlIG5vIGNvbnRleHQgaXMgc3BlY2lmaWVkIGZvciAjaWRcblx0XHRcdGlmICggbWF0Y2ggJiYgKCBtYXRjaFsgMSBdIHx8ICFjb250ZXh0ICkgKSB7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwpIC0+ICQoYXJyYXkpXG5cdFx0XHRcdGlmICggbWF0Y2hbIDEgXSApIHtcblx0XHRcdFx0XHRjb250ZXh0ID0gY29udGV4dCBpbnN0YW5jZW9mIGpRdWVyeSA/IGNvbnRleHRbIDAgXSA6IGNvbnRleHQ7XG5cblx0XHRcdFx0XHQvLyBPcHRpb24gdG8gcnVuIHNjcmlwdHMgaXMgdHJ1ZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0XHQvLyBJbnRlbnRpb25hbGx5IGxldCB0aGUgZXJyb3IgYmUgdGhyb3duIGlmIHBhcnNlSFRNTCBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcywgalF1ZXJ5LnBhcnNlSFRNTChcblx0XHRcdFx0XHRcdG1hdGNoWyAxIF0sXG5cdFx0XHRcdFx0XHRjb250ZXh0ICYmIGNvbnRleHQubm9kZVR5cGUgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IGRvY3VtZW50LFxuXHRcdFx0XHRcdFx0dHJ1ZVxuXHRcdFx0XHRcdCkgKTtcblxuXHRcdFx0XHRcdC8vIEhBTkRMRTogJChodG1sLCBwcm9wcylcblx0XHRcdFx0XHRpZiAoIHJzaW5nbGVUYWcudGVzdCggbWF0Y2hbIDEgXSApICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb250ZXh0ICkgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCBtYXRjaCBpbiBjb250ZXh0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFByb3BlcnRpZXMgb2YgY29udGV4dCBhcmUgY2FsbGVkIGFzIG1ldGhvZHMgaWYgcG9zc2libGVcblx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCB0aGlzWyBtYXRjaCBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpc1sgbWF0Y2ggXSggY29udGV4dFsgbWF0Y2ggXSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBvdGhlcndpc2Ugc2V0IGFzIGF0dHJpYnV0ZXNcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmF0dHIoIG1hdGNoLCBjb250ZXh0WyBtYXRjaCBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoI2lkKVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggbWF0Y2hbIDIgXSApO1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJbmplY3QgdGhlIGVsZW1lbnQgZGlyZWN0bHkgaW50byB0aGUgalF1ZXJ5IG9iamVjdFxuXHRcdFx0XHRcdFx0dGhpc1sgMCBdID0gZWxlbTtcblx0XHRcdFx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsICQoLi4uKSlcblx0XHRcdH0gZWxzZSBpZiAoICFjb250ZXh0IHx8IGNvbnRleHQuanF1ZXJ5ICkge1xuXHRcdFx0XHRyZXR1cm4gKCBjb250ZXh0IHx8IHJvb3QgKS5maW5kKCBzZWxlY3RvciApO1xuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgY29udGV4dClcblx0XHRcdC8vICh3aGljaCBpcyBqdXN0IGVxdWl2YWxlbnQgdG86ICQoY29udGV4dCkuZmluZChleHByKVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuY29uc3RydWN0b3IoIGNvbnRleHQgKS5maW5kKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gSEFORExFOiAkKERPTUVsZW1lbnQpXG5cdFx0fSBlbHNlIGlmICggc2VsZWN0b3Iubm9kZVR5cGUgKSB7XG5cdFx0XHR0aGlzWyAwIF0gPSBzZWxlY3Rvcjtcblx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0Ly8gSEFORExFOiAkKGZ1bmN0aW9uKVxuXHRcdC8vIFNob3J0Y3V0IGZvciBkb2N1bWVudCByZWFkeVxuXHRcdH0gZWxzZSBpZiAoIGlzRnVuY3Rpb24oIHNlbGVjdG9yICkgKSB7XG5cdFx0XHRyZXR1cm4gcm9vdC5yZWFkeSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0cm9vdC5yZWFkeSggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gRXhlY3V0ZSBpbW1lZGlhdGVseSBpZiByZWFkeSBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRzZWxlY3RvciggalF1ZXJ5ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5tYWtlQXJyYXkoIHNlbGVjdG9yLCB0aGlzICk7XG5cdH07XG5cbi8vIEdpdmUgdGhlIGluaXQgZnVuY3Rpb24gdGhlIGpRdWVyeSBwcm90b3R5cGUgZm9yIGxhdGVyIGluc3RhbnRpYXRpb25cbmluaXQucHJvdG90eXBlID0galF1ZXJ5LmZuO1xuXG4vLyBJbml0aWFsaXplIGNlbnRyYWwgcmVmZXJlbmNlXG5yb290alF1ZXJ5ID0galF1ZXJ5KCBkb2N1bWVudCApO1xuXG5cbnZhciBycGFyZW50c3ByZXYgPSAvXig/OnBhcmVudHN8cHJldig/OlVudGlsfEFsbCkpLyxcblxuXHQvLyBNZXRob2RzIGd1YXJhbnRlZWQgdG8gcHJvZHVjZSBhIHVuaXF1ZSBzZXQgd2hlbiBzdGFydGluZyBmcm9tIGEgdW5pcXVlIHNldFxuXHRndWFyYW50ZWVkVW5pcXVlID0ge1xuXHRcdGNoaWxkcmVuOiB0cnVlLFxuXHRcdGNvbnRlbnRzOiB0cnVlLFxuXHRcdG5leHQ6IHRydWUsXG5cdFx0cHJldjogdHJ1ZVxuXHR9O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGhhczogZnVuY3Rpb24oIHRhcmdldCApIHtcblx0XHR2YXIgdGFyZ2V0cyA9IGpRdWVyeSggdGFyZ2V0LCB0aGlzICksXG5cdFx0XHRsID0gdGFyZ2V0cy5sZW5ndGg7XG5cblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggdGhpcywgdGFyZ2V0c1sgaSBdICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Y2xvc2VzdDogZnVuY3Rpb24oIHNlbGVjdG9ycywgY29udGV4dCApIHtcblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRtYXRjaGVkID0gW10sXG5cdFx0XHR0YXJnZXRzID0gdHlwZW9mIHNlbGVjdG9ycyAhPT0gXCJzdHJpbmdcIiAmJiBqUXVlcnkoIHNlbGVjdG9ycyApO1xuXG5cdFx0Ly8gUG9zaXRpb25hbCBzZWxlY3RvcnMgbmV2ZXIgbWF0Y2gsIHNpbmNlIHRoZXJlJ3Mgbm8gX3NlbGVjdGlvbl8gY29udGV4dFxuXHRcdGlmICggIXJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3JzICkgKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZvciAoIGN1ciA9IHRoaXNbIGkgXTsgY3VyICYmIGN1ciAhPT0gY29udGV4dDsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cblx0XHRcdFx0XHQvLyBBbHdheXMgc2tpcCBkb2N1bWVudCBmcmFnbWVudHNcblx0XHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA8IDExICYmICggdGFyZ2V0cyA/XG5cdFx0XHRcdFx0XHR0YXJnZXRzLmluZGV4KCBjdXIgKSA+IC0xIDpcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcGFzcyBub24tZWxlbWVudHMgdG8gU2l6emxlXG5cdFx0XHRcdFx0XHRjdXIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBjdXIsIHNlbGVjdG9ycyApICkgKSB7XG5cblx0XHRcdFx0XHRcdG1hdGNoZWQucHVzaCggY3VyICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQubGVuZ3RoID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICkgOiBtYXRjaGVkICk7XG5cdH0sXG5cblx0Ly8gRGV0ZXJtaW5lIHRoZSBwb3NpdGlvbiBvZiBhbiBlbGVtZW50IHdpdGhpbiB0aGUgc2V0XG5cdGluZGV4OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE5vIGFyZ3VtZW50LCByZXR1cm4gaW5kZXggaW4gcGFyZW50XG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybiAoIHRoaXNbIDAgXSAmJiB0aGlzWyAwIF0ucGFyZW50Tm9kZSApID8gdGhpcy5maXJzdCgpLnByZXZBbGwoKS5sZW5ndGggOiAtMTtcblx0XHR9XG5cblx0XHQvLyBJbmRleCBpbiBzZWxlY3RvclxuXHRcdGlmICggdHlwZW9mIGVsZW0gPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdGhpc1sgMCBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gTG9jYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgZGVzaXJlZCBlbGVtZW50XG5cdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggdGhpcyxcblxuXHRcdFx0Ly8gSWYgaXQgcmVjZWl2ZXMgYSBqUXVlcnkgb2JqZWN0LCB0aGUgZmlyc3QgZWxlbWVudCBpcyB1c2VkXG5cdFx0XHRlbGVtLmpxdWVyeSA/IGVsZW1bIDAgXSA6IGVsZW1cblx0XHQpO1xuXHR9LFxuXG5cdGFkZDogZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayhcblx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMuZ2V0KCksIGpRdWVyeSggc2VsZWN0b3IsIGNvbnRleHQgKSApXG5cdFx0XHQpXG5cdFx0KTtcblx0fSxcblxuXHRhZGRCYWNrOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYWRkKCBzZWxlY3RvciA9PSBudWxsID9cblx0XHRcdHRoaXMucHJldk9iamVjdCA6IHRoaXMucHJldk9iamVjdC5maWx0ZXIoIHNlbGVjdG9yIClcblx0XHQpO1xuXHR9XG59ICk7XG5cbmZ1bmN0aW9uIHNpYmxpbmcoIGN1ciwgZGlyICkge1xuXHR3aGlsZSAoICggY3VyID0gY3VyWyBkaXIgXSApICYmIGN1ci5ub2RlVHlwZSAhPT0gMSApIHt9XG5cdHJldHVybiBjdXI7XG59XG5cbmpRdWVyeS5lYWNoKCB7XG5cdHBhcmVudDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRyZXR1cm4gcGFyZW50ICYmIHBhcmVudC5ub2RlVHlwZSAhPT0gMTEgPyBwYXJlbnQgOiBudWxsO1xuXHR9LFxuXHRwYXJlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiApO1xuXHR9LFxuXHRwYXJlbnRzVW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBfaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIsIHVudGlsICk7XG5cdH0sXG5cdG5leHQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dEFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXZBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dFVudGlsOiBmdW5jdGlvbiggZWxlbSwgX2ksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0cHJldlVudGlsOiBmdW5jdGlvbiggZWxlbSwgX2ksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHNpYmxpbmdzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoICggZWxlbS5wYXJlbnROb2RlIHx8IHt9ICkuZmlyc3RDaGlsZCwgZWxlbSApO1xuXHR9LFxuXHRjaGlsZHJlbjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCBlbGVtLmZpcnN0Q2hpbGQgKTtcblx0fSxcblx0Y29udGVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdGlmICggZWxlbS5jb250ZW50RG9jdW1lbnQgIT0gbnVsbCAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMStcblx0XHRcdC8vIDxvYmplY3Q+IGVsZW1lbnRzIHdpdGggbm8gYGRhdGFgIGF0dHJpYnV0ZSBoYXMgYW4gb2JqZWN0XG5cdFx0XHQvLyBgY29udGVudERvY3VtZW50YCB3aXRoIGEgYG51bGxgIHByb3RvdHlwZS5cblx0XHRcdGdldFByb3RvKCBlbGVtLmNvbnRlbnREb2N1bWVudCApICkge1xuXG5cdFx0XHRyZXR1cm4gZWxlbS5jb250ZW50RG9jdW1lbnQ7XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHksIGlPUyA3IG9ubHksIEFuZHJvaWQgQnJvd3NlciA8PTQuMyBvbmx5XG5cdFx0Ly8gVHJlYXQgdGhlIHRlbXBsYXRlIGVsZW1lbnQgYXMgYSByZWd1bGFyIG9uZSBpbiBicm93c2VycyB0aGF0XG5cdFx0Ly8gZG9uJ3Qgc3VwcG9ydCBpdC5cblx0XHRpZiAoIG5vZGVOYW1lKCBlbGVtLCBcInRlbXBsYXRlXCIgKSApIHtcblx0XHRcdGVsZW0gPSBlbGVtLmNvbnRlbnQgfHwgZWxlbTtcblx0XHR9XG5cblx0XHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgZWxlbS5jaGlsZE5vZGVzICk7XG5cdH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBmbiApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggdW50aWwsIHNlbGVjdG9yICkge1xuXHRcdHZhciBtYXRjaGVkID0galF1ZXJ5Lm1hcCggdGhpcywgZm4sIHVudGlsICk7XG5cblx0XHRpZiAoIG5hbWUuc2xpY2UoIC01ICkgIT09IFwiVW50aWxcIiApIHtcblx0XHRcdHNlbGVjdG9yID0gdW50aWw7XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWxlY3RvciAmJiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRtYXRjaGVkID0galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIG1hdGNoZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHRoaXMubGVuZ3RoID4gMSApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGR1cGxpY2F0ZXNcblx0XHRcdGlmICggIWd1YXJhbnRlZWRVbmlxdWVbIG5hbWUgXSApIHtcblx0XHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoIG1hdGNoZWQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV2ZXJzZSBvcmRlciBmb3IgcGFyZW50cyogYW5kIHByZXYtZGVyaXZhdGl2ZXNcblx0XHRcdGlmICggcnBhcmVudHNwcmV2LnRlc3QoIG5hbWUgKSApIHtcblx0XHRcdFx0bWF0Y2hlZC5yZXZlcnNlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkICk7XG5cdH07XG59ICk7XG52YXIgcm5vdGh0bWx3aGl0ZSA9ICggL1teXFx4MjBcXHRcXHJcXG5cXGZdKy9nICk7XG5cblxuXG4vLyBDb252ZXJ0IFN0cmluZy1mb3JtYXR0ZWQgb3B0aW9ucyBpbnRvIE9iamVjdC1mb3JtYXR0ZWQgb25lc1xuZnVuY3Rpb24gY3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIHtcblx0dmFyIG9iamVjdCA9IHt9O1xuXHRqUXVlcnkuZWFjaCggb3B0aW9ucy5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdLCBmdW5jdGlvbiggXywgZmxhZyApIHtcblx0XHRvYmplY3RbIGZsYWcgXSA9IHRydWU7XG5cdH0gKTtcblx0cmV0dXJuIG9iamVjdDtcbn1cblxuLypcbiAqIENyZWF0ZSBhIGNhbGxiYWNrIGxpc3QgdXNpbmcgdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzOlxuICpcbiAqXHRvcHRpb25zOiBhbiBvcHRpb25hbCBsaXN0IG9mIHNwYWNlLXNlcGFyYXRlZCBvcHRpb25zIHRoYXQgd2lsbCBjaGFuZ2UgaG93XG4gKlx0XHRcdHRoZSBjYWxsYmFjayBsaXN0IGJlaGF2ZXMgb3IgYSBtb3JlIHRyYWRpdGlvbmFsIG9wdGlvbiBvYmplY3RcbiAqXG4gKiBCeSBkZWZhdWx0IGEgY2FsbGJhY2sgbGlzdCB3aWxsIGFjdCBsaWtlIGFuIGV2ZW50IGNhbGxiYWNrIGxpc3QgYW5kIGNhbiBiZVxuICogXCJmaXJlZFwiIG11bHRpcGxlIHRpbWVzLlxuICpcbiAqIFBvc3NpYmxlIG9wdGlvbnM6XG4gKlxuICpcdG9uY2U6XHRcdFx0d2lsbCBlbnN1cmUgdGhlIGNhbGxiYWNrIGxpc3QgY2FuIG9ubHkgYmUgZmlyZWQgb25jZSAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHRtZW1vcnk6XHRcdFx0d2lsbCBrZWVwIHRyYWNrIG9mIHByZXZpb3VzIHZhbHVlcyBhbmQgd2lsbCBjYWxsIGFueSBjYWxsYmFjayBhZGRlZFxuICpcdFx0XHRcdFx0YWZ0ZXIgdGhlIGxpc3QgaGFzIGJlZW4gZmlyZWQgcmlnaHQgYXdheSB3aXRoIHRoZSBsYXRlc3QgXCJtZW1vcml6ZWRcIlxuICpcdFx0XHRcdFx0dmFsdWVzIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdHVuaXF1ZTpcdFx0XHR3aWxsIGVuc3VyZSBhIGNhbGxiYWNrIGNhbiBvbmx5IGJlIGFkZGVkIG9uY2UgKG5vIGR1cGxpY2F0ZSBpbiB0aGUgbGlzdClcbiAqXG4gKlx0c3RvcE9uRmFsc2U6XHRpbnRlcnJ1cHQgY2FsbGluZ3Mgd2hlbiBhIGNhbGxiYWNrIHJldHVybnMgZmFsc2VcbiAqXG4gKi9cbmpRdWVyeS5DYWxsYmFja3MgPSBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHQvLyBDb252ZXJ0IG9wdGlvbnMgZnJvbSBTdHJpbmctZm9ybWF0dGVkIHRvIE9iamVjdC1mb3JtYXR0ZWQgaWYgbmVlZGVkXG5cdC8vICh3ZSBjaGVjayBpbiBjYWNoZSBmaXJzdClcblx0b3B0aW9ucyA9IHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiID9cblx0XHRjcmVhdGVPcHRpb25zKCBvcHRpb25zICkgOlxuXHRcdGpRdWVyeS5leHRlbmQoIHt9LCBvcHRpb25zICk7XG5cblx0dmFyIC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IGlzIGN1cnJlbnRseSBmaXJpbmdcblx0XHRmaXJpbmcsXG5cblx0XHQvLyBMYXN0IGZpcmUgdmFsdWUgZm9yIG5vbi1mb3JnZXR0YWJsZSBsaXN0c1xuXHRcdG1lbW9yeSxcblxuXHRcdC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IHdhcyBhbHJlYWR5IGZpcmVkXG5cdFx0ZmlyZWQsXG5cblx0XHQvLyBGbGFnIHRvIHByZXZlbnQgZmlyaW5nXG5cdFx0bG9ja2VkLFxuXG5cdFx0Ly8gQWN0dWFsIGNhbGxiYWNrIGxpc3Rcblx0XHRsaXN0ID0gW10sXG5cblx0XHQvLyBRdWV1ZSBvZiBleGVjdXRpb24gZGF0YSBmb3IgcmVwZWF0YWJsZSBsaXN0c1xuXHRcdHF1ZXVlID0gW10sXG5cblx0XHQvLyBJbmRleCBvZiBjdXJyZW50bHkgZmlyaW5nIGNhbGxiYWNrIChtb2RpZmllZCBieSBhZGQvcmVtb3ZlIGFzIG5lZWRlZClcblx0XHRmaXJpbmdJbmRleCA9IC0xLFxuXG5cdFx0Ly8gRmlyZSBjYWxsYmFja3Ncblx0XHRmaXJlID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuZm9yY2Ugc2luZ2xlLWZpcmluZ1xuXHRcdFx0bG9ja2VkID0gbG9ja2VkIHx8IG9wdGlvbnMub25jZTtcblxuXHRcdFx0Ly8gRXhlY3V0ZSBjYWxsYmFja3MgZm9yIGFsbCBwZW5kaW5nIGV4ZWN1dGlvbnMsXG5cdFx0XHQvLyByZXNwZWN0aW5nIGZpcmluZ0luZGV4IG92ZXJyaWRlcyBhbmQgcnVudGltZSBjaGFuZ2VzXG5cdFx0XHRmaXJlZCA9IGZpcmluZyA9IHRydWU7XG5cdFx0XHRmb3IgKCA7IHF1ZXVlLmxlbmd0aDsgZmlyaW5nSW5kZXggPSAtMSApIHtcblx0XHRcdFx0bWVtb3J5ID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdFx0d2hpbGUgKCArK2ZpcmluZ0luZGV4IDwgbGlzdC5sZW5ndGggKSB7XG5cblx0XHRcdFx0XHQvLyBSdW4gY2FsbGJhY2sgYW5kIGNoZWNrIGZvciBlYXJseSB0ZXJtaW5hdGlvblxuXHRcdFx0XHRcdGlmICggbGlzdFsgZmlyaW5nSW5kZXggXS5hcHBseSggbWVtb3J5WyAwIF0sIG1lbW9yeVsgMSBdICkgPT09IGZhbHNlICYmXG5cdFx0XHRcdFx0XHRvcHRpb25zLnN0b3BPbkZhbHNlICkge1xuXG5cdFx0XHRcdFx0XHQvLyBKdW1wIHRvIGVuZCBhbmQgZm9yZ2V0IHRoZSBkYXRhIHNvIC5hZGQgZG9lc24ndCByZS1maXJlXG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoO1xuXHRcdFx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvcmdldCB0aGUgZGF0YSBpZiB3ZSdyZSBkb25lIHdpdGggaXRcblx0XHRcdGlmICggIW9wdGlvbnMubWVtb3J5ICkge1xuXHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0ZmlyaW5nID0gZmFsc2U7XG5cblx0XHRcdC8vIENsZWFuIHVwIGlmIHdlJ3JlIGRvbmUgZmlyaW5nIGZvciBnb29kXG5cdFx0XHRpZiAoIGxvY2tlZCApIHtcblxuXHRcdFx0XHQvLyBLZWVwIGFuIGVtcHR5IGxpc3QgaWYgd2UgaGF2ZSBkYXRhIGZvciBmdXR1cmUgYWRkIGNhbGxzXG5cdFx0XHRcdGlmICggbWVtb3J5ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIHRoaXMgb2JqZWN0IGlzIHNwZW50XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bGlzdCA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Ly8gQWN0dWFsIENhbGxiYWNrcyBvYmplY3Rcblx0XHRzZWxmID0ge1xuXG5cdFx0XHQvLyBBZGQgYSBjYWxsYmFjayBvciBhIGNvbGxlY3Rpb24gb2YgY2FsbGJhY2tzIHRvIHRoZSBsaXN0XG5cdFx0XHRhZGQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBoYXZlIG1lbW9yeSBmcm9tIGEgcGFzdCBydW4sIHdlIHNob3VsZCBmaXJlIGFmdGVyIGFkZGluZ1xuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoIC0gMTtcblx0XHRcdFx0XHRcdHF1ZXVlLnB1c2goIG1lbW9yeSApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdCggZnVuY3Rpb24gYWRkKCBhcmdzICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3MsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCAhb3B0aW9ucy51bmlxdWUgfHwgIXNlbGYuaGFzKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGxpc3QucHVzaCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBhcmcgJiYgYXJnLmxlbmd0aCAmJiB0b1R5cGUoIGFyZyApICE9PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gSW5zcGVjdCByZWN1cnNpdmVseVxuXHRcdFx0XHRcdFx0XHRcdGFkZCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHR9ICkoIGFyZ3VtZW50cyApO1xuXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYSBjYWxsYmFjayBmcm9tIHRoZSBsaXN0XG5cdFx0XHRyZW1vdmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZWFjaCggYXJndW1lbnRzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdHZhciBpbmRleDtcblx0XHRcdFx0XHR3aGlsZSAoICggaW5kZXggPSBqUXVlcnkuaW5BcnJheSggYXJnLCBsaXN0LCBpbmRleCApICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdGxpc3Quc3BsaWNlKCBpbmRleCwgMSApO1xuXG5cdFx0XHRcdFx0XHQvLyBIYW5kbGUgZmlyaW5nIGluZGV4ZXNcblx0XHRcdFx0XHRcdGlmICggaW5kZXggPD0gZmlyaW5nSW5kZXggKSB7XG5cdFx0XHRcdFx0XHRcdGZpcmluZ0luZGV4LS07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2hlY2sgaWYgYSBnaXZlbiBjYWxsYmFjayBpcyBpbiB0aGUgbGlzdC5cblx0XHRcdC8vIElmIG5vIGFyZ3VtZW50IGlzIGdpdmVuLCByZXR1cm4gd2hldGhlciBvciBub3QgbGlzdCBoYXMgY2FsbGJhY2tzIGF0dGFjaGVkLlxuXHRcdFx0aGFzOiBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRcdHJldHVybiBmbiA/XG5cdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGZuLCBsaXN0ICkgPiAtMSA6XG5cdFx0XHRcdFx0bGlzdC5sZW5ndGggPiAwO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGFsbCBjYWxsYmFja3MgZnJvbSB0aGUgbGlzdFxuXHRcdFx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZSBhbmQgLmFkZFxuXHRcdFx0Ly8gQWJvcnQgYW55IGN1cnJlbnQvcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHQvLyBDbGVhciBhbGwgY2FsbGJhY2tzIGFuZCB2YWx1ZXNcblx0XHRcdGRpc2FibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0ZGlzYWJsZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gIWxpc3Q7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlXG5cdFx0XHQvLyBBbHNvIGRpc2FibGUgLmFkZCB1bmxlc3Mgd2UgaGF2ZSBtZW1vcnkgKHNpbmNlIGl0IHdvdWxkIGhhdmUgbm8gZWZmZWN0KVxuXHRcdFx0Ly8gQWJvcnQgYW55IHBlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0bG9jazogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGlmICggIW1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGxvY2tlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWxvY2tlZDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBjb250ZXh0IGFuZCBhcmd1bWVudHNcblx0XHRcdGZpcmVXaXRoOiBmdW5jdGlvbiggY29udGV4dCwgYXJncyApIHtcblx0XHRcdFx0aWYgKCAhbG9ja2VkICkge1xuXHRcdFx0XHRcdGFyZ3MgPSBhcmdzIHx8IFtdO1xuXHRcdFx0XHRcdGFyZ3MgPSBbIGNvbnRleHQsIGFyZ3Muc2xpY2UgPyBhcmdzLnNsaWNlKCkgOiBhcmdzIF07XG5cdFx0XHRcdFx0cXVldWUucHVzaCggYXJncyApO1xuXHRcdFx0XHRcdGlmICggIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCB0aGUgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHNlbGYuZmlyZVdpdGgoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgdGhlIGNhbGxiYWNrcyBoYXZlIGFscmVhZHkgYmVlbiBjYWxsZWQgYXQgbGVhc3Qgb25jZVxuXHRcdFx0ZmlyZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFmaXJlZDtcblx0XHRcdH1cblx0XHR9O1xuXG5cdHJldHVybiBzZWxmO1xufTtcblxuXG5mdW5jdGlvbiBJZGVudGl0eSggdiApIHtcblx0cmV0dXJuIHY7XG59XG5mdW5jdGlvbiBUaHJvd2VyKCBleCApIHtcblx0dGhyb3cgZXg7XG59XG5cbmZ1bmN0aW9uIGFkb3B0VmFsdWUoIHZhbHVlLCByZXNvbHZlLCByZWplY3QsIG5vVmFsdWUgKSB7XG5cdHZhciBtZXRob2Q7XG5cblx0dHJ5IHtcblxuXHRcdC8vIENoZWNrIGZvciBwcm9taXNlIGFzcGVjdCBmaXJzdCB0byBwcml2aWxlZ2Ugc3luY2hyb25vdXMgYmVoYXZpb3Jcblx0XHRpZiAoIHZhbHVlICYmIGlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUucHJvbWlzZSApICkgKSB7XG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUgKS5kb25lKCByZXNvbHZlICkuZmFpbCggcmVqZWN0ICk7XG5cblx0XHQvLyBPdGhlciB0aGVuYWJsZXNcblx0XHR9IGVsc2UgaWYgKCB2YWx1ZSAmJiBpc0Z1bmN0aW9uKCAoIG1ldGhvZCA9IHZhbHVlLnRoZW4gKSApICkge1xuXHRcdFx0bWV0aG9kLmNhbGwoIHZhbHVlLCByZXNvbHZlLCByZWplY3QgKTtcblxuXHRcdC8vIE90aGVyIG5vbi10aGVuYWJsZXNcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBDb250cm9sIGByZXNvbHZlYCBhcmd1bWVudHMgYnkgbGV0dGluZyBBcnJheSNzbGljZSBjYXN0IGJvb2xlYW4gYG5vVmFsdWVgIHRvIGludGVnZXI6XG5cdFx0XHQvLyAqIGZhbHNlOiBbIHZhbHVlIF0uc2xpY2UoIDAgKSA9PiByZXNvbHZlKCB2YWx1ZSApXG5cdFx0XHQvLyAqIHRydWU6IFsgdmFsdWUgXS5zbGljZSggMSApID0+IHJlc29sdmUoKVxuXHRcdFx0cmVzb2x2ZS5hcHBseSggdW5kZWZpbmVkLCBbIHZhbHVlIF0uc2xpY2UoIG5vVmFsdWUgKSApO1xuXHRcdH1cblxuXHQvLyBGb3IgUHJvbWlzZXMvQSssIGNvbnZlcnQgZXhjZXB0aW9ucyBpbnRvIHJlamVjdGlvbnNcblx0Ly8gU2luY2UgalF1ZXJ5LndoZW4gZG9lc24ndCB1bndyYXAgdGhlbmFibGVzLCB3ZSBjYW4gc2tpcCB0aGUgZXh0cmEgY2hlY2tzIGFwcGVhcmluZyBpblxuXHQvLyBEZWZlcnJlZCN0aGVuIHRvIGNvbmRpdGlvbmFsbHkgc3VwcHJlc3MgcmVqZWN0aW9uLlxuXHR9IGNhdGNoICggdmFsdWUgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCBvbmx5XG5cdFx0Ly8gU3RyaWN0IG1vZGUgZnVuY3Rpb25zIGludm9rZWQgd2l0aG91dCAuY2FsbC8uYXBwbHkgZ2V0IGdsb2JhbC1vYmplY3QgY29udGV4dFxuXHRcdHJlamVjdC5hcHBseSggdW5kZWZpbmVkLCBbIHZhbHVlIF0gKTtcblx0fVxufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0RGVmZXJyZWQ6IGZ1bmN0aW9uKCBmdW5jICkge1xuXHRcdHZhciB0dXBsZXMgPSBbXG5cblx0XHRcdFx0Ly8gYWN0aW9uLCBhZGQgbGlzdGVuZXIsIGNhbGxiYWNrcyxcblx0XHRcdFx0Ly8gLi4uIC50aGVuIGhhbmRsZXJzLCBhcmd1bWVudCBpbmRleCwgW2ZpbmFsIHN0YXRlXVxuXHRcdFx0XHRbIFwibm90aWZ5XCIsIFwicHJvZ3Jlc3NcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSwgMiBdLFxuXHRcdFx0XHRbIFwicmVzb2x2ZVwiLCBcImRvbmVcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDAsIFwicmVzb2x2ZWRcIiBdLFxuXHRcdFx0XHRbIFwicmVqZWN0XCIsIFwiZmFpbFwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgMSwgXCJyZWplY3RlZFwiIF1cblx0XHRcdF0sXG5cdFx0XHRzdGF0ZSA9IFwicGVuZGluZ1wiLFxuXHRcdFx0cHJvbWlzZSA9IHtcblx0XHRcdFx0c3RhdGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBzdGF0ZTtcblx0XHRcdFx0fSxcblx0XHRcdFx0YWx3YXlzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5kb25lKCBhcmd1bWVudHMgKS5mYWlsKCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJjYXRjaFwiOiBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHByb21pc2UudGhlbiggbnVsbCwgZm4gKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBLZWVwIHBpcGUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdHBpcGU6IGZ1bmN0aW9uKCAvKiBmbkRvbmUsIGZuRmFpbCwgZm5Qcm9ncmVzcyAqLyApIHtcblx0XHRcdFx0XHR2YXIgZm5zID0gYXJndW1lbnRzO1xuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIF9pLCB0dXBsZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBNYXAgdHVwbGVzIChwcm9ncmVzcywgZG9uZSwgZmFpbCkgdG8gYXJndW1lbnRzIChkb25lLCBmYWlsLCBwcm9ncmVzcylcblx0XHRcdFx0XHRcdFx0dmFyIGZuID0gaXNGdW5jdGlvbiggZm5zWyB0dXBsZVsgNCBdIF0gKSAmJiBmbnNbIHR1cGxlWyA0IF0gXTtcblxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5wcm9ncmVzcyhmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5ub3RpZnkgfSlcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQuZG9uZShmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5yZXNvbHZlIH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmZhaWwoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVqZWN0IH0pXG5cdFx0XHRcdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMSBdIF0oIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCA9IGZuICYmIGZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkICYmIGlzRnVuY3Rpb24oIHJldHVybmVkLnByb21pc2UgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnByb21pc2UoKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQucHJvZ3Jlc3MoIG5ld0RlZmVyLm5vdGlmeSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5kb25lKCBuZXdEZWZlci5yZXNvbHZlIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmZhaWwoIG5ld0RlZmVyLnJlamVjdCApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlclsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGZuID8gWyByZXR1cm5lZCBdIDogYXJndW1lbnRzXG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0Zm5zID0gbnVsbDtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR0aGVuOiBmdW5jdGlvbiggb25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQsIG9uUHJvZ3Jlc3MgKSB7XG5cdFx0XHRcdFx0dmFyIG1heERlcHRoID0gMDtcblx0XHRcdFx0XHRmdW5jdGlvbiByZXNvbHZlKCBkZXB0aCwgZGVmZXJyZWQsIGhhbmRsZXIsIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHZhciB0aGF0ID0gdGhpcyxcblx0XHRcdFx0XHRcdFx0XHRhcmdzID0gYXJndW1lbnRzLFxuXHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3cgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCwgdGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjNcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgZG91YmxlLXJlc29sdXRpb24gYXR0ZW1wdHNcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggPCBtYXhEZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCA9IGhhbmRsZXIuYXBwbHkoIHRoYXQsIGFyZ3MgKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNDhcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgPT09IGRlZmVycmVkLnByb21pc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvciggXCJUaGVuYWJsZSBzZWxmLXJlc29sdXRpb25cIiApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9ucyAyLjMuMy4xLCAzLjVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU0XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC03NVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gUmV0cmlldmUgYHRoZW5gIG9ubHkgb25jZVxuXHRcdFx0XHRcdFx0XHRcdFx0dGhlbiA9IHJldHVybmVkICYmXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuNFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02NFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IGNoZWNrIG9iamVjdHMgYW5kIGZ1bmN0aW9ucyBmb3IgdGhlbmFiaWxpdHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCB0eXBlb2YgcmV0dXJuZWQgPT09IFwib2JqZWN0XCIgfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgcmV0dXJuZWQgPT09IFwiZnVuY3Rpb25cIiApICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhIHJldHVybmVkIHRoZW5hYmxlXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHRoZW4gKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTcGVjaWFsIHByb2Nlc3NvcnMgKG5vdGlmeSkganVzdCB3YWl0IGZvciByZXNvbHV0aW9uXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBOb3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgYWxzbyBob29rIGludG8gcHJvZ3Jlc3Ncblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBkaXNyZWdhcmQgb2xkZXIgcmVzb2x1dGlvbiB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtYXhEZXB0aCsrO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGggKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGFsbCBvdGhlciByZXR1cm5lZCB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBJZGVudGl0eSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIHJldHVybmVkIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBQcm9jZXNzIHRoZSB2YWx1ZShzKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZhdWx0IHByb2Nlc3MgaXMgcmVzb2x2ZVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHNwZWNpYWwgfHwgZGVmZXJyZWQucmVzb2x2ZVdpdGggKSggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IG5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBjYXRjaCBhbmQgcmVqZWN0IGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzID0gc3BlY2lhbCA/XG5cdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93IDpcblx0XHRcdFx0XHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3coKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2soIGUsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3Muc3RhY2tUcmFjZSApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy40LjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02MVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBwb3N0LXJlc29sdXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKyAxID49IG1heERlcHRoICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gVGhyb3dlciApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgZSBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCB0aGF0LCBhcmdzICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4xXG5cdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU3XG5cdFx0XHRcdFx0XHRcdC8vIFJlLXJlc29sdmUgcHJvbWlzZXMgaW1tZWRpYXRlbHkgdG8gZG9kZ2UgZmFsc2UgcmVqZWN0aW9uIGZyb21cblx0XHRcdFx0XHRcdFx0Ly8gc3Vic2VxdWVudCBlcnJvcnNcblx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzKCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDYWxsIGFuIG9wdGlvbmFsIGhvb2sgdG8gcmVjb3JkIHRoZSBzdGFjaywgaW4gY2FzZSBvZiBleGNlcHRpb25cblx0XHRcdFx0XHRcdFx0XHQvLyBzaW5jZSBpdCdzIG90aGVyd2lzZSBsb3N0IHdoZW4gZXhlY3V0aW9uIGdvZXMgYXN5bmNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgPSBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBwcm9jZXNzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXG5cdFx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uUHJvZ3Jlc3MgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblByb2dyZXNzIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLm5vdGlmeVdpdGhcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMSBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25GdWxmaWxsZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvbkZ1bGZpbGxlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eVxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDIgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uUmVqZWN0ZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblJlamVjdGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdFRocm93ZXJcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEdldCBhIHByb21pc2UgZm9yIHRoaXMgZGVmZXJyZWRcblx0XHRcdFx0Ly8gSWYgb2JqIGlzIHByb3ZpZGVkLCB0aGUgcHJvbWlzZSBhc3BlY3QgaXMgYWRkZWQgdG8gdGhlIG9iamVjdFxuXHRcdFx0XHRwcm9taXNlOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdFx0XHRcdHJldHVybiBvYmogIT0gbnVsbCA/IGpRdWVyeS5leHRlbmQoIG9iaiwgcHJvbWlzZSApIDogcHJvbWlzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlZmVycmVkID0ge307XG5cblx0XHQvLyBBZGQgbGlzdC1zcGVjaWZpYyBtZXRob2RzXG5cdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuXHRcdFx0dmFyIGxpc3QgPSB0dXBsZVsgMiBdLFxuXHRcdFx0XHRzdGF0ZVN0cmluZyA9IHR1cGxlWyA1IF07XG5cblx0XHRcdC8vIHByb21pc2UucHJvZ3Jlc3MgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5kb25lID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZmFpbCA9IGxpc3QuYWRkXG5cdFx0XHRwcm9taXNlWyB0dXBsZVsgMSBdIF0gPSBsaXN0LmFkZDtcblxuXHRcdFx0Ly8gSGFuZGxlIHN0YXRlXG5cdFx0XHRpZiAoIHN0YXRlU3RyaW5nICkge1xuXHRcdFx0XHRsaXN0LmFkZChcblx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlc29sdmVkXCIgKGkuZS4sIGZ1bGZpbGxlZClcblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZWplY3RlZFwiXG5cdFx0XHRcdFx0XHRzdGF0ZSA9IHN0YXRlU3RyaW5nO1xuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdHR1cGxlc1sgMyAtIGkgXVsgMiBdLmRpc2FibGUsXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5kaXNhYmxlXG5cdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmRpc2FibGVcblx0XHRcdFx0XHR0dXBsZXNbIDMgLSBpIF1bIDMgXS5kaXNhYmxlLFxuXG5cdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfY2FsbGJhY2tzLmxvY2tcblx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMiBdLmxvY2ssXG5cblx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5sb2NrXG5cdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDMgXS5sb2NrXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmZpcmVcblx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5maXJlXG5cdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5maXJlXG5cdFx0XHRsaXN0LmFkZCggdHVwbGVbIDMgXS5maXJlICk7XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5ub3RpZnlXaXRoKC4uLikgfVxuXHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZXNvbHZlV2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdCA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZWplY3RXaXRoKC4uLikgfVxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oIHRoaXMgPT09IGRlZmVycmVkID8gdW5kZWZpbmVkIDogdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fTtcblxuXHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmVXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSA9IGxpc3QuZmlyZVdpdGg7XG5cdFx0fSApO1xuXG5cdFx0Ly8gTWFrZSB0aGUgZGVmZXJyZWQgYSBwcm9taXNlXG5cdFx0cHJvbWlzZS5wcm9taXNlKCBkZWZlcnJlZCApO1xuXG5cdFx0Ly8gQ2FsbCBnaXZlbiBmdW5jIGlmIGFueVxuXHRcdGlmICggZnVuYyApIHtcblx0XHRcdGZ1bmMuY2FsbCggZGVmZXJyZWQsIGRlZmVycmVkICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsIGRvbmUhXG5cdFx0cmV0dXJuIGRlZmVycmVkO1xuXHR9LFxuXG5cdC8vIERlZmVycmVkIGhlbHBlclxuXHR3aGVuOiBmdW5jdGlvbiggc2luZ2xlVmFsdWUgKSB7XG5cdFx0dmFyXG5cblx0XHRcdC8vIGNvdW50IG9mIHVuY29tcGxldGVkIHN1Ym9yZGluYXRlc1xuXHRcdFx0cmVtYWluaW5nID0gYXJndW1lbnRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gY291bnQgb2YgdW5wcm9jZXNzZWQgYXJndW1lbnRzXG5cdFx0XHRpID0gcmVtYWluaW5nLFxuXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBmdWxmaWxsbWVudCBkYXRhXG5cdFx0XHRyZXNvbHZlQ29udGV4dHMgPSBBcnJheSggaSApLFxuXHRcdFx0cmVzb2x2ZVZhbHVlcyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApLFxuXG5cdFx0XHQvLyB0aGUgcHJpbWFyeSBEZWZlcnJlZFxuXHRcdFx0cHJpbWFyeSA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBjYWxsYmFjayBmYWN0b3J5XG5cdFx0XHR1cGRhdGVGdW5jID0gZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdHJldHVybiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmVzb2x2ZUNvbnRleHRzWyBpIF0gPSB0aGlzO1xuXHRcdFx0XHRcdHJlc29sdmVWYWx1ZXNbIGkgXSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gc2xpY2UuY2FsbCggYXJndW1lbnRzICkgOiB2YWx1ZTtcblx0XHRcdFx0XHRpZiAoICEoIC0tcmVtYWluaW5nICkgKSB7XG5cdFx0XHRcdFx0XHRwcmltYXJ5LnJlc29sdmVXaXRoKCByZXNvbHZlQ29udGV4dHMsIHJlc29sdmVWYWx1ZXMgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0XHR9O1xuXG5cdFx0Ly8gU2luZ2xlLSBhbmQgZW1wdHkgYXJndW1lbnRzIGFyZSBhZG9wdGVkIGxpa2UgUHJvbWlzZS5yZXNvbHZlXG5cdFx0aWYgKCByZW1haW5pbmcgPD0gMSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHNpbmdsZVZhbHVlLCBwcmltYXJ5LmRvbmUoIHVwZGF0ZUZ1bmMoIGkgKSApLnJlc29sdmUsIHByaW1hcnkucmVqZWN0LFxuXHRcdFx0XHQhcmVtYWluaW5nICk7XG5cblx0XHRcdC8vIFVzZSAudGhlbigpIHRvIHVud3JhcCBzZWNvbmRhcnkgdGhlbmFibGVzIChjZi4gZ2gtMzAwMClcblx0XHRcdGlmICggcHJpbWFyeS5zdGF0ZSgpID09PSBcInBlbmRpbmdcIiB8fFxuXHRcdFx0XHRpc0Z1bmN0aW9uKCByZXNvbHZlVmFsdWVzWyBpIF0gJiYgcmVzb2x2ZVZhbHVlc1sgaSBdLnRoZW4gKSApIHtcblxuXHRcdFx0XHRyZXR1cm4gcHJpbWFyeS50aGVuKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gTXVsdGlwbGUgYXJndW1lbnRzIGFyZSBhZ2dyZWdhdGVkIGxpa2UgUHJvbWlzZS5hbGwgYXJyYXkgZWxlbWVudHNcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHJlc29sdmVWYWx1ZXNbIGkgXSwgdXBkYXRlRnVuYyggaSApLCBwcmltYXJ5LnJlamVjdCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBwcmltYXJ5LnByb21pc2UoKTtcblx0fVxufSApO1xuXG5cbi8vIFRoZXNlIHVzdWFsbHkgaW5kaWNhdGUgYSBwcm9ncmFtbWVyIG1pc3Rha2UgZHVyaW5nIGRldmVsb3BtZW50LFxuLy8gd2FybiBhYm91dCB0aGVtIEFTQVAgcmF0aGVyIHRoYW4gc3dhbGxvd2luZyB0aGVtIGJ5IGRlZmF1bHQuXG52YXIgcmVycm9yTmFtZXMgPSAvXihFdmFsfEludGVybmFsfFJhbmdlfFJlZmVyZW5jZXxTeW50YXh8VHlwZXxVUkkpRXJyb3IkLztcblxualF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgPSBmdW5jdGlvbiggZXJyb3IsIHN0YWNrICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDggLSA5IG9ubHlcblx0Ly8gQ29uc29sZSBleGlzdHMgd2hlbiBkZXYgdG9vbHMgYXJlIG9wZW4sIHdoaWNoIGNhbiBoYXBwZW4gYXQgYW55IHRpbWVcblx0aWYgKCB3aW5kb3cuY29uc29sZSAmJiB3aW5kb3cuY29uc29sZS53YXJuICYmIGVycm9yICYmIHJlcnJvck5hbWVzLnRlc3QoIGVycm9yLm5hbWUgKSApIHtcblx0XHR3aW5kb3cuY29uc29sZS53YXJuKCBcImpRdWVyeS5EZWZlcnJlZCBleGNlcHRpb246IFwiICsgZXJyb3IubWVzc2FnZSwgZXJyb3Iuc3RhY2ssIHN0YWNrICk7XG5cdH1cbn07XG5cblxuXG5cbmpRdWVyeS5yZWFkeUV4Y2VwdGlvbiA9IGZ1bmN0aW9uKCBlcnJvciApIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdHRocm93IGVycm9yO1xuXHR9ICk7XG59O1xuXG5cblxuXG4vLyBUaGUgZGVmZXJyZWQgdXNlZCBvbiBET00gcmVhZHlcbnZhciByZWFkeUxpc3QgPSBqUXVlcnkuRGVmZXJyZWQoKTtcblxualF1ZXJ5LmZuLnJlYWR5ID0gZnVuY3Rpb24oIGZuICkge1xuXG5cdHJlYWR5TGlzdFxuXHRcdC50aGVuKCBmbiApXG5cblx0XHQvLyBXcmFwIGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiBpbiBhIGZ1bmN0aW9uIHNvIHRoYXQgdGhlIGxvb2t1cFxuXHRcdC8vIGhhcHBlbnMgYXQgdGhlIHRpbWUgb2YgZXJyb3IgaGFuZGxpbmcgaW5zdGVhZCBvZiBjYWxsYmFja1xuXHRcdC8vIHJlZ2lzdHJhdGlvbi5cblx0XHQuY2F0Y2goIGZ1bmN0aW9uKCBlcnJvciApIHtcblx0XHRcdGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiggZXJyb3IgKTtcblx0XHR9ICk7XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gSXMgdGhlIERPTSByZWFkeSB0byBiZSB1c2VkPyBTZXQgdG8gdHJ1ZSBvbmNlIGl0IG9jY3Vycy5cblx0aXNSZWFkeTogZmFsc2UsXG5cblx0Ly8gQSBjb3VudGVyIHRvIHRyYWNrIGhvdyBtYW55IGl0ZW1zIHRvIHdhaXQgZm9yIGJlZm9yZVxuXHQvLyB0aGUgcmVhZHkgZXZlbnQgZmlyZXMuIFNlZSB0cmFjLTY3ODFcblx0cmVhZHlXYWl0OiAxLFxuXG5cdC8vIEhhbmRsZSB3aGVuIHRoZSBET00gaXMgcmVhZHlcblx0cmVhZHk6IGZ1bmN0aW9uKCB3YWl0ICkge1xuXG5cdFx0Ly8gQWJvcnQgaWYgdGhlcmUgYXJlIHBlbmRpbmcgaG9sZHMgb3Igd2UncmUgYWxyZWFkeSByZWFkeVxuXHRcdGlmICggd2FpdCA9PT0gdHJ1ZSA/IC0talF1ZXJ5LnJlYWR5V2FpdCA6IGpRdWVyeS5pc1JlYWR5ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJlbWVtYmVyIHRoYXQgdGhlIERPTSBpcyByZWFkeVxuXHRcdGpRdWVyeS5pc1JlYWR5ID0gdHJ1ZTtcblxuXHRcdC8vIElmIGEgbm9ybWFsIERPTSBSZWFkeSBldmVudCBmaXJlZCwgZGVjcmVtZW50LCBhbmQgd2FpdCBpZiBuZWVkIGJlXG5cdFx0aWYgKCB3YWl0ICE9PSB0cnVlICYmIC0talF1ZXJ5LnJlYWR5V2FpdCA+IDAgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gSWYgdGhlcmUgYXJlIGZ1bmN0aW9ucyBib3VuZCwgdG8gZXhlY3V0ZVxuXHRcdHJlYWR5TGlzdC5yZXNvbHZlV2l0aCggZG9jdW1lbnQsIFsgalF1ZXJ5IF0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkucmVhZHkudGhlbiA9IHJlYWR5TGlzdC50aGVuO1xuXG4vLyBUaGUgcmVhZHkgZXZlbnQgaGFuZGxlciBhbmQgc2VsZiBjbGVhbnVwIG1ldGhvZFxuZnVuY3Rpb24gY29tcGxldGVkKCkge1xuXHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG5cdGpRdWVyeS5yZWFkeSgpO1xufVxuXG4vLyBDYXRjaCBjYXNlcyB3aGVyZSAkKGRvY3VtZW50KS5yZWFkeSgpIGlzIGNhbGxlZFxuLy8gYWZ0ZXIgdGhlIGJyb3dzZXIgZXZlbnQgaGFzIGFscmVhZHkgb2NjdXJyZWQuXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMCBvbmx5XG4vLyBPbGRlciBJRSBzb21ldGltZXMgc2lnbmFscyBcImludGVyYWN0aXZlXCIgdG9vIHNvb25cbmlmICggZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiIHx8XG5cdCggZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gXCJsb2FkaW5nXCIgJiYgIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbCApICkge1xuXG5cdC8vIEhhbmRsZSBpdCBhc3luY2hyb25vdXNseSB0byBhbGxvdyBzY3JpcHRzIHRoZSBvcHBvcnR1bml0eSB0byBkZWxheSByZWFkeVxuXHR3aW5kb3cuc2V0VGltZW91dCggalF1ZXJ5LnJlYWR5ICk7XG5cbn0gZWxzZSB7XG5cblx0Ly8gVXNlIHRoZSBoYW5keSBldmVudCBjYWxsYmFja1xuXHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cblx0Ly8gQSBmYWxsYmFjayB0byB3aW5kb3cub25sb2FkLCB0aGF0IHdpbGwgYWx3YXlzIHdvcmtcblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcbn1cblxuXG5cblxuLy8gTXVsdGlmdW5jdGlvbmFsIG1ldGhvZCB0byBnZXQgYW5kIHNldCB2YWx1ZXMgb2YgYSBjb2xsZWN0aW9uXG4vLyBUaGUgdmFsdWUvcyBjYW4gb3B0aW9uYWxseSBiZSBleGVjdXRlZCBpZiBpdCdzIGEgZnVuY3Rpb25cbnZhciBhY2Nlc3MgPSBmdW5jdGlvbiggZWxlbXMsIGZuLCBrZXksIHZhbHVlLCBjaGFpbmFibGUsIGVtcHR5R2V0LCByYXcgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBlbGVtcy5sZW5ndGgsXG5cdFx0YnVsayA9IGtleSA9PSBudWxsO1xuXG5cdC8vIFNldHMgbWFueSB2YWx1ZXNcblx0aWYgKCB0b1R5cGUoIGtleSApID09PSBcIm9iamVjdFwiICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cdFx0Zm9yICggaSBpbiBrZXkgKSB7XG5cdFx0XHRhY2Nlc3MoIGVsZW1zLCBmbiwgaSwga2V5WyBpIF0sIHRydWUsIGVtcHR5R2V0LCByYXcgKTtcblx0XHR9XG5cblx0Ly8gU2V0cyBvbmUgdmFsdWVcblx0fSBlbHNlIGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXG5cdFx0aWYgKCAhaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJhdyA9IHRydWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBidWxrICkge1xuXG5cdFx0XHQvLyBCdWxrIG9wZXJhdGlvbnMgcnVuIGFnYWluc3QgdGhlIGVudGlyZSBzZXRcblx0XHRcdGlmICggcmF3ICkge1xuXHRcdFx0XHRmbi5jYWxsKCBlbGVtcywgdmFsdWUgKTtcblx0XHRcdFx0Zm4gPSBudWxsO1xuXG5cdFx0XHQvLyAuLi5leGNlcHQgd2hlbiBleGVjdXRpbmcgZnVuY3Rpb24gdmFsdWVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRidWxrID0gZm47XG5cdFx0XHRcdGZuID0gZnVuY3Rpb24oIGVsZW0sIF9rZXksIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiBidWxrLmNhbGwoIGpRdWVyeSggZWxlbSApLCB2YWx1ZSApO1xuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0Zm4oXG5cdFx0XHRcdFx0ZWxlbXNbIGkgXSwga2V5LCByYXcgP1xuXHRcdFx0XHRcdFx0dmFsdWUgOlxuXHRcdFx0XHRcdFx0dmFsdWUuY2FsbCggZWxlbXNbIGkgXSwgaSwgZm4oIGVsZW1zWyBpIF0sIGtleSApIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoIGNoYWluYWJsZSApIHtcblx0XHRyZXR1cm4gZWxlbXM7XG5cdH1cblxuXHQvLyBHZXRzXG5cdGlmICggYnVsayApIHtcblx0XHRyZXR1cm4gZm4uY2FsbCggZWxlbXMgKTtcblx0fVxuXG5cdHJldHVybiBsZW4gPyBmbiggZWxlbXNbIDAgXSwga2V5ICkgOiBlbXB0eUdldDtcbn07XG5cblxuLy8gTWF0Y2hlcyBkYXNoZWQgc3RyaW5nIGZvciBjYW1lbGl6aW5nXG52YXIgcm1zUHJlZml4ID0gL14tbXMtLyxcblx0cmRhc2hBbHBoYSA9IC8tKFthLXpdKS9nO1xuXG4vLyBVc2VkIGJ5IGNhbWVsQ2FzZSBhcyBjYWxsYmFjayB0byByZXBsYWNlKClcbmZ1bmN0aW9uIGZjYW1lbENhc2UoIF9hbGwsIGxldHRlciApIHtcblx0cmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpO1xufVxuXG4vLyBDb252ZXJ0IGRhc2hlZCB0byBjYW1lbENhc2U7IHVzZWQgYnkgdGhlIGNzcyBhbmQgZGF0YSBtb2R1bGVzXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSwgRWRnZSAxMiAtIDE1XG4vLyBNaWNyb3NvZnQgZm9yZ290IHRvIGh1bXAgdGhlaXIgdmVuZG9yIHByZWZpeCAodHJhYy05NTcyKVxuZnVuY3Rpb24gY2FtZWxDYXNlKCBzdHJpbmcgKSB7XG5cdHJldHVybiBzdHJpbmcucmVwbGFjZSggcm1zUHJlZml4LCBcIm1zLVwiICkucmVwbGFjZSggcmRhc2hBbHBoYSwgZmNhbWVsQ2FzZSApO1xufVxudmFyIGFjY2VwdERhdGEgPSBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0Ly8gQWNjZXB0cyBvbmx5OlxuXHQvLyAgLSBOb2RlXG5cdC8vICAgIC0gTm9kZS5FTEVNRU5UX05PREVcblx0Ly8gICAgLSBOb2RlLkRPQ1VNRU5UX05PREVcblx0Ly8gIC0gT2JqZWN0XG5cdC8vICAgIC0gQW55XG5cdHJldHVybiBvd25lci5ub2RlVHlwZSA9PT0gMSB8fCBvd25lci5ub2RlVHlwZSA9PT0gOSB8fCAhKCArb3duZXIubm9kZVR5cGUgKTtcbn07XG5cblxuXG5cbmZ1bmN0aW9uIERhdGEoKSB7XG5cdHRoaXMuZXhwYW5kbyA9IGpRdWVyeS5leHBhbmRvICsgRGF0YS51aWQrKztcbn1cblxuRGF0YS51aWQgPSAxO1xuXG5EYXRhLnByb3RvdHlwZSA9IHtcblxuXHRjYWNoZTogZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdFx0Ly8gQ2hlY2sgaWYgdGhlIG93bmVyIG9iamVjdCBhbHJlYWR5IGhhcyBhIGNhY2hlXG5cdFx0dmFyIHZhbHVlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0Ly8gSWYgbm90LCBjcmVhdGUgb25lXG5cdFx0aWYgKCAhdmFsdWUgKSB7XG5cdFx0XHR2YWx1ZSA9IHt9O1xuXG5cdFx0XHQvLyBXZSBjYW4gYWNjZXB0IGRhdGEgZm9yIG5vbi1lbGVtZW50IG5vZGVzIGluIG1vZGVybiBicm93c2Vycyxcblx0XHRcdC8vIGJ1dCB3ZSBzaG91bGQgbm90LCBzZWUgdHJhYy04MzM1LlxuXHRcdFx0Ly8gQWx3YXlzIHJldHVybiBhbiBlbXB0eSBvYmplY3QuXG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIG93bmVyICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYgaXQgaXMgYSBub2RlIHVubGlrZWx5IHRvIGJlIHN0cmluZ2lmeS1lZCBvciBsb29wZWQgb3ZlclxuXHRcdFx0XHQvLyB1c2UgcGxhaW4gYXNzaWdubWVudFxuXHRcdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHZhbHVlO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBzZWN1cmUgaXQgaW4gYSBub24tZW51bWVyYWJsZSBwcm9wZXJ0eVxuXHRcdFx0XHQvLyBjb25maWd1cmFibGUgbXVzdCBiZSB0cnVlIHRvIGFsbG93IHRoZSBwcm9wZXJ0eSB0byBiZVxuXHRcdFx0XHQvLyBkZWxldGVkIHdoZW4gZGF0YSBpcyByZW1vdmVkXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBvd25lciwgdGhpcy5leHBhbmRvLCB7XG5cdFx0XHRcdFx0XHR2YWx1ZTogdmFsdWUsXG5cdFx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWVcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsdWU7XG5cdH0sXG5cdHNldDogZnVuY3Rpb24oIG93bmVyLCBkYXRhLCB2YWx1ZSApIHtcblx0XHR2YXIgcHJvcCxcblx0XHRcdGNhY2hlID0gdGhpcy5jYWNoZSggb3duZXIgKTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwga2V5LCB2YWx1ZSBdIGFyZ3Ncblx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGNhY2hlWyBjYW1lbENhc2UoIGRhdGEgKSBdID0gdmFsdWU7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIHsgcHJvcGVydGllcyB9IF0gYXJnc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvcHkgdGhlIHByb3BlcnRpZXMgb25lLWJ5LW9uZSB0byB0aGUgY2FjaGUgb2JqZWN0XG5cdFx0XHRmb3IgKCBwcm9wIGluIGRhdGEgKSB7XG5cdFx0XHRcdGNhY2hlWyBjYW1lbENhc2UoIHByb3AgKSBdID0gZGF0YVsgcHJvcCBdO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gY2FjaGU7XG5cdH0sXG5cdGdldDogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0cmV0dXJuIGtleSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMuY2FjaGUoIG93bmVyICkgOlxuXG5cdFx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gJiYgb3duZXJbIHRoaXMuZXhwYW5kbyBdWyBjYW1lbENhc2UoIGtleSApIF07XG5cdH0sXG5cdGFjY2VzczogZnVuY3Rpb24oIG93bmVyLCBrZXksIHZhbHVlICkge1xuXG5cdFx0Ly8gSW4gY2FzZXMgd2hlcmUgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBObyBrZXkgd2FzIHNwZWNpZmllZFxuXHRcdC8vICAgMi4gQSBzdHJpbmcga2V5IHdhcyBzcGVjaWZpZWQsIGJ1dCBubyB2YWx1ZSBwcm92aWRlZFxuXHRcdC8vXG5cdFx0Ly8gVGFrZSB0aGUgXCJyZWFkXCIgcGF0aCBhbmQgYWxsb3cgdGhlIGdldCBtZXRob2QgdG8gZGV0ZXJtaW5lXG5cdFx0Ly8gd2hpY2ggdmFsdWUgdG8gcmV0dXJuLCByZXNwZWN0aXZlbHkgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBUaGUgZW50aXJlIGNhY2hlIG9iamVjdFxuXHRcdC8vICAgMi4gVGhlIGRhdGEgc3RvcmVkIGF0IHRoZSBrZXlcblx0XHQvL1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHxcblx0XHRcdFx0KCAoIGtleSAmJiB0eXBlb2Yga2V5ID09PSBcInN0cmluZ1wiICkgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5nZXQoIG93bmVyLCBrZXkgKTtcblx0XHR9XG5cblx0XHQvLyBXaGVuIHRoZSBrZXkgaXMgbm90IGEgc3RyaW5nLCBvciBib3RoIGEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vIGFyZSBzcGVjaWZpZWQsIHNldCBvciBleHRlbmQgKGV4aXN0aW5nIG9iamVjdHMpIHdpdGggZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBBbiBvYmplY3Qgb2YgcHJvcGVydGllc1xuXHRcdC8vICAgMi4gQSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly9cblx0XHR0aGlzLnNldCggb3duZXIsIGtleSwgdmFsdWUgKTtcblxuXHRcdC8vIFNpbmNlIHRoZSBcInNldFwiIHBhdGggY2FuIGhhdmUgdHdvIHBvc3NpYmxlIGVudHJ5IHBvaW50c1xuXHRcdC8vIHJldHVybiB0aGUgZXhwZWN0ZWQgZGF0YSBiYXNlZCBvbiB3aGljaCBwYXRoIHdhcyB0YWtlblsqXVxuXHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiBrZXk7XG5cdH0sXG5cdHJlbW92ZTogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0dmFyIGksXG5cdFx0XHRjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdGlmICggY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIGtleSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0IGFycmF5IG9yIHNwYWNlIHNlcGFyYXRlZCBzdHJpbmcgb2Yga2V5c1xuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBrZXkgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBrZXkgaXMgYW4gYXJyYXkgb2Yga2V5cy4uLlxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc2V0IGNhbWVsQ2FzZSBrZXlzLCBzbyByZW1vdmUgdGhhdC5cblx0XHRcdFx0a2V5ID0ga2V5Lm1hcCggY2FtZWxDYXNlICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRrZXkgPSBjYW1lbENhc2UoIGtleSApO1xuXG5cdFx0XHRcdC8vIElmIGEga2V5IHdpdGggdGhlIHNwYWNlcyBleGlzdHMsIHVzZSBpdC5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBjcmVhdGUgYW4gYXJyYXkgYnkgbWF0Y2hpbmcgbm9uLXdoaXRlc3BhY2Vcblx0XHRcdFx0a2V5ID0ga2V5IGluIGNhY2hlID9cblx0XHRcdFx0XHRbIGtleSBdIDpcblx0XHRcdFx0XHQoIGtleS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdICk7XG5cdFx0XHR9XG5cblx0XHRcdGkgPSBrZXkubGVuZ3RoO1xuXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlbIGkgXSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSB0aGUgZXhwYW5kbyBpZiB0aGVyZSdzIG5vIG1vcmUgZGF0YVxuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHwgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICkgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDVcblx0XHRcdC8vIFdlYmtpdCAmIEJsaW5rIHBlcmZvcm1hbmNlIHN1ZmZlcnMgd2hlbiBkZWxldGluZyBwcm9wZXJ0aWVzXG5cdFx0XHQvLyBmcm9tIERPTSBub2Rlcywgc28gc2V0IHRvIHVuZGVmaW5lZCBpbnN0ZWFkXG5cdFx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0zNzg2MDcgKGJ1ZyByZXN0cmljdGVkKVxuXHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVsZXRlIG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBvd25lciApIHtcblx0XHR2YXIgY2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0cmV0dXJuIGNhY2hlICE9PSB1bmRlZmluZWQgJiYgIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApO1xuXHR9XG59O1xudmFyIGRhdGFQcml2ID0gbmV3IERhdGEoKTtcblxudmFyIGRhdGFVc2VyID0gbmV3IERhdGEoKTtcblxuXG5cbi8vXHRJbXBsZW1lbnRhdGlvbiBTdW1tYXJ5XG4vL1xuLy9cdDEuIEVuZm9yY2UgQVBJIHN1cmZhY2UgYW5kIHNlbWFudGljIGNvbXBhdGliaWxpdHkgd2l0aCAxLjkueCBicmFuY2hcbi8vXHQyLiBJbXByb3ZlIHRoZSBtb2R1bGUncyBtYWludGFpbmFiaWxpdHkgYnkgcmVkdWNpbmcgdGhlIHN0b3JhZ2Vcbi8vXHRcdHBhdGhzIHRvIGEgc2luZ2xlIG1lY2hhbmlzbS5cbi8vXHQzLiBVc2UgdGhlIHNhbWUgc2luZ2xlIG1lY2hhbmlzbSB0byBzdXBwb3J0IFwicHJpdmF0ZVwiIGFuZCBcInVzZXJcIiBkYXRhLlxuLy9cdDQuIF9OZXZlcl8gZXhwb3NlIFwicHJpdmF0ZVwiIGRhdGEgdG8gdXNlciBjb2RlIChUT0RPOiBEcm9wIF9kYXRhLCBfcmVtb3ZlRGF0YSlcbi8vXHQ1LiBBdm9pZCBleHBvc2luZyBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIG9uIHVzZXIgb2JqZWN0cyAoZWcuIGV4cGFuZG8gcHJvcGVydGllcylcbi8vXHQ2LiBQcm92aWRlIGEgY2xlYXIgcGF0aCBmb3IgaW1wbGVtZW50YXRpb24gdXBncmFkZSB0byBXZWFrTWFwIGluIDIwMTRcblxudmFyIHJicmFjZSA9IC9eKD86XFx7W1xcd1xcV10qXFx9fFxcW1tcXHdcXFddKlxcXSkkLyxcblx0cm11bHRpRGFzaCA9IC9bQS1aXS9nO1xuXG5mdW5jdGlvbiBnZXREYXRhKCBkYXRhICkge1xuXHRpZiAoIGRhdGEgPT09IFwidHJ1ZVwiICkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcImZhbHNlXCIgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcIm51bGxcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIE9ubHkgY29udmVydCB0byBhIG51bWJlciBpZiBpdCBkb2Vzbid0IGNoYW5nZSB0aGUgc3RyaW5nXG5cdGlmICggZGF0YSA9PT0gK2RhdGEgKyBcIlwiICkge1xuXHRcdHJldHVybiArZGF0YTtcblx0fVxuXG5cdGlmICggcmJyYWNlLnRlc3QoIGRhdGEgKSApIHtcblx0XHRyZXR1cm4gSlNPTi5wYXJzZSggZGF0YSApO1xuXHR9XG5cblx0cmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIGRhdGFBdHRyKCBlbGVtLCBrZXksIGRhdGEgKSB7XG5cdHZhciBuYW1lO1xuXG5cdC8vIElmIG5vdGhpbmcgd2FzIGZvdW5kIGludGVybmFsbHksIHRyeSB0byBmZXRjaCBhbnlcblx0Ly8gZGF0YSBmcm9tIHRoZSBIVE1MNSBkYXRhLSogYXR0cmlidXRlXG5cdGlmICggZGF0YSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0bmFtZSA9IFwiZGF0YS1cIiArIGtleS5yZXBsYWNlKCBybXVsdGlEYXNoLCBcIi0kJlwiICkudG9Mb3dlckNhc2UoKTtcblx0XHRkYXRhID0gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKTtcblxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRkYXRhID0gZ2V0RGF0YSggZGF0YSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgd2Ugc2V0IHRoZSBkYXRhIHNvIGl0IGlzbid0IGNoYW5nZWQgbGF0ZXJcblx0XHRcdGRhdGFVc2VyLnNldCggZWxlbSwga2V5LCBkYXRhICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBkYXRhO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5oYXNEYXRhKCBlbGVtICkgfHwgZGF0YVByaXYuaGFzRGF0YSggZWxlbSApO1xuXHR9LFxuXG5cdGRhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhVXNlci5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fSxcblxuXHQvLyBUT0RPOiBOb3cgdGhhdCBhbGwgY2FsbHMgdG8gX2RhdGEgYW5kIF9yZW1vdmVEYXRhIGhhdmUgYmVlbiByZXBsYWNlZFxuXHQvLyB3aXRoIGRpcmVjdCBjYWxscyB0byBkYXRhUHJpdiBtZXRob2RzLCB0aGVzZSBjYW4gYmUgZGVwcmVjYXRlZC5cblx0X2RhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRfcmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRkYXRhOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHR2YXIgaSwgbmFtZSwgZGF0YSxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRhdHRycyA9IGVsZW0gJiYgZWxlbS5hdHRyaWJ1dGVzO1xuXG5cdFx0Ly8gR2V0cyBhbGwgdmFsdWVzXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdGhpcy5sZW5ndGggKSB7XG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0gKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgIWRhdGFQcml2LmdldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiApICkge1xuXHRcdFx0XHRcdGkgPSBhdHRycy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdFx0XHRcdC8vIFRoZSBhdHRycyBlbGVtZW50cyBjYW4gYmUgbnVsbCAodHJhYy0xNDg5NClcblx0XHRcdFx0XHRcdGlmICggYXR0cnNbIGkgXSApIHtcblx0XHRcdFx0XHRcdFx0bmFtZSA9IGF0dHJzWyBpIF0ubmFtZTtcblx0XHRcdFx0XHRcdFx0aWYgKCBuYW1lLmluZGV4T2YoIFwiZGF0YS1cIiApID09PSAwICkge1xuXHRcdFx0XHRcdFx0XHRcdG5hbWUgPSBjYW1lbENhc2UoIG5hbWUuc2xpY2UoIDUgKSApO1xuXHRcdFx0XHRcdFx0XHRcdGRhdGFBdHRyKCBlbGVtLCBuYW1lLCBkYXRhWyBuYW1lIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZGF0YTtcblx0XHR9XG5cblx0XHQvLyBTZXRzIG11bHRpcGxlIHZhbHVlc1xuXHRcdGlmICggdHlwZW9mIGtleSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBkYXRhO1xuXG5cdFx0XHQvLyBUaGUgY2FsbGluZyBqUXVlcnkgb2JqZWN0IChlbGVtZW50IG1hdGNoZXMpIGlzIG5vdCBlbXB0eVxuXHRcdFx0Ly8gKGFuZCB0aGVyZWZvcmUgaGFzIGFuIGVsZW1lbnQgYXBwZWFycyBhdCB0aGlzWyAwIF0pIGFuZCB0aGVcblx0XHRcdC8vIGB2YWx1ZWAgcGFyYW1ldGVyIHdhcyBub3QgdW5kZWZpbmVkLiBBbiBlbXB0eSBqUXVlcnkgb2JqZWN0XG5cdFx0XHQvLyB3aWxsIHJlc3VsdCBpbiBgdW5kZWZpbmVkYCBmb3IgZWxlbSA9IHRoaXNbIDAgXSB3aGljaCB3aWxsXG5cdFx0XHQvLyB0aHJvdyBhbiBleGNlcHRpb24gaWYgYW4gYXR0ZW1wdCB0byByZWFkIGEgZGF0YSBjYWNoZSBpcyBtYWRlLlxuXHRcdFx0aWYgKCBlbGVtICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBnZXQgZGF0YSBmcm9tIHRoZSBjYWNoZVxuXHRcdFx0XHQvLyBUaGUga2V5IHdpbGwgYWx3YXlzIGJlIGNhbWVsQ2FzZWQgaW4gRGF0YVxuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIFwiZGlzY292ZXJcIiB0aGUgZGF0YSBpblxuXHRcdFx0XHQvLyBIVE1MNSBjdXN0b20gZGF0YS0qIGF0dHJzXG5cdFx0XHRcdGRhdGEgPSBkYXRhQXR0ciggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gV2UgdHJpZWQgcmVhbGx5IGhhcmQsIGJ1dCB0aGUgZGF0YSBkb2Vzbid0IGV4aXN0LlxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCB0aGUgZGF0YS4uLlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc3RvcmUgdGhlIGNhbWVsQ2FzZWQga2V5XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5LCB2YWx1ZSApO1xuXHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSwgbnVsbCwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkYXRhVXNlci5yZW1vdmUoIHRoaXMsIGtleSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBxdWV1ZTtcblxuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHR5cGUgPSAoIHR5cGUgfHwgXCJmeFwiICkgKyBcInF1ZXVlXCI7XG5cdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmdldCggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHQvLyBTcGVlZCB1cCBkZXF1ZXVlIGJ5IGdldHRpbmcgb3V0IHF1aWNrbHkgaWYgdGhpcyBpcyBqdXN0IGEgbG9va3VwXG5cdFx0XHRpZiAoIGRhdGEgKSB7XG5cdFx0XHRcdGlmICggIXF1ZXVlIHx8IEFycmF5LmlzQXJyYXkoIGRhdGEgKSApIHtcblx0XHRcdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgdHlwZSwgalF1ZXJ5Lm1ha2VBcnJheSggZGF0YSApICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cXVldWUucHVzaCggZGF0YSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcXVldWUgfHwgW107XG5cdFx0fVxuXHR9LFxuXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggZWxlbSwgdHlwZSApLFxuXHRcdFx0c3RhcnRMZW5ndGggPSBxdWV1ZS5sZW5ndGgsXG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCksXG5cdFx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgdHlwZSApLFxuXHRcdFx0bmV4dCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggZWxlbSwgdHlwZSApO1xuXHRcdFx0fTtcblxuXHRcdC8vIElmIHRoZSBmeCBxdWV1ZSBpcyBkZXF1ZXVlZCwgYWx3YXlzIHJlbW92ZSB0aGUgcHJvZ3Jlc3Mgc2VudGluZWxcblx0XHRpZiAoIGZuID09PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdHN0YXJ0TGVuZ3RoLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblxuXHRcdFx0Ly8gQWRkIGEgcHJvZ3Jlc3Mgc2VudGluZWwgdG8gcHJldmVudCB0aGUgZnggcXVldWUgZnJvbSBiZWluZ1xuXHRcdFx0Ly8gYXV0b21hdGljYWxseSBkZXF1ZXVlZFxuXHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgKSB7XG5cdFx0XHRcdHF1ZXVlLnVuc2hpZnQoIFwiaW5wcm9ncmVzc1wiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENsZWFyIHVwIHRoZSBsYXN0IHF1ZXVlIHN0b3AgZnVuY3Rpb25cblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0Zm4uY2FsbCggZWxlbSwgbmV4dCwgaG9va3MgKTtcblx0XHR9XG5cblx0XHRpZiAoICFzdGFydExlbmd0aCAmJiBob29rcyApIHtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gTm90IHB1YmxpYyAtIGdlbmVyYXRlIGEgcXVldWVIb29rcyBvYmplY3QsIG9yIHJldHVybiB0aGUgY3VycmVudCBvbmVcblx0X3F1ZXVlSG9va3M6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHZhciBrZXkgPSB0eXBlICsgXCJxdWV1ZUhvb2tzXCI7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmdldCggZWxlbSwga2V5ICkgfHwgZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBrZXksIHtcblx0XHRcdGVtcHR5OiBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKS5hZGQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFsgdHlwZSArIFwicXVldWVcIiwga2V5IF0gKTtcblx0XHRcdH0gKVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgc2V0dGVyID0gMjtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRkYXRhID0gdHlwZTtcblx0XHRcdHR5cGUgPSBcImZ4XCI7XG5cdFx0XHRzZXR0ZXItLTtcblx0XHR9XG5cblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPCBzZXR0ZXIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnF1ZXVlKCB0aGlzWyAwIF0sIHR5cGUgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMgOlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBkYXRhICk7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIGEgaG9va3MgZm9yIHRoaXMgcXVldWVcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgJiYgcXVldWVbIDAgXSAhPT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHR9LFxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0fSApO1xuXHR9LFxuXHRjbGVhclF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdH0sXG5cblx0Ly8gR2V0IGEgcHJvbWlzZSByZXNvbHZlZCB3aGVuIHF1ZXVlcyBvZiBhIGNlcnRhaW4gdHlwZVxuXHQvLyBhcmUgZW1wdGllZCAoZnggaXMgdGhlIHR5cGUgYnkgZGVmYXVsdClcblx0cHJvbWlzZTogZnVuY3Rpb24oIHR5cGUsIG9iaiApIHtcblx0XHR2YXIgdG1wLFxuXHRcdFx0Y291bnQgPSAxLFxuXHRcdFx0ZGVmZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGVsZW1lbnRzID0gdGhpcyxcblx0XHRcdGkgPSB0aGlzLmxlbmd0aCxcblx0XHRcdHJlc29sdmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhKCAtLWNvdW50ICkgKSB7XG5cdFx0XHRcdFx0ZGVmZXIucmVzb2x2ZVdpdGgoIGVsZW1lbnRzLCBbIGVsZW1lbnRzIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRvYmogPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0bXAgPSBkYXRhUHJpdi5nZXQoIGVsZW1lbnRzWyBpIF0sIHR5cGUgKyBcInF1ZXVlSG9va3NcIiApO1xuXHRcdFx0aWYgKCB0bXAgJiYgdG1wLmVtcHR5ICkge1xuXHRcdFx0XHRjb3VudCsrO1xuXHRcdFx0XHR0bXAuZW1wdHkuYWRkKCByZXNvbHZlICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJlc29sdmUoKTtcblx0XHRyZXR1cm4gZGVmZXIucHJvbWlzZSggb2JqICk7XG5cdH1cbn0gKTtcbnZhciBwbnVtID0gKCAvWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpLyApLnNvdXJjZTtcblxudmFyIHJjc3NOdW0gPSBuZXcgUmVnRXhwKCBcIl4oPzooWystXSk9fCkoXCIgKyBwbnVtICsgXCIpKFthLXolXSopJFwiLCBcImlcIiApO1xuXG5cbnZhciBjc3NFeHBhbmQgPSBbIFwiVG9wXCIsIFwiUmlnaHRcIiwgXCJCb3R0b21cIiwgXCJMZWZ0XCIgXTtcblxudmFyIGRvY3VtZW50RWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuXG5cblx0dmFyIGlzQXR0YWNoZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXHRcdH0sXG5cdFx0Y29tcG9zZWQgPSB7IGNvbXBvc2VkOiB0cnVlIH07XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExKywgRWRnZSAxMiAtIDE4KywgaU9TIDEwLjAgLSAxMC4yIG9ubHlcblx0Ly8gQ2hlY2sgYXR0YWNobWVudCBhY3Jvc3Mgc2hhZG93IERPTSBib3VuZGFyaWVzIHdoZW4gcG9zc2libGUgKGdoLTM1MDQpXG5cdC8vIFN1cHBvcnQ6IGlPUyAxMC4wLTEwLjIgb25seVxuXHQvLyBFYXJseSBpT1MgMTAgdmVyc2lvbnMgc3VwcG9ydCBgYXR0YWNoU2hhZG93YCBidXQgbm90IGBnZXRSb290Tm9kZWAsXG5cdC8vIGxlYWRpbmcgdG8gZXJyb3JzLiBXZSBuZWVkIHRvIGNoZWNrIGZvciBgZ2V0Um9vdE5vZGVgLlxuXHRpZiAoIGRvY3VtZW50RWxlbWVudC5nZXRSb290Tm9kZSApIHtcblx0XHRpc0F0dGFjaGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSB8fFxuXHRcdFx0XHRlbGVtLmdldFJvb3ROb2RlKCBjb21wb3NlZCApID09PSBlbGVtLm93bmVyRG9jdW1lbnQ7XG5cdFx0fTtcblx0fVxudmFyIGlzSGlkZGVuV2l0aGluVHJlZSA9IGZ1bmN0aW9uKCBlbGVtLCBlbCApIHtcblxuXHRcdC8vIGlzSGlkZGVuV2l0aGluVHJlZSBtaWdodCBiZSBjYWxsZWQgZnJvbSBqUXVlcnkjZmlsdGVyIGZ1bmN0aW9uO1xuXHRcdC8vIGluIHRoYXQgY2FzZSwgZWxlbWVudCB3aWxsIGJlIHNlY29uZCBhcmd1bWVudFxuXHRcdGVsZW0gPSBlbCB8fCBlbGVtO1xuXG5cdFx0Ly8gSW5saW5lIHN0eWxlIHRydW1wcyBhbGxcblx0XHRyZXR1cm4gZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIm5vbmVcIiB8fFxuXHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmXG5cblx0XHRcdC8vIE90aGVyd2lzZSwgY2hlY2sgY29tcHV0ZWQgc3R5bGVcblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MyAtIDQ1XG5cdFx0XHQvLyBEaXNjb25uZWN0ZWQgZWxlbWVudHMgY2FuIGhhdmUgY29tcHV0ZWQgZGlzcGxheTogbm9uZSwgc28gZmlyc3QgY29uZmlybSB0aGF0IGVsZW0gaXNcblx0XHRcdC8vIGluIHRoZSBkb2N1bWVudC5cblx0XHRcdGlzQXR0YWNoZWQoIGVsZW0gKSAmJlxuXG5cdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApID09PSBcIm5vbmVcIjtcblx0fTtcblxuXG5cbmZ1bmN0aW9uIGFkanVzdENTUyggZWxlbSwgcHJvcCwgdmFsdWVQYXJ0cywgdHdlZW4gKSB7XG5cdHZhciBhZGp1c3RlZCwgc2NhbGUsXG5cdFx0bWF4SXRlcmF0aW9ucyA9IDIwLFxuXHRcdGN1cnJlbnRWYWx1ZSA9IHR3ZWVuID9cblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gdHdlZW4uY3VyKCk7XG5cdFx0XHR9IDpcblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5LmNzcyggZWxlbSwgcHJvcCwgXCJcIiApO1xuXHRcdFx0fSxcblx0XHRpbml0aWFsID0gY3VycmVudFZhbHVlKCksXG5cdFx0dW5pdCA9IHZhbHVlUGFydHMgJiYgdmFsdWVQYXJ0c1sgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApLFxuXG5cdFx0Ly8gU3RhcnRpbmcgdmFsdWUgY29tcHV0YXRpb24gaXMgcmVxdWlyZWQgZm9yIHBvdGVudGlhbCB1bml0IG1pc21hdGNoZXNcblx0XHRpbml0aWFsSW5Vbml0ID0gZWxlbS5ub2RlVHlwZSAmJlxuXHRcdFx0KCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gfHwgdW5pdCAhPT0gXCJweFwiICYmICtpbml0aWFsICkgJiZcblx0XHRcdHJjc3NOdW0uZXhlYyggalF1ZXJ5LmNzcyggZWxlbSwgcHJvcCApICk7XG5cblx0aWYgKCBpbml0aWFsSW5Vbml0ICYmIGluaXRpYWxJblVuaXRbIDMgXSAhPT0gdW5pdCApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD01NFxuXHRcdC8vIEhhbHZlIHRoZSBpdGVyYXRpb24gdGFyZ2V0IHZhbHVlIHRvIHByZXZlbnQgaW50ZXJmZXJlbmNlIGZyb20gQ1NTIHVwcGVyIGJvdW5kcyAoZ2gtMjE0NClcblx0XHRpbml0aWFsID0gaW5pdGlhbCAvIDI7XG5cblx0XHQvLyBUcnVzdCB1bml0cyByZXBvcnRlZCBieSBqUXVlcnkuY3NzXG5cdFx0dW5pdCA9IHVuaXQgfHwgaW5pdGlhbEluVW5pdFsgMyBdO1xuXG5cdFx0Ly8gSXRlcmF0aXZlbHkgYXBwcm94aW1hdGUgZnJvbSBhIG5vbnplcm8gc3RhcnRpbmcgcG9pbnRcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWwgfHwgMTtcblxuXHRcdHdoaWxlICggbWF4SXRlcmF0aW9ucy0tICkge1xuXG5cdFx0XHQvLyBFdmFsdWF0ZSBhbmQgdXBkYXRlIG91ciBiZXN0IGd1ZXNzIChkb3VibGluZyBndWVzc2VzIHRoYXQgemVybyBvdXQpLlxuXHRcdFx0Ly8gRmluaXNoIGlmIHRoZSBzY2FsZSBlcXVhbHMgb3IgY3Jvc3NlcyAxIChtYWtpbmcgdGhlIG9sZCpuZXcgcHJvZHVjdCBub24tcG9zaXRpdmUpLlxuXHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBpbml0aWFsSW5Vbml0ICsgdW5pdCApO1xuXHRcdFx0aWYgKCAoIDEgLSBzY2FsZSApICogKCAxIC0gKCBzY2FsZSA9IGN1cnJlbnRWYWx1ZSgpIC8gaW5pdGlhbCB8fCAwLjUgKSApIDw9IDAgKSB7XG5cdFx0XHRcdG1heEl0ZXJhdGlvbnMgPSAwO1xuXHRcdFx0fVxuXHRcdFx0aW5pdGlhbEluVW5pdCA9IGluaXRpYWxJblVuaXQgLyBzY2FsZTtcblxuXHRcdH1cblxuXHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0ICogMjtcblx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgd2UgdXBkYXRlIHRoZSB0d2VlbiBwcm9wZXJ0aWVzIGxhdGVyIG9uXG5cdFx0dmFsdWVQYXJ0cyA9IHZhbHVlUGFydHMgfHwgW107XG5cdH1cblxuXHRpZiAoIHZhbHVlUGFydHMgKSB7XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsSW5Vbml0IHx8ICtpbml0aWFsIHx8IDA7XG5cblx0XHQvLyBBcHBseSByZWxhdGl2ZSBvZmZzZXQgKCs9Ly09KSBpZiBzcGVjaWZpZWRcblx0XHRhZGp1c3RlZCA9IHZhbHVlUGFydHNbIDEgXSA/XG5cdFx0XHRpbml0aWFsSW5Vbml0ICsgKCB2YWx1ZVBhcnRzWyAxIF0gKyAxICkgKiB2YWx1ZVBhcnRzWyAyIF0gOlxuXHRcdFx0K3ZhbHVlUGFydHNbIDIgXTtcblx0XHRpZiAoIHR3ZWVuICkge1xuXHRcdFx0dHdlZW4udW5pdCA9IHVuaXQ7XG5cdFx0XHR0d2Vlbi5zdGFydCA9IGluaXRpYWxJblVuaXQ7XG5cdFx0XHR0d2Vlbi5lbmQgPSBhZGp1c3RlZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGFkanVzdGVkO1xufVxuXG5cbnZhciBkZWZhdWx0RGlzcGxheU1hcCA9IHt9O1xuXG5mdW5jdGlvbiBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApIHtcblx0dmFyIHRlbXAsXG5cdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50LFxuXHRcdG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZSxcblx0XHRkaXNwbGF5ID0gZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF07XG5cblx0aWYgKCBkaXNwbGF5ICkge1xuXHRcdHJldHVybiBkaXNwbGF5O1xuXHR9XG5cblx0dGVtcCA9IGRvYy5ib2R5LmFwcGVuZENoaWxkKCBkb2MuY3JlYXRlRWxlbWVudCggbm9kZU5hbWUgKSApO1xuXHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggdGVtcCwgXCJkaXNwbGF5XCIgKTtcblxuXHR0ZW1wLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHRlbXAgKTtcblxuXHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdGRpc3BsYXkgPSBcImJsb2NrXCI7XG5cdH1cblx0ZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF0gPSBkaXNwbGF5O1xuXG5cdHJldHVybiBkaXNwbGF5O1xufVxuXG5mdW5jdGlvbiBzaG93SGlkZSggZWxlbWVudHMsIHNob3cgKSB7XG5cdHZhciBkaXNwbGF5LCBlbGVtLFxuXHRcdHZhbHVlcyA9IFtdLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBlbGVtZW50cy5sZW5ndGg7XG5cblx0Ly8gRGV0ZXJtaW5lIG5ldyBkaXNwbGF5IHZhbHVlIGZvciBlbGVtZW50cyB0aGF0IG5lZWQgdG8gY2hhbmdlXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1lbnRzWyBpbmRleCBdO1xuXHRcdGlmICggIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRkaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5O1xuXHRcdGlmICggc2hvdyApIHtcblxuXHRcdFx0Ly8gU2luY2Ugd2UgZm9yY2UgdmlzaWJpbGl0eSB1cG9uIGNhc2NhZGUtaGlkZGVuIGVsZW1lbnRzLCBhbiBpbW1lZGlhdGUgKGFuZCBzbG93KVxuXHRcdFx0Ly8gY2hlY2sgaXMgcmVxdWlyZWQgaW4gdGhpcyBmaXJzdCBsb29wIHVubGVzcyB3ZSBoYXZlIGEgbm9uZW1wdHkgZGlzcGxheSB2YWx1ZSAoZWl0aGVyXG5cdFx0XHQvLyBpbmxpbmUgb3IgYWJvdXQtdG8tYmUtcmVzdG9yZWQpXG5cdFx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICkgfHwgbnVsbDtcblx0XHRcdFx0aWYgKCAhdmFsdWVzWyBpbmRleCBdICkge1xuXHRcdFx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICggZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoIGRpc3BsYXkgIT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBcIm5vbmVcIjtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB3aGF0IHdlJ3JlIG92ZXJ3cml0aW5nXG5cdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJkaXNwbGF5XCIsIGRpc3BsYXkgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBTZXQgdGhlIGRpc3BsYXkgb2YgdGhlIGVsZW1lbnRzIGluIGEgc2Vjb25kIGxvb3AgdG8gYXZvaWQgY29uc3RhbnQgcmVmbG93XG5cdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0aWYgKCB2YWx1ZXNbIGluZGV4IF0gIT0gbnVsbCApIHtcblx0XHRcdGVsZW1lbnRzWyBpbmRleCBdLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZXNbIGluZGV4IF07XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRzO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNob3c6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcywgdHJ1ZSApO1xuXHR9LFxuXHRoaWRlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMgKTtcblx0fSxcblx0dG9nZ2xlOiBmdW5jdGlvbiggc3RhdGUgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlID8gdGhpcy5zaG93KCkgOiB0aGlzLmhpZGUoKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggaXNIaWRkZW5XaXRoaW5UcmVlKCB0aGlzICkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnNob3coKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmhpZGUoKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcbnZhciByY2hlY2thYmxlVHlwZSA9ICggL14oPzpjaGVja2JveHxyYWRpbykkL2kgKTtcblxudmFyIHJ0YWdOYW1lID0gKCAvPChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSopL2kgKTtcblxudmFyIHJzY3JpcHRUeXBlID0gKCAvXiR8Xm1vZHVsZSR8XFwvKD86amF2YXxlY21hKXNjcmlwdC9pICk7XG5cblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0ZGl2ID0gZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApLFxuXHRcdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seVxuXHQvLyBDaGVjayBzdGF0ZSBsb3N0IGlmIHRoZSBuYW1lIGlzIHNldCAodHJhYy0xMTIxNylcblx0Ly8gU3VwcG9ydDogV2luZG93cyBXZWIgQXBwcyAoV1dBKVxuXHQvLyBgbmFtZWAgYW5kIGB0eXBlYCBtdXN0IHVzZSAuc2V0QXR0cmlidXRlIGZvciBXV0EgKHRyYWMtMTQ5MDEpXG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwicmFkaW9cIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwiY2hlY2tlZFwiLCBcImNoZWNrZWRcIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcInRcIiApO1xuXG5cdGRpdi5hcHBlbmRDaGlsZCggaW5wdXQgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4xIG9ubHlcblx0Ly8gT2xkZXIgV2ViS2l0IGRvZXNuJ3QgY2xvbmUgY2hlY2tlZCBzdGF0ZSBjb3JyZWN0bHkgaW4gZnJhZ21lbnRzXG5cdHN1cHBvcnQuY2hlY2tDbG9uZSA9IGRpdi5jbG9uZU5vZGUoIHRydWUgKS5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuY2hlY2tlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTWFrZSBzdXJlIHRleHRhcmVhIChhbmQgY2hlY2tib3gpIGRlZmF1bHRWYWx1ZSBpcyBwcm9wZXJseSBjbG9uZWRcblx0ZGl2LmlubmVySFRNTCA9IFwiPHRleHRhcmVhPng8L3RleHRhcmVhPlwiO1xuXHRzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkID0gISFkaXYuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZTtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHQvLyBJRSA8PTkgcmVwbGFjZXMgPG9wdGlvbj4gdGFncyB3aXRoIHRoZWlyIGNvbnRlbnRzIHdoZW4gaW5zZXJ0ZWQgb3V0c2lkZSBvZlxuXHQvLyB0aGUgc2VsZWN0IGVsZW1lbnQuXG5cdGRpdi5pbm5lckhUTUwgPSBcIjxvcHRpb24+PC9vcHRpb24+XCI7XG5cdHN1cHBvcnQub3B0aW9uID0gISFkaXYubGFzdENoaWxkO1xufSApKCk7XG5cblxuLy8gV2UgaGF2ZSB0byBjbG9zZSB0aGVzZSB0YWdzIHRvIHN1cHBvcnQgWEhUTUwgKHRyYWMtMTMyMDApXG52YXIgd3JhcE1hcCA9IHtcblxuXHQvLyBYSFRNTCBwYXJzZXJzIGRvIG5vdCBtYWdpY2FsbHkgaW5zZXJ0IGVsZW1lbnRzIGluIHRoZVxuXHQvLyBzYW1lIHdheSB0aGF0IHRhZyBzb3VwIHBhcnNlcnMgZG8uIFNvIHdlIGNhbm5vdCBzaG9ydGVuXG5cdC8vIHRoaXMgYnkgb21pdHRpbmcgPHRib2R5PiBvciBvdGhlciByZXF1aXJlZCBlbGVtZW50cy5cblx0dGhlYWQ6IFsgMSwgXCI8dGFibGU+XCIsIFwiPC90YWJsZT5cIiBdLFxuXHRjb2w6IFsgMiwgXCI8dGFibGU+PGNvbGdyb3VwPlwiLCBcIjwvY29sZ3JvdXA+PC90YWJsZT5cIiBdLFxuXHR0cjogWyAyLCBcIjx0YWJsZT48dGJvZHk+XCIsIFwiPC90Ym9keT48L3RhYmxlPlwiIF0sXG5cdHRkOiBbIDMsIFwiPHRhYmxlPjx0Ym9keT48dHI+XCIsIFwiPC90cj48L3Rib2R5PjwvdGFibGU+XCIgXSxcblxuXHRfZGVmYXVsdDogWyAwLCBcIlwiLCBcIlwiIF1cbn07XG5cbndyYXBNYXAudGJvZHkgPSB3cmFwTWFwLnRmb290ID0gd3JhcE1hcC5jb2xncm91cCA9IHdyYXBNYXAuY2FwdGlvbiA9IHdyYXBNYXAudGhlYWQ7XG53cmFwTWFwLnRoID0gd3JhcE1hcC50ZDtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbmlmICggIXN1cHBvcnQub3B0aW9uICkge1xuXHR3cmFwTWFwLm9wdGdyb3VwID0gd3JhcE1hcC5vcHRpb24gPSBbIDEsIFwiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPlwiLCBcIjwvc2VsZWN0PlwiIF07XG59XG5cblxuZnVuY3Rpb24gZ2V0QWxsKCBjb250ZXh0LCB0YWcgKSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHQvLyBVc2UgdHlwZW9mIHRvIGF2b2lkIHplcm8tYXJndW1lbnQgbWV0aG9kIGludm9jYXRpb24gb24gaG9zdCBvYmplY3RzICh0cmFjLTE1MTUxKVxuXHR2YXIgcmV0O1xuXG5cdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIGlmICggdHlwZW9mIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSB7XG5cdFx0cmV0ID0gW107XG5cdH1cblxuXHRpZiAoIHRhZyA9PT0gdW5kZWZpbmVkIHx8IHRhZyAmJiBub2RlTmFtZSggY29udGV4dCwgdGFnICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5tZXJnZSggWyBjb250ZXh0IF0sIHJldCApO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn1cblxuXG4vLyBNYXJrIHNjcmlwdHMgYXMgaGF2aW5nIGFscmVhZHkgYmVlbiBldmFsdWF0ZWRcbmZ1bmN0aW9uIHNldEdsb2JhbEV2YWwoIGVsZW1zLCByZWZFbGVtZW50cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGRhdGFQcml2LnNldChcblx0XHRcdGVsZW1zWyBpIF0sXG5cdFx0XHRcImdsb2JhbEV2YWxcIixcblx0XHRcdCFyZWZFbGVtZW50cyB8fCBkYXRhUHJpdi5nZXQoIHJlZkVsZW1lbnRzWyBpIF0sIFwiZ2xvYmFsRXZhbFwiIClcblx0XHQpO1xuXHR9XG59XG5cblxudmFyIHJodG1sID0gLzx8JiM/XFx3KzsvO1xuXG5mdW5jdGlvbiBidWlsZEZyYWdtZW50KCBlbGVtcywgY29udGV4dCwgc2NyaXB0cywgc2VsZWN0aW9uLCBpZ25vcmVkICkge1xuXHR2YXIgZWxlbSwgdG1wLCB0YWcsIHdyYXAsIGF0dGFjaGVkLCBqLFxuXHRcdGZyYWdtZW50ID0gY29udGV4dC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0bm9kZXMgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRlbGVtID0gZWxlbXNbIGkgXTtcblxuXHRcdGlmICggZWxlbSB8fCBlbGVtID09PSAwICkge1xuXG5cdFx0XHQvLyBBZGQgbm9kZXMgZGlyZWN0bHlcblx0XHRcdGlmICggdG9UeXBlKCBlbGVtICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgZWxlbS5ub2RlVHlwZSA/IFsgZWxlbSBdIDogZWxlbSApO1xuXG5cdFx0XHQvLyBDb252ZXJ0IG5vbi1odG1sIGludG8gYSB0ZXh0IG5vZGVcblx0XHRcdH0gZWxzZSBpZiAoICFyaHRtbC50ZXN0KCBlbGVtICkgKSB7XG5cdFx0XHRcdG5vZGVzLnB1c2goIGNvbnRleHQuY3JlYXRlVGV4dE5vZGUoIGVsZW0gKSApO1xuXG5cdFx0XHQvLyBDb252ZXJ0IGh0bWwgaW50byBET00gbm9kZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRtcCA9IHRtcCB8fCBmcmFnbWVudC5hcHBlbmRDaGlsZCggY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKTtcblxuXHRcdFx0XHQvLyBEZXNlcmlhbGl6ZSBhIHN0YW5kYXJkIHJlcHJlc2VudGF0aW9uXG5cdFx0XHRcdHRhZyA9ICggcnRhZ05hbWUuZXhlYyggZWxlbSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHR3cmFwID0gd3JhcE1hcFsgdGFnIF0gfHwgd3JhcE1hcC5fZGVmYXVsdDtcblx0XHRcdFx0dG1wLmlubmVySFRNTCA9IHdyYXBbIDEgXSArIGpRdWVyeS5odG1sUHJlZmlsdGVyKCBlbGVtICkgKyB3cmFwWyAyIF07XG5cblx0XHRcdFx0Ly8gRGVzY2VuZCB0aHJvdWdoIHdyYXBwZXJzIHRvIHRoZSByaWdodCBjb250ZW50XG5cdFx0XHRcdGogPSB3cmFwWyAwIF07XG5cdFx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRcdHRtcCA9IHRtcC5sYXN0Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCB0bXAuY2hpbGROb2RlcyApO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHRoZSB0b3AtbGV2ZWwgY29udGFpbmVyXG5cdFx0XHRcdHRtcCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIHRoZSBjcmVhdGVkIG5vZGVzIGFyZSBvcnBoYW5lZCAodHJhYy0xMjM5Milcblx0XHRcdFx0dG1wLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZW1vdmUgd3JhcHBlciBmcm9tIGZyYWdtZW50XG5cdGZyYWdtZW50LnRleHRDb250ZW50ID0gXCJcIjtcblxuXHRpID0gMDtcblx0d2hpbGUgKCAoIGVsZW0gPSBub2Rlc1sgaSsrIF0gKSApIHtcblxuXHRcdC8vIFNraXAgZWxlbWVudHMgYWxyZWFkeSBpbiB0aGUgY29udGV4dCBjb2xsZWN0aW9uICh0cmFjLTQwODcpXG5cdFx0aWYgKCBzZWxlY3Rpb24gJiYgalF1ZXJ5LmluQXJyYXkoIGVsZW0sIHNlbGVjdGlvbiApID4gLTEgKSB7XG5cdFx0XHRpZiAoIGlnbm9yZWQgKSB7XG5cdFx0XHRcdGlnbm9yZWQucHVzaCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0YXR0YWNoZWQgPSBpc0F0dGFjaGVkKCBlbGVtICk7XG5cblx0XHQvLyBBcHBlbmQgdG8gZnJhZ21lbnRcblx0XHR0bXAgPSBnZXRBbGwoIGZyYWdtZW50LmFwcGVuZENoaWxkKCBlbGVtICksIFwic2NyaXB0XCIgKTtcblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRpZiAoIGF0dGFjaGVkICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggdG1wICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FwdHVyZSBleGVjdXRhYmxlc1xuXHRcdGlmICggc2NyaXB0cyApIHtcblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0bXBbIGorKyBdICkgKSB7XG5cdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggZWxlbS50eXBlIHx8IFwiXCIgKSApIHtcblx0XHRcdFx0XHRzY3JpcHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBmcmFnbWVudDtcbn1cblxuXG52YXIgcnR5cGVuYW1lc3BhY2UgPSAvXihbXi5dKikoPzpcXC4oLispfCkvO1xuXG5mdW5jdGlvbiByZXR1cm5UcnVlKCkge1xuXHRyZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gcmV0dXJuRmFsc2UoKSB7XG5cdHJldHVybiBmYWxzZTtcbn1cblxuLy8gU3VwcG9ydDogSUUgPD05IC0gMTErXG4vLyBmb2N1cygpIGFuZCBibHVyKCkgYXJlIGFzeW5jaHJvbm91cywgZXhjZXB0IHdoZW4gdGhleSBhcmUgbm8tb3AuXG4vLyBTbyBleHBlY3QgZm9jdXMgdG8gYmUgc3luY2hyb25vdXMgd2hlbiB0aGUgZWxlbWVudCBpcyBhbHJlYWR5IGFjdGl2ZSxcbi8vIGFuZCBibHVyIHRvIGJlIHN5bmNocm9ub3VzIHdoZW4gdGhlIGVsZW1lbnQgaXMgbm90IGFscmVhZHkgYWN0aXZlLlxuLy8gKGZvY3VzIGFuZCBibHVyIGFyZSBhbHdheXMgc3luY2hyb25vdXMgaW4gb3RoZXIgc3VwcG9ydGVkIGJyb3dzZXJzLFxuLy8gdGhpcyBqdXN0IGRlZmluZXMgd2hlbiB3ZSBjYW4gY291bnQgb24gaXQpLlxuZnVuY3Rpb24gZXhwZWN0U3luYyggZWxlbSwgdHlwZSApIHtcblx0cmV0dXJuICggZWxlbSA9PT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSApID09PSAoIHR5cGUgPT09IFwiZm9jdXNcIiApO1xufVxuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gQWNjZXNzaW5nIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgY2FuIHRocm93IHVuZXhwZWN0ZWRseVxuLy8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEzMzkzXG5mdW5jdGlvbiBzYWZlQWN0aXZlRWxlbWVudCgpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblx0fSBjYXRjaCAoIGVyciApIHsgfVxufVxuXG5mdW5jdGlvbiBvbiggZWxlbSwgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgb25lICkge1xuXHR2YXIgb3JpZ0ZuLCB0eXBlO1xuXG5cdC8vIFR5cGVzIGNhbiBiZSBhIG1hcCBvZiB0eXBlcy9oYW5kbGVyc1xuXHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vICggdHlwZXMtT2JqZWN0LCBzZWxlY3RvciwgZGF0YSApXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtT2JqZWN0LCBkYXRhIClcblx0XHRcdGRhdGEgPSBkYXRhIHx8IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRvbiggZWxlbSwgdHlwZSwgc2VsZWN0b3IsIGRhdGEsIHR5cGVzWyB0eXBlIF0sIG9uZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggZGF0YSA9PSBudWxsICYmIGZuID09IG51bGwgKSB7XG5cblx0XHQvLyAoIHR5cGVzLCBmbiApXG5cdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRkYXRhID0gc2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdH0gZWxzZSBpZiAoIGZuID09IG51bGwgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMsIHNlbGVjdG9yLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vICggdHlwZXMsIGRhdGEsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHR9IGVsc2UgaWYgKCAhZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIG9uZSA9PT0gMSApIHtcblx0XHRvcmlnRm4gPSBmbjtcblx0XHRmbiA9IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0Ly8gQ2FuIHVzZSBhbiBlbXB0eSBzZXQsIHNpbmNlIGV2ZW50IGNvbnRhaW5zIHRoZSBpbmZvXG5cdFx0XHRqUXVlcnkoKS5vZmYoIGV2ZW50ICk7XG5cdFx0XHRyZXR1cm4gb3JpZ0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9O1xuXG5cdFx0Ly8gVXNlIHNhbWUgZ3VpZCBzbyBjYWxsZXIgY2FuIHJlbW92ZSB1c2luZyBvcmlnRm5cblx0XHRmbi5ndWlkID0gb3JpZ0ZuLmd1aWQgfHwgKCBvcmlnRm4uZ3VpZCA9IGpRdWVyeS5ndWlkKysgKTtcblx0fVxuXHRyZXR1cm4gZWxlbS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCB0eXBlcywgZm4sIGRhdGEsIHNlbGVjdG9yICk7XG5cdH0gKTtcbn1cblxuLypcbiAqIEhlbHBlciBmdW5jdGlvbnMgZm9yIG1hbmFnaW5nIGV2ZW50cyAtLSBub3QgcGFydCBvZiB0aGUgcHVibGljIGludGVyZmFjZS5cbiAqIFByb3BzIHRvIERlYW4gRWR3YXJkcycgYWRkRXZlbnQgbGlicmFyeSBmb3IgbWFueSBvZiB0aGUgaWRlYXMuXG4gKi9cbmpRdWVyeS5ldmVudCA9IHtcblxuXHRnbG9iYWw6IHt9LFxuXG5cdGFkZDogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBkYXRhLCBzZWxlY3RvciApIHtcblxuXHRcdHZhciBoYW5kbGVPYmpJbiwgZXZlbnRIYW5kbGUsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdC8vIE9ubHkgYXR0YWNoIGV2ZW50cyB0byBvYmplY3RzIHRoYXQgYWNjZXB0IGRhdGFcblx0XHRpZiAoICFhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGFuIG9iamVjdCBvZiBjdXN0b20gZGF0YSBpbiBsaWV1IG9mIHRoZSBoYW5kbGVyXG5cdFx0aWYgKCBoYW5kbGVyLmhhbmRsZXIgKSB7XG5cdFx0XHRoYW5kbGVPYmpJbiA9IGhhbmRsZXI7XG5cdFx0XHRoYW5kbGVyID0gaGFuZGxlT2JqSW4uaGFuZGxlcjtcblx0XHRcdHNlbGVjdG9yID0gaGFuZGxlT2JqSW4uc2VsZWN0b3I7XG5cdFx0fVxuXG5cdFx0Ly8gRW5zdXJlIHRoYXQgaW52YWxpZCBzZWxlY3RvcnMgdGhyb3cgZXhjZXB0aW9ucyBhdCBhdHRhY2ggdGltZVxuXHRcdC8vIEV2YWx1YXRlIGFnYWluc3QgZG9jdW1lbnRFbGVtZW50IGluIGNhc2UgZWxlbSBpcyBhIG5vbi1lbGVtZW50IG5vZGUgKGUuZy4sIGRvY3VtZW50KVxuXHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGRvY3VtZW50RWxlbWVudCwgc2VsZWN0b3IgKTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB0aGUgaGFuZGxlciBoYXMgYSB1bmlxdWUgSUQsIHVzZWQgdG8gZmluZC9yZW1vdmUgaXQgbGF0ZXJcblx0XHRpZiAoICFoYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRoYW5kbGVyLmd1aWQgPSBqUXVlcnkuZ3VpZCsrO1xuXHRcdH1cblxuXHRcdC8vIEluaXQgdGhlIGVsZW1lbnQncyBldmVudCBzdHJ1Y3R1cmUgYW5kIG1haW4gaGFuZGxlciwgaWYgdGhpcyBpcyB0aGUgZmlyc3Rcblx0XHRpZiAoICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0ZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzID0gT2JqZWN0LmNyZWF0ZSggbnVsbCApO1xuXHRcdH1cblx0XHRpZiAoICEoIGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlICkgKSB7XG5cdFx0XHRldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSA9IGZ1bmN0aW9uKCBlICkge1xuXG5cdFx0XHRcdC8vIERpc2NhcmQgdGhlIHNlY29uZCBldmVudCBvZiBhIGpRdWVyeS5ldmVudC50cmlnZ2VyKCkgYW5kXG5cdFx0XHRcdC8vIHdoZW4gYW4gZXZlbnQgaXMgY2FsbGVkIGFmdGVyIGEgcGFnZSBoYXMgdW5sb2FkZWRcblx0XHRcdFx0cmV0dXJuIHR5cGVvZiBqUXVlcnkgIT09IFwidW5kZWZpbmVkXCIgJiYgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCAhPT0gZS50eXBlID9cblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuZGlzcGF0Y2guYXBwbHkoIGVsZW0sIGFyZ3VtZW50cyApIDogdW5kZWZpbmVkO1xuXHRcdFx0fTtcblx0XHR9XG5cblx0XHQvLyBIYW5kbGUgbXVsdGlwbGUgZXZlbnRzIHNlcGFyYXRlZCBieSBhIHNwYWNlXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFRoZXJlICptdXN0KiBiZSBhIHR5cGUsIG5vIGF0dGFjaGluZyBuYW1lc3BhY2Utb25seSBoYW5kbGVyc1xuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGV2ZW50IGNoYW5nZXMgaXRzIHR5cGUsIHVzZSB0aGUgc3BlY2lhbCBldmVudCBoYW5kbGVycyBmb3IgdGhlIGNoYW5nZWQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIElmIHNlbGVjdG9yIGRlZmluZWQsIGRldGVybWluZSBzcGVjaWFsIGV2ZW50IGFwaSB0eXBlLCBvdGhlcndpc2UgZ2l2ZW4gdHlwZVxuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBVcGRhdGUgc3BlY2lhbCBiYXNlZCBvbiBuZXdseSByZXNldCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gaGFuZGxlT2JqIGlzIHBhc3NlZCB0byBhbGwgZXZlbnQgaGFuZGxlcnNcblx0XHRcdGhhbmRsZU9iaiA9IGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0b3JpZ1R5cGU6IG9yaWdUeXBlLFxuXHRcdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0XHRoYW5kbGVyOiBoYW5kbGVyLFxuXHRcdFx0XHRndWlkOiBoYW5kbGVyLmd1aWQsXG5cdFx0XHRcdHNlbGVjdG9yOiBzZWxlY3Rvcixcblx0XHRcdFx0bmVlZHNDb250ZXh0OiBzZWxlY3RvciAmJiBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSxcblx0XHRcdFx0bmFtZXNwYWNlOiBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiIClcblx0XHRcdH0sIGhhbmRsZU9iakluICk7XG5cblx0XHRcdC8vIEluaXQgdGhlIGV2ZW50IGhhbmRsZXIgcXVldWUgaWYgd2UncmUgdGhlIGZpcnN0XG5cdFx0XHRpZiAoICEoIGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gKSApIHtcblx0XHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSA9IFtdO1xuXHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50ID0gMDtcblxuXHRcdFx0XHQvLyBPbmx5IHVzZSBhZGRFdmVudExpc3RlbmVyIGlmIHRoZSBzcGVjaWFsIGV2ZW50cyBoYW5kbGVyIHJldHVybnMgZmFsc2Vcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC5zZXR1cCB8fFxuXHRcdFx0XHRcdHNwZWNpYWwuc2V0dXAuY2FsbCggZWxlbSwgZGF0YSwgbmFtZXNwYWNlcywgZXZlbnRIYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGVsZW0uYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdFx0XHRcdGVsZW0uYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgZXZlbnRIYW5kbGUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBzcGVjaWFsLmFkZCApIHtcblx0XHRcdFx0c3BlY2lhbC5hZGQuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cblx0XHRcdFx0aWYgKCAhaGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlci5ndWlkID0gaGFuZGxlci5ndWlkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCB0byB0aGUgZWxlbWVudCdzIGhhbmRsZXIgbGlzdCwgZGVsZWdhdGVzIGluIGZyb250XG5cdFx0XHRpZiAoIHNlbGVjdG9yICkge1xuXHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGhhbmRsZXJzLmRlbGVnYXRlQ291bnQrKywgMCwgaGFuZGxlT2JqICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRoYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gS2VlcCB0cmFjayBvZiB3aGljaCBldmVudHMgaGF2ZSBldmVyIGJlZW4gdXNlZCwgZm9yIGV2ZW50IG9wdGltaXphdGlvblxuXHRcdFx0alF1ZXJ5LmV2ZW50Lmdsb2JhbFsgdHlwZSBdID0gdHJ1ZTtcblx0XHR9XG5cblx0fSxcblxuXHQvLyBEZXRhY2ggYW4gZXZlbnQgb3Igc2V0IG9mIGV2ZW50cyBmcm9tIGFuIGVsZW1lbnRcblx0cmVtb3ZlOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIHNlbGVjdG9yLCBtYXBwZWRUeXBlcyApIHtcblxuXHRcdHZhciBqLCBvcmlnQ291bnQsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICkgJiYgZGF0YVByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHRpZiAoICFlbGVtRGF0YSB8fCAhKCBldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBPbmNlIGZvciBlYWNoIHR5cGUubmFtZXNwYWNlIGluIHR5cGVzOyB0eXBlIG1heSBiZSBvbWl0dGVkXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFVuYmluZCBhbGwgZXZlbnRzIChvbiB0aGlzIG5hbWVzcGFjZSwgaWYgcHJvdmlkZWQpIGZvciB0aGUgZWxlbWVudFxuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSArIHR5cGVzWyB0IF0sIGhhbmRsZXIsIHNlbGVjdG9yLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSB8fCBbXTtcblx0XHRcdHRtcCA9IHRtcFsgMiBdICYmXG5cdFx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApO1xuXG5cdFx0XHQvLyBSZW1vdmUgbWF0Y2hpbmcgZXZlbnRzXG5cdFx0XHRvcmlnQ291bnQgPSBqID0gaGFuZGxlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBqIF07XG5cblx0XHRcdFx0aWYgKCAoIG1hcHBlZFR5cGVzIHx8IG9yaWdUeXBlID09PSBoYW5kbGVPYmoub3JpZ1R5cGUgKSAmJlxuXHRcdFx0XHRcdCggIWhhbmRsZXIgfHwgaGFuZGxlci5ndWlkID09PSBoYW5kbGVPYmouZ3VpZCApICYmXG5cdFx0XHRcdFx0KCAhdG1wIHx8IHRtcC50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSAmJlxuXHRcdFx0XHRcdCggIXNlbGVjdG9yIHx8IHNlbGVjdG9yID09PSBoYW5kbGVPYmouc2VsZWN0b3IgfHxcblx0XHRcdFx0XHRcdHNlbGVjdG9yID09PSBcIioqXCIgJiYgaGFuZGxlT2JqLnNlbGVjdG9yICkgKSB7XG5cdFx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBqLCAxICk7XG5cblx0XHRcdFx0XHRpZiAoIGhhbmRsZU9iai5zZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBzcGVjaWFsLnJlbW92ZSApIHtcblx0XHRcdFx0XHRcdHNwZWNpYWwucmVtb3ZlLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZW1vdmUgZ2VuZXJpYyBldmVudCBoYW5kbGVyIGlmIHdlIHJlbW92ZWQgc29tZXRoaW5nIGFuZCBubyBtb3JlIGhhbmRsZXJzIGV4aXN0XG5cdFx0XHQvLyAoYXZvaWRzIHBvdGVudGlhbCBmb3IgZW5kbGVzcyByZWN1cnNpb24gZHVyaW5nIHJlbW92YWwgb2Ygc3BlY2lhbCBldmVudCBoYW5kbGVycylcblx0XHRcdGlmICggb3JpZ0NvdW50ICYmICFoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdGlmICggIXNwZWNpYWwudGVhcmRvd24gfHxcblx0XHRcdFx0XHRzcGVjaWFsLnRlYXJkb3duLmNhbGwoIGVsZW0sIG5hbWVzcGFjZXMsIGVsZW1EYXRhLmhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZWxlbURhdGEuaGFuZGxlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRkZWxldGUgZXZlbnRzWyB0eXBlIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIGRhdGEgYW5kIHRoZSBleHBhbmRvIGlmIGl0J3Mgbm8gbG9uZ2VyIHVzZWRcblx0XHRpZiAoIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBldmVudHMgKSApIHtcblx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJoYW5kbGUgZXZlbnRzXCIgKTtcblx0XHR9XG5cdH0sXG5cblx0ZGlzcGF0Y2g6IGZ1bmN0aW9uKCBuYXRpdmVFdmVudCApIHtcblxuXHRcdHZhciBpLCBqLCByZXQsIG1hdGNoZWQsIGhhbmRsZU9iaiwgaGFuZGxlclF1ZXVlLFxuXHRcdFx0YXJncyA9IG5ldyBBcnJheSggYXJndW1lbnRzLmxlbmd0aCApLFxuXG5cdFx0XHQvLyBNYWtlIGEgd3JpdGFibGUgalF1ZXJ5LkV2ZW50IGZyb20gdGhlIG5hdGl2ZSBldmVudCBvYmplY3Rcblx0XHRcdGV2ZW50ID0galF1ZXJ5LmV2ZW50LmZpeCggbmF0aXZlRXZlbnQgKSxcblxuXHRcdFx0aGFuZGxlcnMgPSAoXG5cdFx0XHRcdGRhdGFQcml2LmdldCggdGhpcywgXCJldmVudHNcIiApIHx8IE9iamVjdC5jcmVhdGUoIG51bGwgKVxuXHRcdFx0KVsgZXZlbnQudHlwZSBdIHx8IFtdLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyBldmVudC50eXBlIF0gfHwge307XG5cblx0XHQvLyBVc2UgdGhlIGZpeC1lZCBqUXVlcnkuRXZlbnQgcmF0aGVyIHRoYW4gdGhlIChyZWFkLW9ubHkpIG5hdGl2ZSBldmVudFxuXHRcdGFyZ3NbIDAgXSA9IGV2ZW50O1xuXG5cdFx0Zm9yICggaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRhcmdzWyBpIF0gPSBhcmd1bWVudHNbIGkgXTtcblx0XHR9XG5cblx0XHRldmVudC5kZWxlZ2F0ZVRhcmdldCA9IHRoaXM7XG5cblx0XHQvLyBDYWxsIHRoZSBwcmVEaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGUsIGFuZCBsZXQgaXQgYmFpbCBpZiBkZXNpcmVkXG5cdFx0aWYgKCBzcGVjaWFsLnByZURpc3BhdGNoICYmIHNwZWNpYWwucHJlRGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGhhbmRsZXJzXG5cdFx0aGFuZGxlclF1ZXVlID0galF1ZXJ5LmV2ZW50LmhhbmRsZXJzLmNhbGwoIHRoaXMsIGV2ZW50LCBoYW5kbGVycyApO1xuXG5cdFx0Ly8gUnVuIGRlbGVnYXRlcyBmaXJzdDsgdGhleSBtYXkgd2FudCB0byBzdG9wIHByb3BhZ2F0aW9uIGJlbmVhdGggdXNcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggbWF0Y2hlZCA9IGhhbmRsZXJRdWV1ZVsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBtYXRjaGVkLmVsZW07XG5cblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGhhbmRsZU9iaiA9IG1hdGNoZWQuaGFuZGxlcnNbIGorKyBdICkgJiZcblx0XHRcdFx0IWV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlIGV2ZW50IGlzIG5hbWVzcGFjZWQsIHRoZW4gZWFjaCBoYW5kbGVyIGlzIG9ubHkgaW52b2tlZCBpZiBpdCBpc1xuXHRcdFx0XHQvLyBzcGVjaWFsbHkgdW5pdmVyc2FsIG9yIGl0cyBuYW1lc3BhY2VzIGFyZSBhIHN1cGVyc2V0IG9mIHRoZSBldmVudCdzLlxuXHRcdFx0XHRpZiAoICFldmVudC5ybmFtZXNwYWNlIHx8IGhhbmRsZU9iai5uYW1lc3BhY2UgPT09IGZhbHNlIHx8XG5cdFx0XHRcdFx0ZXZlbnQucm5hbWVzcGFjZS50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSB7XG5cblx0XHRcdFx0XHRldmVudC5oYW5kbGVPYmogPSBoYW5kbGVPYmo7XG5cdFx0XHRcdFx0ZXZlbnQuZGF0YSA9IGhhbmRsZU9iai5kYXRhO1xuXG5cdFx0XHRcdFx0cmV0ID0gKCAoIGpRdWVyeS5ldmVudC5zcGVjaWFsWyBoYW5kbGVPYmoub3JpZ1R5cGUgXSB8fCB7fSApLmhhbmRsZSB8fFxuXHRcdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIgKS5hcHBseSggbWF0Y2hlZC5lbGVtLCBhcmdzICk7XG5cblx0XHRcdFx0XHRpZiAoIHJldCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGV2ZW50LnJlc3VsdCA9IHJldCApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbCB0aGUgcG9zdERpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZVxuXHRcdGlmICggc3BlY2lhbC5wb3N0RGlzcGF0Y2ggKSB7XG5cdFx0XHRzcGVjaWFsLnBvc3REaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0aGFuZGxlcnM6IGZ1bmN0aW9uKCBldmVudCwgaGFuZGxlcnMgKSB7XG5cdFx0dmFyIGksIGhhbmRsZU9iaiwgc2VsLCBtYXRjaGVkSGFuZGxlcnMsIG1hdGNoZWRTZWxlY3RvcnMsXG5cdFx0XHRoYW5kbGVyUXVldWUgPSBbXSxcblx0XHRcdGRlbGVnYXRlQ291bnQgPSBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LFxuXHRcdFx0Y3VyID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0Ly8gRmluZCBkZWxlZ2F0ZSBoYW5kbGVyc1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTlcblx0XHRcdC8vIEJsYWNrLWhvbGUgU1ZHIDx1c2U+IGluc3RhbmNlIHRyZWVzICh0cmFjLTEzMTgwKVxuXHRcdFx0Y3VyLm5vZGVUeXBlICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MlxuXHRcdFx0Ly8gU3VwcHJlc3Mgc3BlYy12aW9sYXRpbmcgY2xpY2tzIGluZGljYXRpbmcgYSBub24tcHJpbWFyeSBwb2ludGVyIGJ1dHRvbiAodHJhYy0zODYxKVxuXHRcdFx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnQtdHlwZS1jbGlja1xuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0Ly8gLi4uYnV0IG5vdCBhcnJvdyBrZXkgXCJjbGlja3NcIiBvZiByYWRpbyBpbnB1dHMsIHdoaWNoIGNhbiBoYXZlIGBidXR0b25gIC0xIChnaC0yMzQzKVxuXHRcdFx0ISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGV2ZW50LmJ1dHRvbiA+PSAxICkgKSB7XG5cblx0XHRcdGZvciAoIDsgY3VyICE9PSB0aGlzOyBjdXIgPSBjdXIucGFyZW50Tm9kZSB8fCB0aGlzICkge1xuXG5cdFx0XHRcdC8vIERvbid0IGNoZWNrIG5vbi1lbGVtZW50cyAodHJhYy0xMzIwOClcblx0XHRcdFx0Ly8gRG9uJ3QgcHJvY2VzcyBjbGlja3Mgb24gZGlzYWJsZWQgZWxlbWVudHMgKHRyYWMtNjkxMSwgdHJhYy04MTY1LCB0cmFjLTExMzgyLCB0cmFjLTExNzY0KVxuXHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA9PT0gMSAmJiAhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgY3VyLmRpc2FibGVkID09PSB0cnVlICkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzID0gW107XG5cdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9ycyA9IHt9O1xuXHRcdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgZGVsZWdhdGVDb3VudDsgaSsrICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGkgXTtcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgY29uZmxpY3Qgd2l0aCBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKHRyYWMtMTMyMDMpXG5cdFx0XHRcdFx0XHRzZWwgPSBoYW5kbGVPYmouc2VsZWN0b3IgKyBcIiBcIjtcblxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9IGhhbmRsZU9iai5uZWVkc0NvbnRleHQgP1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeSggc2VsLCB0aGlzICkuaW5kZXgoIGN1ciApID4gLTEgOlxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kKCBzZWwsIHRoaXMsIG51bGwsIFsgY3VyIF0gKS5sZW5ndGg7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggbWF0Y2hlZEhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IG1hdGNoZWRIYW5kbGVycyB9ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHRoZSByZW1haW5pbmcgKGRpcmVjdGx5LWJvdW5kKSBoYW5kbGVyc1xuXHRcdGN1ciA9IHRoaXM7XG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50IDwgaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogaGFuZGxlcnMuc2xpY2UoIGRlbGVnYXRlQ291bnQgKSB9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGhhbmRsZXJRdWV1ZTtcblx0fSxcblxuXHRhZGRQcm9wOiBmdW5jdGlvbiggbmFtZSwgaG9vayApIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIGpRdWVyeS5FdmVudC5wcm90b3R5cGUsIG5hbWUsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cblx0XHRcdGdldDogaXNGdW5jdGlvbiggaG9vayApID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gaG9vayggdGhpcy5vcmlnaW5hbEV2ZW50ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IDpcblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5vcmlnaW5hbEV2ZW50WyBuYW1lIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLCBuYW1lLCB7XG5cdFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdFx0d3JpdGFibGU6IHRydWUsXG5cdFx0XHRcdFx0dmFsdWU6IHZhbHVlXG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Zml4OiBmdW5jdGlvbiggb3JpZ2luYWxFdmVudCApIHtcblx0XHRyZXR1cm4gb3JpZ2luYWxFdmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRvcmlnaW5hbEV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIG9yaWdpbmFsRXZlbnQgKTtcblx0fSxcblxuXHRzcGVjaWFsOiB7XG5cdFx0bG9hZDoge1xuXG5cdFx0XHQvLyBQcmV2ZW50IHRyaWdnZXJlZCBpbWFnZS5sb2FkIGV2ZW50cyBmcm9tIGJ1YmJsaW5nIHRvIHdpbmRvdy5sb2FkXG5cdFx0XHRub0J1YmJsZTogdHJ1ZVxuXHRcdH0sXG5cdFx0Y2xpY2s6IHtcblxuXHRcdFx0Ly8gVXRpbGl6ZSBuYXRpdmUgZXZlbnQgdG8gZW5zdXJlIGNvcnJlY3Qgc3RhdGUgZm9yIGNoZWNrYWJsZSBpbnB1dHNcblx0XHRcdHNldHVwOiBmdW5jdGlvbiggZGF0YSApIHtcblxuXHRcdFx0XHQvLyBGb3IgbXV0dWFsIGNvbXByZXNzaWJpbGl0eSB3aXRoIF9kZWZhdWx0LCByZXBsYWNlIGB0aGlzYCBhY2Nlc3Mgd2l0aCBhIGxvY2FsIHZhci5cblx0XHRcdFx0Ly8gYHx8IGRhdGFgIGlzIGRlYWQgY29kZSBtZWFudCBvbmx5IHRvIHByZXNlcnZlIHRoZSB2YXJpYWJsZSB0aHJvdWdoIG1pbmlmaWNhdGlvbi5cblx0XHRcdFx0dmFyIGVsID0gdGhpcyB8fCBkYXRhO1xuXG5cdFx0XHRcdC8vIENsYWltIHRoZSBmaXJzdCBoYW5kbGVyXG5cdFx0XHRcdGlmICggcmNoZWNrYWJsZVR5cGUudGVzdCggZWwudHlwZSApICYmXG5cdFx0XHRcdFx0ZWwuY2xpY2sgJiYgbm9kZU5hbWUoIGVsLCBcImlucHV0XCIgKSApIHtcblxuXHRcdFx0XHRcdC8vIGRhdGFQcml2LnNldCggZWwsIFwiY2xpY2tcIiwgLi4uIClcblx0XHRcdFx0XHRsZXZlcmFnZU5hdGl2ZSggZWwsIFwiY2xpY2tcIiwgcmV0dXJuVHJ1ZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmV0dXJuIGZhbHNlIHRvIGFsbG93IG5vcm1hbCBwcm9jZXNzaW5nIGluIHRoZSBjYWxsZXJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSxcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCBkYXRhICkge1xuXG5cdFx0XHRcdC8vIEZvciBtdXR1YWwgY29tcHJlc3NpYmlsaXR5IHdpdGggX2RlZmF1bHQsIHJlcGxhY2UgYHRoaXNgIGFjY2VzcyB3aXRoIGEgbG9jYWwgdmFyLlxuXHRcdFx0XHQvLyBgfHwgZGF0YWAgaXMgZGVhZCBjb2RlIG1lYW50IG9ubHkgdG8gcHJlc2VydmUgdGhlIHZhcmlhYmxlIHRocm91Z2ggbWluaWZpY2F0aW9uLlxuXHRcdFx0XHR2YXIgZWwgPSB0aGlzIHx8IGRhdGE7XG5cblx0XHRcdFx0Ly8gRm9yY2Ugc2V0dXAgYmVmb3JlIHRyaWdnZXJpbmcgYSBjbGlja1xuXHRcdFx0XHRpZiAoIHJjaGVja2FibGVUeXBlLnRlc3QoIGVsLnR5cGUgKSAmJlxuXHRcdFx0XHRcdGVsLmNsaWNrICYmIG5vZGVOYW1lKCBlbCwgXCJpbnB1dFwiICkgKSB7XG5cblx0XHRcdFx0XHRsZXZlcmFnZU5hdGl2ZSggZWwsIFwiY2xpY2tcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmV0dXJuIG5vbi1mYWxzZSB0byBhbGxvdyBub3JtYWwgZXZlbnQtcGF0aCBwcm9wYWdhdGlvblxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH0sXG5cblx0XHRcdC8vIEZvciBjcm9zcy1icm93c2VyIGNvbnNpc3RlbmN5LCBzdXBwcmVzcyBuYXRpdmUgLmNsaWNrKCkgb24gbGlua3Ncblx0XHRcdC8vIEFsc28gcHJldmVudCBpdCBpZiB3ZSdyZSBjdXJyZW50bHkgaW5zaWRlIGEgbGV2ZXJhZ2VkIG5hdGl2ZS1ldmVudCBzdGFja1xuXHRcdFx0X2RlZmF1bHQ6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IGV2ZW50LnRhcmdldDtcblx0XHRcdFx0cmV0dXJuIHJjaGVja2FibGVUeXBlLnRlc3QoIHRhcmdldC50eXBlICkgJiZcblx0XHRcdFx0XHR0YXJnZXQuY2xpY2sgJiYgbm9kZU5hbWUoIHRhcmdldCwgXCJpbnB1dFwiICkgJiZcblx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRhcmdldCwgXCJjbGlja1wiICkgfHxcblx0XHRcdFx0XHRub2RlTmFtZSggdGFyZ2V0LCBcImFcIiApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRiZWZvcmV1bmxvYWQ6IHtcblx0XHRcdHBvc3REaXNwYXRjaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggMjArXG5cdFx0XHRcdC8vIEZpcmVmb3ggZG9lc24ndCBhbGVydCBpZiB0aGUgcmV0dXJuVmFsdWUgZmllbGQgaXMgbm90IHNldC5cblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgIT09IHVuZGVmaW5lZCAmJiBldmVudC5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdGV2ZW50Lm9yaWdpbmFsRXZlbnQucmV0dXJuVmFsdWUgPSBldmVudC5yZXN1bHQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbi8vIEVuc3VyZSB0aGUgcHJlc2VuY2Ugb2YgYW4gZXZlbnQgbGlzdGVuZXIgdGhhdCBoYW5kbGVzIG1hbnVhbGx5LXRyaWdnZXJlZFxuLy8gc3ludGhldGljIGV2ZW50cyBieSBpbnRlcnJ1cHRpbmcgcHJvZ3Jlc3MgdW50aWwgcmVpbnZva2VkIGluIHJlc3BvbnNlIHRvXG4vLyAqbmF0aXZlKiBldmVudHMgdGhhdCBpdCBmaXJlcyBkaXJlY3RseSwgZW5zdXJpbmcgdGhhdCBzdGF0ZSBjaGFuZ2VzIGhhdmVcbi8vIGFscmVhZHkgb2NjdXJyZWQgYmVmb3JlIG90aGVyIGxpc3RlbmVycyBhcmUgaW52b2tlZC5cbmZ1bmN0aW9uIGxldmVyYWdlTmF0aXZlKCBlbCwgdHlwZSwgZXhwZWN0U3luYyApIHtcblxuXHQvLyBNaXNzaW5nIGV4cGVjdFN5bmMgaW5kaWNhdGVzIGEgdHJpZ2dlciBjYWxsLCB3aGljaCBtdXN0IGZvcmNlIHNldHVwIHRocm91Z2ggalF1ZXJ5LmV2ZW50LmFkZFxuXHRpZiAoICFleHBlY3RTeW5jICkge1xuXHRcdGlmICggZGF0YVByaXYuZ2V0KCBlbCwgdHlwZSApID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCBlbCwgdHlwZSwgcmV0dXJuVHJ1ZSApO1xuXHRcdH1cblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBSZWdpc3RlciB0aGUgY29udHJvbGxlciBhcyBhIHNwZWNpYWwgdW5pdmVyc2FsIGhhbmRsZXIgZm9yIGFsbCBldmVudCBuYW1lc3BhY2VzXG5cdGRhdGFQcml2LnNldCggZWwsIHR5cGUsIGZhbHNlICk7XG5cdGpRdWVyeS5ldmVudC5hZGQoIGVsLCB0eXBlLCB7XG5cdFx0bmFtZXNwYWNlOiBmYWxzZSxcblx0XHRoYW5kbGVyOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHR2YXIgbm90QXN5bmMsIHJlc3VsdCxcblx0XHRcdFx0c2F2ZWQgPSBkYXRhUHJpdi5nZXQoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0aWYgKCAoIGV2ZW50LmlzVHJpZ2dlciAmIDEgKSAmJiB0aGlzWyB0eXBlIF0gKSB7XG5cblx0XHRcdFx0Ly8gSW50ZXJydXB0IHByb2Nlc3Npbmcgb2YgdGhlIG91dGVyIHN5bnRoZXRpYyAudHJpZ2dlcigpZWQgZXZlbnRcblx0XHRcdFx0Ly8gU2F2ZWQgZGF0YSBzaG91bGQgYmUgZmFsc2UgaW4gc3VjaCBjYXNlcywgYnV0IG1pZ2h0IGJlIGEgbGVmdG92ZXIgY2FwdHVyZSBvYmplY3Rcblx0XHRcdFx0Ly8gZnJvbSBhbiBhc3luYyBuYXRpdmUgaGFuZGxlciAoZ2gtNDM1MClcblx0XHRcdFx0aWYgKCAhc2F2ZWQubGVuZ3RoICkge1xuXG5cdFx0XHRcdFx0Ly8gU3RvcmUgYXJndW1lbnRzIGZvciB1c2Ugd2hlbiBoYW5kbGluZyB0aGUgaW5uZXIgbmF0aXZlIGV2ZW50XG5cdFx0XHRcdFx0Ly8gVGhlcmUgd2lsbCBhbHdheXMgYmUgYXQgbGVhc3Qgb25lIGFyZ3VtZW50IChhbiBldmVudCBvYmplY3QpLCBzbyB0aGlzIGFycmF5XG5cdFx0XHRcdFx0Ly8gd2lsbCBub3QgYmUgY29uZnVzZWQgd2l0aCBhIGxlZnRvdmVyIGNhcHR1cmUgb2JqZWN0LlxuXHRcdFx0XHRcdHNhdmVkID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCB0eXBlLCBzYXZlZCApO1xuXG5cdFx0XHRcdFx0Ly8gVHJpZ2dlciB0aGUgbmF0aXZlIGV2ZW50IGFuZCBjYXB0dXJlIGl0cyByZXN1bHRcblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMStcblx0XHRcdFx0XHQvLyBmb2N1cygpIGFuZCBibHVyKCkgYXJlIGFzeW5jaHJvbm91c1xuXHRcdFx0XHRcdG5vdEFzeW5jID0gZXhwZWN0U3luYyggdGhpcywgdHlwZSApO1xuXHRcdFx0XHRcdHRoaXNbIHR5cGUgXSgpO1xuXHRcdFx0XHRcdHJlc3VsdCA9IGRhdGFQcml2LmdldCggdGhpcywgdHlwZSApO1xuXHRcdFx0XHRcdGlmICggc2F2ZWQgIT09IHJlc3VsdCB8fCBub3RBc3luYyApIHtcblx0XHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgdHlwZSwgZmFsc2UgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmVzdWx0ID0ge307XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggc2F2ZWQgIT09IHJlc3VsdCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2FuY2VsIHRoZSBvdXRlciBzeW50aGV0aWMgZXZlbnRcblx0XHRcdFx0XHRcdGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDg2K1xuXHRcdFx0XHRcdFx0Ly8gSW4gQ2hyb21lLCBpZiBhbiBlbGVtZW50IGhhdmluZyBhIGZvY3Vzb3V0IGhhbmRsZXIgaXMgYmx1cnJlZCBieVxuXHRcdFx0XHRcdFx0Ly8gY2xpY2tpbmcgb3V0c2lkZSBvZiBpdCwgaXQgaW52b2tlcyB0aGUgaGFuZGxlciBzeW5jaHJvbm91c2x5LiBJZlxuXHRcdFx0XHRcdFx0Ly8gdGhhdCBoYW5kbGVyIGNhbGxzIGAucmVtb3ZlKClgIG9uIHRoZSBlbGVtZW50LCB0aGUgZGF0YSBpcyBjbGVhcmVkLFxuXHRcdFx0XHRcdFx0Ly8gbGVhdmluZyBgcmVzdWx0YCB1bmRlZmluZWQuIFdlIG5lZWQgdG8gZ3VhcmQgYWdhaW5zdCB0aGlzLlxuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdCAmJiByZXN1bHQudmFsdWU7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHRoaXMgaXMgYW4gaW5uZXIgc3ludGhldGljIGV2ZW50IGZvciBhbiBldmVudCB3aXRoIGEgYnViYmxpbmcgc3Vycm9nYXRlXG5cdFx0XHRcdC8vIChmb2N1cyBvciBibHVyKSwgYXNzdW1lIHRoYXQgdGhlIHN1cnJvZ2F0ZSBhbHJlYWR5IHByb3BhZ2F0ZWQgZnJvbSB0cmlnZ2VyaW5nIHRoZVxuXHRcdFx0XHQvLyBuYXRpdmUgZXZlbnQgYW5kIHByZXZlbnQgdGhhdCBmcm9tIGhhcHBlbmluZyBhZ2FpbiBoZXJlLlxuXHRcdFx0XHQvLyBUaGlzIHRlY2huaWNhbGx5IGdldHMgdGhlIG9yZGVyaW5nIHdyb25nIHcuci50LiB0byBgLnRyaWdnZXIoKWAgKGluIHdoaWNoIHRoZVxuXHRcdFx0XHQvLyBidWJibGluZyBzdXJyb2dhdGUgcHJvcGFnYXRlcyAqYWZ0ZXIqIHRoZSBub24tYnViYmxpbmcgYmFzZSksIGJ1dCB0aGF0IHNlZW1zXG5cdFx0XHRcdC8vIGxlc3MgYmFkIHRoYW4gZHVwbGljYXRpb24uXG5cdFx0XHRcdH0gZWxzZSBpZiAoICggalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fSApLmRlbGVnYXRlVHlwZSApIHtcblx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgbmF0aXZlIGV2ZW50IHRyaWdnZXJlZCBhYm92ZSwgZXZlcnl0aGluZyBpcyBub3cgaW4gb3JkZXJcblx0XHRcdC8vIEZpcmUgYW4gaW5uZXIgc3ludGhldGljIGV2ZW50IHdpdGggdGhlIG9yaWdpbmFsIGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggc2F2ZWQubGVuZ3RoICkge1xuXG5cdFx0XHRcdC8vIC4uLmFuZCBjYXB0dXJlIHRoZSByZXN1bHRcblx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCB0eXBlLCB7XG5cdFx0XHRcdFx0dmFsdWU6IGpRdWVyeS5ldmVudC50cmlnZ2VyKFxuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMStcblx0XHRcdFx0XHRcdC8vIEV4dGVuZCB3aXRoIHRoZSBwcm90b3R5cGUgdG8gcmVzZXQgdGhlIGFib3ZlIHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpXG5cdFx0XHRcdFx0XHRqUXVlcnkuZXh0ZW5kKCBzYXZlZFsgMCBdLCBqUXVlcnkuRXZlbnQucHJvdG90eXBlICksXG5cdFx0XHRcdFx0XHRzYXZlZC5zbGljZSggMSApLFxuXHRcdFx0XHRcdFx0dGhpc1xuXHRcdFx0XHRcdClcblx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdC8vIEFib3J0IGhhbmRsaW5nIG9mIHRoZSBuYXRpdmUgZXZlbnRcblx0XHRcdFx0ZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9ICk7XG59XG5cbmpRdWVyeS5yZW1vdmVFdmVudCA9IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBoYW5kbGUgKSB7XG5cblx0Ly8gVGhpcyBcImlmXCIgaXMgbmVlZGVkIGZvciBwbGFpbiBvYmplY3RzXG5cdGlmICggZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyICkge1xuXHRcdGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgaGFuZGxlICk7XG5cdH1cbn07XG5cbmpRdWVyeS5FdmVudCA9IGZ1bmN0aW9uKCBzcmMsIHByb3BzICkge1xuXG5cdC8vIEFsbG93IGluc3RhbnRpYXRpb24gd2l0aG91dCB0aGUgJ25ldycga2V5d29yZFxuXHRpZiAoICEoIHRoaXMgaW5zdGFuY2VvZiBqUXVlcnkuRXZlbnQgKSApIHtcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5FdmVudCggc3JjLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gRXZlbnQgb2JqZWN0XG5cdGlmICggc3JjICYmIHNyYy50eXBlICkge1xuXHRcdHRoaXMub3JpZ2luYWxFdmVudCA9IHNyYztcblx0XHR0aGlzLnR5cGUgPSBzcmMudHlwZTtcblxuXHRcdC8vIEV2ZW50cyBidWJibGluZyB1cCB0aGUgZG9jdW1lbnQgbWF5IGhhdmUgYmVlbiBtYXJrZWQgYXMgcHJldmVudGVkXG5cdFx0Ly8gYnkgYSBoYW5kbGVyIGxvd2VyIGRvd24gdGhlIHRyZWU7IHJlZmxlY3QgdGhlIGNvcnJlY3QgdmFsdWUuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBzcmMuZGVmYXVsdFByZXZlbnRlZCB8fFxuXHRcdFx0XHRzcmMuZGVmYXVsdFByZXZlbnRlZCA9PT0gdW5kZWZpbmVkICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5XG5cdFx0XHRcdHNyYy5yZXR1cm5WYWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0cmV0dXJuVHJ1ZSA6XG5cdFx0XHRyZXR1cm5GYWxzZTtcblxuXHRcdC8vIENyZWF0ZSB0YXJnZXQgcHJvcGVydGllc1xuXHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA8PTYgLSA3IG9ubHlcblx0XHQvLyBUYXJnZXQgc2hvdWxkIG5vdCBiZSBhIHRleHQgbm9kZSAodHJhYy01MDQsIHRyYWMtMTMxNDMpXG5cdFx0dGhpcy50YXJnZXQgPSAoIHNyYy50YXJnZXQgJiYgc3JjLnRhcmdldC5ub2RlVHlwZSA9PT0gMyApID9cblx0XHRcdHNyYy50YXJnZXQucGFyZW50Tm9kZSA6XG5cdFx0XHRzcmMudGFyZ2V0O1xuXG5cdFx0dGhpcy5jdXJyZW50VGFyZ2V0ID0gc3JjLmN1cnJlbnRUYXJnZXQ7XG5cdFx0dGhpcy5yZWxhdGVkVGFyZ2V0ID0gc3JjLnJlbGF0ZWRUYXJnZXQ7XG5cblx0Ly8gRXZlbnQgdHlwZVxuXHR9IGVsc2Uge1xuXHRcdHRoaXMudHlwZSA9IHNyYztcblx0fVxuXG5cdC8vIFB1dCBleHBsaWNpdGx5IHByb3ZpZGVkIHByb3BlcnRpZXMgb250byB0aGUgZXZlbnQgb2JqZWN0XG5cdGlmICggcHJvcHMgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdGhpcywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIENyZWF0ZSBhIHRpbWVzdGFtcCBpZiBpbmNvbWluZyBldmVudCBkb2Vzbid0IGhhdmUgb25lXG5cdHRoaXMudGltZVN0YW1wID0gc3JjICYmIHNyYy50aW1lU3RhbXAgfHwgRGF0ZS5ub3coKTtcblxuXHQvLyBNYXJrIGl0IGFzIGZpeGVkXG5cdHRoaXNbIGpRdWVyeS5leHBhbmRvIF0gPSB0cnVlO1xufTtcblxuLy8galF1ZXJ5LkV2ZW50IGlzIGJhc2VkIG9uIERPTTMgRXZlbnRzIGFzIHNwZWNpZmllZCBieSB0aGUgRUNNQVNjcmlwdCBMYW5ndWFnZSBCaW5kaW5nXG4vLyBodHRwczovL3d3dy53My5vcmcvVFIvMjAwMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAwMzAzMzEvZWNtYS1zY3JpcHQtYmluZGluZy5odG1sXG5qUXVlcnkuRXZlbnQucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LkV2ZW50LFxuXHRpc0RlZmF1bHRQcmV2ZW50ZWQ6IHJldHVybkZhbHNlLFxuXHRpc1Byb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNTaW11bGF0ZWQ6IGZhbHNlLFxuXG5cdHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdH1cblxuXHRcdHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH1cbn07XG5cbi8vIEluY2x1ZGVzIGFsbCBjb21tb24gZXZlbnQgcHJvcHMgaW5jbHVkaW5nIEtleUV2ZW50IGFuZCBNb3VzZUV2ZW50IHNwZWNpZmljIHByb3BzXG5qUXVlcnkuZWFjaCgge1xuXHRhbHRLZXk6IHRydWUsXG5cdGJ1YmJsZXM6IHRydWUsXG5cdGNhbmNlbGFibGU6IHRydWUsXG5cdGNoYW5nZWRUb3VjaGVzOiB0cnVlLFxuXHRjdHJsS2V5OiB0cnVlLFxuXHRkZXRhaWw6IHRydWUsXG5cdGV2ZW50UGhhc2U6IHRydWUsXG5cdG1ldGFLZXk6IHRydWUsXG5cdHBhZ2VYOiB0cnVlLFxuXHRwYWdlWTogdHJ1ZSxcblx0c2hpZnRLZXk6IHRydWUsXG5cdHZpZXc6IHRydWUsXG5cdFwiY2hhclwiOiB0cnVlLFxuXHRjb2RlOiB0cnVlLFxuXHRjaGFyQ29kZTogdHJ1ZSxcblx0a2V5OiB0cnVlLFxuXHRrZXlDb2RlOiB0cnVlLFxuXHRidXR0b246IHRydWUsXG5cdGJ1dHRvbnM6IHRydWUsXG5cdGNsaWVudFg6IHRydWUsXG5cdGNsaWVudFk6IHRydWUsXG5cdG9mZnNldFg6IHRydWUsXG5cdG9mZnNldFk6IHRydWUsXG5cdHBvaW50ZXJJZDogdHJ1ZSxcblx0cG9pbnRlclR5cGU6IHRydWUsXG5cdHNjcmVlblg6IHRydWUsXG5cdHNjcmVlblk6IHRydWUsXG5cdHRhcmdldFRvdWNoZXM6IHRydWUsXG5cdHRvRWxlbWVudDogdHJ1ZSxcblx0dG91Y2hlczogdHJ1ZSxcblx0d2hpY2g6IHRydWVcbn0sIGpRdWVyeS5ldmVudC5hZGRQcm9wICk7XG5cbmpRdWVyeS5lYWNoKCB7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uKCB0eXBlLCBkZWxlZ2F0ZVR5cGUgKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gPSB7XG5cblx0XHQvLyBVdGlsaXplIG5hdGl2ZSBldmVudCBpZiBwb3NzaWJsZSBzbyBibHVyL2ZvY3VzIHNlcXVlbmNlIGlzIGNvcnJlY3Rcblx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIENsYWltIHRoZSBmaXJzdCBoYW5kbGVyXG5cdFx0XHQvLyBkYXRhUHJpdi5zZXQoIHRoaXMsIFwiZm9jdXNcIiwgLi4uIClcblx0XHRcdC8vIGRhdGFQcml2LnNldCggdGhpcywgXCJibHVyXCIsIC4uLiApXG5cdFx0XHRsZXZlcmFnZU5hdGl2ZSggdGhpcywgdHlwZSwgZXhwZWN0U3luYyApO1xuXG5cdFx0XHQvLyBSZXR1cm4gZmFsc2UgdG8gYWxsb3cgbm9ybWFsIHByb2Nlc3NpbmcgaW4gdGhlIGNhbGxlclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEZvcmNlIHNldHVwIGJlZm9yZSB0cmlnZ2VyXG5cdFx0XHRsZXZlcmFnZU5hdGl2ZSggdGhpcywgdHlwZSApO1xuXG5cdFx0XHQvLyBSZXR1cm4gbm9uLWZhbHNlIHRvIGFsbG93IG5vcm1hbCBldmVudC1wYXRoIHByb3BhZ2F0aW9uXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0Ly8gU3VwcHJlc3MgbmF0aXZlIGZvY3VzIG9yIGJsdXIgaWYgd2UncmUgY3VycmVudGx5IGluc2lkZVxuXHRcdC8vIGEgbGV2ZXJhZ2VkIG5hdGl2ZS1ldmVudCBzdGFja1xuXHRcdF9kZWZhdWx0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRyZXR1cm4gZGF0YVByaXYuZ2V0KCBldmVudC50YXJnZXQsIHR5cGUgKTtcblx0XHR9LFxuXG5cdFx0ZGVsZWdhdGVUeXBlOiBkZWxlZ2F0ZVR5cGVcblx0fTtcbn0gKTtcblxuLy8gQ3JlYXRlIG1vdXNlZW50ZXIvbGVhdmUgZXZlbnRzIHVzaW5nIG1vdXNlb3Zlci9vdXQgYW5kIGV2ZW50LXRpbWUgY2hlY2tzXG4vLyBzbyB0aGF0IGV2ZW50IGRlbGVnYXRpb24gd29ya3MgaW4galF1ZXJ5LlxuLy8gRG8gdGhlIHNhbWUgZm9yIHBvaW50ZXJlbnRlci9wb2ludGVybGVhdmUgYW5kIHBvaW50ZXJvdmVyL3BvaW50ZXJvdXRcbi8vXG4vLyBTdXBwb3J0OiBTYWZhcmkgNyBvbmx5XG4vLyBTYWZhcmkgc2VuZHMgbW91c2VlbnRlciB0b28gb2Z0ZW47IHNlZTpcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ3MDI1OFxuLy8gZm9yIHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgYnVnIChpdCBleGlzdGVkIGluIG9sZGVyIENocm9tZSB2ZXJzaW9ucyBhcyB3ZWxsKS5cbmpRdWVyeS5lYWNoKCB7XG5cdG1vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsXG5cdG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIixcblx0cG9pbnRlcmVudGVyOiBcInBvaW50ZXJvdmVyXCIsXG5cdHBvaW50ZXJsZWF2ZTogXCJwb2ludGVyb3V0XCJcbn0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBvcmlnIF0gPSB7XG5cdFx0ZGVsZWdhdGVUeXBlOiBmaXgsXG5cdFx0YmluZFR5cGU6IGZpeCxcblxuXHRcdGhhbmRsZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIHJldCxcblx0XHRcdFx0dGFyZ2V0ID0gdGhpcyxcblx0XHRcdFx0cmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQsXG5cdFx0XHRcdGhhbmRsZU9iaiA9IGV2ZW50LmhhbmRsZU9iajtcblxuXHRcdFx0Ly8gRm9yIG1vdXNlZW50ZXIvbGVhdmUgY2FsbCB0aGUgaGFuZGxlciBpZiByZWxhdGVkIGlzIG91dHNpZGUgdGhlIHRhcmdldC5cblx0XHRcdC8vIE5COiBObyByZWxhdGVkVGFyZ2V0IGlmIHRoZSBtb3VzZSBsZWZ0L2VudGVyZWQgdGhlIGJyb3dzZXIgd2luZG93XG5cdFx0XHRpZiAoICFyZWxhdGVkIHx8ICggcmVsYXRlZCAhPT0gdGFyZ2V0ICYmICFqUXVlcnkuY29udGFpbnMoIHRhcmdldCwgcmVsYXRlZCApICkgKSB7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBoYW5kbGVPYmoub3JpZ1R5cGU7XG5cdFx0XHRcdHJldCA9IGhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGZpeDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0b246IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHRvbmU6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgMSApO1xuXHR9LFxuXHRvZmY6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGZuICkge1xuXHRcdHZhciBoYW5kbGVPYmosIHR5cGU7XG5cdFx0aWYgKCB0eXBlcyAmJiB0eXBlcy5wcmV2ZW50RGVmYXVsdCAmJiB0eXBlcy5oYW5kbGVPYmogKSB7XG5cblx0XHRcdC8vICggZXZlbnQgKSAgZGlzcGF0Y2hlZCBqUXVlcnkuRXZlbnRcblx0XHRcdGhhbmRsZU9iaiA9IHR5cGVzLmhhbmRsZU9iajtcblx0XHRcdGpRdWVyeSggdHlwZXMuZGVsZWdhdGVUYXJnZXQgKS5vZmYoXG5cdFx0XHRcdGhhbmRsZU9iai5uYW1lc3BhY2UgP1xuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSArIFwiLlwiICsgaGFuZGxlT2JqLm5hbWVzcGFjZSA6XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlLFxuXHRcdFx0XHRoYW5kbGVPYmouc2VsZWN0b3IsXG5cdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyXG5cdFx0XHQpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLW9iamVjdCBbLCBzZWxlY3Rvcl0gKVxuXHRcdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdFx0dGhpcy5vZmYoIHR5cGUsIHNlbGVjdG9yLCB0eXBlc1sgdHlwZSBdICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCBzZWxlY3RvciA9PT0gZmFsc2UgfHwgdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMgWywgZm5dIClcblx0XHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIHRoaXMsIHR5cGVzLCBmbiwgc2VsZWN0b3IgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG52YXJcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEsIEVkZ2UgMTIgLSAxMyBvbmx5XG5cdC8vIEluIElFL0VkZ2UgdXNpbmcgcmVnZXggZ3JvdXBzIGhlcmUgY2F1c2VzIHNldmVyZSBzbG93ZG93bnMuXG5cdC8vIFNlZSBodHRwczovL2Nvbm5lY3QubWljcm9zb2Z0LmNvbS9JRS9mZWVkYmFjay9kZXRhaWxzLzE3MzY1MTIvXG5cdHJub0lubmVyaHRtbCA9IC88c2NyaXB0fDxzdHlsZXw8bGluay9pLFxuXG5cdC8vIGNoZWNrZWQ9XCJjaGVja2VkXCIgb3IgY2hlY2tlZFxuXHRyY2hlY2tlZCA9IC9jaGVja2VkXFxzKig/OltePV18PVxccyouY2hlY2tlZC4pL2ksXG5cblx0cmNsZWFuU2NyaXB0ID0gL15cXHMqPCFcXFtDREFUQVxcW3xcXF1cXF0+XFxzKiQvZztcblxuLy8gUHJlZmVyIGEgdGJvZHkgb3ZlciBpdHMgcGFyZW50IHRhYmxlIGZvciBjb250YWluaW5nIG5ldyByb3dzXG5mdW5jdGlvbiBtYW5pcHVsYXRpb25UYXJnZXQoIGVsZW0sIGNvbnRlbnQgKSB7XG5cdGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGFibGVcIiApICYmXG5cdFx0bm9kZU5hbWUoIGNvbnRlbnQubm9kZVR5cGUgIT09IDExID8gY29udGVudCA6IGNvbnRlbnQuZmlyc3RDaGlsZCwgXCJ0clwiICkgKSB7XG5cblx0XHRyZXR1cm4galF1ZXJ5KCBlbGVtICkuY2hpbGRyZW4oIFwidGJvZHlcIiApWyAwIF0gfHwgZWxlbTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG4vLyBSZXBsYWNlL3Jlc3RvcmUgdGhlIHR5cGUgYXR0cmlidXRlIG9mIHNjcmlwdCBlbGVtZW50cyBmb3Igc2FmZSBET00gbWFuaXB1bGF0aW9uXG5mdW5jdGlvbiBkaXNhYmxlU2NyaXB0KCBlbGVtICkge1xuXHRlbGVtLnR5cGUgPSAoIGVsZW0uZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApICE9PSBudWxsICkgKyBcIi9cIiArIGVsZW0udHlwZTtcblx0cmV0dXJuIGVsZW07XG59XG5mdW5jdGlvbiByZXN0b3JlU2NyaXB0KCBlbGVtICkge1xuXHRpZiAoICggZWxlbS50eXBlIHx8IFwiXCIgKS5zbGljZSggMCwgNSApID09PSBcInRydWUvXCIgKSB7XG5cdFx0ZWxlbS50eXBlID0gZWxlbS50eXBlLnNsaWNlKCA1ICk7XG5cdH0gZWxzZSB7XG5cdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIFwidHlwZVwiICk7XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuZnVuY3Rpb24gY2xvbmVDb3B5RXZlbnQoIHNyYywgZGVzdCApIHtcblx0dmFyIGksIGwsIHR5cGUsIHBkYXRhT2xkLCB1ZGF0YU9sZCwgdWRhdGFDdXIsIGV2ZW50cztcblxuXHRpZiAoIGRlc3Qubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gMS4gQ29weSBwcml2YXRlIGRhdGE6IGV2ZW50cywgaGFuZGxlcnMsIGV0Yy5cblx0aWYgKCBkYXRhUHJpdi5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHRwZGF0YU9sZCA9IGRhdGFQcml2LmdldCggc3JjICk7XG5cdFx0ZXZlbnRzID0gcGRhdGFPbGQuZXZlbnRzO1xuXG5cdFx0aWYgKCBldmVudHMgKSB7XG5cdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGRlc3QsIFwiaGFuZGxlIGV2ZW50c1wiICk7XG5cblx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IGV2ZW50c1sgdHlwZSBdLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCBkZXN0LCB0eXBlLCBldmVudHNbIHR5cGUgXVsgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyAyLiBDb3B5IHVzZXIgZGF0YVxuXHRpZiAoIGRhdGFVc2VyLmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHVkYXRhT2xkID0gZGF0YVVzZXIuYWNjZXNzKCBzcmMgKTtcblx0XHR1ZGF0YUN1ciA9IGpRdWVyeS5leHRlbmQoIHt9LCB1ZGF0YU9sZCApO1xuXG5cdFx0ZGF0YVVzZXIuc2V0KCBkZXN0LCB1ZGF0YUN1ciApO1xuXHR9XG59XG5cbi8vIEZpeCBJRSBidWdzLCBzZWUgc3VwcG9ydCB0ZXN0c1xuZnVuY3Rpb24gZml4SW5wdXQoIHNyYywgZGVzdCApIHtcblx0dmFyIG5vZGVOYW1lID0gZGVzdC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdC8vIEZhaWxzIHRvIHBlcnNpc3QgdGhlIGNoZWNrZWQgc3RhdGUgb2YgYSBjbG9uZWQgY2hlY2tib3ggb3IgcmFkaW8gYnV0dG9uLlxuXHRpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgcmNoZWNrYWJsZVR5cGUudGVzdCggc3JjLnR5cGUgKSApIHtcblx0XHRkZXN0LmNoZWNrZWQgPSBzcmMuY2hlY2tlZDtcblxuXHQvLyBGYWlscyB0byByZXR1cm4gdGhlIHNlbGVjdGVkIG9wdGlvbiB0byB0aGUgZGVmYXVsdCBzZWxlY3RlZCBzdGF0ZSB3aGVuIGNsb25pbmcgb3B0aW9uc1xuXHR9IGVsc2UgaWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5vZGVOYW1lID09PSBcInRleHRhcmVhXCIgKSB7XG5cdFx0ZGVzdC5kZWZhdWx0VmFsdWUgPSBzcmMuZGVmYXVsdFZhbHVlO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGRvbU1hbmlwKCBjb2xsZWN0aW9uLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApIHtcblxuXHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdGFyZ3MgPSBmbGF0KCBhcmdzICk7XG5cblx0dmFyIGZyYWdtZW50LCBmaXJzdCwgc2NyaXB0cywgaGFzU2NyaXB0cywgbm9kZSwgZG9jLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBjb2xsZWN0aW9uLmxlbmd0aCxcblx0XHRpTm9DbG9uZSA9IGwgLSAxLFxuXHRcdHZhbHVlID0gYXJnc1sgMCBdLFxuXHRcdHZhbHVlSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0Ly8gV2UgY2FuJ3QgY2xvbmVOb2RlIGZyYWdtZW50cyB0aGF0IGNvbnRhaW4gY2hlY2tlZCwgaW4gV2ViS2l0XG5cdGlmICggdmFsdWVJc0Z1bmN0aW9uIHx8XG5cdFx0XHQoIGwgPiAxICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc3VwcG9ydC5jaGVja0Nsb25lICYmIHJjaGVja2VkLnRlc3QoIHZhbHVlICkgKSApIHtcblx0XHRyZXR1cm4gY29sbGVjdGlvbi5lYWNoKCBmdW5jdGlvbiggaW5kZXggKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGNvbGxlY3Rpb24uZXEoIGluZGV4ICk7XG5cdFx0XHRpZiAoIHZhbHVlSXNGdW5jdGlvbiApIHtcblx0XHRcdFx0YXJnc1sgMCBdID0gdmFsdWUuY2FsbCggdGhpcywgaW5kZXgsIHNlbGYuaHRtbCgpICk7XG5cdFx0XHR9XG5cdFx0XHRkb21NYW5pcCggc2VsZiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKTtcblx0XHR9ICk7XG5cdH1cblxuXHRpZiAoIGwgKSB7XG5cdFx0ZnJhZ21lbnQgPSBidWlsZEZyYWdtZW50KCBhcmdzLCBjb2xsZWN0aW9uWyAwIF0ub3duZXJEb2N1bWVudCwgZmFsc2UsIGNvbGxlY3Rpb24sIGlnbm9yZWQgKTtcblx0XHRmaXJzdCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRpZiAoIGZyYWdtZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAxICkge1xuXHRcdFx0ZnJhZ21lbnQgPSBmaXJzdDtcblx0XHR9XG5cblx0XHQvLyBSZXF1aXJlIGVpdGhlciBuZXcgY29udGVudCBvciBhbiBpbnRlcmVzdCBpbiBpZ25vcmVkIGVsZW1lbnRzIHRvIGludm9rZSB0aGUgY2FsbGJhY2tcblx0XHRpZiAoIGZpcnN0IHx8IGlnbm9yZWQgKSB7XG5cdFx0XHRzY3JpcHRzID0galF1ZXJ5Lm1hcCggZ2V0QWxsKCBmcmFnbWVudCwgXCJzY3JpcHRcIiApLCBkaXNhYmxlU2NyaXB0ICk7XG5cdFx0XHRoYXNTY3JpcHRzID0gc2NyaXB0cy5sZW5ndGg7XG5cblx0XHRcdC8vIFVzZSB0aGUgb3JpZ2luYWwgZnJhZ21lbnQgZm9yIHRoZSBsYXN0IGl0ZW1cblx0XHRcdC8vIGluc3RlYWQgb2YgdGhlIGZpcnN0IGJlY2F1c2UgaXQgY2FuIGVuZCB1cFxuXHRcdFx0Ly8gYmVpbmcgZW1wdGllZCBpbmNvcnJlY3RseSBpbiBjZXJ0YWluIHNpdHVhdGlvbnMgKHRyYWMtODA3MCkuXG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdG5vZGUgPSBmcmFnbWVudDtcblxuXHRcdFx0XHRpZiAoIGkgIT09IGlOb0Nsb25lICkge1xuXHRcdFx0XHRcdG5vZGUgPSBqUXVlcnkuY2xvbmUoIG5vZGUsIHRydWUsIHRydWUgKTtcblxuXHRcdFx0XHRcdC8vIEtlZXAgcmVmZXJlbmNlcyB0byBjbG9uZWQgc2NyaXB0cyBmb3IgbGF0ZXIgcmVzdG9yYXRpb25cblx0XHRcdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBzY3JpcHRzLCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNhbGxiYWNrLmNhbGwoIGNvbGxlY3Rpb25bIGkgXSwgbm9kZSwgaSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cdFx0XHRcdGRvYyA9IHNjcmlwdHNbIHNjcmlwdHMubGVuZ3RoIC0gMSBdLm93bmVyRG9jdW1lbnQ7XG5cblx0XHRcdFx0Ly8gUmVlbmFibGUgc2NyaXB0c1xuXHRcdFx0XHRqUXVlcnkubWFwKCBzY3JpcHRzLCByZXN0b3JlU2NyaXB0ICk7XG5cblx0XHRcdFx0Ly8gRXZhbHVhdGUgZXhlY3V0YWJsZSBzY3JpcHRzIG9uIGZpcnN0IGRvY3VtZW50IGluc2VydGlvblxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGhhc1NjcmlwdHM7IGkrKyApIHtcblx0XHRcdFx0XHRub2RlID0gc2NyaXB0c1sgaSBdO1xuXHRcdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggbm9kZS50eXBlIHx8IFwiXCIgKSAmJlxuXHRcdFx0XHRcdFx0IWRhdGFQcml2LmFjY2Vzcyggbm9kZSwgXCJnbG9iYWxFdmFsXCIgKSAmJlxuXHRcdFx0XHRcdFx0alF1ZXJ5LmNvbnRhaW5zKCBkb2MsIG5vZGUgKSApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBub2RlLnNyYyAmJiAoIG5vZGUudHlwZSB8fCBcIlwiICkudG9Mb3dlckNhc2UoKSAgIT09IFwibW9kdWxlXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gT3B0aW9uYWwgQUpBWCBkZXBlbmRlbmN5LCBidXQgd29uJ3QgcnVuIHNjcmlwdHMgaWYgbm90IHByZXNlbnRcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuX2V2YWxVcmwgJiYgIW5vZGUubm9Nb2R1bGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5Ll9ldmFsVXJsKCBub2RlLnNyYywge1xuXHRcdFx0XHRcdFx0XHRcdFx0bm9uY2U6IG5vZGUubm9uY2UgfHwgbm9kZS5nZXRBdHRyaWJ1dGUoIFwibm9uY2VcIiApXG5cdFx0XHRcdFx0XHRcdFx0fSwgZG9jICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gVW53cmFwIGEgQ0RBVEEgc2VjdGlvbiBjb250YWluaW5nIHNjcmlwdCBjb250ZW50cy4gVGhpcyBzaG91bGRuJ3QgYmVcblx0XHRcdFx0XHRcdFx0Ly8gbmVlZGVkIGFzIGluIFhNTCBkb2N1bWVudHMgdGhleSdyZSBhbHJlYWR5IG5vdCB2aXNpYmxlIHdoZW5cblx0XHRcdFx0XHRcdFx0Ly8gaW5zcGVjdGluZyBlbGVtZW50IGNvbnRlbnRzIGFuZCBpbiBIVE1MIGRvY3VtZW50cyB0aGV5IGhhdmUgbm9cblx0XHRcdFx0XHRcdFx0Ly8gbWVhbmluZyBidXQgd2UncmUgcHJlc2VydmluZyB0aGF0IGxvZ2ljIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS5cblx0XHRcdFx0XHRcdFx0Ly8gVGhpcyB3aWxsIGJlIHJlbW92ZWQgY29tcGxldGVseSBpbiA0LjAuIFNlZSBnaC00OTA0LlxuXHRcdFx0XHRcdFx0XHRET01FdmFsKCBub2RlLnRleHRDb250ZW50LnJlcGxhY2UoIHJjbGVhblNjcmlwdCwgXCJcIiApLCBub2RlLCBkb2MgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gY29sbGVjdGlvbjtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlKCBlbGVtLCBzZWxlY3Rvciwga2VlcERhdGEgKSB7XG5cdHZhciBub2RlLFxuXHRcdG5vZGVzID0gc2VsZWN0b3IgPyBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgZWxlbSApIDogZWxlbSxcblx0XHRpID0gMDtcblxuXHRmb3IgKCA7ICggbm9kZSA9IG5vZGVzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0aWYgKCAha2VlcERhdGEgJiYgbm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggbm9kZSApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBub2RlLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRpZiAoIGtlZXBEYXRhICYmIGlzQXR0YWNoZWQoIG5vZGUgKSApIHtcblx0XHRcdFx0c2V0R2xvYmFsRXZhbCggZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdH1cblx0XHRcdG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggbm9kZSApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGh0bWxQcmVmaWx0ZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHJldHVybiBodG1sO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZWxlbSwgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0dmFyIGksIGwsIHNyY0VsZW1lbnRzLCBkZXN0RWxlbWVudHMsXG5cdFx0XHRjbG9uZSA9IGVsZW0uY2xvbmVOb2RlKCB0cnVlICksXG5cdFx0XHRpblBhZ2UgPSBpc0F0dGFjaGVkKCBlbGVtICk7XG5cblx0XHQvLyBGaXggSUUgY2xvbmluZyBpc3N1ZXNcblx0XHRpZiAoICFzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkICYmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBlbGVtLm5vZGVUeXBlID09PSAxMSApICYmXG5cdFx0XHRcdCFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gV2UgZXNjaGV3IFNpenpsZSBoZXJlIGZvciBwZXJmb3JtYW5jZSByZWFzb25zOiBodHRwczovL2pzcGVyZi5jb20vZ2V0YWxsLXZzLXNpenpsZS8yXG5cdFx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lICk7XG5cdFx0XHRzcmNFbGVtZW50cyA9IGdldEFsbCggZWxlbSApO1xuXG5cdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zml4SW5wdXQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29weSB0aGUgZXZlbnRzIGZyb20gdGhlIG9yaWdpbmFsIHRvIHRoZSBjbG9uZVxuXHRcdGlmICggZGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdGlmICggZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRcdHNyY0VsZW1lbnRzID0gc3JjRWxlbWVudHMgfHwgZ2V0QWxsKCBlbGVtICk7XG5cdFx0XHRcdGRlc3RFbGVtZW50cyA9IGRlc3RFbGVtZW50cyB8fCBnZXRBbGwoIGNsb25lICk7XG5cblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNsb25lQ29weUV2ZW50KCBlbGVtLCBjbG9uZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lLCBcInNjcmlwdFwiICk7XG5cdFx0aWYgKCBkZXN0RWxlbWVudHMubGVuZ3RoID4gMCApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIGRlc3RFbGVtZW50cywgIWluUGFnZSAmJiBnZXRBbGwoIGVsZW0sIFwic2NyaXB0XCIgKSApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB0aGUgY2xvbmVkIHNldFxuXHRcdHJldHVybiBjbG9uZTtcblx0fSxcblxuXHRjbGVhbkRhdGE6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblx0XHR2YXIgZGF0YSwgZWxlbSwgdHlwZSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbCxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSBlbGVtc1sgaSBdICkgIT09IHVuZGVmaW5lZDsgaSsrICkge1xuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cdFx0XHRcdGlmICggKCBkYXRhID0gZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdGZvciAoIHR5cGUgaW4gZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbFsgdHlwZSBdICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0XHRcdFx0XHQvLyBUaGlzIGlzIGEgc2hvcnRjdXQgdG8gYXZvaWQgalF1ZXJ5LmV2ZW50LnJlbW92ZSdzIG92ZXJoZWFkXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBkYXRhLmhhbmRsZSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gKSB7XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRldGFjaDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IgKTtcblx0fSxcblxuXHR0ZXh0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkudGV4dCggdGhpcyApIDpcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0dGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0YXBwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0cHJlcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZSggZWxlbSwgdGFyZ2V0LmZpcnN0Q2hpbGQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YmVmb3JlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRhZnRlcjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMubmV4dFNpYmxpbmcgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IHRoaXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblxuXHRcdFx0XHQvLyBSZW1vdmUgYW55IHJlbWFpbmluZyBub2Rlc1xuXHRcdFx0XHRlbGVtLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdGRhdGFBbmRFdmVudHMgPSBkYXRhQW5kRXZlbnRzID09IG51bGwgPyBmYWxzZSA6IGRhdGFBbmRFdmVudHM7XG5cdFx0ZGVlcERhdGFBbmRFdmVudHMgPSBkZWVwRGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZGF0YUFuZEV2ZW50cyA6IGRlZXBEYXRhQW5kRXZlbnRzO1xuXG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY2xvbmUoIHRoaXMsIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdGh0bWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXSB8fCB7fSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdGwgPSB0aGlzLmxlbmd0aDtcblxuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmlubmVySFRNTDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2VlIGlmIHdlIGNhbiB0YWtlIGEgc2hvcnRjdXQgYW5kIGp1c3QgdXNlIGlubmVySFRNTFxuXHRcdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgIXJub0lubmVyaHRtbC50ZXN0KCB2YWx1ZSApICYmXG5cdFx0XHRcdCF3cmFwTWFwWyAoIHJ0YWdOYW1lLmV4ZWMoIHZhbHVlICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCkgXSApIHtcblxuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5odG1sUHJlZmlsdGVyKCB2YWx1ZSApO1xuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdFx0ZWxlbSA9IHRoaXNbIGkgXSB8fCB7fTtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlIGVsZW1lbnQgbm9kZXMgYW5kIHByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXHRcdFx0XHRcdFx0XHRlbGVtLmlubmVySFRNTCA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW0gPSAwO1xuXG5cdFx0XHRcdC8vIElmIHVzaW5nIGlubmVySFRNTCB0aHJvd3MgYW4gZXhjZXB0aW9uLCB1c2UgdGhlIGZhbGxiYWNrIG1ldGhvZFxuXHRcdFx0XHR9IGNhdGNoICggZSApIHt9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmFwcGVuZCggdmFsdWUgKTtcblx0XHRcdH1cblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdHJlcGxhY2VXaXRoOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaWdub3JlZCA9IFtdO1xuXG5cdFx0Ly8gTWFrZSB0aGUgY2hhbmdlcywgcmVwbGFjaW5nIGVhY2ggbm9uLWlnbm9yZWQgY29udGV4dCBlbGVtZW50IHdpdGggdGhlIG5ldyBjb250ZW50XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcblxuXHRcdFx0aWYgKCBqUXVlcnkuaW5BcnJheSggdGhpcywgaWdub3JlZCApIDwgMCApIHtcblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCB0aGlzICkgKTtcblx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnJlcGxhY2VDaGlsZCggZWxlbSwgdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBGb3JjZSBjYWxsYmFjayBpbnZvY2F0aW9uXG5cdFx0fSwgaWdub3JlZCApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCB7XG5cdGFwcGVuZFRvOiBcImFwcGVuZFwiLFxuXHRwcmVwZW5kVG86IFwicHJlcGVuZFwiLFxuXHRpbnNlcnRCZWZvcmU6IFwiYmVmb3JlXCIsXG5cdGluc2VydEFmdGVyOiBcImFmdGVyXCIsXG5cdHJlcGxhY2VBbGw6IFwicmVwbGFjZVdpdGhcIlxufSwgZnVuY3Rpb24oIG5hbWUsIG9yaWdpbmFsICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgZWxlbXMsXG5cdFx0XHRyZXQgPSBbXSxcblx0XHRcdGluc2VydCA9IGpRdWVyeSggc2VsZWN0b3IgKSxcblx0XHRcdGxhc3QgPSBpbnNlcnQubGVuZ3RoIC0gMSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyBpIDw9IGxhc3Q7IGkrKyApIHtcblx0XHRcdGVsZW1zID0gaSA9PT0gbGFzdCA/IHRoaXMgOiB0aGlzLmNsb25lKCB0cnVlICk7XG5cdFx0XHRqUXVlcnkoIGluc2VydFsgaSBdIClbIG9yaWdpbmFsIF0oIGVsZW1zICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0Ly8gLmdldCgpIGJlY2F1c2UgcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0cHVzaC5hcHBseSggcmV0LCBlbGVtcy5nZXQoKSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggcmV0ICk7XG5cdH07XG59ICk7XG52YXIgcm51bW5vbnB4ID0gbmV3IFJlZ0V4cCggXCJeKFwiICsgcG51bSArIFwiKSg/IXB4KVthLXolXSskXCIsIFwiaVwiICk7XG5cbnZhciByY3VzdG9tUHJvcCA9IC9eLS0vO1xuXG5cbnZhciBnZXRTdHlsZXMgPSBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seSwgRmlyZWZveCA8PTMwICh0cmFjLTE1MDk4LCB0cmFjLTE0MTUwKVxuXHRcdC8vIElFIHRocm93cyBvbiBlbGVtZW50cyBjcmVhdGVkIGluIHBvcHVwc1xuXHRcdC8vIEZGIG1lYW53aGlsZSB0aHJvd3Mgb24gZnJhbWUgZWxlbWVudHMgdGhyb3VnaCBcImRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGVcIlxuXHRcdHZhciB2aWV3ID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXG5cdFx0aWYgKCAhdmlldyB8fCAhdmlldy5vcGVuZXIgKSB7XG5cdFx0XHR2aWV3ID0gd2luZG93O1xuXHRcdH1cblxuXHRcdHJldHVybiB2aWV3LmdldENvbXB1dGVkU3R5bGUoIGVsZW0gKTtcblx0fTtcblxudmFyIHN3YXAgPSBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgY2FsbGJhY2sgKSB7XG5cdHZhciByZXQsIG5hbWUsXG5cdFx0b2xkID0ge307XG5cblx0Ly8gUmVtZW1iZXIgdGhlIG9sZCB2YWx1ZXMsIGFuZCBpbnNlcnQgdGhlIG5ldyBvbmVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRvbGRbIG5hbWUgXSA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvcHRpb25zWyBuYW1lIF07XG5cdH1cblxuXHRyZXQgPSBjYWxsYmFjay5jYWxsKCBlbGVtICk7XG5cblx0Ly8gUmV2ZXJ0IHRoZSBvbGQgdmFsdWVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvbGRbIG5hbWUgXTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59O1xuXG5cbnZhciByYm94U3R5bGUgPSBuZXcgUmVnRXhwKCBjc3NFeHBhbmQuam9pbiggXCJ8XCIgKSwgXCJpXCIgKTtcblxudmFyIHdoaXRlc3BhY2UgPSBcIltcXFxceDIwXFxcXHRcXFxcclxcXFxuXFxcXGZdXCI7XG5cblxudmFyIHJ0cmltQ1NTID0gbmV3IFJlZ0V4cChcblx0XCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIrfCgoPzpefFteXFxcXFxcXFxdKSg/OlxcXFxcXFxcLikqKVwiICsgd2hpdGVzcGFjZSArIFwiKyRcIixcblx0XCJnXCJcbik7XG5cblxuXG5cbiggZnVuY3Rpb24oKSB7XG5cblx0Ly8gRXhlY3V0aW5nIGJvdGggcGl4ZWxQb3NpdGlvbiAmIGJveFNpemluZ1JlbGlhYmxlIHRlc3RzIHJlcXVpcmUgb25seSBvbmUgbGF5b3V0XG5cdC8vIHNvIHRoZXkncmUgZXhlY3V0ZWQgYXQgdGhlIHNhbWUgdGltZSB0byBzYXZlIHRoZSBzZWNvbmQgY29tcHV0YXRpb24uXG5cdGZ1bmN0aW9uIGNvbXB1dGVTdHlsZVRlc3RzKCkge1xuXG5cdFx0Ly8gVGhpcyBpcyBhIHNpbmdsZXRvbiwgd2UgbmVlZCB0byBleGVjdXRlIGl0IG9ubHkgb25jZVxuXHRcdGlmICggIWRpdiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246YWJzb2x1dGU7bGVmdDotMTExMTFweDt3aWR0aDo2MHB4O1wiICtcblx0XHRcdFwibWFyZ2luLXRvcDoxcHg7cGFkZGluZzowO2JvcmRlcjowXCI7XG5cdFx0ZGl2LnN0eWxlLmNzc1RleHQgPVxuXHRcdFx0XCJwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO2JveC1zaXppbmc6Ym9yZGVyLWJveDtvdmVyZmxvdzpzY3JvbGw7XCIgK1xuXHRcdFx0XCJtYXJnaW46YXV0bztib3JkZXI6MXB4O3BhZGRpbmc6MXB4O1wiICtcblx0XHRcdFwid2lkdGg6NjAlO3RvcDoxJVwiO1xuXHRcdGRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZCggY29udGFpbmVyICkuYXBwZW5kQ2hpbGQoIGRpdiApO1xuXG5cdFx0dmFyIGRpdlN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGRpdiApO1xuXHRcdHBpeGVsUG9zaXRpb25WYWwgPSBkaXZTdHlsZS50b3AgIT09IFwiMSVcIjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIEZpcmVmb3ggPD0zIC0gNDRcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnRWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLm1hcmdpbkxlZnQgKSA9PT0gMTI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBTYWZhcmkgPD05LjEgLSAxMC4xLCBpT1MgPD03LjAgLSA5LjNcblx0XHQvLyBTb21lIHN0eWxlcyBjb21lIGJhY2sgd2l0aCBwZXJjZW50YWdlIHZhbHVlcywgZXZlbiB0aG91Z2ggdGhleSBzaG91bGRuJ3Rcblx0XHRkaXYuc3R5bGUucmlnaHQgPSBcIjYwJVwiO1xuXHRcdHBpeGVsQm94U3R5bGVzVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS5yaWdodCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdFx0Ly8gRGV0ZWN0IG1pc3JlcG9ydGluZyBvZiBjb250ZW50IGRpbWVuc2lvbnMgZm9yIGJveC1zaXppbmc6Ym9yZGVyLWJveCBlbGVtZW50c1xuXHRcdGJveFNpemluZ1JlbGlhYmxlVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS53aWR0aCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdC8vIERldGVjdCBvdmVyZmxvdzpzY3JvbGwgc2NyZXdpbmVzcyAoZ2gtMzY5OSlcblx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD02NFxuXHRcdC8vIERvbid0IGdldCB0cmlja2VkIHdoZW4gem9vbSBhZmZlY3RzIG9mZnNldFdpZHRoIChnaC00MDI5KVxuXHRcdGRpdi5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcblx0XHRzY3JvbGxib3hTaXplVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXYub2Zmc2V0V2lkdGggLyAzICkgPT09IDEyO1xuXG5cdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcblxuXHRcdC8vIE51bGxpZnkgdGhlIGRpdiBzbyBpdCB3b3VsZG4ndCBiZSBzdG9yZWQgaW4gdGhlIG1lbW9yeSBhbmRcblx0XHQvLyBpdCB3aWxsIGFsc28gYmUgYSBzaWduIHRoYXQgY2hlY2tzIGFscmVhZHkgcGVyZm9ybWVkXG5cdFx0ZGl2ID0gbnVsbDtcblx0fVxuXG5cdGZ1bmN0aW9uIHJvdW5kUGl4ZWxNZWFzdXJlcyggbWVhc3VyZSApIHtcblx0XHRyZXR1cm4gTWF0aC5yb3VuZCggcGFyc2VGbG9hdCggbWVhc3VyZSApICk7XG5cdH1cblxuXHR2YXIgcGl4ZWxQb3NpdGlvblZhbCwgYm94U2l6aW5nUmVsaWFibGVWYWwsIHNjcm9sbGJveFNpemVWYWwsIHBpeGVsQm94U3R5bGVzVmFsLFxuXHRcdHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsLCByZWxpYWJsZU1hcmdpbkxlZnRWYWwsXG5cdFx0Y29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLFxuXHRcdGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblxuXHQvLyBGaW5pc2ggZWFybHkgaW4gbGltaXRlZCAobm9uLWJyb3dzZXIpIGVudmlyb25tZW50c1xuXHRpZiAoICFkaXYuc3R5bGUgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHQvLyBTdHlsZSBvZiBjbG9uZWQgZWxlbWVudCBhZmZlY3RzIHNvdXJjZSBlbGVtZW50IGNsb25lZCAodHJhYy04OTA4KVxuXHRkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcImNvbnRlbnQtYm94XCI7XG5cdGRpdi5jbG9uZU5vZGUoIHRydWUgKS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiXCI7XG5cdHN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlID0gZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID09PSBcImNvbnRlbnQtYm94XCI7XG5cblx0alF1ZXJ5LmV4dGVuZCggc3VwcG9ydCwge1xuXHRcdGJveFNpemluZ1JlbGlhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gYm94U2l6aW5nUmVsaWFibGVWYWw7XG5cdFx0fSxcblx0XHRwaXhlbEJveFN0eWxlczogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsQm94U3R5bGVzVmFsO1xuXHRcdH0sXG5cdFx0cGl4ZWxQb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsUG9zaXRpb25WYWw7XG5cdFx0fSxcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiByZWxpYWJsZU1hcmdpbkxlZnRWYWw7XG5cdFx0fSxcblx0XHRzY3JvbGxib3hTaXplOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gc2Nyb2xsYm94U2l6ZVZhbDtcblx0XHR9LFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExKywgRWRnZSAxNSAtIDE4K1xuXHRcdC8vIElFL0VkZ2UgbWlzcmVwb3J0IGBnZXRDb21wdXRlZFN0eWxlYCBvZiB0YWJsZSByb3dzIHdpdGggd2lkdGgvaGVpZ2h0XG5cdFx0Ly8gc2V0IGluIENTUyB3aGlsZSBgb2Zmc2V0KmAgcHJvcGVydGllcyByZXBvcnQgY29ycmVjdCB2YWx1ZXMuXG5cdFx0Ly8gQmVoYXZpb3IgaW4gSUUgOSBpcyBtb3JlIHN1YnRsZSB0aGFuIGluIG5ld2VyIHZlcnNpb25zICYgaXQgcGFzc2VzXG5cdFx0Ly8gc29tZSB2ZXJzaW9ucyBvZiB0aGlzIHRlc3Q7IG1ha2Ugc3VyZSBub3QgdG8gbWFrZSBpdCBwYXNzIHRoZXJlIVxuXHRcdC8vXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA3MCtcblx0XHQvLyBPbmx5IEZpcmVmb3ggaW5jbHVkZXMgYm9yZGVyIHdpZHRoc1xuXHRcdC8vIGluIGNvbXB1dGVkIGRpbWVuc2lvbnMuIChnaC00NTI5KVxuXHRcdHJlbGlhYmxlVHJEaW1lbnNpb25zOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciB0YWJsZSwgdHIsIHRyQ2hpbGQsIHRyU3R5bGU7XG5cdFx0XHRpZiAoIHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHRhYmxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJ0YWJsZVwiICk7XG5cdFx0XHRcdHRyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJ0clwiICk7XG5cdFx0XHRcdHRyQ2hpbGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cblx0XHRcdFx0dGFibGUuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246YWJzb2x1dGU7bGVmdDotMTExMTFweDtib3JkZXItY29sbGFwc2U6c2VwYXJhdGVcIjtcblx0XHRcdFx0dHIuc3R5bGUuY3NzVGV4dCA9IFwiYm9yZGVyOjFweCBzb2xpZFwiO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA4Nitcblx0XHRcdFx0Ly8gSGVpZ2h0IHNldCB0aHJvdWdoIGNzc1RleHQgZG9lcyBub3QgZ2V0IGFwcGxpZWQuXG5cdFx0XHRcdC8vIENvbXB1dGVkIGhlaWdodCB0aGVuIGNvbWVzIGJhY2sgYXMgMC5cblx0XHRcdFx0dHIuc3R5bGUuaGVpZ2h0ID0gXCIxcHhcIjtcblx0XHRcdFx0dHJDaGlsZC5zdHlsZS5oZWlnaHQgPSBcIjlweFwiO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgOCBDaHJvbWUgODYrXG5cdFx0XHRcdC8vIEluIG91ciBib2R5QmFja2dyb3VuZC5odG1sIGlmcmFtZSxcblx0XHRcdFx0Ly8gZGlzcGxheSBmb3IgYWxsIGRpdiBlbGVtZW50cyBpcyBzZXQgdG8gXCJpbmxpbmVcIixcblx0XHRcdFx0Ly8gd2hpY2ggY2F1c2VzIGEgcHJvYmxlbSBvbmx5IGluIEFuZHJvaWQgOCBDaHJvbWUgODYuXG5cdFx0XHRcdC8vIEVuc3VyaW5nIHRoZSBkaXYgaXMgZGlzcGxheTogYmxvY2tcblx0XHRcdFx0Ly8gZ2V0cyBhcm91bmQgdGhpcyBpc3N1ZS5cblx0XHRcdFx0dHJDaGlsZC5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuXG5cdFx0XHRcdGRvY3VtZW50RWxlbWVudFxuXHRcdFx0XHRcdC5hcHBlbmRDaGlsZCggdGFibGUgKVxuXHRcdFx0XHRcdC5hcHBlbmRDaGlsZCggdHIgKVxuXHRcdFx0XHRcdC5hcHBlbmRDaGlsZCggdHJDaGlsZCApO1xuXG5cdFx0XHRcdHRyU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggdHIgKTtcblx0XHRcdFx0cmVsaWFibGVUckRpbWVuc2lvbnNWYWwgPSAoIHBhcnNlSW50KCB0clN0eWxlLmhlaWdodCwgMTAgKSArXG5cdFx0XHRcdFx0cGFyc2VJbnQoIHRyU3R5bGUuYm9yZGVyVG9wV2lkdGgsIDEwICkgK1xuXHRcdFx0XHRcdHBhcnNlSW50KCB0clN0eWxlLmJvcmRlckJvdHRvbVdpZHRoLCAxMCApICkgPT09IHRyLm9mZnNldEhlaWdodDtcblxuXHRcdFx0XHRkb2N1bWVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoIHRhYmxlICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVsaWFibGVUckRpbWVuc2lvbnNWYWw7XG5cdFx0fVxuXHR9ICk7XG59ICkoKTtcblxuXG5mdW5jdGlvbiBjdXJDU1MoIGVsZW0sIG5hbWUsIGNvbXB1dGVkICkge1xuXHR2YXIgd2lkdGgsIG1pbldpZHRoLCBtYXhXaWR0aCwgcmV0LFxuXHRcdGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QoIG5hbWUgKSxcblxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggNTErXG5cdFx0Ly8gUmV0cmlldmluZyBzdHlsZSBiZWZvcmUgY29tcHV0ZWQgc29tZWhvd1xuXHRcdC8vIGZpeGVzIGFuIGlzc3VlIHdpdGggZ2V0dGluZyB3cm9uZyB2YWx1ZXNcblx0XHQvLyBvbiBkZXRhY2hlZCBlbGVtZW50c1xuXHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRjb21wdXRlZCA9IGNvbXB1dGVkIHx8IGdldFN0eWxlcyggZWxlbSApO1xuXG5cdC8vIGdldFByb3BlcnR5VmFsdWUgaXMgbmVlZGVkIGZvcjpcblx0Ly8gICAuY3NzKCdmaWx0ZXInKSAoSUUgOSBvbmx5LCB0cmFjLTEyNTM3KVxuXHQvLyAgIC5jc3MoJy0tY3VzdG9tUHJvcGVydHkpIChnaC0zMTQ0KVxuXHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTErXG5cdFx0Ly8gSUUgb25seSBzdXBwb3J0cyBgXCJmbG9hdFwiYCBpbiBgZ2V0UHJvcGVydHlWYWx1ZWA7IGluIGNvbXB1dGVkIHN0eWxlc1xuXHRcdC8vIGl0J3Mgb25seSBhdmFpbGFibGUgYXMgYFwiY3NzRmxvYXRcImAuIFdlIG5vIGxvbmdlciBtb2RpZnkgcHJvcGVydGllc1xuXHRcdC8vIHNlbnQgdG8gYC5jc3MoKWAgYXBhcnQgZnJvbSBjYW1lbENhc2luZywgc28gd2UgbmVlZCB0byBjaGVjayBib3RoLlxuXHRcdC8vIE5vcm1hbGx5LCB0aGlzIHdvdWxkIGNyZWF0ZSBkaWZmZXJlbmNlIGluIGJlaGF2aW9yOiBpZlxuXHRcdC8vIGBnZXRQcm9wZXJ0eVZhbHVlYCByZXR1cm5zIGFuIGVtcHR5IHN0cmluZywgdGhlIHZhbHVlIHJldHVybmVkXG5cdFx0Ly8gYnkgYC5jc3MoKWAgd291bGQgYmUgYHVuZGVmaW5lZGAuIFRoaXMgaXMgdXN1YWxseSB0aGUgY2FzZSBmb3Jcblx0XHQvLyBkaXNjb25uZWN0ZWQgZWxlbWVudHMuIEhvd2V2ZXIsIGluIElFIGV2ZW4gZGlzY29ubmVjdGVkIGVsZW1lbnRzXG5cdFx0Ly8gd2l0aCBubyBzdHlsZXMgcmV0dXJuIGBcIm5vbmVcImAgZm9yIGBnZXRQcm9wZXJ0eVZhbHVlKCBcImZsb2F0XCIgKWBcblx0XHRyZXQgPSBjb21wdXRlZC5nZXRQcm9wZXJ0eVZhbHVlKCBuYW1lICkgfHwgY29tcHV0ZWRbIG5hbWUgXTtcblxuXHRcdGlmICggaXNDdXN0b21Qcm9wICYmIHJldCApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCAxMDUrLCBDaHJvbWUgPD0xMDUrXG5cdFx0XHQvLyBTcGVjIHJlcXVpcmVzIHRyaW1taW5nIHdoaXRlc3BhY2UgZm9yIGN1c3RvbSBwcm9wZXJ0aWVzIChnaC00OTI2KS5cblx0XHRcdC8vIEZpcmVmb3ggb25seSB0cmltcyBsZWFkaW5nIHdoaXRlc3BhY2UuIENocm9tZSBqdXN0IGNvbGxhcHNlc1xuXHRcdFx0Ly8gYm90aCBsZWFkaW5nICYgdHJhaWxpbmcgd2hpdGVzcGFjZSB0byBhIHNpbmdsZSBzcGFjZS5cblx0XHRcdC8vXG5cdFx0XHQvLyBGYWxsIGJhY2sgdG8gYHVuZGVmaW5lZGAgaWYgZW1wdHkgc3RyaW5nIHJldHVybmVkLlxuXHRcdFx0Ly8gVGhpcyBjb2xsYXBzZXMgYSBtaXNzaW5nIGRlZmluaXRpb24gd2l0aCBwcm9wZXJ0eSBkZWZpbmVkXG5cdFx0XHQvLyBhbmQgc2V0IHRvIGFuIGVtcHR5IHN0cmluZyBidXQgdGhlcmUncyBubyBzdGFuZGFyZCBBUElcblx0XHRcdC8vIGFsbG93aW5nIHVzIHRvIGRpZmZlcmVudGlhdGUgdGhlbSB3aXRob3V0IGEgcGVyZm9ybWFuY2UgcGVuYWx0eVxuXHRcdFx0Ly8gYW5kIHJldHVybmluZyBgdW5kZWZpbmVkYCBhbGlnbnMgd2l0aCBvbGRlciBqUXVlcnkuXG5cdFx0XHQvL1xuXHRcdFx0Ly8gcnRyaW1DU1MgdHJlYXRzIFUrMDAwRCBDQVJSSUFHRSBSRVRVUk4gYW5kIFUrMDAwQyBGT1JNIEZFRURcblx0XHRcdC8vIGFzIHdoaXRlc3BhY2Ugd2hpbGUgQ1NTIGRvZXMgbm90LCBidXQgdGhpcyBpcyBub3QgYSBwcm9ibGVtXG5cdFx0XHQvLyBiZWNhdXNlIENTUyBwcmVwcm9jZXNzaW5nIHJlcGxhY2VzIHRoZW0gd2l0aCBVKzAwMEEgTElORSBGRUVEXG5cdFx0XHQvLyAod2hpY2ggKmlzKiBDU1Mgd2hpdGVzcGFjZSlcblx0XHRcdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9jc3Mtc3ludGF4LTMvI2lucHV0LXByZXByb2Nlc3Npbmdcblx0XHRcdHJldCA9IHJldC5yZXBsYWNlKCBydHJpbUNTUywgXCIkMVwiICkgfHwgdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdGlmICggcmV0ID09PSBcIlwiICYmICFpc0F0dGFjaGVkKCBlbGVtICkgKSB7XG5cdFx0XHRyZXQgPSBqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBBIHRyaWJ1dGUgdG8gdGhlIFwiYXdlc29tZSBoYWNrIGJ5IERlYW4gRWR3YXJkc1wiXG5cdFx0Ly8gQW5kcm9pZCBCcm93c2VyIHJldHVybnMgcGVyY2VudGFnZSBmb3Igc29tZSB2YWx1ZXMsXG5cdFx0Ly8gYnV0IHdpZHRoIHNlZW1zIHRvIGJlIHJlbGlhYmx5IHBpeGVscy5cblx0XHQvLyBUaGlzIGlzIGFnYWluc3QgdGhlIENTU09NIGRyYWZ0IHNwZWM6XG5cdFx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNyZXNvbHZlZC12YWx1ZXNcblx0XHRpZiAoICFzdXBwb3J0LnBpeGVsQm94U3R5bGVzKCkgJiYgcm51bW5vbnB4LnRlc3QoIHJldCApICYmIHJib3hTdHlsZS50ZXN0KCBuYW1lICkgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBvcmlnaW5hbCB2YWx1ZXNcblx0XHRcdHdpZHRoID0gc3R5bGUud2lkdGg7XG5cdFx0XHRtaW5XaWR0aCA9IHN0eWxlLm1pbldpZHRoO1xuXHRcdFx0bWF4V2lkdGggPSBzdHlsZS5tYXhXaWR0aDtcblxuXHRcdFx0Ly8gUHV0IGluIHRoZSBuZXcgdmFsdWVzIHRvIGdldCBhIGNvbXB1dGVkIHZhbHVlIG91dFxuXHRcdFx0c3R5bGUubWluV2lkdGggPSBzdHlsZS5tYXhXaWR0aCA9IHN0eWxlLndpZHRoID0gcmV0O1xuXHRcdFx0cmV0ID0gY29tcHV0ZWQud2lkdGg7XG5cblx0XHRcdC8vIFJldmVydCB0aGUgY2hhbmdlZCB2YWx1ZXNcblx0XHRcdHN0eWxlLndpZHRoID0gd2lkdGg7XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IG1pbldpZHRoO1xuXHRcdFx0c3R5bGUubWF4V2lkdGggPSBtYXhXaWR0aDtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gcmV0ICE9PSB1bmRlZmluZWQgP1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdC8vIElFIHJldHVybnMgekluZGV4IHZhbHVlIGFzIGFuIGludGVnZXIuXG5cdFx0cmV0ICsgXCJcIiA6XG5cdFx0cmV0O1xufVxuXG5cbmZ1bmN0aW9uIGFkZEdldEhvb2tJZiggY29uZGl0aW9uRm4sIGhvb2tGbiApIHtcblxuXHQvLyBEZWZpbmUgdGhlIGhvb2ssIHdlJ2xsIGNoZWNrIG9uIHRoZSBmaXJzdCBydW4gaWYgaXQncyByZWFsbHkgbmVlZGVkLlxuXHRyZXR1cm4ge1xuXHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGNvbmRpdGlvbkZuKCkgKSB7XG5cblx0XHRcdFx0Ly8gSG9vayBub3QgbmVlZGVkIChvciBpdCdzIG5vdCBwb3NzaWJsZSB0byB1c2UgaXQgZHVlXG5cdFx0XHRcdC8vIHRvIG1pc3NpbmcgZGVwZW5kZW5jeSksIHJlbW92ZSBpdC5cblx0XHRcdFx0ZGVsZXRlIHRoaXMuZ2V0O1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIEhvb2sgbmVlZGVkOyByZWRlZmluZSBpdCBzbyB0aGF0IHRoZSBzdXBwb3J0IHRlc3QgaXMgbm90IGV4ZWN1dGVkIGFnYWluLlxuXHRcdFx0cmV0dXJuICggdGhpcy5nZXQgPSBob29rRm4gKS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fVxuXHR9O1xufVxuXG5cbnZhciBjc3NQcmVmaXhlcyA9IFsgXCJXZWJraXRcIiwgXCJNb3pcIiwgXCJtc1wiIF0sXG5cdGVtcHR5U3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkuc3R5bGUsXG5cdHZlbmRvclByb3BzID0ge307XG5cbi8vIFJldHVybiBhIHZlbmRvci1wcmVmaXhlZCBwcm9wZXJ0eSBvciB1bmRlZmluZWRcbmZ1bmN0aW9uIHZlbmRvclByb3BOYW1lKCBuYW1lICkge1xuXG5cdC8vIENoZWNrIGZvciB2ZW5kb3IgcHJlZml4ZWQgbmFtZXNcblx0dmFyIGNhcE5hbWUgPSBuYW1lWyAwIF0udG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoIDEgKSxcblx0XHRpID0gY3NzUHJlZml4ZXMubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdG5hbWUgPSBjc3NQcmVmaXhlc1sgaSBdICsgY2FwTmFtZTtcblx0XHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRcdHJldHVybiBuYW1lO1xuXHRcdH1cblx0fVxufVxuXG4vLyBSZXR1cm4gYSBwb3RlbnRpYWxseS1tYXBwZWQgalF1ZXJ5LmNzc1Byb3BzIG9yIHZlbmRvciBwcmVmaXhlZCBwcm9wZXJ0eVxuZnVuY3Rpb24gZmluYWxQcm9wTmFtZSggbmFtZSApIHtcblx0dmFyIGZpbmFsID0galF1ZXJ5LmNzc1Byb3BzWyBuYW1lIF0gfHwgdmVuZG9yUHJvcHNbIG5hbWUgXTtcblxuXHRpZiAoIGZpbmFsICkge1xuXHRcdHJldHVybiBmaW5hbDtcblx0fVxuXHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRyZXR1cm4gbmFtZTtcblx0fVxuXHRyZXR1cm4gdmVuZG9yUHJvcHNbIG5hbWUgXSA9IHZlbmRvclByb3BOYW1lKCBuYW1lICkgfHwgbmFtZTtcbn1cblxuXG52YXJcblxuXHQvLyBTd2FwcGFibGUgaWYgZGlzcGxheSBpcyBub25lIG9yIHN0YXJ0cyB3aXRoIHRhYmxlXG5cdC8vIGV4Y2VwdCBcInRhYmxlXCIsIFwidGFibGUtY2VsbFwiLCBvciBcInRhYmxlLWNhcHRpb25cIlxuXHQvLyBTZWUgaGVyZSBmb3IgZGlzcGxheSB2YWx1ZXM6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvQ1NTL2Rpc3BsYXlcblx0cmRpc3BsYXlzd2FwID0gL14obm9uZXx0YWJsZSg/IS1jW2VhXSkuKykvLFxuXHRjc3NTaG93ID0geyBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCB2aXNpYmlsaXR5OiBcImhpZGRlblwiLCBkaXNwbGF5OiBcImJsb2NrXCIgfSxcblx0Y3NzTm9ybWFsVHJhbnNmb3JtID0ge1xuXHRcdGxldHRlclNwYWNpbmc6IFwiMFwiLFxuXHRcdGZvbnRXZWlnaHQ6IFwiNDAwXCJcblx0fTtcblxuZnVuY3Rpb24gc2V0UG9zaXRpdmVOdW1iZXIoIF9lbGVtLCB2YWx1ZSwgc3VidHJhY3QgKSB7XG5cblx0Ly8gQW55IHJlbGF0aXZlICgrLy0pIHZhbHVlcyBoYXZlIGFscmVhZHkgYmVlblxuXHQvLyBub3JtYWxpemVkIGF0IHRoaXMgcG9pbnRcblx0dmFyIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICk7XG5cdHJldHVybiBtYXRjaGVzID9cblxuXHRcdC8vIEd1YXJkIGFnYWluc3QgdW5kZWZpbmVkIFwic3VidHJhY3RcIiwgZS5nLiwgd2hlbiB1c2VkIGFzIGluIGNzc0hvb2tzXG5cdFx0TWF0aC5tYXgoIDAsIG1hdGNoZXNbIDIgXSAtICggc3VidHJhY3QgfHwgMCApICkgKyAoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSA6XG5cdFx0dmFsdWU7XG59XG5cbmZ1bmN0aW9uIGJveE1vZGVsQWRqdXN0bWVudCggZWxlbSwgZGltZW5zaW9uLCBib3gsIGlzQm9yZGVyQm94LCBzdHlsZXMsIGNvbXB1dGVkVmFsICkge1xuXHR2YXIgaSA9IGRpbWVuc2lvbiA9PT0gXCJ3aWR0aFwiID8gMSA6IDAsXG5cdFx0ZXh0cmEgPSAwLFxuXHRcdGRlbHRhID0gMDtcblxuXHQvLyBBZGp1c3RtZW50IG1heSBub3QgYmUgbmVjZXNzYXJ5XG5cdGlmICggYm94ID09PSAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICkgKSB7XG5cdFx0cmV0dXJuIDA7XG5cdH1cblxuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgKSB7XG5cblx0XHQvLyBCb3RoIGJveCBtb2RlbHMgZXhjbHVkZSBtYXJnaW5cblx0XHRpZiAoIGJveCA9PT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIGJveCArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHQvLyBJZiB3ZSBnZXQgaGVyZSB3aXRoIGEgY29udGVudC1ib3gsIHdlJ3JlIHNlZWtpbmcgXCJwYWRkaW5nXCIgb3IgXCJib3JkZXJcIiBvciBcIm1hcmdpblwiXG5cdFx0aWYgKCAhaXNCb3JkZXJCb3ggKSB7XG5cblx0XHRcdC8vIEFkZCBwYWRkaW5nXG5cdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gRm9yIFwiYm9yZGVyXCIgb3IgXCJtYXJnaW5cIiwgYWRkIGJvcmRlclxuXHRcdFx0aWYgKCBib3ggIT09IFwicGFkZGluZ1wiICkge1xuXHRcdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBCdXQgc3RpbGwga2VlcCB0cmFjayBvZiBpdCBvdGhlcndpc2Vcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGV4dHJhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHQvLyBJZiB3ZSBnZXQgaGVyZSB3aXRoIGEgYm9yZGVyLWJveCAoY29udGVudCArIHBhZGRpbmcgKyBib3JkZXIpLCB3ZSdyZSBzZWVraW5nIFwiY29udGVudFwiIG9yXG5cdFx0Ly8gXCJwYWRkaW5nXCIgb3IgXCJtYXJnaW5cIlxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIEZvciBcImNvbnRlbnRcIiwgc3VidHJhY3QgcGFkZGluZ1xuXHRcdFx0aWYgKCBib3ggPT09IFwiY29udGVudFwiICkge1xuXHRcdFx0XHRkZWx0YSAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yIFwiY29udGVudFwiIG9yIFwicGFkZGluZ1wiLCBzdWJ0cmFjdCBib3JkZXJcblx0XHRcdGlmICggYm94ICE9PSBcIm1hcmdpblwiICkge1xuXHRcdFx0XHRkZWx0YSAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFjY291bnQgZm9yIHBvc2l0aXZlIGNvbnRlbnQtYm94IHNjcm9sbCBndXR0ZXIgd2hlbiByZXF1ZXN0ZWQgYnkgcHJvdmlkaW5nIGNvbXB1dGVkVmFsXG5cdGlmICggIWlzQm9yZGVyQm94ICYmIGNvbXB1dGVkVmFsID49IDAgKSB7XG5cblx0XHQvLyBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgaXMgYSByb3VuZGVkIHN1bSBvZiBjb250ZW50LCBwYWRkaW5nLCBzY3JvbGwgZ3V0dGVyLCBhbmQgYm9yZGVyXG5cdFx0Ly8gQXNzdW1pbmcgaW50ZWdlciBzY3JvbGwgZ3V0dGVyLCBzdWJ0cmFjdCB0aGUgcmVzdCBhbmQgcm91bmQgZG93blxuXHRcdGRlbHRhICs9IE1hdGgubWF4KCAwLCBNYXRoLmNlaWwoXG5cdFx0XHRlbGVtWyBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApIF0gLVxuXHRcdFx0Y29tcHV0ZWRWYWwgLVxuXHRcdFx0ZGVsdGEgLVxuXHRcdFx0ZXh0cmEgLVxuXHRcdFx0MC41XG5cblx0XHQvLyBJZiBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgaXMgdW5rbm93biwgdGhlbiB3ZSBjYW4ndCBkZXRlcm1pbmUgY29udGVudC1ib3ggc2Nyb2xsIGd1dHRlclxuXHRcdC8vIFVzZSBhbiBleHBsaWNpdCB6ZXJvIHRvIGF2b2lkIE5hTiAoZ2gtMzk2NClcblx0XHQpICkgfHwgMDtcblx0fVxuXG5cdHJldHVybiBkZWx0YTtcbn1cblxuZnVuY3Rpb24gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApIHtcblxuXHQvLyBTdGFydCB3aXRoIGNvbXB1dGVkIHN0eWxlXG5cdHZhciBzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblxuXHRcdC8vIFRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3csIG9ubHkgZmV0Y2ggYm94U2l6aW5nIGlmIHdlIG5lZWQgaXQgKGdoLTQzMjIpLlxuXHRcdC8vIEZha2UgY29udGVudC1ib3ggdW50aWwgd2Uga25vdyBpdCdzIG5lZWRlZCB0byBrbm93IHRoZSB0cnVlIHZhbHVlLlxuXHRcdGJveFNpemluZ05lZWRlZCA9ICFzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgfHwgZXh0cmEsXG5cdFx0aXNCb3JkZXJCb3ggPSBib3hTaXppbmdOZWVkZWQgJiZcblx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IGlzQm9yZGVyQm94LFxuXG5cdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBkaW1lbnNpb24sIHN0eWxlcyApLFxuXHRcdG9mZnNldFByb3AgPSBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApO1xuXG5cdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD01NFxuXHQvLyBSZXR1cm4gYSBjb25mb3VuZGluZyBub24tcGl4ZWwgdmFsdWUgb3IgZmVpZ24gaWdub3JhbmNlLCBhcyBhcHByb3ByaWF0ZS5cblx0aWYgKCBybnVtbm9ucHgudGVzdCggdmFsICkgKSB7XG5cdFx0aWYgKCAhZXh0cmEgKSB7XG5cdFx0XHRyZXR1cm4gdmFsO1xuXHRcdH1cblx0XHR2YWwgPSBcImF1dG9cIjtcblx0fVxuXG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0Ly8gVXNlIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBmb3Igd2hlbiBib3ggc2l6aW5nIGlzIHVucmVsaWFibGUuXG5cdC8vIEluIHRob3NlIGNhc2VzLCB0aGUgY29tcHV0ZWQgdmFsdWUgY2FuIGJlIHRydXN0ZWQgdG8gYmUgYm9yZGVyLWJveC5cblx0aWYgKCAoICFzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgJiYgaXNCb3JkZXJCb3ggfHxcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDEwIC0gMTErLCBFZGdlIDE1IC0gMTgrXG5cdFx0Ly8gSUUvRWRnZSBtaXNyZXBvcnQgYGdldENvbXB1dGVkU3R5bGVgIG9mIHRhYmxlIHJvd3Mgd2l0aCB3aWR0aC9oZWlnaHRcblx0XHQvLyBzZXQgaW4gQ1NTIHdoaWxlIGBvZmZzZXQqYCBwcm9wZXJ0aWVzIHJlcG9ydCBjb3JyZWN0IHZhbHVlcy5cblx0XHQvLyBJbnRlcmVzdGluZ2x5LCBpbiBzb21lIGNhc2VzIElFIDkgZG9lc24ndCBzdWZmZXIgZnJvbSB0aGlzIGlzc3VlLlxuXHRcdCFzdXBwb3J0LnJlbGlhYmxlVHJEaW1lbnNpb25zKCkgJiYgbm9kZU5hbWUoIGVsZW0sIFwidHJcIiApIHx8XG5cblx0XHQvLyBGYWxsIGJhY2sgdG8gb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IHdoZW4gdmFsdWUgaXMgXCJhdXRvXCJcblx0XHQvLyBUaGlzIGhhcHBlbnMgZm9yIGlubGluZSBlbGVtZW50cyB3aXRoIG5vIGV4cGxpY2l0IHNldHRpbmcgKGdoLTM1NzEpXG5cdFx0dmFsID09PSBcImF1dG9cIiB8fFxuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMSAtIDQuMyBvbmx5XG5cdFx0Ly8gQWxzbyB1c2Ugb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGZvciBtaXNyZXBvcnRlZCBpbmxpbmUgZGltZW5zaW9ucyAoZ2gtMzYwMilcblx0XHQhcGFyc2VGbG9hdCggdmFsICkgJiYgalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJpbmxpbmVcIiApICYmXG5cblx0XHQvLyBNYWtlIHN1cmUgdGhlIGVsZW1lbnQgaXMgdmlzaWJsZSAmIGNvbm5lY3RlZFxuXHRcdGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSB7XG5cblx0XHRpc0JvcmRlckJveCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCI7XG5cblx0XHQvLyBXaGVyZSBhdmFpbGFibGUsIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBhcHByb3hpbWF0ZSBib3JkZXIgYm94IGRpbWVuc2lvbnMuXG5cdFx0Ly8gV2hlcmUgbm90IGF2YWlsYWJsZSAoZS5nLiwgU1ZHKSwgYXNzdW1lIHVucmVsaWFibGUgYm94LXNpemluZyBhbmQgaW50ZXJwcmV0IHRoZVxuXHRcdC8vIHJldHJpZXZlZCB2YWx1ZSBhcyBhIGNvbnRlbnQgYm94IGRpbWVuc2lvbi5cblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gb2Zmc2V0UHJvcCBpbiBlbGVtO1xuXHRcdGlmICggdmFsdWVJc0JvcmRlckJveCApIHtcblx0XHRcdHZhbCA9IGVsZW1bIG9mZnNldFByb3AgXTtcblx0XHR9XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgXCJcIiBhbmQgYXV0b1xuXHR2YWwgPSBwYXJzZUZsb2F0KCB2YWwgKSB8fCAwO1xuXG5cdC8vIEFkanVzdCBmb3IgdGhlIGVsZW1lbnQncyBib3ggbW9kZWxcblx0cmV0dXJuICggdmFsICtcblx0XHRib3hNb2RlbEFkanVzdG1lbnQoXG5cdFx0XHRlbGVtLFxuXHRcdFx0ZGltZW5zaW9uLFxuXHRcdFx0ZXh0cmEgfHwgKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApLFxuXHRcdFx0dmFsdWVJc0JvcmRlckJveCxcblx0XHRcdHN0eWxlcyxcblxuXHRcdFx0Ly8gUHJvdmlkZSB0aGUgY3VycmVudCBjb21wdXRlZCBzaXplIHRvIHJlcXVlc3Qgc2Nyb2xsIGd1dHRlciBjYWxjdWxhdGlvbiAoZ2gtMzU4OSlcblx0XHRcdHZhbFxuXHRcdClcblx0KSArIFwicHhcIjtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIEFkZCBpbiBzdHlsZSBwcm9wZXJ0eSBob29rcyBmb3Igb3ZlcnJpZGluZyB0aGUgZGVmYXVsdFxuXHQvLyBiZWhhdmlvciBvZiBnZXR0aW5nIGFuZCBzZXR0aW5nIGEgc3R5bGUgcHJvcGVydHlcblx0Y3NzSG9va3M6IHtcblx0XHRvcGFjaXR5OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHRcdC8vIFdlIHNob3VsZCBhbHdheXMgZ2V0IGEgbnVtYmVyIGJhY2sgZnJvbSBvcGFjaXR5XG5cdFx0XHRcdFx0dmFyIHJldCA9IGN1ckNTUyggZWxlbSwgXCJvcGFjaXR5XCIgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmV0ID09PSBcIlwiID8gXCIxXCIgOiByZXQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Ly8gRG9uJ3QgYXV0b21hdGljYWxseSBhZGQgXCJweFwiIHRvIHRoZXNlIHBvc3NpYmx5LXVuaXRsZXNzIHByb3BlcnRpZXNcblx0Y3NzTnVtYmVyOiB7XG5cdFx0XCJhbmltYXRpb25JdGVyYXRpb25Db3VudFwiOiB0cnVlLFxuXHRcdFwiY29sdW1uQ291bnRcIjogdHJ1ZSxcblx0XHRcImZpbGxPcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJmbGV4R3Jvd1wiOiB0cnVlLFxuXHRcdFwiZmxleFNocmlua1wiOiB0cnVlLFxuXHRcdFwiZm9udFdlaWdodFwiOiB0cnVlLFxuXHRcdFwiZ3JpZEFyZWFcIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5cIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5FbmRcIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5TdGFydFwiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd1wiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd0VuZFwiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd1N0YXJ0XCI6IHRydWUsXG5cdFx0XCJsaW5lSGVpZ2h0XCI6IHRydWUsXG5cdFx0XCJvcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJvcmRlclwiOiB0cnVlLFxuXHRcdFwib3JwaGFuc1wiOiB0cnVlLFxuXHRcdFwid2lkb3dzXCI6IHRydWUsXG5cdFx0XCJ6SW5kZXhcIjogdHJ1ZSxcblx0XHRcInpvb21cIjogdHJ1ZVxuXHR9LFxuXG5cdC8vIEFkZCBpbiBwcm9wZXJ0aWVzIHdob3NlIG5hbWVzIHlvdSB3aXNoIHRvIGZpeCBiZWZvcmVcblx0Ly8gc2V0dGluZyBvciBnZXR0aW5nIHRoZSB2YWx1ZVxuXHRjc3NQcm9wczoge30sXG5cblx0Ly8gR2V0IGFuZCBzZXQgdGhlIHN0eWxlIHByb3BlcnR5IG9uIGEgRE9NIE5vZGVcblx0c3R5bGU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSwgZXh0cmEgKSB7XG5cblx0XHQvLyBEb24ndCBzZXQgc3R5bGVzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoICFlbGVtIHx8IGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCB8fCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWVcblx0XHR2YXIgcmV0LCB0eXBlLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0gY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICksXG5cdFx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBxdWVyeSB0aGUgdmFsdWUgaWYgaXQgaXMgYSBDU1MgY3VzdG9tIHByb3BlcnR5XG5cdFx0Ly8gc2luY2UgdGhleSBhcmUgdXNlci1kZWZpbmVkLlxuXHRcdGlmICggIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdG5hbWUgPSBmaW5hbFByb3BOYW1lKCBvcmlnTmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIEdldHMgaG9vayBmb3IgdGhlIHByZWZpeGVkIHZlcnNpb24sIHRoZW4gdW5wcmVmaXhlZCB2ZXJzaW9uXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBDaGVjayBpZiB3ZSdyZSBzZXR0aW5nIGEgdmFsdWVcblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR0eXBlID0gdHlwZW9mIHZhbHVlO1xuXG5cdFx0XHQvLyBDb252ZXJ0IFwiKz1cIiBvciBcIi09XCIgdG8gcmVsYXRpdmUgbnVtYmVycyAodHJhYy03MzQ1KVxuXHRcdFx0aWYgKCB0eXBlID09PSBcInN0cmluZ1wiICYmICggcmV0ID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiYgcmV0WyAxIF0gKSB7XG5cdFx0XHRcdHZhbHVlID0gYWRqdXN0Q1NTKCBlbGVtLCBuYW1lLCByZXQgKTtcblxuXHRcdFx0XHQvLyBGaXhlcyBidWcgdHJhYy05MjM3XG5cdFx0XHRcdHR5cGUgPSBcIm51bWJlclwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCBudWxsIGFuZCBOYU4gdmFsdWVzIGFyZW4ndCBzZXQgKHRyYWMtNzExNilcblx0XHRcdGlmICggdmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBudW1iZXIgd2FzIHBhc3NlZCBpbiwgYWRkIHRoZSB1bml0IChleGNlcHQgZm9yIGNlcnRhaW4gQ1NTIHByb3BlcnRpZXMpXG5cdFx0XHQvLyBUaGUgaXNDdXN0b21Qcm9wIGNoZWNrIGNhbiBiZSByZW1vdmVkIGluIGpRdWVyeSA0LjAgd2hlbiB3ZSBvbmx5IGF1dG8tYXBwZW5kXG5cdFx0XHQvLyBcInB4XCIgdG8gYSBmZXcgaGFyZGNvZGVkIHZhbHVlcy5cblx0XHRcdGlmICggdHlwZSA9PT0gXCJudW1iZXJcIiAmJiAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0XHR2YWx1ZSArPSByZXQgJiYgcmV0WyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBvcmlnTmFtZSBdID8gXCJcIiA6IFwicHhcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBiYWNrZ3JvdW5kLSogcHJvcHMgYWZmZWN0IG9yaWdpbmFsIGNsb25lJ3MgdmFsdWVzXG5cdFx0XHRpZiAoICFzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSAmJiB2YWx1ZSA9PT0gXCJcIiAmJiBuYW1lLmluZGV4T2YoIFwiYmFja2dyb3VuZFwiICkgPT09IDAgKSB7XG5cdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSBcImluaGVyaXRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCwgdXNlIHRoYXQgdmFsdWUsIG90aGVyd2lzZSBqdXN0IHNldCB0aGUgc3BlY2lmaWVkIHZhbHVlXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHxcblx0XHRcdFx0KCB2YWx1ZSA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGlmICggaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0XHRcdHN0eWxlLnNldFByb3BlcnR5KCBuYW1lLCB2YWx1ZSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIG5vbi1jb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIGZhbHNlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdGhlcndpc2UganVzdCBnZXQgdGhlIHZhbHVlIGZyb20gdGhlIHN0eWxlIG9iamVjdFxuXHRcdFx0cmV0dXJuIHN0eWxlWyBuYW1lIF07XG5cdFx0fVxuXHR9LFxuXG5cdGNzczogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGV4dHJhLCBzdHlsZXMgKSB7XG5cdFx0dmFyIHZhbCwgbnVtLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0gY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBtb2RpZnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRpZiAoICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRuYW1lID0gZmluYWxQcm9wTmFtZSggb3JpZ05hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBUcnkgcHJlZml4ZWQgbmFtZSBmb2xsb3dlZCBieSB0aGUgdW5wcmVmaXhlZCBuYW1lXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbCA9IGhvb2tzLmdldCggZWxlbSwgdHJ1ZSwgZXh0cmEgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2UsIGlmIGEgd2F5IHRvIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZXhpc3RzLCB1c2UgdGhhdFxuXHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgXCJub3JtYWxcIiB0byBjb21wdXRlZCB2YWx1ZVxuXHRcdGlmICggdmFsID09PSBcIm5vcm1hbFwiICYmIG5hbWUgaW4gY3NzTm9ybWFsVHJhbnNmb3JtICkge1xuXHRcdFx0dmFsID0gY3NzTm9ybWFsVHJhbnNmb3JtWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBudW1lcmljIGlmIGZvcmNlZCBvciBhIHF1YWxpZmllciB3YXMgcHJvdmlkZWQgYW5kIHZhbCBsb29rcyBudW1lcmljXG5cdFx0aWYgKCBleHRyYSA9PT0gXCJcIiB8fCBleHRyYSApIHtcblx0XHRcdG51bSA9IHBhcnNlRmxvYXQoIHZhbCApO1xuXHRcdFx0cmV0dXJuIGV4dHJhID09PSB0cnVlIHx8IGlzRmluaXRlKCBudW0gKSA/IG51bSB8fCAwIDogdmFsO1xuXHRcdH1cblxuXHRcdHJldHVybiB2YWw7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJoZWlnaHRcIiwgXCJ3aWR0aFwiIF0sIGZ1bmN0aW9uKCBfaSwgZGltZW5zaW9uICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIGRpbWVuc2lvbiBdID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkLCBleHRyYSApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0Ly8gQ2VydGFpbiBlbGVtZW50cyBjYW4gaGF2ZSBkaW1lbnNpb24gaW5mbyBpZiB3ZSBpbnZpc2libHkgc2hvdyB0aGVtXG5cdFx0XHRcdC8vIGJ1dCBpdCBtdXN0IGhhdmUgYSBjdXJyZW50IGRpc3BsYXkgc3R5bGUgdGhhdCB3b3VsZCBiZW5lZml0XG5cdFx0XHRcdHJldHVybiByZGlzcGxheXN3YXAudGVzdCggalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSApICYmXG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCtcblx0XHRcdFx0XHQvLyBUYWJsZSBjb2x1bW5zIGluIFNhZmFyaSBoYXZlIG5vbi16ZXJvIG9mZnNldFdpZHRoICYgemVyb1xuXHRcdFx0XHRcdC8vIGdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoIHVubGVzcyBkaXNwbGF5IGlzIGNoYW5nZWQuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0XHRcdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYSBkaXNjb25uZWN0ZWQgbm9kZVxuXHRcdFx0XHRcdC8vIGluIElFIHRocm93cyBhbiBlcnJvci5cblx0XHRcdFx0XHQoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoIHx8ICFlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoICkgP1xuXHRcdFx0XHRcdHN3YXAoIGVsZW0sIGNzc1Nob3csIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKTtcblx0XHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRcdGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIGV4dHJhICkge1xuXHRcdFx0dmFyIG1hdGNoZXMsXG5cdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApLFxuXG5cdFx0XHRcdC8vIE9ubHkgcmVhZCBzdHlsZXMucG9zaXRpb24gaWYgdGhlIHRlc3QgaGFzIGEgY2hhbmNlIHRvIGZhaWxcblx0XHRcdFx0Ly8gdG8gYXZvaWQgZm9yY2luZyBhIHJlZmxvdy5cblx0XHRcdFx0c2Nyb2xsYm94U2l6ZUJ1Z2d5ID0gIXN1cHBvcnQuc2Nyb2xsYm94U2l6ZSgpICYmXG5cdFx0XHRcdFx0c3R5bGVzLnBvc2l0aW9uID09PSBcImFic29sdXRlXCIsXG5cblx0XHRcdFx0Ly8gVG8gYXZvaWQgZm9yY2luZyBhIHJlZmxvdywgb25seSBmZXRjaCBib3hTaXppbmcgaWYgd2UgbmVlZCBpdCAoZ2gtMzk5MSlcblx0XHRcdFx0Ym94U2l6aW5nTmVlZGVkID0gc2Nyb2xsYm94U2l6ZUJ1Z2d5IHx8IGV4dHJhLFxuXHRcdFx0XHRpc0JvcmRlckJveCA9IGJveFNpemluZ05lZWRlZCAmJlxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0XHRcdHN1YnRyYWN0ID0gZXh0cmEgP1xuXHRcdFx0XHRcdGJveE1vZGVsQWRqdXN0bWVudChcblx0XHRcdFx0XHRcdGVsZW0sXG5cdFx0XHRcdFx0XHRkaW1lbnNpb24sXG5cdFx0XHRcdFx0XHRleHRyYSxcblx0XHRcdFx0XHRcdGlzQm9yZGVyQm94LFxuXHRcdFx0XHRcdFx0c3R5bGVzXG5cdFx0XHRcdFx0KSA6XG5cdFx0XHRcdFx0MDtcblxuXHRcdFx0Ly8gQWNjb3VudCBmb3IgdW5yZWxpYWJsZSBib3JkZXItYm94IGRpbWVuc2lvbnMgYnkgY29tcGFyaW5nIG9mZnNldCogdG8gY29tcHV0ZWQgYW5kXG5cdFx0XHQvLyBmYWtpbmcgYSBjb250ZW50LWJveCB0byBnZXQgYm9yZGVyIGFuZCBwYWRkaW5nIChnaC0zNjk5KVxuXHRcdFx0aWYgKCBpc0JvcmRlckJveCAmJiBzY3JvbGxib3hTaXplQnVnZ3kgKSB7XG5cdFx0XHRcdHN1YnRyYWN0IC09IE1hdGguY2VpbChcblx0XHRcdFx0XHRlbGVtWyBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApIF0gLVxuXHRcdFx0XHRcdHBhcnNlRmxvYXQoIHN0eWxlc1sgZGltZW5zaW9uIF0gKSAtXG5cdFx0XHRcdFx0Ym94TW9kZWxBZGp1c3RtZW50KCBlbGVtLCBkaW1lbnNpb24sIFwiYm9yZGVyXCIsIGZhbHNlLCBzdHlsZXMgKSAtXG5cdFx0XHRcdFx0MC41XG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnZlcnQgdG8gcGl4ZWxzIGlmIHZhbHVlIGFkanVzdG1lbnQgaXMgbmVlZGVkXG5cdFx0XHRpZiAoIHN1YnRyYWN0ICYmICggbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmXG5cdFx0XHRcdCggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApICE9PSBcInB4XCIgKSB7XG5cblx0XHRcdFx0ZWxlbS5zdHlsZVsgZGltZW5zaW9uIF0gPSB2YWx1ZTtcblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuY3NzKCBlbGVtLCBkaW1lbnNpb24gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKTtcblx0XHR9XG5cdH07XG59ICk7XG5cbmpRdWVyeS5jc3NIb29rcy5tYXJnaW5MZWZ0ID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnJlbGlhYmxlTWFyZ2luTGVmdCxcblx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4gKCBwYXJzZUZsb2F0KCBjdXJDU1MoIGVsZW0sIFwibWFyZ2luTGVmdFwiICkgKSB8fFxuXHRcdFx0XHRlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgLVxuXHRcdFx0XHRcdHN3YXAoIGVsZW0sIHsgbWFyZ2luTGVmdDogMCB9LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XG5cdFx0XHRcdFx0fSApXG5cdFx0XHQpICsgXCJweFwiO1xuXHRcdH1cblx0fVxuKTtcblxuLy8gVGhlc2UgaG9va3MgYXJlIHVzZWQgYnkgYW5pbWF0ZSB0byBleHBhbmQgcHJvcGVydGllc1xualF1ZXJ5LmVhY2goIHtcblx0bWFyZ2luOiBcIlwiLFxuXHRwYWRkaW5nOiBcIlwiLFxuXHRib3JkZXI6IFwiV2lkdGhcIlxufSwgZnVuY3Rpb24oIHByZWZpeCwgc3VmZml4ICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdID0ge1xuXHRcdGV4cGFuZDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGkgPSAwLFxuXHRcdFx0XHRleHBhbmRlZCA9IHt9LFxuXG5cdFx0XHRcdC8vIEFzc3VtZXMgYSBzaW5nbGUgbnVtYmVyIGlmIG5vdCBhIHN0cmluZ1xuXHRcdFx0XHRwYXJ0cyA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlLnNwbGl0KCBcIiBcIiApIDogWyB2YWx1ZSBdO1xuXG5cdFx0XHRmb3IgKCA7IGkgPCA0OyBpKysgKSB7XG5cdFx0XHRcdGV4cGFuZGVkWyBwcmVmaXggKyBjc3NFeHBhbmRbIGkgXSArIHN1ZmZpeCBdID1cblx0XHRcdFx0XHRwYXJ0c1sgaSBdIHx8IHBhcnRzWyBpIC0gMiBdIHx8IHBhcnRzWyAwIF07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBleHBhbmRlZDtcblx0XHR9XG5cdH07XG5cblx0aWYgKCBwcmVmaXggIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXS5zZXQgPSBzZXRQb3NpdGl2ZU51bWJlcjtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGNzczogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdHZhciBzdHlsZXMsIGxlbixcblx0XHRcdFx0bWFwID0ge30sXG5cdFx0XHRcdGkgPSAwO1xuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG5hbWUgKSApIHtcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICk7XG5cdFx0XHRcdGxlbiA9IG5hbWUubGVuZ3RoO1xuXG5cdFx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdG1hcFsgbmFtZVsgaSBdIF0gPSBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lWyBpIF0sIGZhbHNlLCBzdHlsZXMgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBtYXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lLCB2YWx1ZSApIDpcblx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApO1xuXHRcdH0sIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9XG59ICk7XG5cblxuZnVuY3Rpb24gVHdlZW4oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICkge1xuXHRyZXR1cm4gbmV3IFR3ZWVuLnByb3RvdHlwZS5pbml0KCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApO1xufVxualF1ZXJ5LlR3ZWVuID0gVHdlZW47XG5cblR3ZWVuLnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IFR3ZWVuLFxuXHRpbml0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcsIHVuaXQgKSB7XG5cdFx0dGhpcy5lbGVtID0gZWxlbTtcblx0XHR0aGlzLnByb3AgPSBwcm9wO1xuXHRcdHRoaXMuZWFzaW5nID0gZWFzaW5nIHx8IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHQ7XG5cdFx0dGhpcy5vcHRpb25zID0gb3B0aW9ucztcblx0XHR0aGlzLnN0YXJ0ID0gdGhpcy5ub3cgPSB0aGlzLmN1cigpO1xuXHRcdHRoaXMuZW5kID0gZW5kO1xuXHRcdHRoaXMudW5pdCA9IHVuaXQgfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdH0sXG5cdGN1cjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdHJldHVybiBob29rcyAmJiBob29rcy5nZXQgP1xuXHRcdFx0aG9va3MuZ2V0KCB0aGlzICkgOlxuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LmdldCggdGhpcyApO1xuXHR9LFxuXHRydW46IGZ1bmN0aW9uKCBwZXJjZW50ICkge1xuXHRcdHZhciBlYXNlZCxcblx0XHRcdGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLmR1cmF0aW9uICkge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IGpRdWVyeS5lYXNpbmdbIHRoaXMuZWFzaW5nIF0oXG5cdFx0XHRcdHBlcmNlbnQsIHRoaXMub3B0aW9ucy5kdXJhdGlvbiAqIHBlcmNlbnQsIDAsIDEsIHRoaXMub3B0aW9ucy5kdXJhdGlvblxuXHRcdFx0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IHBlcmNlbnQ7XG5cdFx0fVxuXHRcdHRoaXMubm93ID0gKCB0aGlzLmVuZCAtIHRoaXMuc3RhcnQgKSAqIGVhc2VkICsgdGhpcy5zdGFydDtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLnN0ZXAgKSB7XG5cdFx0XHR0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKCB0aGlzLmVsZW0sIHRoaXMubm93LCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBob29rcy5zZXQgKSB7XG5cdFx0XHRob29rcy5zZXQoIHRoaXMgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LnNldCggdGhpcyApO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fVxufTtcblxuVHdlZW4ucHJvdG90eXBlLmluaXQucHJvdG90eXBlID0gVHdlZW4ucHJvdG90eXBlO1xuXG5Ud2Vlbi5wcm9wSG9va3MgPSB7XG5cdF9kZWZhdWx0OiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0XHR2YXIgcmVzdWx0O1xuXG5cdFx0XHQvLyBVc2UgYSBwcm9wZXJ0eSBvbiB0aGUgZWxlbWVudCBkaXJlY3RseSB3aGVuIGl0IGlzIG5vdCBhIERPTSBlbGVtZW50LFxuXHRcdFx0Ly8gb3Igd2hlbiB0aGVyZSBpcyBubyBtYXRjaGluZyBzdHlsZSBwcm9wZXJ0eSB0aGF0IGV4aXN0cy5cblx0XHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAhPT0gMSB8fFxuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gIT0gbnVsbCAmJiB0d2Vlbi5lbGVtLnN0eWxlWyB0d2Vlbi5wcm9wIF0gPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUGFzc2luZyBhbiBlbXB0eSBzdHJpbmcgYXMgYSAzcmQgcGFyYW1ldGVyIHRvIC5jc3Mgd2lsbCBhdXRvbWF0aWNhbGx5XG5cdFx0XHQvLyBhdHRlbXB0IGEgcGFyc2VGbG9hdCBhbmQgZmFsbGJhY2sgdG8gYSBzdHJpbmcgaWYgdGhlIHBhcnNlIGZhaWxzLlxuXHRcdFx0Ly8gU2ltcGxlIHZhbHVlcyBzdWNoIGFzIFwiMTBweFwiIGFyZSBwYXJzZWQgdG8gRmxvYXQ7XG5cdFx0XHQvLyBjb21wbGV4IHZhbHVlcyBzdWNoIGFzIFwicm90YXRlKDFyYWQpXCIgYXJlIHJldHVybmVkIGFzLWlzLlxuXHRcdFx0cmVzdWx0ID0galF1ZXJ5LmNzcyggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgXCJcIiApO1xuXG5cdFx0XHQvLyBFbXB0eSBzdHJpbmdzLCBudWxsLCB1bmRlZmluZWQgYW5kIFwiYXV0b1wiIGFyZSBjb252ZXJ0ZWQgdG8gMC5cblx0XHRcdHJldHVybiAhcmVzdWx0IHx8IHJlc3VsdCA9PT0gXCJhdXRvXCIgPyAwIDogcmVzdWx0O1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cblx0XHRcdC8vIFVzZSBzdGVwIGhvb2sgZm9yIGJhY2sgY29tcGF0LlxuXHRcdFx0Ly8gVXNlIGNzc0hvb2sgaWYgaXRzIHRoZXJlLlxuXHRcdFx0Ly8gVXNlIC5zdHlsZSBpZiBhdmFpbGFibGUgYW5kIHVzZSBwbGFpbiBwcm9wZXJ0aWVzIHdoZXJlIGF2YWlsYWJsZS5cblx0XHRcdGlmICggalF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSApIHtcblx0XHRcdFx0alF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSggdHdlZW4gKTtcblx0XHRcdH0gZWxzZSBpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRqUXVlcnkuY3NzSG9va3NbIHR3ZWVuLnByb3AgXSB8fFxuXHRcdFx0XHRcdHR3ZWVuLmVsZW0uc3R5bGVbIGZpbmFsUHJvcE5hbWUoIHR3ZWVuLnByb3AgKSBdICE9IG51bGwgKSApIHtcblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCB0d2Vlbi5ub3cgKyB0d2Vlbi51bml0ICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gUGFuaWMgYmFzZWQgYXBwcm9hY2ggdG8gc2V0dGluZyB0aGluZ3Mgb24gZGlzY29ubmVjdGVkIG5vZGVzXG5Ud2Vlbi5wcm9wSG9va3Muc2Nyb2xsVG9wID0gVHdlZW4ucHJvcEhvb2tzLnNjcm9sbExlZnQgPSB7XG5cdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAmJiB0d2Vlbi5lbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZWFzaW5nID0ge1xuXHRsaW5lYXI6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiBwO1xuXHR9LFxuXHRzd2luZzogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIDAuNSAtIE1hdGguY29zKCBwICogTWF0aC5QSSApIC8gMjtcblx0fSxcblx0X2RlZmF1bHQ6IFwic3dpbmdcIlxufTtcblxualF1ZXJ5LmZ4ID0gVHdlZW4ucHJvdG90eXBlLmluaXQ7XG5cbi8vIEJhY2sgY29tcGF0IDwxLjggZXh0ZW5zaW9uIHBvaW50XG5qUXVlcnkuZnguc3RlcCA9IHt9O1xuXG5cblxuXG52YXJcblx0ZnhOb3csIGluUHJvZ3Jlc3MsXG5cdHJmeHR5cGVzID0gL14oPzp0b2dnbGV8c2hvd3xoaWRlKSQvLFxuXHRycnVuID0gL3F1ZXVlSG9va3MkLztcblxuZnVuY3Rpb24gc2NoZWR1bGUoKSB7XG5cdGlmICggaW5Qcm9ncmVzcyApIHtcblx0XHRpZiAoIGRvY3VtZW50LmhpZGRlbiA9PT0gZmFsc2UgJiYgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSApIHtcblx0XHRcdHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIHNjaGVkdWxlICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBzY2hlZHVsZSwgalF1ZXJ5LmZ4LmludGVydmFsICk7XG5cdFx0fVxuXG5cdFx0alF1ZXJ5LmZ4LnRpY2soKTtcblx0fVxufVxuXG4vLyBBbmltYXRpb25zIGNyZWF0ZWQgc3luY2hyb25vdXNseSB3aWxsIHJ1biBzeW5jaHJvbm91c2x5XG5mdW5jdGlvbiBjcmVhdGVGeE5vdygpIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdGZ4Tm93ID0gdW5kZWZpbmVkO1xuXHR9ICk7XG5cdHJldHVybiAoIGZ4Tm93ID0gRGF0ZS5ub3coKSApO1xufVxuXG4vLyBHZW5lcmF0ZSBwYXJhbWV0ZXJzIHRvIGNyZWF0ZSBhIHN0YW5kYXJkIGFuaW1hdGlvblxuZnVuY3Rpb24gZ2VuRngoIHR5cGUsIGluY2x1ZGVXaWR0aCApIHtcblx0dmFyIHdoaWNoLFxuXHRcdGkgPSAwLFxuXHRcdGF0dHJzID0geyBoZWlnaHQ6IHR5cGUgfTtcblxuXHQvLyBJZiB3ZSBpbmNsdWRlIHdpZHRoLCBzdGVwIHZhbHVlIGlzIDEgdG8gZG8gYWxsIGNzc0V4cGFuZCB2YWx1ZXMsXG5cdC8vIG90aGVyd2lzZSBzdGVwIHZhbHVlIGlzIDIgdG8gc2tpcCBvdmVyIExlZnQgYW5kIFJpZ2h0XG5cdGluY2x1ZGVXaWR0aCA9IGluY2x1ZGVXaWR0aCA/IDEgOiAwO1xuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgLSBpbmNsdWRlV2lkdGggKSB7XG5cdFx0d2hpY2ggPSBjc3NFeHBhbmRbIGkgXTtcblx0XHRhdHRyc1sgXCJtYXJnaW5cIiArIHdoaWNoIF0gPSBhdHRyc1sgXCJwYWRkaW5nXCIgKyB3aGljaCBdID0gdHlwZTtcblx0fVxuXG5cdGlmICggaW5jbHVkZVdpZHRoICkge1xuXHRcdGF0dHJzLm9wYWNpdHkgPSBhdHRycy53aWR0aCA9IHR5cGU7XG5cdH1cblxuXHRyZXR1cm4gYXR0cnM7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVR3ZWVuKCB2YWx1ZSwgcHJvcCwgYW5pbWF0aW9uICkge1xuXHR2YXIgdHdlZW4sXG5cdFx0Y29sbGVjdGlvbiA9ICggQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW10gKS5jb25jYXQoIEFuaW1hdGlvbi50d2VlbmVyc1sgXCIqXCIgXSApLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoICggdHdlZW4gPSBjb2xsZWN0aW9uWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgcHJvcCwgdmFsdWUgKSApICkge1xuXG5cdFx0XHQvLyBXZSdyZSBkb25lIHdpdGggdGhpcyBwcm9wZXJ0eVxuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0UHJlZmlsdGVyKCBlbGVtLCBwcm9wcywgb3B0cyApIHtcblx0dmFyIHByb3AsIHZhbHVlLCB0b2dnbGUsIGhvb2tzLCBvbGRmaXJlLCBwcm9wVHdlZW4sIHJlc3RvcmVEaXNwbGF5LCBkaXNwbGF5LFxuXHRcdGlzQm94ID0gXCJ3aWR0aFwiIGluIHByb3BzIHx8IFwiaGVpZ2h0XCIgaW4gcHJvcHMsXG5cdFx0YW5pbSA9IHRoaXMsXG5cdFx0b3JpZyA9IHt9LFxuXHRcdHN0eWxlID0gZWxlbS5zdHlsZSxcblx0XHRoaWRkZW4gPSBlbGVtLm5vZGVUeXBlICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApLFxuXHRcdGRhdGFTaG93ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cblx0Ly8gUXVldWUtc2tpcHBpbmcgYW5pbWF0aW9ucyBoaWphY2sgdGhlIGZ4IGhvb2tzXG5cdGlmICggIW9wdHMucXVldWUgKSB7XG5cdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIFwiZnhcIiApO1xuXHRcdGlmICggaG9va3MudW5xdWV1ZWQgPT0gbnVsbCApIHtcblx0XHRcdGhvb2tzLnVucXVldWVkID0gMDtcblx0XHRcdG9sZGZpcmUgPSBob29rcy5lbXB0eS5maXJlO1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICFob29rcy51bnF1ZXVlZCApIHtcblx0XHRcdFx0XHRvbGRmaXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fVxuXHRcdGhvb2tzLnVucXVldWVkKys7XG5cblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuc3VyZSB0aGUgY29tcGxldGUgaGFuZGxlciBpcyBjYWxsZWQgYmVmb3JlIHRoaXMgY29tcGxldGVzXG5cdFx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGhvb2tzLnVucXVldWVkLS07XG5cdFx0XHRcdGlmICggIWpRdWVyeS5xdWV1ZSggZWxlbSwgXCJmeFwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIERldGVjdCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRmb3IgKCBwcm9wIGluIHByb3BzICkge1xuXHRcdHZhbHVlID0gcHJvcHNbIHByb3AgXTtcblx0XHRpZiAoIHJmeHR5cGVzLnRlc3QoIHZhbHVlICkgKSB7XG5cdFx0XHRkZWxldGUgcHJvcHNbIHByb3AgXTtcblx0XHRcdHRvZ2dsZSA9IHRvZ2dsZSB8fCB2YWx1ZSA9PT0gXCJ0b2dnbGVcIjtcblx0XHRcdGlmICggdmFsdWUgPT09ICggaGlkZGVuID8gXCJoaWRlXCIgOiBcInNob3dcIiApICkge1xuXG5cdFx0XHRcdC8vIFByZXRlbmQgdG8gYmUgaGlkZGVuIGlmIHRoaXMgaXMgYSBcInNob3dcIiBhbmRcblx0XHRcdFx0Ly8gdGhlcmUgaXMgc3RpbGwgZGF0YSBmcm9tIGEgc3RvcHBlZCBzaG93L2hpZGVcblx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gXCJzaG93XCIgJiYgZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IHRydWU7XG5cblx0XHRcdFx0Ly8gSWdub3JlIGFsbCBvdGhlciBuby1vcCBzaG93L2hpZGUgZGF0YVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRvcmlnWyBwcm9wIF0gPSBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdIHx8IGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIEJhaWwgb3V0IGlmIHRoaXMgaXMgYSBuby1vcCBsaWtlIC5oaWRlKCkuaGlkZSgpXG5cdHByb3BUd2VlbiA9ICFqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcHMgKTtcblx0aWYgKCAhcHJvcFR3ZWVuICYmIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBvcmlnICkgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gUmVzdHJpY3QgXCJvdmVyZmxvd1wiIGFuZCBcImRpc3BsYXlcIiBzdHlsZXMgZHVyaW5nIGJveCBhbmltYXRpb25zXG5cdGlmICggaXNCb3ggJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTVcblx0XHQvLyBSZWNvcmQgYWxsIDMgb3ZlcmZsb3cgYXR0cmlidXRlcyBiZWNhdXNlIElFIGRvZXMgbm90IGluZmVyIHRoZSBzaG9ydGhhbmRcblx0XHQvLyBmcm9tIGlkZW50aWNhbGx5LXZhbHVlZCBvdmVyZmxvd1ggYW5kIG92ZXJmbG93WSBhbmQgRWRnZSBqdXN0IG1pcnJvcnNcblx0XHQvLyB0aGUgb3ZlcmZsb3dYIHZhbHVlIHRoZXJlLlxuXHRcdG9wdHMub3ZlcmZsb3cgPSBbIHN0eWxlLm92ZXJmbG93LCBzdHlsZS5vdmVyZmxvd1gsIHN0eWxlLm92ZXJmbG93WSBdO1xuXG5cdFx0Ly8gSWRlbnRpZnkgYSBkaXNwbGF5IHR5cGUsIHByZWZlcnJpbmcgb2xkIHNob3cvaGlkZSBkYXRhIG92ZXIgdGhlIENTUyBjYXNjYWRlXG5cdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhU2hvdyAmJiBkYXRhU2hvdy5kaXNwbGF5O1xuXHRcdGlmICggcmVzdG9yZURpc3BsYXkgPT0gbnVsbCApIHtcblx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdH1cblx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSApIHtcblx0XHRcdFx0ZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBHZXQgbm9uZW1wdHkgdmFsdWUocykgYnkgdGVtcG9yYXJpbHkgZm9yY2luZyB2aXNpYmlsaXR5XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheSB8fCByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFuaW1hdGUgaW5saW5lIGVsZW1lbnRzIGFzIGlubGluZS1ibG9ja1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJpbmxpbmVcIiB8fCBkaXNwbGF5ID09PSBcImlubGluZS1ibG9ja1wiICYmIHJlc3RvcmVEaXNwbGF5ICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZmxvYXRcIiApID09PSBcIm5vbmVcIiApIHtcblxuXHRcdFx0XHQvLyBSZXN0b3JlIHRoZSBvcmlnaW5hbCBkaXNwbGF5IHZhbHVlIGF0IHRoZSBlbmQgb2YgcHVyZSBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRcdFx0XHRpZiAoICFwcm9wVHdlZW4gKSB7XG5cdFx0XHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0ZGlzcGxheSA9IHN0eWxlLmRpc3BsYXk7XG5cdFx0XHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRpc3BsYXkgPT09IFwibm9uZVwiID8gXCJcIiA6IGRpc3BsYXk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggb3B0cy5vdmVyZmxvdyApIHtcblx0XHRzdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0c3R5bGUub3ZlcmZsb3cgPSBvcHRzLm92ZXJmbG93WyAwIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1ggPSBvcHRzLm92ZXJmbG93WyAxIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1kgPSBvcHRzLm92ZXJmbG93WyAyIF07XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gSW1wbGVtZW50IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdHByb3BUd2VlbiA9IGZhbHNlO1xuXHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cblx0XHQvLyBHZW5lcmFsIHNob3cvaGlkZSBzZXR1cCBmb3IgdGhpcyBlbGVtZW50IGFuaW1hdGlvblxuXHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdGlmICggZGF0YVNob3cgKSB7XG5cdFx0XHRcdGlmICggXCJoaWRkZW5cIiBpbiBkYXRhU2hvdyApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSBkYXRhU2hvdy5oaWRkZW47XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRhdGFTaG93ID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBcImZ4c2hvd1wiLCB7IGRpc3BsYXk6IHJlc3RvcmVEaXNwbGF5IH0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RvcmUgaGlkZGVuL3Zpc2libGUgZm9yIHRvZ2dsZSBzbyBgLnN0b3AoKS50b2dnbGUoKWAgXCJyZXZlcnNlc1wiXG5cdFx0XHRpZiAoIHRvZ2dsZSApIHtcblx0XHRcdFx0ZGF0YVNob3cuaGlkZGVuID0gIWhpZGRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2hvdyBlbGVtZW50cyBiZWZvcmUgYW5pbWF0aW5nIHRoZW1cblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0sIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0XHQvLyBUaGUgZmluYWwgc3RlcCBvZiBhIFwiaGlkZVwiIGFuaW1hdGlvbiBpcyBhY3R1YWxseSBoaWRpbmcgdGhlIGVsZW1lbnRcblx0XHRcdFx0aWYgKCAhaGlkZGVuICkge1xuXHRcdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJmeHNob3dcIiApO1xuXHRcdFx0XHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBvcmlnWyBwcm9wIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdC8vIFBlci1wcm9wZXJ0eSBzZXR1cFxuXHRcdHByb3BUd2VlbiA9IGNyZWF0ZVR3ZWVuKCBoaWRkZW4gPyBkYXRhU2hvd1sgcHJvcCBdIDogMCwgcHJvcCwgYW5pbSApO1xuXHRcdGlmICggISggcHJvcCBpbiBkYXRhU2hvdyApICkge1xuXHRcdFx0ZGF0YVNob3dbIHByb3AgXSA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRwcm9wVHdlZW4uZW5kID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0XHRwcm9wVHdlZW4uc3RhcnQgPSAwO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBwcm9wRmlsdGVyKCBwcm9wcywgc3BlY2lhbEVhc2luZyApIHtcblx0dmFyIGluZGV4LCBuYW1lLCBlYXNpbmcsIHZhbHVlLCBob29rcztcblxuXHQvLyBjYW1lbENhc2UsIHNwZWNpYWxFYXNpbmcgYW5kIGV4cGFuZCBjc3NIb29rIHBhc3Ncblx0Zm9yICggaW5kZXggaW4gcHJvcHMgKSB7XG5cdFx0bmFtZSA9IGNhbWVsQ2FzZSggaW5kZXggKTtcblx0XHRlYXNpbmcgPSBzcGVjaWFsRWFzaW5nWyBuYW1lIF07XG5cdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRlYXNpbmcgPSB2YWx1ZVsgMSBdO1xuXHRcdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyAwIF07XG5cdFx0fVxuXG5cdFx0aWYgKCBpbmRleCAhPT0gbmFtZSApIHtcblx0XHRcdHByb3BzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgaW5kZXggXTtcblx0XHR9XG5cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdO1xuXHRcdGlmICggaG9va3MgJiYgXCJleHBhbmRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbHVlID0gaG9va3MuZXhwYW5kKCB2YWx1ZSApO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBuYW1lIF07XG5cblx0XHRcdC8vIE5vdCBxdWl0ZSAkLmV4dGVuZCwgdGhpcyB3b24ndCBvdmVyd3JpdGUgZXhpc3Rpbmcga2V5cy5cblx0XHRcdC8vIFJldXNpbmcgJ2luZGV4JyBiZWNhdXNlIHdlIGhhdmUgdGhlIGNvcnJlY3QgXCJuYW1lXCJcblx0XHRcdGZvciAoIGluZGV4IGluIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICEoIGluZGV4IGluIHByb3BzICkgKSB7XG5cdFx0XHRcdFx0cHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgaW5kZXggXTtcblx0XHRcdFx0XHRzcGVjaWFsRWFzaW5nWyBpbmRleCBdID0gZWFzaW5nO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHNwZWNpYWxFYXNpbmdbIG5hbWUgXSA9IGVhc2luZztcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gQW5pbWF0aW9uKCBlbGVtLCBwcm9wZXJ0aWVzLCBvcHRpb25zICkge1xuXHR2YXIgcmVzdWx0LFxuXHRcdHN0b3BwZWQsXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzLmxlbmd0aCxcblx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIERvbid0IG1hdGNoIGVsZW0gaW4gdGhlIDphbmltYXRlZCBzZWxlY3RvclxuXHRcdFx0ZGVsZXRlIHRpY2suZWxlbTtcblx0XHR9ICksXG5cdFx0dGljayA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHR2YXIgY3VycmVudFRpbWUgPSBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0XHRyZW1haW5pbmcgPSBNYXRoLm1heCggMCwgYW5pbWF0aW9uLnN0YXJ0VGltZSArIGFuaW1hdGlvbi5kdXJhdGlvbiAtIGN1cnJlbnRUaW1lICksXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjMgb25seVxuXHRcdFx0XHQvLyBBcmNoYWljIGNyYXNoIGJ1ZyB3b24ndCBhbGxvdyB1cyB0byB1c2UgYDEgLSAoIDAuNSB8fCAwIClgICh0cmFjLTEyNDk3KVxuXHRcdFx0XHR0ZW1wID0gcmVtYWluaW5nIC8gYW5pbWF0aW9uLmR1cmF0aW9uIHx8IDAsXG5cdFx0XHRcdHBlcmNlbnQgPSAxIC0gdGVtcCxcblx0XHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0XHRsZW5ndGggPSBhbmltYXRpb24udHdlZW5zLmxlbmd0aDtcblxuXHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIHBlcmNlbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIHBlcmNlbnQsIHJlbWFpbmluZyBdICk7XG5cblx0XHRcdC8vIElmIHRoZXJlJ3MgbW9yZSB0byBkbywgeWllbGRcblx0XHRcdGlmICggcGVyY2VudCA8IDEgJiYgbGVuZ3RoICkge1xuXHRcdFx0XHRyZXR1cm4gcmVtYWluaW5nO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiB0aGlzIHdhcyBhbiBlbXB0eSBhbmltYXRpb24sIHN5bnRoZXNpemUgYSBmaW5hbCBwcm9ncmVzcyBub3RpZmljYXRpb25cblx0XHRcdGlmICggIWxlbmd0aCApIHtcblx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIDEsIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXNvbHZlIHRoZSBhbmltYXRpb24gYW5kIHJlcG9ydCBpdHMgY29uY2x1c2lvblxuXHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uIF0gKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9LFxuXHRcdGFuaW1hdGlvbiA9IGRlZmVycmVkLnByb21pc2UoIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRwcm9wczogalF1ZXJ5LmV4dGVuZCgge30sIHByb3BlcnRpZXMgKSxcblx0XHRcdG9wdHM6IGpRdWVyeS5leHRlbmQoIHRydWUsIHtcblx0XHRcdFx0c3BlY2lhbEVhc2luZzoge30sXG5cdFx0XHRcdGVhc2luZzogalF1ZXJ5LmVhc2luZy5fZGVmYXVsdFxuXHRcdFx0fSwgb3B0aW9ucyApLFxuXHRcdFx0b3JpZ2luYWxQcm9wZXJ0aWVzOiBwcm9wZXJ0aWVzLFxuXHRcdFx0b3JpZ2luYWxPcHRpb25zOiBvcHRpb25zLFxuXHRcdFx0c3RhcnRUaW1lOiBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0ZHVyYXRpb246IG9wdGlvbnMuZHVyYXRpb24sXG5cdFx0XHR0d2VlbnM6IFtdLFxuXHRcdFx0Y3JlYXRlVHdlZW46IGZ1bmN0aW9uKCBwcm9wLCBlbmQgKSB7XG5cdFx0XHRcdHZhciB0d2VlbiA9IGpRdWVyeS5Ud2VlbiggZWxlbSwgYW5pbWF0aW9uLm9wdHMsIHByb3AsIGVuZCxcblx0XHRcdFx0XHRhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nWyBwcm9wIF0gfHwgYW5pbWF0aW9uLm9wdHMuZWFzaW5nICk7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnMucHVzaCggdHdlZW4gKTtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdFx0fSxcblx0XHRcdHN0b3A6IGZ1bmN0aW9uKCBnb3RvRW5kICkge1xuXHRcdFx0XHR2YXIgaW5kZXggPSAwLFxuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgYXJlIGdvaW5nIHRvIHRoZSBlbmQsIHdlIHdhbnQgdG8gcnVuIGFsbCB0aGUgdHdlZW5zXG5cdFx0XHRcdFx0Ly8gb3RoZXJ3aXNlIHdlIHNraXAgdGhpcyBwYXJ0XG5cdFx0XHRcdFx0bGVuZ3RoID0gZ290b0VuZCA/IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoIDogMDtcblx0XHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHN0b3BwZWQgPSB0cnVlO1xuXHRcdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCAxICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXNvbHZlIHdoZW4gd2UgcGxheWVkIHRoZSBsYXN0IGZyYW1lOyBvdGhlcndpc2UsIHJlamVjdFxuXHRcdFx0XHRpZiAoIGdvdG9FbmQgKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIDEsIDAgXSApO1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fVxuXHRcdH0gKSxcblx0XHRwcm9wcyA9IGFuaW1hdGlvbi5wcm9wcztcblxuXHRwcm9wRmlsdGVyKCBwcm9wcywgYW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZyApO1xuXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0cmVzdWx0ID0gQW5pbWF0aW9uLnByZWZpbHRlcnNbIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBlbGVtLCBwcm9wcywgYW5pbWF0aW9uLm9wdHMgKTtcblx0XHRpZiAoIHJlc3VsdCApIHtcblx0XHRcdGlmICggaXNGdW5jdGlvbiggcmVzdWx0LnN0b3AgKSApIHtcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCBhbmltYXRpb24uZWxlbSwgYW5pbWF0aW9uLm9wdHMucXVldWUgKS5zdG9wID1cblx0XHRcdFx0XHRyZXN1bHQuc3RvcC5iaW5kKCByZXN1bHQgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fVxuXHR9XG5cblx0alF1ZXJ5Lm1hcCggcHJvcHMsIGNyZWF0ZVR3ZWVuLCBhbmltYXRpb24gKTtcblxuXHRpZiAoIGlzRnVuY3Rpb24oIGFuaW1hdGlvbi5vcHRzLnN0YXJ0ICkgKSB7XG5cdFx0YW5pbWF0aW9uLm9wdHMuc3RhcnQuY2FsbCggZWxlbSwgYW5pbWF0aW9uICk7XG5cdH1cblxuXHQvLyBBdHRhY2ggY2FsbGJhY2tzIGZyb20gb3B0aW9uc1xuXHRhbmltYXRpb25cblx0XHQucHJvZ3Jlc3MoIGFuaW1hdGlvbi5vcHRzLnByb2dyZXNzIClcblx0XHQuZG9uZSggYW5pbWF0aW9uLm9wdHMuZG9uZSwgYW5pbWF0aW9uLm9wdHMuY29tcGxldGUgKVxuXHRcdC5mYWlsKCBhbmltYXRpb24ub3B0cy5mYWlsIClcblx0XHQuYWx3YXlzKCBhbmltYXRpb24ub3B0cy5hbHdheXMgKTtcblxuXHRqUXVlcnkuZngudGltZXIoXG5cdFx0alF1ZXJ5LmV4dGVuZCggdGljaywge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdGFuaW06IGFuaW1hdGlvbixcblx0XHRcdHF1ZXVlOiBhbmltYXRpb24ub3B0cy5xdWV1ZVxuXHRcdH0gKVxuXHQpO1xuXG5cdHJldHVybiBhbmltYXRpb247XG59XG5cbmpRdWVyeS5BbmltYXRpb24gPSBqUXVlcnkuZXh0ZW5kKCBBbmltYXRpb24sIHtcblxuXHR0d2VlbmVyczoge1xuXHRcdFwiKlwiOiBbIGZ1bmN0aW9uKCBwcm9wLCB2YWx1ZSApIHtcblx0XHRcdHZhciB0d2VlbiA9IHRoaXMuY3JlYXRlVHdlZW4oIHByb3AsIHZhbHVlICk7XG5cdFx0XHRhZGp1c3RDU1MoIHR3ZWVuLmVsZW0sIHByb3AsIHJjc3NOdW0uZXhlYyggdmFsdWUgKSwgdHdlZW4gKTtcblx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHR9IF1cblx0fSxcblxuXHR0d2VlbmVyOiBmdW5jdGlvbiggcHJvcHMsIGNhbGxiYWNrICkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggcHJvcHMgKSApIHtcblx0XHRcdGNhbGxiYWNrID0gcHJvcHM7XG5cdFx0XHRwcm9wcyA9IFsgXCIqXCIgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cHJvcHMgPSBwcm9wcy5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXHRcdH1cblxuXHRcdHZhciBwcm9wLFxuXHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0bGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdHByb3AgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdID0gQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW107XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXS51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH1cblx0fSxcblxuXHRwcmVmaWx0ZXJzOiBbIGRlZmF1bHRQcmVmaWx0ZXIgXSxcblxuXHRwcmVmaWx0ZXI6IGZ1bmN0aW9uKCBjYWxsYmFjaywgcHJlcGVuZCApIHtcblx0XHRpZiAoIHByZXBlbmQgKSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy5wdXNoKCBjYWxsYmFjayApO1xuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuc3BlZWQgPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgZm4gKSB7XG5cdHZhciBvcHQgPSBzcGVlZCAmJiB0eXBlb2Ygc3BlZWQgPT09IFwib2JqZWN0XCIgPyBqUXVlcnkuZXh0ZW5kKCB7fSwgc3BlZWQgKSA6IHtcblx0XHRjb21wbGV0ZTogZm4gfHwgIWZuICYmIGVhc2luZyB8fFxuXHRcdFx0aXNGdW5jdGlvbiggc3BlZWQgKSAmJiBzcGVlZCxcblx0XHRkdXJhdGlvbjogc3BlZWQsXG5cdFx0ZWFzaW5nOiBmbiAmJiBlYXNpbmcgfHwgZWFzaW5nICYmICFpc0Z1bmN0aW9uKCBlYXNpbmcgKSAmJiBlYXNpbmdcblx0fTtcblxuXHQvLyBHbyB0byB0aGUgZW5kIHN0YXRlIGlmIGZ4IGFyZSBvZmZcblx0aWYgKCBqUXVlcnkuZngub2ZmICkge1xuXHRcdG9wdC5kdXJhdGlvbiA9IDA7XG5cblx0fSBlbHNlIHtcblx0XHRpZiAoIHR5cGVvZiBvcHQuZHVyYXRpb24gIT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRpZiAoIG9wdC5kdXJhdGlvbiBpbiBqUXVlcnkuZnguc3BlZWRzICkge1xuXHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzWyBvcHQuZHVyYXRpb24gXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkcy5fZGVmYXVsdDtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgb3B0LnF1ZXVlIC0gdHJ1ZS91bmRlZmluZWQvbnVsbCAtPiBcImZ4XCJcblx0aWYgKCBvcHQucXVldWUgPT0gbnVsbCB8fCBvcHQucXVldWUgPT09IHRydWUgKSB7XG5cdFx0b3B0LnF1ZXVlID0gXCJmeFwiO1xuXHR9XG5cblx0Ly8gUXVldWVpbmdcblx0b3B0Lm9sZCA9IG9wdC5jb21wbGV0ZTtcblxuXHRvcHQuY29tcGxldGUgPSBmdW5jdGlvbigpIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIG9wdC5vbGQgKSApIHtcblx0XHRcdG9wdC5vbGQuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0LnF1ZXVlICkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIG9wdC5xdWV1ZSApO1xuXHRcdH1cblx0fTtcblxuXHRyZXR1cm4gb3B0O1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmYWRlVG86IGZ1bmN0aW9uKCBzcGVlZCwgdG8sIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cblx0XHQvLyBTaG93IGFueSBoaWRkZW4gZWxlbWVudHMgYWZ0ZXIgc2V0dGluZyBvcGFjaXR5IHRvIDBcblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGlzSGlkZGVuV2l0aGluVHJlZSApLmNzcyggXCJvcGFjaXR5XCIsIDAgKS5zaG93KClcblxuXHRcdFx0Ly8gQW5pbWF0ZSB0byB0aGUgdmFsdWUgc3BlY2lmaWVkXG5cdFx0XHQuZW5kKCkuYW5pbWF0ZSggeyBvcGFjaXR5OiB0byB9LCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9LFxuXHRhbmltYXRlOiBmdW5jdGlvbiggcHJvcCwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGVtcHR5ID0galF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3AgKSxcblx0XHRcdG9wdGFsbCA9IGpRdWVyeS5zcGVlZCggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSxcblx0XHRcdGRvQW5pbWF0aW9uID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gT3BlcmF0ZSBvbiBhIGNvcHkgb2YgcHJvcCBzbyBwZXItcHJvcGVydHkgZWFzaW5nIHdvbid0IGJlIGxvc3Rcblx0XHRcdFx0dmFyIGFuaW0gPSBBbmltYXRpb24oIHRoaXMsIGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wICksIG9wdGFsbCApO1xuXG5cdFx0XHRcdC8vIEVtcHR5IGFuaW1hdGlvbnMsIG9yIGZpbmlzaGluZyByZXNvbHZlcyBpbW1lZGlhdGVseVxuXHRcdFx0XHRpZiAoIGVtcHR5IHx8IGRhdGFQcml2LmdldCggdGhpcywgXCJmaW5pc2hcIiApICkge1xuXHRcdFx0XHRcdGFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0ZG9BbmltYXRpb24uZmluaXNoID0gZG9BbmltYXRpb247XG5cblx0XHRyZXR1cm4gZW1wdHkgfHwgb3B0YWxsLnF1ZXVlID09PSBmYWxzZSA/XG5cdFx0XHR0aGlzLmVhY2goIGRvQW5pbWF0aW9uICkgOlxuXHRcdFx0dGhpcy5xdWV1ZSggb3B0YWxsLnF1ZXVlLCBkb0FuaW1hdGlvbiApO1xuXHR9LFxuXHRzdG9wOiBmdW5jdGlvbiggdHlwZSwgY2xlYXJRdWV1ZSwgZ290b0VuZCApIHtcblx0XHR2YXIgc3RvcFF1ZXVlID0gZnVuY3Rpb24oIGhvb2tzICkge1xuXHRcdFx0dmFyIHN0b3AgPSBob29rcy5zdG9wO1xuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRzdG9wKCBnb3RvRW5kICk7XG5cdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRnb3RvRW5kID0gY2xlYXJRdWV1ZTtcblx0XHRcdGNsZWFyUXVldWUgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBjbGVhclF1ZXVlICkge1xuXHRcdFx0dGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgZGVxdWV1ZSA9IHRydWUsXG5cdFx0XHRcdGluZGV4ID0gdHlwZSAhPSBudWxsICYmIHR5cGUgKyBcInF1ZXVlSG9va3NcIixcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApO1xuXG5cdFx0XHRpZiAoIGluZGV4ICkge1xuXHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICkge1xuXHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKCBpbmRleCBpbiBkYXRhICkge1xuXHRcdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgJiYgcnJ1bi50ZXN0KCBpbmRleCApICkge1xuXHRcdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiZcblx0XHRcdFx0XHQoIHR5cGUgPT0gbnVsbCB8fCB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSApIHtcblxuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIGdvdG9FbmQgKTtcblx0XHRcdFx0XHRkZXF1ZXVlID0gZmFsc2U7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGFydCB0aGUgbmV4dCBpbiB0aGUgcXVldWUgaWYgdGhlIGxhc3Qgc3RlcCB3YXNuJ3QgZm9yY2VkLlxuXHRcdFx0Ly8gVGltZXJzIGN1cnJlbnRseSB3aWxsIGNhbGwgdGhlaXIgY29tcGxldGUgY2FsbGJhY2tzLCB3aGljaFxuXHRcdFx0Ly8gd2lsbCBkZXF1ZXVlIGJ1dCBvbmx5IGlmIHRoZXkgd2VyZSBnb3RvRW5kLlxuXHRcdFx0aWYgKCBkZXF1ZXVlIHx8ICFnb3RvRW5kICkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblx0ZmluaXNoOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRpZiAoIHR5cGUgIT09IGZhbHNlICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpbmRleCxcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApLFxuXHRcdFx0XHRxdWV1ZSA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlXCIgXSxcblx0XHRcdFx0aG9va3MgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgXSxcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0bGVuZ3RoID0gcXVldWUgPyBxdWV1ZS5sZW5ndGggOiAwO1xuXG5cdFx0XHQvLyBFbmFibGUgZmluaXNoaW5nIGZsYWcgb24gcHJpdmF0ZSBkYXRhXG5cdFx0XHRkYXRhLmZpbmlzaCA9IHRydWU7XG5cblx0XHRcdC8vIEVtcHR5IHRoZSBxdWV1ZSBmaXJzdFxuXHRcdFx0alF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBbXSApO1xuXG5cdFx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnN0b3AgKSB7XG5cdFx0XHRcdGhvb2tzLnN0b3AuY2FsbCggdGhpcywgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYWN0aXZlIGFuaW1hdGlvbnMsIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJiB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSB7XG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFuaW1hdGlvbnMgaW4gdGhlIG9sZCBxdWV1ZSBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGlmICggcXVldWVbIGluZGV4IF0gJiYgcXVldWVbIGluZGV4IF0uZmluaXNoICkge1xuXHRcdFx0XHRcdHF1ZXVlWyBpbmRleCBdLmZpbmlzaC5jYWxsKCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVHVybiBvZmYgZmluaXNoaW5nIGZsYWdcblx0XHRcdGRlbGV0ZSBkYXRhLmZpbmlzaDtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJ0b2dnbGVcIiwgXCJzaG93XCIsIFwiaGlkZVwiIF0sIGZ1bmN0aW9uKCBfaSwgbmFtZSApIHtcblx0dmFyIGNzc0ZuID0galF1ZXJ5LmZuWyBuYW1lIF07XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBzcGVlZCA9PSBudWxsIHx8IHR5cGVvZiBzcGVlZCA9PT0gXCJib29sZWFuXCIgP1xuXHRcdFx0Y3NzRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApIDpcblx0XHRcdHRoaXMuYW5pbWF0ZSggZ2VuRngoIG5hbWUsIHRydWUgKSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxuLy8gR2VuZXJhdGUgc2hvcnRjdXRzIGZvciBjdXN0b20gYW5pbWF0aW9uc1xualF1ZXJ5LmVhY2goIHtcblx0c2xpZGVEb3duOiBnZW5GeCggXCJzaG93XCIgKSxcblx0c2xpZGVVcDogZ2VuRngoIFwiaGlkZVwiICksXG5cdHNsaWRlVG9nZ2xlOiBnZW5GeCggXCJ0b2dnbGVcIiApLFxuXHRmYWRlSW46IHsgb3BhY2l0eTogXCJzaG93XCIgfSxcblx0ZmFkZU91dDogeyBvcGFjaXR5OiBcImhpZGVcIiB9LFxuXHRmYWRlVG9nZ2xlOiB7IG9wYWNpdHk6IFwidG9nZ2xlXCIgfVxufSwgZnVuY3Rpb24oIG5hbWUsIHByb3BzICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5hbmltYXRlKCBwcm9wcywgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LnRpbWVycyA9IFtdO1xualF1ZXJ5LmZ4LnRpY2sgPSBmdW5jdGlvbigpIHtcblx0dmFyIHRpbWVyLFxuXHRcdGkgPSAwLFxuXHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnM7XG5cblx0ZnhOb3cgPSBEYXRlLm5vdygpO1xuXG5cdGZvciAoIDsgaSA8IHRpbWVycy5sZW5ndGg7IGkrKyApIHtcblx0XHR0aW1lciA9IHRpbWVyc1sgaSBdO1xuXG5cdFx0Ly8gUnVuIHRoZSB0aW1lciBhbmQgc2FmZWx5IHJlbW92ZSBpdCB3aGVuIGRvbmUgKGFsbG93aW5nIGZvciBleHRlcm5hbCByZW1vdmFsKVxuXHRcdGlmICggIXRpbWVyKCkgJiYgdGltZXJzWyBpIF0gPT09IHRpbWVyICkge1xuXHRcdFx0dGltZXJzLnNwbGljZSggaS0tLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0aWYgKCAhdGltZXJzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZnguc3RvcCgpO1xuXHR9XG5cdGZ4Tm93ID0gdW5kZWZpbmVkO1xufTtcblxualF1ZXJ5LmZ4LnRpbWVyID0gZnVuY3Rpb24oIHRpbWVyICkge1xuXHRqUXVlcnkudGltZXJzLnB1c2goIHRpbWVyICk7XG5cdGpRdWVyeS5meC5zdGFydCgpO1xufTtcblxualF1ZXJ5LmZ4LmludGVydmFsID0gMTM7XG5qUXVlcnkuZnguc3RhcnQgPSBmdW5jdGlvbigpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGluUHJvZ3Jlc3MgPSB0cnVlO1xuXHRzY2hlZHVsZSgpO1xufTtcblxualF1ZXJ5LmZ4LnN0b3AgPSBmdW5jdGlvbigpIHtcblx0aW5Qcm9ncmVzcyA9IG51bGw7XG59O1xuXG5qUXVlcnkuZnguc3BlZWRzID0ge1xuXHRzbG93OiA2MDAsXG5cdGZhc3Q6IDIwMCxcblxuXHQvLyBEZWZhdWx0IHNwZWVkXG5cdF9kZWZhdWx0OiA0MDBcbn07XG5cblxuLy8gQmFzZWQgb2ZmIG9mIHRoZSBwbHVnaW4gYnkgQ2xpbnQgSGVsZmVycywgd2l0aCBwZXJtaXNzaW9uLlxualF1ZXJ5LmZuLmRlbGF5ID0gZnVuY3Rpb24oIHRpbWUsIHR5cGUgKSB7XG5cdHRpbWUgPSBqUXVlcnkuZnggPyBqUXVlcnkuZnguc3BlZWRzWyB0aW1lIF0gfHwgdGltZSA6IHRpbWU7XG5cdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSwgZnVuY3Rpb24oIG5leHQsIGhvb2tzICkge1xuXHRcdHZhciB0aW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoIG5leHQsIHRpbWUgKTtcblx0XHRob29rcy5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0ICk7XG5cdFx0fTtcblx0fSApO1xufTtcblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKSxcblx0XHRzZWxlY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInNlbGVjdFwiICksXG5cdFx0b3B0ID0gc2VsZWN0LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcIm9wdGlvblwiICkgKTtcblxuXHRpbnB1dC50eXBlID0gXCJjaGVja2JveFwiO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjMgb25seVxuXHQvLyBEZWZhdWx0IHZhbHVlIGZvciBhIGNoZWNrYm94IHNob3VsZCBiZSBcIm9uXCJcblx0c3VwcG9ydC5jaGVja09uID0gaW5wdXQudmFsdWUgIT09IFwiXCI7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIE11c3QgYWNjZXNzIHNlbGVjdGVkSW5kZXggdG8gbWFrZSBkZWZhdWx0IG9wdGlvbnMgc2VsZWN0XG5cdHN1cHBvcnQub3B0U2VsZWN0ZWQgPSBvcHQuc2VsZWN0ZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIEFuIGlucHV0IGxvc2VzIGl0cyB2YWx1ZSBhZnRlciBiZWNvbWluZyBhIHJhZGlvXG5cdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cdGlucHV0LnZhbHVlID0gXCJ0XCI7XG5cdGlucHV0LnR5cGUgPSBcInJhZGlvXCI7XG5cdHN1cHBvcnQucmFkaW9WYWx1ZSA9IGlucHV0LnZhbHVlID09PSBcInRcIjtcbn0gKSgpO1xuXG5cbnZhciBib29sSG9vayxcblx0YXR0ckhhbmRsZSA9IGpRdWVyeS5leHByLmF0dHJIYW5kbGU7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5hdHRyLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCB0aGlzLCBuYW1lICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBhdHRyaWJ1dGVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRmFsbGJhY2sgdG8gcHJvcCB3aGVuIGF0dHJpYnV0ZXMgYXJlIG5vdCBzdXBwb3J0ZWRcblx0XHRpZiAoIHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSA9PT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucHJvcCggZWxlbSwgbmFtZSwgdmFsdWUgKTtcblx0XHR9XG5cblx0XHQvLyBBdHRyaWJ1dGUgaG9va3MgYXJlIGRldGVybWluZWQgYnkgdGhlIGxvd2VyY2FzZSB2ZXJzaW9uXG5cdFx0Ly8gR3JhYiBuZWNlc3NhcnkgaG9vayBpZiBvbmUgaXMgZGVmaW5lZFxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXHRcdFx0aG9va3MgPSBqUXVlcnkuYXR0ckhvb2tzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHQoIGpRdWVyeS5leHByLm1hdGNoLmJvb2wudGVzdCggbmFtZSApID8gYm9vbEhvb2sgOiB1bmRlZmluZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHZhbHVlID09PSBudWxsICkge1xuXHRcdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCB2YWx1ZSArIFwiXCIgKTtcblx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXQgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHQvLyBOb24tZXhpc3RlbnQgYXR0cmlidXRlcyByZXR1cm4gbnVsbCwgd2Ugbm9ybWFsaXplIHRvIHVuZGVmaW5lZFxuXHRcdHJldHVybiByZXQgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IHJldDtcblx0fSxcblxuXHRhdHRySG9va3M6IHtcblx0XHR0eXBlOiB7XG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhc3VwcG9ydC5yYWRpb1ZhbHVlICYmIHZhbHVlID09PSBcInJhZGlvXCIgJiZcblx0XHRcdFx0XHRub2RlTmFtZSggZWxlbSwgXCJpbnB1dFwiICkgKSB7XG5cdFx0XHRcdFx0dmFyIHZhbCA9IGVsZW0udmFsdWU7XG5cdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCB2YWx1ZSApO1xuXHRcdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdFx0ZWxlbS52YWx1ZSA9IHZhbDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHR2YXIgbmFtZSxcblx0XHRcdGkgPSAwLFxuXG5cdFx0XHQvLyBBdHRyaWJ1dGUgbmFtZXMgY2FuIGNvbnRhaW4gbm9uLUhUTUwgd2hpdGVzcGFjZSBjaGFyYWN0ZXJzXG5cdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNhdHRyaWJ1dGVzLTJcblx0XHRcdGF0dHJOYW1lcyA9IHZhbHVlICYmIHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XG5cblx0XHRpZiAoIGF0dHJOYW1lcyAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0d2hpbGUgKCAoIG5hbWUgPSBhdHRyTmFtZXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBuYW1lICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIEhvb2tzIGZvciBib29sZWFuIGF0dHJpYnV0ZXNcbmJvb2xIb29rID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgbmFtZSApIHtcblx0XHRpZiAoIHZhbHVlID09PSBmYWxzZSApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGJvb2xlYW4gYXR0cmlidXRlcyB3aGVuIHNldCB0byBmYWxzZVxuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cbn07XG5cbmpRdWVyeS5lYWNoKCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnNvdXJjZS5tYXRjaCggL1xcdysvZyApLCBmdW5jdGlvbiggX2ksIG5hbWUgKSB7XG5cdHZhciBnZXR0ZXIgPSBhdHRySGFuZGxlWyBuYW1lIF0gfHwgalF1ZXJ5LmZpbmQuYXR0cjtcblxuXHRhdHRySGFuZGxlWyBuYW1lIF0gPSBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHJldCwgaGFuZGxlLFxuXHRcdFx0bG93ZXJjYXNlTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHRcdGlmICggIWlzWE1MICkge1xuXG5cdFx0XHQvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wIGJ5IHRlbXBvcmFyaWx5IHJlbW92aW5nIHRoaXMgZnVuY3Rpb24gZnJvbSB0aGUgZ2V0dGVyXG5cdFx0XHRoYW5kbGUgPSBhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF07XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSByZXQ7XG5cdFx0XHRyZXQgPSBnZXR0ZXIoIGVsZW0sIG5hbWUsIGlzWE1MICkgIT0gbnVsbCA/XG5cdFx0XHRcdGxvd2VyY2FzZU5hbWUgOlxuXHRcdFx0XHRudWxsO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gaGFuZGxlO1xuXHRcdH1cblx0XHRyZXR1cm4gcmV0O1xuXHR9O1xufSApO1xuXG5cblxuXG52YXIgcmZvY3VzYWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJjbGlja2FibGUgPSAvXig/OmF8YXJlYSkkL2k7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5wcm9wLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVQcm9wOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRlbGV0ZSB0aGlzWyBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWUgXTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IHByb3BlcnRpZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gRml4IG5hbWUgYW5kIGF0dGFjaCBob29rc1xuXHRcdFx0bmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTtcblx0XHRcdGhvb2tzID0galF1ZXJ5LnByb3BIb29rc1sgbmFtZSBdO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAoIGVsZW1bIG5hbWUgXSA9IHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGVsZW1bIG5hbWUgXTtcblx0fSxcblxuXHRwcm9wSG9va3M6IHtcblx0XHR0YWJJbmRleDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0XHRcdC8vIGVsZW0udGFiSW5kZXggZG9lc24ndCBhbHdheXMgcmV0dXJuIHRoZVxuXHRcdFx0XHQvLyBjb3JyZWN0IHZhbHVlIHdoZW4gaXQgaGFzbid0IGJlZW4gZXhwbGljaXRseSBzZXRcblx0XHRcdFx0Ly8gVXNlIHByb3BlciBhdHRyaWJ1dGUgcmV0cmlldmFsICh0cmFjLTEyMDcyKVxuXHRcdFx0XHR2YXIgdGFiaW5kZXggPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInRhYmluZGV4XCIgKTtcblxuXHRcdFx0XHRpZiAoIHRhYmluZGV4ICkge1xuXHRcdFx0XHRcdHJldHVybiBwYXJzZUludCggdGFiaW5kZXgsIDEwICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0cmZvY3VzYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgfHxcblx0XHRcdFx0XHRyY2xpY2thYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSAmJlxuXHRcdFx0XHRcdGVsZW0uaHJlZlxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cHJvcEZpeDoge1xuXHRcdFwiZm9yXCI6IFwiaHRtbEZvclwiLFxuXHRcdFwiY2xhc3NcIjogXCJjbGFzc05hbWVcIlxuXHR9XG59ICk7XG5cbi8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuLy8gQWNjZXNzaW5nIHRoZSBzZWxlY3RlZEluZGV4IHByb3BlcnR5XG4vLyBmb3JjZXMgdGhlIGJyb3dzZXIgdG8gcmVzcGVjdCBzZXR0aW5nIHNlbGVjdGVkXG4vLyBvbiB0aGUgb3B0aW9uXG4vLyBUaGUgZ2V0dGVyIGVuc3VyZXMgYSBkZWZhdWx0IG9wdGlvbiBpcyBzZWxlY3RlZFxuLy8gd2hlbiBpbiBhbiBvcHRncm91cFxuLy8gZXNsaW50IHJ1bGUgXCJuby11bnVzZWQtZXhwcmVzc2lvbnNcIiBpcyBkaXNhYmxlZCBmb3IgdGhpcyBjb2RlXG4vLyBzaW5jZSBpdCBjb25zaWRlcnMgc3VjaCBhY2Nlc3Npb25zIG5vb3BcbmlmICggIXN1cHBvcnQub3B0U2VsZWN0ZWQgKSB7XG5cdGpRdWVyeS5wcm9wSG9va3Muc2VsZWN0ZWQgPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgJiYgcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8qIGVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFwib2ZmXCIgKi9cblxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICkge1xuXHRcdFx0XHRwYXJlbnQuc2VsZWN0ZWRJbmRleDtcblxuXHRcdFx0XHRpZiAoIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbmpRdWVyeS5lYWNoKCBbXG5cdFwidGFiSW5kZXhcIixcblx0XCJyZWFkT25seVwiLFxuXHRcIm1heExlbmd0aFwiLFxuXHRcImNlbGxTcGFjaW5nXCIsXG5cdFwiY2VsbFBhZGRpbmdcIixcblx0XCJyb3dTcGFuXCIsXG5cdFwiY29sU3BhblwiLFxuXHRcInVzZU1hcFwiLFxuXHRcImZyYW1lQm9yZGVyXCIsXG5cdFwiY29udGVudEVkaXRhYmxlXCJcbl0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkucHJvcEZpeFsgdGhpcy50b0xvd2VyQ2FzZSgpIF0gPSB0aGlzO1xufSApO1xuXG5cblxuXG5cdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlIGFjY29yZGluZyB0byBIVE1MIHNwZWNcblx0Ly8gaHR0cHM6Ly9pbmZyYS5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS1hc2NpaS13aGl0ZXNwYWNlXG5cdGZ1bmN0aW9uIHN0cmlwQW5kQ29sbGFwc2UoIHZhbHVlICkge1xuXHRcdHZhciB0b2tlbnMgPSB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXHRcdHJldHVybiB0b2tlbnMuam9pbiggXCIgXCIgKTtcblx0fVxuXG5cbmZ1bmN0aW9uIGdldENsYXNzKCBlbGVtICkge1xuXHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiApIHx8IFwiXCI7XG59XG5cbmZ1bmN0aW9uIGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApIHtcblx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdHJldHVybiB2YWx1ZTtcblx0fVxuXHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblx0fVxuXHRyZXR1cm4gW107XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YWRkQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NOYW1lcywgY3VyLCBjdXJWYWx1ZSwgY2xhc3NOYW1lLCBpLCBmaW5hbFZhbHVlO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmFkZENsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRjbGFzc05hbWVzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIGNsYXNzTmFtZXMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIHRoaXMgKTtcblx0XHRcdFx0Y3VyID0gdGhpcy5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggY3VyVmFsdWUgKSArIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBjbGFzc05hbWVzLmxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lID0gY2xhc3NOYW1lc1sgaSBdO1xuXHRcdFx0XHRcdFx0aWYgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGFzc05hbWUgKyBcIiBcIiApIDwgMCApIHtcblx0XHRcdFx0XHRcdFx0Y3VyICs9IGNsYXNzTmFtZSArIFwiIFwiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0cmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NOYW1lcywgY3VyLCBjdXJWYWx1ZSwgY2xhc3NOYW1lLCBpLCBmaW5hbFZhbHVlO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnJlbW92ZUNsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuYXR0ciggXCJjbGFzc1wiLCBcIlwiICk7XG5cdFx0fVxuXG5cdFx0Y2xhc3NOYW1lcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCBjbGFzc05hbWVzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCB0aGlzICk7XG5cblx0XHRcdFx0Ly8gVGhpcyBleHByZXNzaW9uIGlzIGhlcmUgZm9yIGJldHRlciBjb21wcmVzc2liaWxpdHkgKHNlZSBhZGRDbGFzcylcblx0XHRcdFx0Y3VyID0gdGhpcy5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggY3VyVmFsdWUgKSArIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBjbGFzc05hbWVzLmxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lID0gY2xhc3NOYW1lc1sgaSBdO1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgKmFsbCogaW5zdGFuY2VzXG5cdFx0XHRcdFx0XHR3aGlsZSAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXNzTmFtZSArIFwiIFwiICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdFx0Y3VyID0gY3VyLnJlcGxhY2UoIFwiIFwiICsgY2xhc3NOYW1lICsgXCIgXCIsIFwiIFwiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdHRoaXMuc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR0b2dnbGVDbGFzczogZnVuY3Rpb24oIHZhbHVlLCBzdGF0ZVZhbCApIHtcblx0XHR2YXIgY2xhc3NOYW1lcywgY2xhc3NOYW1lLCBpLCBzZWxmLFxuXHRcdFx0dHlwZSA9IHR5cGVvZiB2YWx1ZSxcblx0XHRcdGlzVmFsaWRWYWx1ZSA9IHR5cGUgPT09IFwic3RyaW5nXCIgfHwgQXJyYXkuaXNBcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS50b2dnbGVDbGFzcyhcblx0XHRcdFx0XHR2YWx1ZS5jYWxsKCB0aGlzLCBpLCBnZXRDbGFzcyggdGhpcyApLCBzdGF0ZVZhbCApLFxuXHRcdFx0XHRcdHN0YXRlVmFsXG5cdFx0XHRcdCk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGVWYWwgPT09IFwiYm9vbGVhblwiICYmIGlzVmFsaWRWYWx1ZSApIHtcblx0XHRcdHJldHVybiBzdGF0ZVZhbCA/IHRoaXMuYWRkQ2xhc3MoIHZhbHVlICkgOiB0aGlzLnJlbW92ZUNsYXNzKCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGNsYXNzTmFtZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBpc1ZhbGlkVmFsdWUgKSB7XG5cblx0XHRcdFx0Ly8gVG9nZ2xlIGluZGl2aWR1YWwgY2xhc3MgbmFtZXNcblx0XHRcdFx0c2VsZiA9IGpRdWVyeSggdGhpcyApO1xuXG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgY2xhc3NOYW1lcy5sZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0XHRjbGFzc05hbWUgPSBjbGFzc05hbWVzWyBpIF07XG5cblx0XHRcdFx0XHQvLyBDaGVjayBlYWNoIGNsYXNzTmFtZSBnaXZlbiwgc3BhY2Ugc2VwYXJhdGVkIGxpc3Rcblx0XHRcdFx0XHRpZiAoIHNlbGYuaGFzQ2xhc3MoIGNsYXNzTmFtZSApICkge1xuXHRcdFx0XHRcdFx0c2VsZi5yZW1vdmVDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHNlbGYuYWRkQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBUb2dnbGUgd2hvbGUgY2xhc3MgbmFtZVxuXHRcdFx0fSBlbHNlIGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB0eXBlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdFx0Y2xhc3NOYW1lID0gZ2V0Q2xhc3MoIHRoaXMgKTtcblx0XHRcdFx0aWYgKCBjbGFzc05hbWUgKSB7XG5cblx0XHRcdFx0XHQvLyBTdG9yZSBjbGFzc05hbWUgaWYgc2V0XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiwgY2xhc3NOYW1lICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJZiB0aGUgZWxlbWVudCBoYXMgYSBjbGFzcyBuYW1lIG9yIGlmIHdlJ3JlIHBhc3NlZCBgZmFsc2VgLFxuXHRcdFx0XHQvLyB0aGVuIHJlbW92ZSB0aGUgd2hvbGUgY2xhc3NuYW1lIChpZiB0aGVyZSB3YXMgb25lLCB0aGUgYWJvdmUgc2F2ZWQgaXQpLlxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYnJpbmcgYmFjayB3aGF0ZXZlciB3YXMgcHJldmlvdXNseSBzYXZlZCAoaWYgYW55dGhpbmcpLFxuXHRcdFx0XHQvLyBmYWxsaW5nIGJhY2sgdG8gdGhlIGVtcHR5IHN0cmluZyBpZiBub3RoaW5nIHdhcyBzdG9yZWQuXG5cdFx0XHRcdGlmICggdGhpcy5zZXRBdHRyaWJ1dGUgKSB7XG5cdFx0XHRcdFx0dGhpcy5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIixcblx0XHRcdFx0XHRcdGNsYXNzTmFtZSB8fCB2YWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0XHRcdFx0XHRcIlwiIDpcblx0XHRcdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiApIHx8IFwiXCJcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGhhc0NsYXNzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGNsYXNzTmFtZSwgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Y2xhc3NOYW1lID0gXCIgXCIgKyBzZWxlY3RvciArIFwiIFwiO1xuXHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHQoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggZ2V0Q2xhc3MoIGVsZW0gKSApICsgXCIgXCIgKS5pbmRleE9mKCBjbGFzc05hbWUgKSA+IC0xICkge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIHJyZXR1cm4gPSAvXFxyL2c7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0dmFsOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGhvb2tzLCByZXQsIHZhbHVlSXNGdW5jdGlvbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgZWxlbS50eXBlIF0gfHxcblx0XHRcdFx0XHRqUXVlcnkudmFsSG9va3NbIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHRcdGlmICggaG9va3MgJiZcblx0XHRcdFx0XHRcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIFwidmFsdWVcIiApICkgIT09IHVuZGVmaW5lZFxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0ID0gZWxlbS52YWx1ZTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgbW9zdCBjb21tb24gc3RyaW5nIGNhc2VzXG5cdFx0XHRcdGlmICggdHlwZW9mIHJldCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0LnJlcGxhY2UoIHJyZXR1cm4sIFwiXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEhhbmRsZSBjYXNlcyB3aGVyZSB2YWx1ZSBpcyBudWxsL3VuZGVmIG9yIG51bWJlclxuXHRcdFx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyBcIlwiIDogcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFsdWVJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0dmFyIHZhbDtcblxuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlICE9PSAxICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdmFsdWVJc0Z1bmN0aW9uICkge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZS5jYWxsKCB0aGlzLCBpLCBqUXVlcnkoIHRoaXMgKS52YWwoKSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFsID0gdmFsdWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRyZWF0IG51bGwvdW5kZWZpbmVkIGFzIFwiXCI7IGNvbnZlcnQgbnVtYmVycyB0byBzdHJpbmdcblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHZhbCA9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHZhbCArPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0dmFsID0galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKyBcIlwiO1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyB0aGlzLnR5cGUgXSB8fCBqUXVlcnkudmFsSG9va3NbIHRoaXMubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHQvLyBJZiBzZXQgcmV0dXJucyB1bmRlZmluZWQsIGZhbGwgYmFjayB0byBub3JtYWwgc2V0dGluZ1xuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8IGhvb2tzLnNldCggdGhpcywgdmFsLCBcInZhbHVlXCIgKSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHR0aGlzLnZhbHVlID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHZhbEhvb2tzOiB7XG5cdFx0b3B0aW9uOiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdHZhciB2YWwgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInZhbHVlXCIgKTtcblx0XHRcdFx0cmV0dXJuIHZhbCAhPSBudWxsID9cblx0XHRcdFx0XHR2YWwgOlxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExIG9ubHlcblx0XHRcdFx0XHQvLyBvcHRpb24udGV4dCB0aHJvd3MgZXhjZXB0aW9ucyAodHJhYy0xNDY4NiwgdHJhYy0xNDg1OClcblx0XHRcdFx0XHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZVxuXHRcdFx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS13aGl0ZXNwYWNlXG5cdFx0XHRcdFx0c3RyaXBBbmRDb2xsYXBzZSggalF1ZXJ5LnRleHQoIGVsZW0gKSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0c2VsZWN0OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgdmFsdWUsIG9wdGlvbiwgaSxcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdGluZGV4ID0gZWxlbS5zZWxlY3RlZEluZGV4LFxuXHRcdFx0XHRcdG9uZSA9IGVsZW0udHlwZSA9PT0gXCJzZWxlY3Qtb25lXCIsXG5cdFx0XHRcdFx0dmFsdWVzID0gb25lID8gbnVsbCA6IFtdLFxuXHRcdFx0XHRcdG1heCA9IG9uZSA/IGluZGV4ICsgMSA6IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdGlmICggaW5kZXggPCAwICkge1xuXHRcdFx0XHRcdGkgPSBtYXg7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpID0gb25lID8gaW5kZXggOiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTG9vcCB0aHJvdWdoIGFsbCB0aGUgc2VsZWN0ZWQgb3B0aW9uc1xuXHRcdFx0XHRmb3IgKCA7IGkgPCBtYXg7IGkrKyApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdC8vIElFOC05IGRvZXNuJ3QgdXBkYXRlIHNlbGVjdGVkIGFmdGVyIGZvcm0gcmVzZXQgKHRyYWMtMjU1MSlcblx0XHRcdFx0XHRpZiAoICggb3B0aW9uLnNlbGVjdGVkIHx8IGkgPT09IGluZGV4ICkgJiZcblxuXHRcdFx0XHRcdFx0XHQvLyBEb24ndCByZXR1cm4gb3B0aW9ucyB0aGF0IGFyZSBkaXNhYmxlZCBvciBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHRcdFx0XHRcdCFvcHRpb24uZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRcdFx0KCAhb3B0aW9uLnBhcmVudE5vZGUuZGlzYWJsZWQgfHxcblx0XHRcdFx0XHRcdFx0XHQhbm9kZU5hbWUoIG9wdGlvbi5wYXJlbnROb2RlLCBcIm9wdGdyb3VwXCIgKSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBHZXQgdGhlIHNwZWNpZmljIHZhbHVlIGZvciB0aGUgb3B0aW9uXG5cdFx0XHRcdFx0XHR2YWx1ZSA9IGpRdWVyeSggb3B0aW9uICkudmFsKCk7XG5cblx0XHRcdFx0XHRcdC8vIFdlIGRvbid0IG5lZWQgYW4gYXJyYXkgZm9yIG9uZSBzZWxlY3RzXG5cdFx0XHRcdFx0XHRpZiAoIG9uZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBNdWx0aS1TZWxlY3RzIHJldHVybiBhbiBhcnJheVxuXHRcdFx0XHRcdFx0dmFsdWVzLnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgb3B0aW9uU2V0LCBvcHRpb24sXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHR2YWx1ZXMgPSBqUXVlcnkubWFrZUFycmF5KCB2YWx1ZSApLFxuXHRcdFx0XHRcdGkgPSBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXG5cdFx0XHRcdFx0aWYgKCBvcHRpb24uc2VsZWN0ZWQgPVxuXHRcdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGpRdWVyeS52YWxIb29rcy5vcHRpb24uZ2V0KCBvcHRpb24gKSwgdmFsdWVzICkgPiAtMVxuXHRcdFx0XHRcdCkge1xuXHRcdFx0XHRcdFx0b3B0aW9uU2V0ID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbmQtYXNzaWduICovXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBGb3JjZSBicm93c2VycyB0byBiZWhhdmUgY29uc2lzdGVudGx5IHdoZW4gbm9uLW1hdGNoaW5nIHZhbHVlIGlzIHNldFxuXHRcdFx0XHRpZiAoICFvcHRpb25TZXQgKSB7XG5cdFx0XHRcdFx0ZWxlbS5zZWxlY3RlZEluZGV4ID0gLTE7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gUmFkaW9zIGFuZCBjaGVja2JveGVzIGdldHRlci9zZXR0ZXJcbmpRdWVyeS5lYWNoKCBbIFwicmFkaW9cIiwgXCJjaGVja2JveFwiIF0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXSA9IHtcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS5jaGVja2VkID0galF1ZXJ5LmluQXJyYXkoIGpRdWVyeSggZWxlbSApLnZhbCgpLCB2YWx1ZSApID4gLTEgKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdGlmICggIXN1cHBvcnQuY2hlY2tPbiApIHtcblx0XHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXS5nZXQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IG51bGwgPyBcIm9uXCIgOiBlbGVtLnZhbHVlO1xuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUmV0dXJuIGpRdWVyeSBmb3IgYXR0cmlidXRlcy1vbmx5IGluY2x1c2lvblxuXG5cbnN1cHBvcnQuZm9jdXNpbiA9IFwib25mb2N1c2luXCIgaW4gd2luZG93O1xuXG5cbnZhciByZm9jdXNNb3JwaCA9IC9eKD86Zm9jdXNpbmZvY3VzfGZvY3Vzb3V0Ymx1cikkLyxcblx0c3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgPSBmdW5jdGlvbiggZSApIHtcblx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHR9O1xuXG5qUXVlcnkuZXh0ZW5kKCBqUXVlcnkuZXZlbnQsIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggZXZlbnQsIGRhdGEsIGVsZW0sIG9ubHlIYW5kbGVycyApIHtcblxuXHRcdHZhciBpLCBjdXIsIHRtcCwgYnViYmxlVHlwZSwgb250eXBlLCBoYW5kbGUsIHNwZWNpYWwsIGxhc3RFbGVtZW50LFxuXHRcdFx0ZXZlbnRQYXRoID0gWyBlbGVtIHx8IGRvY3VtZW50IF0sXG5cdFx0XHR0eXBlID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcInR5cGVcIiApID8gZXZlbnQudHlwZSA6IGV2ZW50LFxuXHRcdFx0bmFtZXNwYWNlcyA9IGhhc093bi5jYWxsKCBldmVudCwgXCJuYW1lc3BhY2VcIiApID8gZXZlbnQubmFtZXNwYWNlLnNwbGl0KCBcIi5cIiApIDogW107XG5cblx0XHRjdXIgPSBsYXN0RWxlbWVudCA9IHRtcCA9IGVsZW0gPSBlbGVtIHx8IGRvY3VtZW50O1xuXG5cdFx0Ly8gRG9uJ3QgZG8gZXZlbnRzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBmb2N1cy9ibHVyIG1vcnBocyB0byBmb2N1c2luL291dDsgZW5zdXJlIHdlJ3JlIG5vdCBmaXJpbmcgdGhlbSByaWdodCBub3dcblx0XHRpZiAoIHJmb2N1c01vcnBoLnRlc3QoIHR5cGUgKyBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlLmluZGV4T2YoIFwiLlwiICkgPiAtMSApIHtcblxuXHRcdFx0Ly8gTmFtZXNwYWNlZCB0cmlnZ2VyOyBjcmVhdGUgYSByZWdleHAgdG8gbWF0Y2ggZXZlbnQgdHlwZSBpbiBoYW5kbGUoKVxuXHRcdFx0bmFtZXNwYWNlcyA9IHR5cGUuc3BsaXQoIFwiLlwiICk7XG5cdFx0XHR0eXBlID0gbmFtZXNwYWNlcy5zaGlmdCgpO1xuXHRcdFx0bmFtZXNwYWNlcy5zb3J0KCk7XG5cdFx0fVxuXHRcdG9udHlwZSA9IHR5cGUuaW5kZXhPZiggXCI6XCIgKSA8IDAgJiYgXCJvblwiICsgdHlwZTtcblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhIGpRdWVyeS5FdmVudCBvYmplY3QsIE9iamVjdCwgb3IganVzdCBhbiBldmVudCB0eXBlIHN0cmluZ1xuXHRcdGV2ZW50ID0gZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0ZXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggdHlwZSwgdHlwZW9mIGV2ZW50ID09PSBcIm9iamVjdFwiICYmIGV2ZW50ICk7XG5cblx0XHQvLyBUcmlnZ2VyIGJpdG1hc2s6ICYgMSBmb3IgbmF0aXZlIGhhbmRsZXJzOyAmIDIgZm9yIGpRdWVyeSAoYWx3YXlzIHRydWUpXG5cdFx0ZXZlbnQuaXNUcmlnZ2VyID0gb25seUhhbmRsZXJzID8gMiA6IDM7XG5cdFx0ZXZlbnQubmFtZXNwYWNlID0gbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApO1xuXHRcdGV2ZW50LnJuYW1lc3BhY2UgPSBldmVudC5uYW1lc3BhY2UgP1xuXHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICkgOlxuXHRcdFx0bnVsbDtcblxuXHRcdC8vIENsZWFuIHVwIHRoZSBldmVudCBpbiBjYXNlIGl0IGlzIGJlaW5nIHJldXNlZFxuXHRcdGV2ZW50LnJlc3VsdCA9IHVuZGVmaW5lZDtcblx0XHRpZiAoICFldmVudC50YXJnZXQgKSB7XG5cdFx0XHRldmVudC50YXJnZXQgPSBlbGVtO1xuXHRcdH1cblxuXHRcdC8vIENsb25lIGFueSBpbmNvbWluZyBkYXRhIGFuZCBwcmVwZW5kIHRoZSBldmVudCwgY3JlYXRpbmcgdGhlIGhhbmRsZXIgYXJnIGxpc3Rcblx0XHRkYXRhID0gZGF0YSA9PSBudWxsID9cblx0XHRcdFsgZXZlbnQgXSA6XG5cdFx0XHRqUXVlcnkubWFrZUFycmF5KCBkYXRhLCBbIGV2ZW50IF0gKTtcblxuXHRcdC8vIEFsbG93IHNwZWNpYWwgZXZlbnRzIHRvIGRyYXcgb3V0c2lkZSB0aGUgbGluZXNcblx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgc3BlY2lhbC50cmlnZ2VyICYmIHNwZWNpYWwudHJpZ2dlci5hcHBseSggZWxlbSwgZGF0YSApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgZXZlbnQgcHJvcGFnYXRpb24gcGF0aCBpbiBhZHZhbmNlLCBwZXIgVzNDIGV2ZW50cyBzcGVjICh0cmFjLTk5NTEpXG5cdFx0Ly8gQnViYmxlIHVwIHRvIGRvY3VtZW50LCB0aGVuIHRvIHdpbmRvdzsgd2F0Y2ggZm9yIGEgZ2xvYmFsIG93bmVyRG9jdW1lbnQgdmFyICh0cmFjLTk3MjQpXG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFzcGVjaWFsLm5vQnViYmxlICYmICFpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRidWJibGVUeXBlID0gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgfHwgdHlwZTtcblx0XHRcdGlmICggIXJmb2N1c01vcnBoLnRlc3QoIGJ1YmJsZVR5cGUgKyB0eXBlICkgKSB7XG5cdFx0XHRcdGN1ciA9IGN1ci5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0Zm9yICggOyBjdXI7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggY3VyICk7XG5cdFx0XHRcdHRtcCA9IGN1cjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT25seSBhZGQgd2luZG93IGlmIHdlIGdvdCB0byBkb2N1bWVudCAoZS5nLiwgbm90IHBsYWluIG9iaiBvciBkZXRhY2hlZCBET00pXG5cdFx0XHRpZiAoIHRtcCA9PT0gKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQgKSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIHRtcC5kZWZhdWx0VmlldyB8fCB0bXAucGFyZW50V2luZG93IHx8IHdpbmRvdyApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZpcmUgaGFuZGxlcnMgb24gdGhlIGV2ZW50IHBhdGhcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggY3VyID0gZXZlbnRQYXRoWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0bGFzdEVsZW1lbnQgPSBjdXI7XG5cdFx0XHRldmVudC50eXBlID0gaSA+IDEgP1xuXHRcdFx0XHRidWJibGVUeXBlIDpcblx0XHRcdFx0c3BlY2lhbC5iaW5kVHlwZSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBqUXVlcnkgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gKCBkYXRhUHJpdi5nZXQoIGN1ciwgXCJldmVudHNcIiApIHx8IE9iamVjdC5jcmVhdGUoIG51bGwgKSApWyBldmVudC50eXBlIF0gJiZcblx0XHRcdFx0ZGF0YVByaXYuZ2V0KCBjdXIsIFwiaGFuZGxlXCIgKTtcblx0XHRcdGlmICggaGFuZGxlICkge1xuXHRcdFx0XHRoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBOYXRpdmUgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gb250eXBlICYmIGN1clsgb250eXBlIF07XG5cdFx0XHRpZiAoIGhhbmRsZSAmJiBoYW5kbGUuYXBwbHkgJiYgYWNjZXB0RGF0YSggY3VyICkgKSB7XG5cdFx0XHRcdGV2ZW50LnJlc3VsdCA9IGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGV2ZW50LnR5cGUgPSB0eXBlO1xuXG5cdFx0Ly8gSWYgbm9ib2R5IHByZXZlbnRlZCB0aGUgZGVmYXVsdCBhY3Rpb24sIGRvIGl0IG5vd1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cblx0XHRcdGlmICggKCAhc3BlY2lhbC5fZGVmYXVsdCB8fFxuXHRcdFx0XHRzcGVjaWFsLl9kZWZhdWx0LmFwcGx5KCBldmVudFBhdGgucG9wKCksIGRhdGEgKSA9PT0gZmFsc2UgKSAmJlxuXHRcdFx0XHRhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cblx0XHRcdFx0Ly8gQ2FsbCBhIG5hdGl2ZSBET00gbWV0aG9kIG9uIHRoZSB0YXJnZXQgd2l0aCB0aGUgc2FtZSBuYW1lIGFzIHRoZSBldmVudC5cblx0XHRcdFx0Ly8gRG9uJ3QgZG8gZGVmYXVsdCBhY3Rpb25zIG9uIHdpbmRvdywgdGhhdCdzIHdoZXJlIGdsb2JhbCB2YXJpYWJsZXMgYmUgKHRyYWMtNjE3MClcblx0XHRcdFx0aWYgKCBvbnR5cGUgJiYgaXNGdW5jdGlvbiggZWxlbVsgdHlwZSBdICkgJiYgIWlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyBEb24ndCByZS10cmlnZ2VyIGFuIG9uRk9PIGV2ZW50IHdoZW4gd2UgY2FsbCBpdHMgRk9PKCkgbWV0aG9kXG5cdFx0XHRcdFx0dG1wID0gZWxlbVsgb250eXBlIF07XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gbnVsbDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmV2ZW50IHJlLXRyaWdnZXJpbmcgb2YgdGhlIHNhbWUgZXZlbnQsIHNpbmNlIHdlIGFscmVhZHkgYnViYmxlZCBpdCBhYm92ZVxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB0eXBlO1xuXG5cdFx0XHRcdFx0aWYgKCBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0XHRcdFx0bGFzdEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgc3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRlbGVtWyB0eXBlIF0oKTtcblxuXHRcdFx0XHRcdGlmICggZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdFx0XHRcdGxhc3RFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSB0bXA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHQvLyBQaWdneWJhY2sgb24gYSBkb25vciBldmVudCB0byBzaW11bGF0ZSBhIGRpZmZlcmVudCBvbmVcblx0Ly8gVXNlZCBvbmx5IGZvciBgZm9jdXMoaW4gfCBvdXQpYCBldmVudHNcblx0c2ltdWxhdGU6IGZ1bmN0aW9uKCB0eXBlLCBlbGVtLCBldmVudCApIHtcblx0XHR2YXIgZSA9IGpRdWVyeS5leHRlbmQoXG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCksXG5cdFx0XHRldmVudCxcblx0XHRcdHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0aXNTaW11bGF0ZWQ6IHRydWVcblx0XHRcdH1cblx0XHQpO1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIGUsIG51bGwsIGVsZW0gKTtcblx0fVxuXG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCB0aGlzICk7XG5cdFx0fSApO1xuXHR9LFxuXHR0cmlnZ2VySGFuZGxlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF07XG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCBlbGVtLCB0cnVlICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cblxuLy8gU3VwcG9ydDogRmlyZWZveCA8PTQ0XG4vLyBGaXJlZm94IGRvZXNuJ3QgaGF2ZSBmb2N1cyhpbiB8IG91dCkgZXZlbnRzXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY4Nzc4N1xuLy9cbi8vIFN1cHBvcnQ6IENocm9tZSA8PTQ4IC0gNDksIFNhZmFyaSA8PTkuMCAtIDkuMVxuLy8gZm9jdXMoaW4gfCBvdXQpIGV2ZW50cyBmaXJlIGFmdGVyIGZvY3VzICYgYmx1ciBldmVudHMsXG4vLyB3aGljaCBpcyBzcGVjIHZpb2xhdGlvbiAtIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnRzLWZvY3VzZXZlbnQtZXZlbnQtb3JkZXJcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDQ5ODU3XG5pZiAoICFzdXBwb3J0LmZvY3VzaW4gKSB7XG5cdGpRdWVyeS5lYWNoKCB7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cblx0XHQvLyBBdHRhY2ggYSBzaW5nbGUgY2FwdHVyaW5nIGhhbmRsZXIgb24gdGhlIGRvY3VtZW50IHdoaWxlIHNvbWVvbmUgd2FudHMgZm9jdXNpbi9mb2N1c291dFxuXHRcdHZhciBoYW5kbGVyID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnNpbXVsYXRlKCBmaXgsIGV2ZW50LnRhcmdldCwgalF1ZXJ5LmV2ZW50LmZpeCggZXZlbnQgKSApO1xuXHRcdH07XG5cblx0XHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZml4IF0gPSB7XG5cdFx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gSGFuZGxlOiByZWd1bGFyIG5vZGVzICh2aWEgYHRoaXMub3duZXJEb2N1bWVudGApLCB3aW5kb3dcblx0XHRcdFx0Ly8gKHZpYSBgdGhpcy5kb2N1bWVudGApICYgZG9jdW1lbnQgKHZpYSBgdGhpc2ApLlxuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMuZG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MuYWRkRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsICggYXR0YWNoZXMgfHwgMCApICsgMSApO1xuXHRcdFx0fSxcblx0XHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLmRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICkgLSAxO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgYXR0YWNoZXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH0gKTtcbn1cbnZhciBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbjtcblxudmFyIG5vbmNlID0geyBndWlkOiBEYXRlLm5vdygpIH07XG5cbnZhciBycXVlcnkgPSAoIC9cXD8vICk7XG5cblxuXG4vLyBDcm9zcy1icm93c2VyIHhtbCBwYXJzaW5nXG5qUXVlcnkucGFyc2VYTUwgPSBmdW5jdGlvbiggZGF0YSApIHtcblx0dmFyIHhtbCwgcGFyc2VyRXJyb3JFbGVtO1xuXHRpZiAoICFkYXRhIHx8IHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0Ly8gSUUgdGhyb3dzIG9uIHBhcnNlRnJvbVN0cmluZyB3aXRoIGludmFsaWQgaW5wdXQuXG5cdHRyeSB7XG5cdFx0eG1sID0gKCBuZXcgd2luZG93LkRPTVBhcnNlcigpICkucGFyc2VGcm9tU3RyaW5nKCBkYXRhLCBcInRleHQveG1sXCIgKTtcblx0fSBjYXRjaCAoIGUgKSB7fVxuXG5cdHBhcnNlckVycm9yRWxlbSA9IHhtbCAmJiB4bWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwicGFyc2VyZXJyb3JcIiApWyAwIF07XG5cdGlmICggIXhtbCB8fCBwYXJzZXJFcnJvckVsZW0gKSB7XG5cdFx0alF1ZXJ5LmVycm9yKCBcIkludmFsaWQgWE1MOiBcIiArIChcblx0XHRcdHBhcnNlckVycm9yRWxlbSA/XG5cdFx0XHRcdGpRdWVyeS5tYXAoIHBhcnNlckVycm9yRWxlbS5jaGlsZE5vZGVzLCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVsLnRleHRDb250ZW50O1xuXHRcdFx0XHR9ICkuam9pbiggXCJcXG5cIiApIDpcblx0XHRcdFx0ZGF0YVxuXHRcdCkgKTtcblx0fVxuXHRyZXR1cm4geG1sO1xufTtcblxuXG52YXJcblx0cmJyYWNrZXQgPSAvXFxbXFxdJC8sXG5cdHJDUkxGID0gL1xccj9cXG4vZyxcblx0cnN1Ym1pdHRlclR5cGVzID0gL14oPzpzdWJtaXR8YnV0dG9ufGltYWdlfHJlc2V0fGZpbGUpJC9pLFxuXHRyc3VibWl0dGFibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxrZXlnZW4pL2k7XG5cbmZ1bmN0aW9uIGJ1aWxkUGFyYW1zKCBwcmVmaXgsIG9iaiwgdHJhZGl0aW9uYWwsIGFkZCApIHtcblx0dmFyIG5hbWU7XG5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBvYmogKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBhcnJheSBpdGVtLlxuXHRcdGpRdWVyeS5lYWNoKCBvYmosIGZ1bmN0aW9uKCBpLCB2ICkge1xuXHRcdFx0aWYgKCB0cmFkaXRpb25hbCB8fCByYnJhY2tldC50ZXN0KCBwcmVmaXggKSApIHtcblxuXHRcdFx0XHQvLyBUcmVhdCBlYWNoIGFycmF5IGl0ZW0gYXMgYSBzY2FsYXIuXG5cdFx0XHRcdGFkZCggcHJlZml4LCB2ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gSXRlbSBpcyBub24tc2NhbGFyIChhcnJheSBvciBvYmplY3QpLCBlbmNvZGUgaXRzIG51bWVyaWMgaW5kZXguXG5cdFx0XHRcdGJ1aWxkUGFyYW1zKFxuXHRcdFx0XHRcdHByZWZpeCArIFwiW1wiICsgKCB0eXBlb2YgdiA9PT0gXCJvYmplY3RcIiAmJiB2ICE9IG51bGwgPyBpIDogXCJcIiApICsgXCJdXCIsXG5cdFx0XHRcdFx0dixcblx0XHRcdFx0XHR0cmFkaXRpb25hbCxcblx0XHRcdFx0XHRhZGRcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9ICk7XG5cblx0fSBlbHNlIGlmICggIXRyYWRpdGlvbmFsICYmIHRvVHlwZSggb2JqICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgb2JqZWN0IGl0ZW0uXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4ICsgXCJbXCIgKyBuYW1lICsgXCJdXCIsIG9ialsgbmFtZSBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBTZXJpYWxpemUgc2NhbGFyIGl0ZW0uXG5cdFx0YWRkKCBwcmVmaXgsIG9iaiApO1xuXHR9XG59XG5cbi8vIFNlcmlhbGl6ZSBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzIG9yIGEgc2V0IG9mXG4vLyBrZXkvdmFsdWVzIGludG8gYSBxdWVyeSBzdHJpbmdcbmpRdWVyeS5wYXJhbSA9IGZ1bmN0aW9uKCBhLCB0cmFkaXRpb25hbCApIHtcblx0dmFyIHByZWZpeCxcblx0XHRzID0gW10sXG5cdFx0YWRkID0gZnVuY3Rpb24oIGtleSwgdmFsdWVPckZ1bmN0aW9uICkge1xuXG5cdFx0XHQvLyBJZiB2YWx1ZSBpcyBhIGZ1bmN0aW9uLCBpbnZva2UgaXQgYW5kIHVzZSBpdHMgcmV0dXJuIHZhbHVlXG5cdFx0XHR2YXIgdmFsdWUgPSBpc0Z1bmN0aW9uKCB2YWx1ZU9yRnVuY3Rpb24gKSA/XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbigpIDpcblx0XHRcdFx0dmFsdWVPckZ1bmN0aW9uO1xuXG5cdFx0XHRzWyBzLmxlbmd0aCBdID0gZW5jb2RlVVJJQ29tcG9uZW50KCBrZXkgKSArIFwiPVwiICtcblx0XHRcdFx0ZW5jb2RlVVJJQ29tcG9uZW50KCB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICk7XG5cdFx0fTtcblxuXHRpZiAoIGEgPT0gbnVsbCApIHtcblx0XHRyZXR1cm4gXCJcIjtcblx0fVxuXG5cdC8vIElmIGFuIGFycmF5IHdhcyBwYXNzZWQgaW4sIGFzc3VtZSB0aGF0IGl0IGlzIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMuXG5cdGlmICggQXJyYXkuaXNBcnJheSggYSApIHx8ICggYS5qcXVlcnkgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KCBhICkgKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSB0aGUgZm9ybSBlbGVtZW50c1xuXHRcdGpRdWVyeS5lYWNoKCBhLCBmdW5jdGlvbigpIHtcblx0XHRcdGFkZCggdGhpcy5uYW1lLCB0aGlzLnZhbHVlICk7XG5cdFx0fSApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBJZiB0cmFkaXRpb25hbCwgZW5jb2RlIHRoZSBcIm9sZFwiIHdheSAodGhlIHdheSAxLjMuMiBvciBvbGRlclxuXHRcdC8vIGRpZCBpdCksIG90aGVyd2lzZSBlbmNvZGUgcGFyYW1zIHJlY3Vyc2l2ZWx5LlxuXHRcdGZvciAoIHByZWZpeCBpbiBhICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCwgYVsgcHJlZml4IF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIHJlc3VsdGluZyBzZXJpYWxpemF0aW9uXG5cdHJldHVybiBzLmpvaW4oIFwiJlwiICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNlcmlhbGl6ZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5wYXJhbSggdGhpcy5zZXJpYWxpemVBcnJheSgpICk7XG5cdH0sXG5cdHNlcmlhbGl6ZUFycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBDYW4gYWRkIHByb3BIb29rIGZvciBcImVsZW1lbnRzXCIgdG8gZmlsdGVyIG9yIGFkZCBmb3JtIGVsZW1lbnRzXG5cdFx0XHR2YXIgZWxlbWVudHMgPSBqUXVlcnkucHJvcCggdGhpcywgXCJlbGVtZW50c1wiICk7XG5cdFx0XHRyZXR1cm4gZWxlbWVudHMgPyBqUXVlcnkubWFrZUFycmF5KCBlbGVtZW50cyApIDogdGhpcztcblx0XHR9ICkuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciB0eXBlID0gdGhpcy50eXBlO1xuXG5cdFx0XHQvLyBVc2UgLmlzKCBcIjpkaXNhYmxlZFwiICkgc28gdGhhdCBmaWVsZHNldFtkaXNhYmxlZF0gd29ya3Ncblx0XHRcdHJldHVybiB0aGlzLm5hbWUgJiYgIWpRdWVyeSggdGhpcyApLmlzKCBcIjpkaXNhYmxlZFwiICkgJiZcblx0XHRcdFx0cnN1Ym1pdHRhYmxlLnRlc3QoIHRoaXMubm9kZU5hbWUgKSAmJiAhcnN1Ym1pdHRlclR5cGVzLnRlc3QoIHR5cGUgKSAmJlxuXHRcdFx0XHQoIHRoaXMuY2hlY2tlZCB8fCAhcmNoZWNrYWJsZVR5cGUudGVzdCggdHlwZSApICk7XG5cdFx0fSApLm1hcCggZnVuY3Rpb24oIF9pLCBlbGVtICkge1xuXHRcdFx0dmFyIHZhbCA9IGpRdWVyeSggdGhpcyApLnZhbCgpO1xuXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbCApIHtcblx0XHRcdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0fSApLmdldCgpO1xuXHR9XG59ICk7XG5cblxudmFyXG5cdHIyMCA9IC8lMjAvZyxcblx0cmhhc2ggPSAvIy4qJC8sXG5cdHJhbnRpQ2FjaGUgPSAvKFs/Jl0pXz1bXiZdKi8sXG5cdHJoZWFkZXJzID0gL14oLio/KTpbIFxcdF0qKFteXFxyXFxuXSopJC9tZyxcblxuXHQvLyB0cmFjLTc2NTMsIHRyYWMtODEyNSwgdHJhYy04MTUyOiBsb2NhbCBwcm90b2NvbCBkZXRlY3Rpb25cblx0cmxvY2FsUHJvdG9jb2wgPSAvXig/OmFib3V0fGFwcHxhcHAtc3RvcmFnZXwuKy1leHRlbnNpb258ZmlsZXxyZXN8d2lkZ2V0KTokLyxcblx0cm5vQ29udGVudCA9IC9eKD86R0VUfEhFQUQpJC8sXG5cdHJwcm90b2NvbCA9IC9eXFwvXFwvLyxcblxuXHQvKiBQcmVmaWx0ZXJzXG5cdCAqIDEpIFRoZXkgYXJlIHVzZWZ1bCB0byBpbnRyb2R1Y2UgY3VzdG9tIGRhdGFUeXBlcyAoc2VlIGFqYXgvanNvbnAuanMgZm9yIGFuIGV4YW1wbGUpXG5cdCAqIDIpIFRoZXNlIGFyZSBjYWxsZWQ6XG5cdCAqICAgIC0gQkVGT1JFIGFza2luZyBmb3IgYSB0cmFuc3BvcnRcblx0ICogICAgLSBBRlRFUiBwYXJhbSBzZXJpYWxpemF0aW9uIChzLmRhdGEgaXMgYSBzdHJpbmcgaWYgcy5wcm9jZXNzRGF0YSBpcyB0cnVlKVxuXHQgKiAzKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDQpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogNSkgZXhlY3V0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gY29udGludWUgZG93biB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHByZWZpbHRlcnMgPSB7fSxcblxuXHQvKiBUcmFuc3BvcnRzIGJpbmRpbmdzXG5cdCAqIDEpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogMikgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiAzKSBzZWxlY3Rpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBnbyB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHRyYW5zcG9ydHMgPSB7fSxcblxuXHQvLyBBdm9pZCBjb21tZW50LXByb2xvZyBjaGFyIHNlcXVlbmNlICh0cmFjLTEwMDk4KTsgbXVzdCBhcHBlYXNlIGxpbnQgYW5kIGV2YWRlIGNvbXByZXNzaW9uXG5cdGFsbFR5cGVzID0gXCIqL1wiLmNvbmNhdCggXCIqXCIgKSxcblxuXHQvLyBBbmNob3IgdGFnIGZvciBwYXJzaW5nIHRoZSBkb2N1bWVudCBvcmlnaW5cblx0b3JpZ2luQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblxub3JpZ2luQW5jaG9yLmhyZWYgPSBsb2NhdGlvbi5ocmVmO1xuXG4vLyBCYXNlIFwiY29uc3RydWN0b3JcIiBmb3IgalF1ZXJ5LmFqYXhQcmVmaWx0ZXIgYW5kIGpRdWVyeS5hamF4VHJhbnNwb3J0XG5mdW5jdGlvbiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSApIHtcblxuXHQvLyBkYXRhVHlwZUV4cHJlc3Npb24gaXMgb3B0aW9uYWwgYW5kIGRlZmF1bHRzIHRvIFwiKlwiXG5cdHJldHVybiBmdW5jdGlvbiggZGF0YVR5cGVFeHByZXNzaW9uLCBmdW5jICkge1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVFeHByZXNzaW9uICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZnVuYyA9IGRhdGFUeXBlRXhwcmVzc2lvbjtcblx0XHRcdGRhdGFUeXBlRXhwcmVzc2lvbiA9IFwiKlwiO1xuXHRcdH1cblxuXHRcdHZhciBkYXRhVHlwZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0ZGF0YVR5cGVzID0gZGF0YVR5cGVFeHByZXNzaW9uLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggZnVuYyApICkge1xuXG5cdFx0XHQvLyBGb3IgZWFjaCBkYXRhVHlwZSBpbiB0aGUgZGF0YVR5cGVFeHByZXNzaW9uXG5cdFx0XHR3aGlsZSAoICggZGF0YVR5cGUgPSBkYXRhVHlwZXNbIGkrKyBdICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJlcGVuZCBpZiByZXF1ZXN0ZWRcblx0XHRcdFx0aWYgKCBkYXRhVHlwZVsgMCBdID09PSBcIitcIiApIHtcblx0XHRcdFx0XHRkYXRhVHlwZSA9IGRhdGFUeXBlLnNsaWNlKCAxICkgfHwgXCIqXCI7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS51bnNoaWZ0KCBmdW5jICk7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkucHVzaCggZnVuYyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG4vLyBCYXNlIGluc3BlY3Rpb24gZnVuY3Rpb24gZm9yIHByZWZpbHRlcnMgYW5kIHRyYW5zcG9ydHNcbmZ1bmN0aW9uIGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUsIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKSB7XG5cblx0dmFyIGluc3BlY3RlZCA9IHt9LFxuXHRcdHNlZWtpbmdUcmFuc3BvcnQgPSAoIHN0cnVjdHVyZSA9PT0gdHJhbnNwb3J0cyApO1xuXG5cdGZ1bmN0aW9uIGluc3BlY3QoIGRhdGFUeXBlICkge1xuXHRcdHZhciBzZWxlY3RlZDtcblx0XHRpbnNwZWN0ZWRbIGRhdGFUeXBlIF0gPSB0cnVlO1xuXHRcdGpRdWVyeS5lYWNoKCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10sIGZ1bmN0aW9uKCBfLCBwcmVmaWx0ZXJPckZhY3RvcnkgKSB7XG5cdFx0XHR2YXIgZGF0YVR5cGVPclRyYW5zcG9ydCA9IHByZWZpbHRlck9yRmFjdG9yeSggb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApO1xuXHRcdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVPclRyYW5zcG9ydCA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc2Vla2luZ1RyYW5zcG9ydCAmJiAhaW5zcGVjdGVkWyBkYXRhVHlwZU9yVHJhbnNwb3J0IF0gKSB7XG5cblx0XHRcdFx0b3B0aW9ucy5kYXRhVHlwZXMudW5zaGlmdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRpbnNwZWN0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0gZWxzZSBpZiAoIHNlZWtpbmdUcmFuc3BvcnQgKSB7XG5cdFx0XHRcdHJldHVybiAhKCBzZWxlY3RlZCA9IGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdFx0cmV0dXJuIHNlbGVjdGVkO1xuXHR9XG5cblx0cmV0dXJuIGluc3BlY3QoIG9wdGlvbnMuZGF0YVR5cGVzWyAwIF0gKSB8fCAhaW5zcGVjdGVkWyBcIipcIiBdICYmIGluc3BlY3QoIFwiKlwiICk7XG59XG5cbi8vIEEgc3BlY2lhbCBleHRlbmQgZm9yIGFqYXggb3B0aW9uc1xuLy8gdGhhdCB0YWtlcyBcImZsYXRcIiBvcHRpb25zIChub3QgdG8gYmUgZGVlcCBleHRlbmRlZClcbi8vIEZpeGVzIHRyYWMtOTg4N1xuZnVuY3Rpb24gYWpheEV4dGVuZCggdGFyZ2V0LCBzcmMgKSB7XG5cdHZhciBrZXksIGRlZXAsXG5cdFx0ZmxhdE9wdGlvbnMgPSBqUXVlcnkuYWpheFNldHRpbmdzLmZsYXRPcHRpb25zIHx8IHt9O1xuXG5cdGZvciAoIGtleSBpbiBzcmMgKSB7XG5cdFx0aWYgKCBzcmNbIGtleSBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHQoIGZsYXRPcHRpb25zWyBrZXkgXSA/IHRhcmdldCA6ICggZGVlcCB8fCAoIGRlZXAgPSB7fSApICkgKVsga2V5IF0gPSBzcmNbIGtleSBdO1xuXHRcdH1cblx0fVxuXHRpZiAoIGRlZXAgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdHJ1ZSwgdGFyZ2V0LCBkZWVwICk7XG5cdH1cblxuXHRyZXR1cm4gdGFyZ2V0O1xufVxuXG4vKiBIYW5kbGVzIHJlc3BvbnNlcyB0byBhbiBhamF4IHJlcXVlc3Q6XG4gKiAtIGZpbmRzIHRoZSByaWdodCBkYXRhVHlwZSAobWVkaWF0ZXMgYmV0d2VlbiBjb250ZW50LXR5cGUgYW5kIGV4cGVjdGVkIGRhdGFUeXBlKVxuICogLSByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKSB7XG5cblx0dmFyIGN0LCB0eXBlLCBmaW5hbERhdGFUeXBlLCBmaXJzdERhdGFUeXBlLFxuXHRcdGNvbnRlbnRzID0gcy5jb250ZW50cyxcblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcztcblxuXHQvLyBSZW1vdmUgYXV0byBkYXRhVHlwZSBhbmQgZ2V0IGNvbnRlbnQtdHlwZSBpbiB0aGUgcHJvY2Vzc1xuXHR3aGlsZSAoIGRhdGFUeXBlc1sgMCBdID09PSBcIipcIiApIHtcblx0XHRkYXRhVHlwZXMuc2hpZnQoKTtcblx0XHRpZiAoIGN0ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRjdCA9IHMubWltZVR5cGUgfHwganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayBpZiB3ZSdyZSBkZWFsaW5nIHdpdGggYSBrbm93biBjb250ZW50LXR5cGVcblx0aWYgKCBjdCApIHtcblx0XHRmb3IgKCB0eXBlIGluIGNvbnRlbnRzICkge1xuXHRcdFx0aWYgKCBjb250ZW50c1sgdHlwZSBdICYmIGNvbnRlbnRzWyB0eXBlIF0udGVzdCggY3QgKSApIHtcblx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHR5cGUgKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgdG8gc2VlIGlmIHdlIGhhdmUgYSByZXNwb25zZSBmb3IgdGhlIGV4cGVjdGVkIGRhdGFUeXBlXG5cdGlmICggZGF0YVR5cGVzWyAwIF0gaW4gcmVzcG9uc2VzICkge1xuXHRcdGZpbmFsRGF0YVR5cGUgPSBkYXRhVHlwZXNbIDAgXTtcblx0fSBlbHNlIHtcblxuXHRcdC8vIFRyeSBjb252ZXJ0aWJsZSBkYXRhVHlwZXNcblx0XHRmb3IgKCB0eXBlIGluIHJlc3BvbnNlcyApIHtcblx0XHRcdGlmICggIWRhdGFUeXBlc1sgMCBdIHx8IHMuY29udmVydGVyc1sgdHlwZSArIFwiIFwiICsgZGF0YVR5cGVzWyAwIF0gXSApIHtcblx0XHRcdFx0ZmluYWxEYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAhZmlyc3REYXRhVHlwZSApIHtcblx0XHRcdFx0Zmlyc3REYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gT3IganVzdCB1c2UgZmlyc3Qgb25lXG5cdFx0ZmluYWxEYXRhVHlwZSA9IGZpbmFsRGF0YVR5cGUgfHwgZmlyc3REYXRhVHlwZTtcblx0fVxuXG5cdC8vIElmIHdlIGZvdW5kIGEgZGF0YVR5cGVcblx0Ly8gV2UgYWRkIHRoZSBkYXRhVHlwZSB0byB0aGUgbGlzdCBpZiBuZWVkZWRcblx0Ly8gYW5kIHJldHVybiB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuXHRpZiAoIGZpbmFsRGF0YVR5cGUgKSB7XG5cdFx0aWYgKCBmaW5hbERhdGFUeXBlICE9PSBkYXRhVHlwZXNbIDAgXSApIHtcblx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCBmaW5hbERhdGFUeXBlICk7XG5cdFx0fVxuXHRcdHJldHVybiByZXNwb25zZXNbIGZpbmFsRGF0YVR5cGUgXTtcblx0fVxufVxuXG4vKiBDaGFpbiBjb252ZXJzaW9ucyBnaXZlbiB0aGUgcmVxdWVzdCBhbmQgdGhlIG9yaWdpbmFsIHJlc3BvbnNlXG4gKiBBbHNvIHNldHMgdGhlIHJlc3BvbnNlWFhYIGZpZWxkcyBvbiB0aGUganFYSFIgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICkge1xuXHR2YXIgY29udjIsIGN1cnJlbnQsIGNvbnYsIHRtcCwgcHJldixcblx0XHRjb252ZXJ0ZXJzID0ge30sXG5cblx0XHQvLyBXb3JrIHdpdGggYSBjb3B5IG9mIGRhdGFUeXBlcyBpbiBjYXNlIHdlIG5lZWQgdG8gbW9kaWZ5IGl0IGZvciBjb252ZXJzaW9uXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXMuc2xpY2UoKTtcblxuXHQvLyBDcmVhdGUgY29udmVydGVycyBtYXAgd2l0aCBsb3dlcmNhc2VkIGtleXNcblx0aWYgKCBkYXRhVHlwZXNbIDEgXSApIHtcblx0XHRmb3IgKCBjb252IGluIHMuY29udmVydGVycyApIHtcblx0XHRcdGNvbnZlcnRlcnNbIGNvbnYudG9Mb3dlckNhc2UoKSBdID0gcy5jb252ZXJ0ZXJzWyBjb252IF07XG5cdFx0fVxuXHR9XG5cblx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdC8vIENvbnZlcnQgdG8gZWFjaCBzZXF1ZW50aWFsIGRhdGFUeXBlXG5cdHdoaWxlICggY3VycmVudCApIHtcblxuXHRcdGlmICggcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdICkge1xuXHRcdFx0anFYSFJbIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSBdID0gcmVzcG9uc2U7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgdGhlIGRhdGFGaWx0ZXIgaWYgcHJvdmlkZWRcblx0XHRpZiAoICFwcmV2ICYmIGlzU3VjY2VzcyAmJiBzLmRhdGFGaWx0ZXIgKSB7XG5cdFx0XHRyZXNwb25zZSA9IHMuZGF0YUZpbHRlciggcmVzcG9uc2UsIHMuZGF0YVR5cGUgKTtcblx0XHR9XG5cblx0XHRwcmV2ID0gY3VycmVudDtcblx0XHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0XHRpZiAoIGN1cnJlbnQgKSB7XG5cblx0XHRcdC8vIFRoZXJlJ3Mgb25seSB3b3JrIHRvIGRvIGlmIGN1cnJlbnQgZGF0YVR5cGUgaXMgbm9uLWF1dG9cblx0XHRcdGlmICggY3VycmVudCA9PT0gXCIqXCIgKSB7XG5cblx0XHRcdFx0Y3VycmVudCA9IHByZXY7XG5cblx0XHRcdC8vIENvbnZlcnQgcmVzcG9uc2UgaWYgcHJldiBkYXRhVHlwZSBpcyBub24tYXV0byBhbmQgZGlmZmVycyBmcm9tIGN1cnJlbnRcblx0XHRcdH0gZWxzZSBpZiAoIHByZXYgIT09IFwiKlwiICYmIHByZXYgIT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU2VlayBhIGRpcmVjdCBjb252ZXJ0ZXJcblx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIGN1cnJlbnQgXSB8fCBjb252ZXJ0ZXJzWyBcIiogXCIgKyBjdXJyZW50IF07XG5cblx0XHRcdFx0Ly8gSWYgbm9uZSBmb3VuZCwgc2VlayBhIHBhaXJcblx0XHRcdFx0aWYgKCAhY29udiApIHtcblx0XHRcdFx0XHRmb3IgKCBjb252MiBpbiBjb252ZXJ0ZXJzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJZiBjb252MiBvdXRwdXRzIGN1cnJlbnRcblx0XHRcdFx0XHRcdHRtcCA9IGNvbnYyLnNwbGl0KCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0aWYgKCB0bXBbIDEgXSA9PT0gY3VycmVudCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBJZiBwcmV2IGNhbiBiZSBjb252ZXJ0ZWQgdG8gYWNjZXB0ZWQgaW5wdXRcblx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIHRtcFsgMCBdIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRjb252ZXJ0ZXJzWyBcIiogXCIgKyB0bXBbIDAgXSBdO1xuXHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDb25kZW5zZSBlcXVpdmFsZW5jZSBjb252ZXJ0ZXJzXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjb252ID09PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIGNvbnYyIF07XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPdGhlcndpc2UsIGluc2VydCB0aGUgaW50ZXJtZWRpYXRlIGRhdGFUeXBlXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggY29udmVydGVyc1sgY29udjIgXSAhPT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGN1cnJlbnQgPSB0bXBbIDAgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0bXBbIDEgXSApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFwcGx5IGNvbnZlcnRlciAoaWYgbm90IGFuIGVxdWl2YWxlbmNlKVxuXHRcdFx0XHRpZiAoIGNvbnYgIT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHQvLyBVbmxlc3MgZXJyb3JzIGFyZSBhbGxvd2VkIHRvIGJ1YmJsZSwgY2F0Y2ggYW5kIHJldHVybiB0aGVtXG5cdFx0XHRcdFx0aWYgKCBjb252ICYmIHMudGhyb3dzICkge1xuXHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0ZTogXCJwYXJzZXJlcnJvclwiLFxuXHRcdFx0XHRcdFx0XHRcdGVycm9yOiBjb252ID8gZSA6IFwiTm8gY29udmVyc2lvbiBmcm9tIFwiICsgcHJldiArIFwiIHRvIFwiICsgY3VycmVudFxuXHRcdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB7IHN0YXRlOiBcInN1Y2Nlc3NcIiwgZGF0YTogcmVzcG9uc2UgfTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIENvdW50ZXIgZm9yIGhvbGRpbmcgdGhlIG51bWJlciBvZiBhY3RpdmUgcXVlcmllc1xuXHRhY3RpdmU6IDAsXG5cblx0Ly8gTGFzdC1Nb2RpZmllZCBoZWFkZXIgY2FjaGUgZm9yIG5leHQgcmVxdWVzdFxuXHRsYXN0TW9kaWZpZWQ6IHt9LFxuXHRldGFnOiB7fSxcblxuXHRhamF4U2V0dGluZ3M6IHtcblx0XHR1cmw6IGxvY2F0aW9uLmhyZWYsXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRpc0xvY2FsOiBybG9jYWxQcm90b2NvbC50ZXN0KCBsb2NhdGlvbi5wcm90b2NvbCApLFxuXHRcdGdsb2JhbDogdHJ1ZSxcblx0XHRwcm9jZXNzRGF0YTogdHJ1ZSxcblx0XHRhc3luYzogdHJ1ZSxcblx0XHRjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIixcblxuXHRcdC8qXG5cdFx0dGltZW91dDogMCxcblx0XHRkYXRhOiBudWxsLFxuXHRcdGRhdGFUeXBlOiBudWxsLFxuXHRcdHVzZXJuYW1lOiBudWxsLFxuXHRcdHBhc3N3b3JkOiBudWxsLFxuXHRcdGNhY2hlOiBudWxsLFxuXHRcdHRocm93czogZmFsc2UsXG5cdFx0dHJhZGl0aW9uYWw6IGZhbHNlLFxuXHRcdGhlYWRlcnM6IHt9LFxuXHRcdCovXG5cblx0XHRhY2NlcHRzOiB7XG5cdFx0XHRcIipcIjogYWxsVHlwZXMsXG5cdFx0XHR0ZXh0OiBcInRleHQvcGxhaW5cIixcblx0XHRcdGh0bWw6IFwidGV4dC9odG1sXCIsXG5cdFx0XHR4bWw6IFwiYXBwbGljYXRpb24veG1sLCB0ZXh0L3htbFwiLFxuXHRcdFx0anNvbjogXCJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHRcIlxuXHRcdH0sXG5cblx0XHRjb250ZW50czoge1xuXHRcdFx0eG1sOiAvXFxieG1sXFxiLyxcblx0XHRcdGh0bWw6IC9cXGJodG1sLyxcblx0XHRcdGpzb246IC9cXGJqc29uXFxiL1xuXHRcdH0sXG5cblx0XHRyZXNwb25zZUZpZWxkczoge1xuXHRcdFx0eG1sOiBcInJlc3BvbnNlWE1MXCIsXG5cdFx0XHR0ZXh0OiBcInJlc3BvbnNlVGV4dFwiLFxuXHRcdFx0anNvbjogXCJyZXNwb25zZUpTT05cIlxuXHRcdH0sXG5cblx0XHQvLyBEYXRhIGNvbnZlcnRlcnNcblx0XHQvLyBLZXlzIHNlcGFyYXRlIHNvdXJjZSAob3IgY2F0Y2hhbGwgXCIqXCIpIGFuZCBkZXN0aW5hdGlvbiB0eXBlcyB3aXRoIGEgc2luZ2xlIHNwYWNlXG5cdFx0Y29udmVydGVyczoge1xuXG5cdFx0XHQvLyBDb252ZXJ0IGFueXRoaW5nIHRvIHRleHRcblx0XHRcdFwiKiB0ZXh0XCI6IFN0cmluZyxcblxuXHRcdFx0Ly8gVGV4dCB0byBodG1sICh0cnVlID0gbm8gdHJhbnNmb3JtYXRpb24pXG5cdFx0XHRcInRleHQgaHRtbFwiOiB0cnVlLFxuXG5cdFx0XHQvLyBFdmFsdWF0ZSB0ZXh0IGFzIGEganNvbiBleHByZXNzaW9uXG5cdFx0XHRcInRleHQganNvblwiOiBKU09OLnBhcnNlLFxuXG5cdFx0XHQvLyBQYXJzZSB0ZXh0IGFzIHhtbFxuXHRcdFx0XCJ0ZXh0IHhtbFwiOiBqUXVlcnkucGFyc2VYTUxcblx0XHR9LFxuXG5cdFx0Ly8gRm9yIG9wdGlvbnMgdGhhdCBzaG91bGRuJ3QgYmUgZGVlcCBleHRlbmRlZDpcblx0XHQvLyB5b3UgY2FuIGFkZCB5b3VyIG93biBjdXN0b20gb3B0aW9ucyBoZXJlIGlmXG5cdFx0Ly8gYW5kIHdoZW4geW91IGNyZWF0ZSBvbmUgdGhhdCBzaG91bGRuJ3QgYmVcblx0XHQvLyBkZWVwIGV4dGVuZGVkIChzZWUgYWpheEV4dGVuZClcblx0XHRmbGF0T3B0aW9uczoge1xuXHRcdFx0dXJsOiB0cnVlLFxuXHRcdFx0Y29udGV4dDogdHJ1ZVxuXHRcdH1cblx0fSxcblxuXHQvLyBDcmVhdGVzIGEgZnVsbCBmbGVkZ2VkIHNldHRpbmdzIG9iamVjdCBpbnRvIHRhcmdldFxuXHQvLyB3aXRoIGJvdGggYWpheFNldHRpbmdzIGFuZCBzZXR0aW5ncyBmaWVsZHMuXG5cdC8vIElmIHRhcmdldCBpcyBvbWl0dGVkLCB3cml0ZXMgaW50byBhamF4U2V0dGluZ3MuXG5cdGFqYXhTZXR1cDogZnVuY3Rpb24oIHRhcmdldCwgc2V0dGluZ3MgKSB7XG5cdFx0cmV0dXJuIHNldHRpbmdzID9cblxuXHRcdFx0Ly8gQnVpbGRpbmcgYSBzZXR0aW5ncyBvYmplY3Rcblx0XHRcdGFqYXhFeHRlbmQoIGFqYXhFeHRlbmQoIHRhcmdldCwgalF1ZXJ5LmFqYXhTZXR0aW5ncyApLCBzZXR0aW5ncyApIDpcblxuXHRcdFx0Ly8gRXh0ZW5kaW5nIGFqYXhTZXR0aW5nc1xuXHRcdFx0YWpheEV4dGVuZCggalF1ZXJ5LmFqYXhTZXR0aW5ncywgdGFyZ2V0ICk7XG5cdH0sXG5cblx0YWpheFByZWZpbHRlcjogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzICksXG5cdGFqYXhUcmFuc3BvcnQ6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cyApLFxuXG5cdC8vIE1haW4gbWV0aG9kXG5cdGFqYXg6IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBJZiB1cmwgaXMgYW4gb2JqZWN0LCBzaW11bGF0ZSBwcmUtMS41IHNpZ25hdHVyZVxuXHRcdGlmICggdHlwZW9mIHVybCA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdG9wdGlvbnMgPSB1cmw7XG5cdFx0XHR1cmwgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gRm9yY2Ugb3B0aW9ucyB0byBiZSBhbiBvYmplY3Rcblx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRcdHZhciB0cmFuc3BvcnQsXG5cblx0XHRcdC8vIFVSTCB3aXRob3V0IGFudGktY2FjaGUgcGFyYW1cblx0XHRcdGNhY2hlVVJMLFxuXG5cdFx0XHQvLyBSZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcsXG5cdFx0XHRyZXNwb25zZUhlYWRlcnMsXG5cblx0XHRcdC8vIHRpbWVvdXQgaGFuZGxlXG5cdFx0XHR0aW1lb3V0VGltZXIsXG5cblx0XHRcdC8vIFVybCBjbGVhbnVwIHZhclxuXHRcdFx0dXJsQW5jaG9yLFxuXG5cdFx0XHQvLyBSZXF1ZXN0IHN0YXRlIChiZWNvbWVzIGZhbHNlIHVwb24gc2VuZCBhbmQgdHJ1ZSB1cG9uIGNvbXBsZXRpb24pXG5cdFx0XHRjb21wbGV0ZWQsXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgZ2xvYmFsIGV2ZW50cyBhcmUgdG8gYmUgZGlzcGF0Y2hlZFxuXHRcdFx0ZmlyZUdsb2JhbHMsXG5cblx0XHRcdC8vIExvb3AgdmFyaWFibGVcblx0XHRcdGksXG5cblx0XHRcdC8vIHVuY2FjaGVkIHBhcnQgb2YgdGhlIHVybFxuXHRcdFx0dW5jYWNoZWQsXG5cblx0XHRcdC8vIENyZWF0ZSB0aGUgZmluYWwgb3B0aW9ucyBvYmplY3Rcblx0XHRcdHMgPSBqUXVlcnkuYWpheFNldHVwKCB7fSwgb3B0aW9ucyApLFxuXG5cdFx0XHQvLyBDYWxsYmFja3MgY29udGV4dFxuXHRcdFx0Y2FsbGJhY2tDb250ZXh0ID0gcy5jb250ZXh0IHx8IHMsXG5cblx0XHRcdC8vIENvbnRleHQgZm9yIGdsb2JhbCBldmVudHMgaXMgY2FsbGJhY2tDb250ZXh0IGlmIGl0IGlzIGEgRE9NIG5vZGUgb3IgalF1ZXJ5IGNvbGxlY3Rpb25cblx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dCA9IHMuY29udGV4dCAmJlxuXHRcdFx0XHQoIGNhbGxiYWNrQ29udGV4dC5ub2RlVHlwZSB8fCBjYWxsYmFja0NvbnRleHQuanF1ZXJ5ICkgP1xuXHRcdFx0XHRqUXVlcnkoIGNhbGxiYWNrQ29udGV4dCApIDpcblx0XHRcdFx0alF1ZXJ5LmV2ZW50LFxuXG5cdFx0XHQvLyBEZWZlcnJlZHNcblx0XHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkID0galF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRzdGF0dXNDb2RlID0gcy5zdGF0dXNDb2RlIHx8IHt9LFxuXG5cdFx0XHQvLyBIZWFkZXJzICh0aGV5IGFyZSBzZW50IGFsbCBhdCBvbmNlKVxuXHRcdFx0cmVxdWVzdEhlYWRlcnMgPSB7fSxcblx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXMgPSB7fSxcblxuXHRcdFx0Ly8gRGVmYXVsdCBhYm9ydCBtZXNzYWdlXG5cdFx0XHRzdHJBYm9ydCA9IFwiY2FuY2VsZWRcIixcblxuXHRcdFx0Ly8gRmFrZSB4aHJcblx0XHRcdGpxWEhSID0ge1xuXHRcdFx0XHRyZWFkeVN0YXRlOiAwLFxuXG5cdFx0XHRcdC8vIEJ1aWxkcyBoZWFkZXJzIGhhc2h0YWJsZSBpZiBuZWVkZWRcblx0XHRcdFx0Z2V0UmVzcG9uc2VIZWFkZXI6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0XHRcdFx0dmFyIG1hdGNoO1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAhcmVzcG9uc2VIZWFkZXJzICkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnMgPSB7fTtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoID0gcmhlYWRlcnMuZXhlYyggcmVzcG9uc2VIZWFkZXJzU3RyaW5nICkgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnNbIG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKSArIFwiIFwiIF0gPVxuXHRcdFx0XHRcdFx0XHRcdFx0KCByZXNwb25zZUhlYWRlcnNbIG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKSArIFwiIFwiIF0gfHwgW10gKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuY29uY2F0KCBtYXRjaFsgMiBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG1hdGNoID0gcmVzcG9uc2VIZWFkZXJzWyBrZXkudG9Mb3dlckNhc2UoKSArIFwiIFwiIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBtYXRjaCA9PSBudWxsID8gbnVsbCA6IG1hdGNoLmpvaW4oIFwiLCBcIiApO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFJhdyBzdHJpbmdcblx0XHRcdFx0Z2V0QWxsUmVzcG9uc2VIZWFkZXJzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gY29tcGxldGVkID8gcmVzcG9uc2VIZWFkZXJzU3RyaW5nIDogbnVsbDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYWNoZXMgdGhlIGhlYWRlclxuXHRcdFx0XHRzZXRSZXF1ZXN0SGVhZGVyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdG5hbWUgPSByZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSA9XG5cdFx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8IG5hbWU7XG5cdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlcyByZXNwb25zZSBjb250ZW50LXR5cGUgaGVhZGVyXG5cdFx0XHRcdG92ZXJyaWRlTWltZVR5cGU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRzLm1pbWVUeXBlID0gdHlwZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdFx0c3RhdHVzQ29kZTogZnVuY3Rpb24oIG1hcCApIHtcblx0XHRcdFx0XHR2YXIgY29kZTtcblx0XHRcdFx0XHRpZiAoIG1hcCApIHtcblx0XHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEV4ZWN1dGUgdGhlIGFwcHJvcHJpYXRlIGNhbGxiYWNrc1xuXHRcdFx0XHRcdFx0XHRqcVhIUi5hbHdheXMoIG1hcFsganFYSFIuc3RhdHVzIF0gKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTGF6eS1hZGQgdGhlIG5ldyBjYWxsYmFja3MgaW4gYSB3YXkgdGhhdCBwcmVzZXJ2ZXMgb2xkIG9uZXNcblx0XHRcdFx0XHRcdFx0Zm9yICggY29kZSBpbiBtYXAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdHVzQ29kZVsgY29kZSBdID0gWyBzdGF0dXNDb2RlWyBjb2RlIF0sIG1hcFsgY29kZSBdIF07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FuY2VsIHRoZSByZXF1ZXN0XG5cdFx0XHRcdGFib3J0OiBmdW5jdGlvbiggc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHR2YXIgZmluYWxUZXh0ID0gc3RhdHVzVGV4dCB8fCBzdHJBYm9ydDtcblx0XHRcdFx0XHRpZiAoIHRyYW5zcG9ydCApIHtcblx0XHRcdFx0XHRcdHRyYW5zcG9ydC5hYm9ydCggZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRvbmUoIDAsIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0Ly8gQXR0YWNoIGRlZmVycmVkc1xuXHRcdGRlZmVycmVkLnByb21pc2UoIGpxWEhSICk7XG5cblx0XHQvLyBBZGQgcHJvdG9jb2wgaWYgbm90IHByb3ZpZGVkIChwcmVmaWx0ZXJzIG1pZ2h0IGV4cGVjdCBpdClcblx0XHQvLyBIYW5kbGUgZmFsc3kgdXJsIGluIHRoZSBzZXR0aW5ncyBvYmplY3QgKHRyYWMtMTAwOTM6IGNvbnNpc3RlbmN5IHdpdGggb2xkIHNpZ25hdHVyZSlcblx0XHQvLyBXZSBhbHNvIHVzZSB0aGUgdXJsIHBhcmFtZXRlciBpZiBhdmFpbGFibGVcblx0XHRzLnVybCA9ICggKCB1cmwgfHwgcy51cmwgfHwgbG9jYXRpb24uaHJlZiApICsgXCJcIiApXG5cdFx0XHQucmVwbGFjZSggcnByb3RvY29sLCBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiApO1xuXG5cdFx0Ly8gQWxpYXMgbWV0aG9kIG9wdGlvbiB0byB0eXBlIGFzIHBlciB0aWNrZXQgdHJhYy0xMjAwNFxuXHRcdHMudHlwZSA9IG9wdGlvbnMubWV0aG9kIHx8IG9wdGlvbnMudHlwZSB8fCBzLm1ldGhvZCB8fCBzLnR5cGU7XG5cblx0XHQvLyBFeHRyYWN0IGRhdGFUeXBlcyBsaXN0XG5cdFx0cy5kYXRhVHlwZXMgPSAoIHMuZGF0YVR5cGUgfHwgXCIqXCIgKS50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cblx0XHQvLyBBIGNyb3NzLWRvbWFpbiByZXF1ZXN0IGlzIGluIG9yZGVyIHdoZW4gdGhlIG9yaWdpbiBkb2Vzbid0IG1hdGNoIHRoZSBjdXJyZW50IG9yaWdpbi5cblx0XHRpZiAoIHMuY3Jvc3NEb21haW4gPT0gbnVsbCApIHtcblx0XHRcdHVybEFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExLCBFZGdlIDEyIC0gMTVcblx0XHRcdC8vIElFIHRocm93cyBleGNlcHRpb24gb24gYWNjZXNzaW5nIHRoZSBocmVmIHByb3BlcnR5IGlmIHVybCBpcyBtYWxmb3JtZWQsXG5cdFx0XHQvLyBlLmcuIGh0dHA6Ly9leGFtcGxlLmNvbTo4MHgvXG5cdFx0XHR0cnkge1xuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHMudXJsO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExIG9ubHlcblx0XHRcdFx0Ly8gQW5jaG9yJ3MgaG9zdCBwcm9wZXJ0eSBpc24ndCBjb3JyZWN0bHkgc2V0IHdoZW4gcy51cmwgaXMgcmVsYXRpdmVcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSB1cmxBbmNob3IuaHJlZjtcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IG9yaWdpbkFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIG9yaWdpbkFuY2hvci5ob3N0ICE9PVxuXHRcdFx0XHRcdHVybEFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIHVybEFuY2hvci5ob3N0O1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgYW4gZXJyb3IgcGFyc2luZyB0aGUgVVJMLCBhc3N1bWUgaXQgaXMgY3Jvc3NEb21haW4sXG5cdFx0XHRcdC8vIGl0IGNhbiBiZSByZWplY3RlZCBieSB0aGUgdHJhbnNwb3J0IGlmIGl0IGlzIGludmFsaWRcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBkYXRhIGlmIG5vdCBhbHJlYWR5IGEgc3RyaW5nXG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJiB0eXBlb2Ygcy5kYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cy5kYXRhID0galF1ZXJ5LnBhcmFtKCBzLmRhdGEsIHMudHJhZGl0aW9uYWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwcmVmaWx0ZXJzXG5cdFx0aW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhIHByZWZpbHRlciwgc3RvcCB0aGVyZVxuXHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdH1cblxuXHRcdC8vIFdlIGNhbiBmaXJlIGdsb2JhbCBldmVudHMgYXMgb2Ygbm93IGlmIGFza2VkIHRvXG5cdFx0Ly8gRG9uJ3QgZmlyZSBldmVudHMgaWYgalF1ZXJ5LmV2ZW50IGlzIHVuZGVmaW5lZCBpbiBhbiBBTUQtdXNhZ2Ugc2NlbmFyaW8gKHRyYWMtMTUxMTgpXG5cdFx0ZmlyZUdsb2JhbHMgPSBqUXVlcnkuZXZlbnQgJiYgcy5nbG9iYWw7XG5cblx0XHQvLyBXYXRjaCBmb3IgYSBuZXcgc2V0IG9mIHJlcXVlc3RzXG5cdFx0aWYgKCBmaXJlR2xvYmFscyAmJiBqUXVlcnkuYWN0aXZlKysgPT09IDAgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RhcnRcIiApO1xuXHRcdH1cblxuXHRcdC8vIFVwcGVyY2FzZSB0aGUgdHlwZVxuXHRcdHMudHlwZSA9IHMudHlwZS50b1VwcGVyQ2FzZSgpO1xuXG5cdFx0Ly8gRGV0ZXJtaW5lIGlmIHJlcXVlc3QgaGFzIGNvbnRlbnRcblx0XHRzLmhhc0NvbnRlbnQgPSAhcm5vQ29udGVudC50ZXN0KCBzLnR5cGUgKTtcblxuXHRcdC8vIFNhdmUgdGhlIFVSTCBpbiBjYXNlIHdlJ3JlIHRveWluZyB3aXRoIHRoZSBJZi1Nb2RpZmllZC1TaW5jZVxuXHRcdC8vIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciBsYXRlciBvblxuXHRcdC8vIFJlbW92ZSBoYXNoIHRvIHNpbXBsaWZ5IHVybCBtYW5pcHVsYXRpb25cblx0XHRjYWNoZVVSTCA9IHMudXJsLnJlcGxhY2UoIHJoYXNoLCBcIlwiICk7XG5cblx0XHQvLyBNb3JlIG9wdGlvbnMgaGFuZGxpbmcgZm9yIHJlcXVlc3RzIHdpdGggbm8gY29udGVudFxuXHRcdGlmICggIXMuaGFzQ29udGVudCApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIGhhc2ggc28gd2UgY2FuIHB1dCBpdCBiYWNrXG5cdFx0XHR1bmNhY2hlZCA9IHMudXJsLnNsaWNlKCBjYWNoZVVSTC5sZW5ndGggKTtcblxuXHRcdFx0Ly8gSWYgZGF0YSBpcyBhdmFpbGFibGUgYW5kIHNob3VsZCBiZSBwcm9jZXNzZWQsIGFwcGVuZCBkYXRhIHRvIHVybFxuXHRcdFx0aWYgKCBzLmRhdGEgJiYgKCBzLnByb2Nlc3NEYXRhIHx8IHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgKSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgKz0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuZGF0YTtcblxuXHRcdFx0XHQvLyB0cmFjLTk2ODI6IHJlbW92ZSBkYXRhIHNvIHRoYXQgaXQncyBub3QgdXNlZCBpbiBhbiBldmVudHVhbCByZXRyeVxuXHRcdFx0XHRkZWxldGUgcy5kYXRhO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgb3IgdXBkYXRlIGFudGktY2FjaGUgcGFyYW0gaWYgbmVlZGVkXG5cdFx0XHRpZiAoIHMuY2FjaGUgPT09IGZhbHNlICkge1xuXHRcdFx0XHRjYWNoZVVSTCA9IGNhY2hlVVJMLnJlcGxhY2UoIHJhbnRpQ2FjaGUsIFwiJDFcIiApO1xuXHRcdFx0XHR1bmNhY2hlZCA9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBcIl89XCIgKyAoIG5vbmNlLmd1aWQrKyApICtcblx0XHRcdFx0XHR1bmNhY2hlZDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUHV0IGhhc2ggYW5kIGFudGktY2FjaGUgb24gdGhlIFVSTCB0aGF0IHdpbGwgYmUgcmVxdWVzdGVkIChnaC0xNzMyKVxuXHRcdFx0cy51cmwgPSBjYWNoZVVSTCArIHVuY2FjaGVkO1xuXG5cdFx0Ly8gQ2hhbmdlICclMjAnIHRvICcrJyBpZiB0aGlzIGlzIGVuY29kZWQgZm9ybSBib2R5IGNvbnRlbnQgKGdoLTI2NTgpXG5cdFx0fSBlbHNlIGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiZcblx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiICkuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICkge1xuXHRcdFx0cy5kYXRhID0gcy5kYXRhLnJlcGxhY2UoIHIyMCwgXCIrXCIgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0aWYgKCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU1vZGlmaWVkLVNpbmNlXCIsIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHRcdGlmICggalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTm9uZS1NYXRjaFwiLCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgY29ycmVjdCBoZWFkZXIsIGlmIGRhdGEgaXMgYmVpbmcgc2VudFxuXHRcdGlmICggcy5kYXRhICYmIHMuaGFzQ29udGVudCAmJiBzLmNvbnRlbnRUeXBlICE9PSBmYWxzZSB8fCBvcHRpb25zLmNvbnRlbnRUeXBlICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJDb250ZW50LVR5cGVcIiwgcy5jb250ZW50VHlwZSApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgQWNjZXB0cyBoZWFkZXIgZm9yIHRoZSBzZXJ2ZXIsIGRlcGVuZGluZyBvbiB0aGUgZGF0YVR5cGVcblx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKFxuXHRcdFx0XCJBY2NlcHRcIixcblx0XHRcdHMuZGF0YVR5cGVzWyAwIF0gJiYgcy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gP1xuXHRcdFx0XHRzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSArXG5cdFx0XHRcdFx0KCBzLmRhdGFUeXBlc1sgMCBdICE9PSBcIipcIiA/IFwiLCBcIiArIGFsbFR5cGVzICsgXCI7IHE9MC4wMVwiIDogXCJcIiApIDpcblx0XHRcdFx0cy5hY2NlcHRzWyBcIipcIiBdXG5cdFx0KTtcblxuXHRcdC8vIENoZWNrIGZvciBoZWFkZXJzIG9wdGlvblxuXHRcdGZvciAoIGkgaW4gcy5oZWFkZXJzICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggaSwgcy5oZWFkZXJzWyBpIF0gKTtcblx0XHR9XG5cblx0XHQvLyBBbGxvdyBjdXN0b20gaGVhZGVycy9taW1ldHlwZXMgYW5kIGVhcmx5IGFib3J0XG5cdFx0aWYgKCBzLmJlZm9yZVNlbmQgJiZcblx0XHRcdCggcy5iZWZvcmVTZW5kLmNhbGwoIGNhbGxiYWNrQ29udGV4dCwganFYSFIsIHMgKSA9PT0gZmFsc2UgfHwgY29tcGxldGVkICkgKSB7XG5cblx0XHRcdC8vIEFib3J0IGlmIG5vdCBkb25lIGFscmVhZHkgYW5kIHJldHVyblxuXHRcdFx0cmV0dXJuIGpxWEhSLmFib3J0KCk7XG5cdFx0fVxuXG5cdFx0Ly8gQWJvcnRpbmcgaXMgbm8gbG9uZ2VyIGEgY2FuY2VsbGF0aW9uXG5cdFx0c3RyQWJvcnQgPSBcImFib3J0XCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrcyBvbiBkZWZlcnJlZHNcblx0XHRjb21wbGV0ZURlZmVycmVkLmFkZCggcy5jb21wbGV0ZSApO1xuXHRcdGpxWEhSLmRvbmUoIHMuc3VjY2VzcyApO1xuXHRcdGpxWEhSLmZhaWwoIHMuZXJyb3IgKTtcblxuXHRcdC8vIEdldCB0cmFuc3BvcnRcblx0XHR0cmFuc3BvcnQgPSBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIG5vIHRyYW5zcG9ydCwgd2UgYXV0by1hYm9ydFxuXHRcdGlmICggIXRyYW5zcG9ydCApIHtcblx0XHRcdGRvbmUoIC0xLCBcIk5vIFRyYW5zcG9ydFwiICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSAxO1xuXG5cdFx0XHQvLyBTZW5kIGdsb2JhbCBldmVudFxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheFNlbmRcIiwgWyBqcVhIUiwgcyBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGFqYXhTZW5kLCBzdG9wIHRoZXJlXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaW1lb3V0XG5cdFx0XHRpZiAoIHMuYXN5bmMgJiYgcy50aW1lb3V0ID4gMCApIHtcblx0XHRcdFx0dGltZW91dFRpbWVyID0gd2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGpxWEhSLmFib3J0KCBcInRpbWVvdXRcIiApO1xuXHRcdFx0XHR9LCBzLnRpbWVvdXQgKTtcblx0XHRcdH1cblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Y29tcGxldGVkID0gZmFsc2U7XG5cdFx0XHRcdHRyYW5zcG9ydC5zZW5kKCByZXF1ZXN0SGVhZGVycywgZG9uZSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gUmV0aHJvdyBwb3N0LWNvbXBsZXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUHJvcGFnYXRlIG90aGVycyBhcyByZXN1bHRzXG5cdFx0XHRcdGRvbmUoIC0xLCBlICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGJhY2sgZm9yIHdoZW4gZXZlcnl0aGluZyBpcyBkb25lXG5cdFx0ZnVuY3Rpb24gZG9uZSggc3RhdHVzLCBuYXRpdmVTdGF0dXNUZXh0LCByZXNwb25zZXMsIGhlYWRlcnMgKSB7XG5cdFx0XHR2YXIgaXNTdWNjZXNzLCBzdWNjZXNzLCBlcnJvciwgcmVzcG9uc2UsIG1vZGlmaWVkLFxuXHRcdFx0XHRzdGF0dXNUZXh0ID0gbmF0aXZlU3RhdHVzVGV4dDtcblxuXHRcdFx0Ly8gSWdub3JlIHJlcGVhdCBpbnZvY2F0aW9uc1xuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Y29tcGxldGVkID0gdHJ1ZTtcblxuXHRcdFx0Ly8gQ2xlYXIgdGltZW91dCBpZiBpdCBleGlzdHNcblx0XHRcdGlmICggdGltZW91dFRpbWVyICkge1xuXHRcdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0VGltZXIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRGVyZWZlcmVuY2UgdHJhbnNwb3J0IGZvciBlYXJseSBnYXJiYWdlIGNvbGxlY3Rpb25cblx0XHRcdC8vIChubyBtYXR0ZXIgaG93IGxvbmcgdGhlIGpxWEhSIG9iamVjdCB3aWxsIGJlIHVzZWQpXG5cdFx0XHR0cmFuc3BvcnQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdC8vIENhY2hlIHJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyA9IGhlYWRlcnMgfHwgXCJcIjtcblxuXHRcdFx0Ly8gU2V0IHJlYWR5U3RhdGVcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSBzdGF0dXMgPiAwID8gNCA6IDA7XG5cblx0XHRcdC8vIERldGVybWluZSBpZiBzdWNjZXNzZnVsXG5cdFx0XHRpc1N1Y2Nlc3MgPSBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMCB8fCBzdGF0dXMgPT09IDMwNDtcblxuXHRcdFx0Ly8gR2V0IHJlc3BvbnNlIGRhdGFcblx0XHRcdGlmICggcmVzcG9uc2VzICkge1xuXHRcdFx0XHRyZXNwb25zZSA9IGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVXNlIGEgbm9vcCBjb252ZXJ0ZXIgZm9yIG1pc3Npbmcgc2NyaXB0IGJ1dCBub3QgaWYganNvbnBcblx0XHRcdGlmICggIWlzU3VjY2VzcyAmJlxuXHRcdFx0XHRqUXVlcnkuaW5BcnJheSggXCJzY3JpcHRcIiwgcy5kYXRhVHlwZXMgKSA+IC0xICYmXG5cdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBcImpzb25cIiwgcy5kYXRhVHlwZXMgKSA8IDAgKSB7XG5cdFx0XHRcdHMuY29udmVydGVyc1sgXCJ0ZXh0IHNjcmlwdFwiIF0gPSBmdW5jdGlvbigpIHt9O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IG5vIG1hdHRlciB3aGF0ICh0aGF0IHdheSByZXNwb25zZVhYWCBmaWVsZHMgYXJlIGFsd2F5cyBzZXQpXG5cdFx0XHRyZXNwb25zZSA9IGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApO1xuXG5cdFx0XHQvLyBJZiBzdWNjZXNzZnVsLCBoYW5kbGUgdHlwZSBjaGFpbmluZ1xuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cblx0XHRcdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRcdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJMYXN0LU1vZGlmaWVkXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcImV0YWdcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGlmIG5vIGNvbnRlbnRcblx0XHRcdFx0aWYgKCBzdGF0dXMgPT09IDIwNCB8fCBzLnR5cGUgPT09IFwiSEVBRFwiICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vY29udGVudFwiO1xuXG5cdFx0XHRcdC8vIGlmIG5vdCBtb2RpZmllZFxuXHRcdFx0XHR9IGVsc2UgaWYgKCBzdGF0dXMgPT09IDMwNCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub3Rtb2RpZmllZFwiO1xuXG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgZGF0YSwgbGV0J3MgY29udmVydCBpdFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSByZXNwb25zZS5zdGF0ZTtcblx0XHRcdFx0XHRzdWNjZXNzID0gcmVzcG9uc2UuZGF0YTtcblx0XHRcdFx0XHRlcnJvciA9IHJlc3BvbnNlLmVycm9yO1xuXHRcdFx0XHRcdGlzU3VjY2VzcyA9ICFlcnJvcjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBFeHRyYWN0IGVycm9yIGZyb20gc3RhdHVzVGV4dCBhbmQgbm9ybWFsaXplIGZvciBub24tYWJvcnRzXG5cdFx0XHRcdGVycm9yID0gc3RhdHVzVGV4dDtcblx0XHRcdFx0aWYgKCBzdGF0dXMgfHwgIXN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwiZXJyb3JcIjtcblx0XHRcdFx0XHRpZiAoIHN0YXR1cyA8IDAgKSB7XG5cdFx0XHRcdFx0XHRzdGF0dXMgPSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgZGF0YSBmb3IgdGhlIGZha2UgeGhyIG9iamVjdFxuXHRcdFx0anFYSFIuc3RhdHVzID0gc3RhdHVzO1xuXHRcdFx0anFYSFIuc3RhdHVzVGV4dCA9ICggbmF0aXZlU3RhdHVzVGV4dCB8fCBzdGF0dXNUZXh0ICkgKyBcIlwiO1xuXG5cdFx0XHQvLyBTdWNjZXNzL0Vycm9yXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBzdWNjZXNzLCBzdGF0dXNUZXh0LCBqcVhIUiBdICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQsIGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdGpxWEhSLnN0YXR1c0NvZGUoIHN0YXR1c0NvZGUgKTtcblx0XHRcdHN0YXR1c0NvZGUgPSB1bmRlZmluZWQ7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBpc1N1Y2Nlc3MgPyBcImFqYXhTdWNjZXNzXCIgOiBcImFqYXhFcnJvclwiLFxuXHRcdFx0XHRcdFsganFYSFIsIHMsIGlzU3VjY2VzcyA/IHN1Y2Nlc3MgOiBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbXBsZXRlXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkLmZpcmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQgXSApO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4Q29tcGxldGVcIiwgWyBqcVhIUiwgcyBdICk7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIHRoZSBnbG9iYWwgQUpBWCBjb3VudGVyXG5cdFx0XHRcdGlmICggISggLS1qUXVlcnkuYWN0aXZlICkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0b3BcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpxWEhSO1xuXHR9LFxuXG5cdGdldEpTT046IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIGRhdGEsIGNhbGxiYWNrLCBcImpzb25cIiApO1xuXHR9LFxuXG5cdGdldFNjcmlwdDogZnVuY3Rpb24oIHVybCwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgdW5kZWZpbmVkLCBjYWxsYmFjaywgXCJzY3JpcHRcIiApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiZ2V0XCIsIFwicG9zdFwiIF0sIGZ1bmN0aW9uKCBfaSwgbWV0aG9kICkge1xuXHRqUXVlcnlbIG1ldGhvZCBdID0gZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2ssIHR5cGUgKSB7XG5cblx0XHQvLyBTaGlmdCBhcmd1bWVudHMgaWYgZGF0YSBhcmd1bWVudCB3YXMgb21pdHRlZFxuXHRcdGlmICggaXNGdW5jdGlvbiggZGF0YSApICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgY2FsbGJhY2s7XG5cdFx0XHRjYWxsYmFjayA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIFRoZSB1cmwgY2FuIGJlIGFuIG9wdGlvbnMgb2JqZWN0ICh3aGljaCB0aGVuIG11c3QgaGF2ZSAudXJsKVxuXHRcdHJldHVybiBqUXVlcnkuYWpheCggalF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cdFx0XHR0eXBlOiBtZXRob2QsXG5cdFx0XHRkYXRhVHlwZTogdHlwZSxcblx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRzdWNjZXNzOiBjYWxsYmFja1xuXHRcdH0sIGpRdWVyeS5pc1BsYWluT2JqZWN0KCB1cmwgKSAmJiB1cmwgKSApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkuYWpheFByZWZpbHRlciggZnVuY3Rpb24oIHMgKSB7XG5cdHZhciBpO1xuXHRmb3IgKCBpIGluIHMuaGVhZGVycyApIHtcblx0XHRpZiAoIGkudG9Mb3dlckNhc2UoKSA9PT0gXCJjb250ZW50LXR5cGVcIiApIHtcblx0XHRcdHMuY29udGVudFR5cGUgPSBzLmhlYWRlcnNbIGkgXSB8fCBcIlwiO1xuXHRcdH1cblx0fVxufSApO1xuXG5cbmpRdWVyeS5fZXZhbFVybCA9IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMsIGRvYyApIHtcblx0cmV0dXJuIGpRdWVyeS5hamF4KCB7XG5cdFx0dXJsOiB1cmwsXG5cblx0XHQvLyBNYWtlIHRoaXMgZXhwbGljaXQsIHNpbmNlIHVzZXIgY2FuIG92ZXJyaWRlIHRoaXMgdGhyb3VnaCBhamF4U2V0dXAgKHRyYWMtMTEyNjQpXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRkYXRhVHlwZTogXCJzY3JpcHRcIixcblx0XHRjYWNoZTogdHJ1ZSxcblx0XHRhc3luYzogZmFsc2UsXG5cdFx0Z2xvYmFsOiBmYWxzZSxcblxuXHRcdC8vIE9ubHkgZXZhbHVhdGUgdGhlIHJlc3BvbnNlIGlmIGl0IGlzIHN1Y2Nlc3NmdWwgKGdoLTQxMjYpXG5cdFx0Ly8gZGF0YUZpbHRlciBpcyBub3QgaW52b2tlZCBmb3IgZmFpbHVyZSByZXNwb25zZXMsIHNvIHVzaW5nIGl0IGluc3RlYWRcblx0XHQvLyBvZiB0aGUgZGVmYXVsdCBjb252ZXJ0ZXIgaXMga2x1ZGd5IGJ1dCBpdCB3b3Jrcy5cblx0XHRjb252ZXJ0ZXJzOiB7XG5cdFx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCkge31cblx0XHR9LFxuXHRcdGRhdGFGaWx0ZXI6IGZ1bmN0aW9uKCByZXNwb25zZSApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCByZXNwb25zZSwgb3B0aW9ucywgZG9jICk7XG5cdFx0fVxuXHR9ICk7XG59O1xuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0d3JhcEFsbDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIHdyYXA7XG5cblx0XHRpZiAoIHRoaXNbIDAgXSApIHtcblx0XHRcdGlmICggaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0XHRodG1sID0gaHRtbC5jYWxsKCB0aGlzWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGhlIGVsZW1lbnRzIHRvIHdyYXAgdGhlIHRhcmdldCBhcm91bmRcblx0XHRcdHdyYXAgPSBqUXVlcnkoIGh0bWwsIHRoaXNbIDAgXS5vd25lckRvY3VtZW50ICkuZXEoIDAgKS5jbG9uZSggdHJ1ZSApO1xuXG5cdFx0XHRpZiAoIHRoaXNbIDAgXS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR3cmFwLmluc2VydEJlZm9yZSggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHdyYXAubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGVsZW0gPSB0aGlzO1xuXG5cdFx0XHRcdHdoaWxlICggZWxlbS5maXJzdEVsZW1lbnRDaGlsZCApIHtcblx0XHRcdFx0XHRlbGVtID0gZWxlbS5maXJzdEVsZW1lbnRDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBlbGVtO1xuXHRcdFx0fSApLmFwcGVuZCggdGhpcyApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHdyYXBJbm5lcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcElubmVyKCBodG1sLmNhbGwoIHRoaXMsIGkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHNlbGYgPSBqUXVlcnkoIHRoaXMgKSxcblx0XHRcdFx0Y29udGVudHMgPSBzZWxmLmNvbnRlbnRzKCk7XG5cblx0XHRcdGlmICggY29udGVudHMubGVuZ3RoICkge1xuXHRcdFx0XHRjb250ZW50cy53cmFwQWxsKCBodG1sICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNlbGYuYXBwZW5kKCBodG1sICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHdyYXA6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciBodG1sSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIGh0bWwgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcEFsbCggaHRtbElzRnVuY3Rpb24gPyBodG1sLmNhbGwoIHRoaXMsIGkgKSA6IGh0bWwgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0dW53cmFwOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dGhpcy5wYXJlbnQoIHNlbGVjdG9yICkubm90KCBcImJvZHlcIiApLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkucmVwbGFjZVdpdGgoIHRoaXMuY2hpbGROb2RlcyApO1xuXHRcdH0gKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuaGlkZGVuID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhalF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlKCBlbGVtICk7XG59O1xualF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhISggZWxlbS5vZmZzZXRXaWR0aCB8fCBlbGVtLm9mZnNldEhlaWdodCB8fCBlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICk7XG59O1xuXG5cblxuXG5qUXVlcnkuYWpheFNldHRpbmdzLnhociA9IGZ1bmN0aW9uKCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBuZXcgd2luZG93LlhNTEh0dHBSZXF1ZXN0KCk7XG5cdH0gY2F0Y2ggKCBlICkge31cbn07XG5cbnZhciB4aHJTdWNjZXNzU3RhdHVzID0ge1xuXG5cdFx0Ly8gRmlsZSBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyBjb2RlIDAsIGFzc3VtZSAyMDBcblx0XHQwOiAyMDAsXG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdC8vIHRyYWMtMTQ1MDogc29tZXRpbWVzIElFIHJldHVybnMgMTIyMyB3aGVuIGl0IHNob3VsZCBiZSAyMDRcblx0XHQxMjIzOiAyMDRcblx0fSxcblx0eGhyU3VwcG9ydGVkID0galF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIoKTtcblxuc3VwcG9ydC5jb3JzID0gISF4aHJTdXBwb3J0ZWQgJiYgKCBcIndpdGhDcmVkZW50aWFsc1wiIGluIHhoclN1cHBvcnRlZCApO1xuc3VwcG9ydC5hamF4ID0geGhyU3VwcG9ydGVkID0gISF4aHJTdXBwb3J0ZWQ7XG5cbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0dmFyIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrO1xuXG5cdC8vIENyb3NzIGRvbWFpbiBvbmx5IGFsbG93ZWQgaWYgc3VwcG9ydGVkIHRocm91Z2ggWE1MSHR0cFJlcXVlc3Rcblx0aWYgKCBzdXBwb3J0LmNvcnMgfHwgeGhyU3VwcG9ydGVkICYmICFvcHRpb25zLmNyb3NzRG9tYWluICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggaGVhZGVycywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHZhciBpLFxuXHRcdFx0XHRcdHhociA9IG9wdGlvbnMueGhyKCk7XG5cblx0XHRcdFx0eGhyLm9wZW4oXG5cdFx0XHRcdFx0b3B0aW9ucy50eXBlLFxuXHRcdFx0XHRcdG9wdGlvbnMudXJsLFxuXHRcdFx0XHRcdG9wdGlvbnMuYXN5bmMsXG5cdFx0XHRcdFx0b3B0aW9ucy51c2VybmFtZSxcblx0XHRcdFx0XHRvcHRpb25zLnBhc3N3b3JkXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ly8gQXBwbHkgY3VzdG9tIGZpZWxkcyBpZiBwcm92aWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdGZvciAoIGkgaW4gb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0XHR4aHJbIGkgXSA9IG9wdGlvbnMueGhyRmllbGRzWyBpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGUgbWltZSB0eXBlIGlmIG5lZWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMubWltZVR5cGUgJiYgeGhyLm92ZXJyaWRlTWltZVR5cGUgKSB7XG5cdFx0XHRcdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoIG9wdGlvbnMubWltZVR5cGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFgtUmVxdWVzdGVkLVdpdGggaGVhZGVyXG5cdFx0XHRcdC8vIEZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMsIHNlZWluZyBhcyBjb25kaXRpb25zIGZvciBhIHByZWZsaWdodCBhcmVcblx0XHRcdFx0Ly8gYWtpbiB0byBhIGppZ3NhdyBwdXp6bGUsIHdlIHNpbXBseSBuZXZlciBzZXQgaXQgdG8gYmUgc3VyZS5cblx0XHRcdFx0Ly8gKGl0IGNhbiBhbHdheXMgYmUgc2V0IG9uIGEgcGVyLXJlcXVlc3QgYmFzaXMgb3IgZXZlbiB1c2luZyBhamF4U2V0dXApXG5cdFx0XHRcdC8vIEZvciBzYW1lLWRvbWFpbiByZXF1ZXN0cywgd29uJ3QgY2hhbmdlIGhlYWRlciBpZiBhbHJlYWR5IHByb3ZpZGVkLlxuXHRcdFx0XHRpZiAoICFvcHRpb25zLmNyb3NzRG9tYWluICYmICFoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdICkge1xuXHRcdFx0XHRcdGhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gPSBcIlhNTEh0dHBSZXF1ZXN0XCI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTZXQgaGVhZGVyc1xuXHRcdFx0XHRmb3IgKCBpIGluIGhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoIGksIGhlYWRlcnNbIGkgXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRjYWxsYmFjayA9IGVycm9yQ2FsbGJhY2sgPSB4aHIub25sb2FkID1cblx0XHRcdFx0XHRcdFx0XHR4aHIub25lcnJvciA9IHhoci5vbmFib3J0ID0geGhyLm9udGltZW91dCA9XG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiYWJvcnRcIiApIHtcblx0XHRcdFx0XHRcdFx0XHR4aHIuYWJvcnQoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggdHlwZSA9PT0gXCJlcnJvclwiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBPbiBhIG1hbnVhbCBuYXRpdmUgYWJvcnQsIElFOSB0aHJvd3Ncblx0XHRcdFx0XHRcdFx0XHQvLyBlcnJvcnMgb24gYW55IHByb3BlcnR5IGFjY2VzcyB0aGF0IGlzIG5vdCByZWFkeVN0YXRlXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlb2YgeGhyLnN0YXR1cyAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCAwLCBcImVycm9yXCIgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRmlsZTogcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgMDsgc2VlIHRyYWMtODYwNSwgdHJhYy0xNDIwN1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHJTdWNjZXNzU3RhdHVzWyB4aHIuc3RhdHVzIF0gfHwgeGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0LFxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSUU5IGhhcyBubyBYSFIyIGJ1dCB0aHJvd3Mgb24gYmluYXJ5ICh0cmFjLTExNDI2KVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gRm9yIFhIUjIgbm9uLXRleHQsIGxldCB0aGUgY2FsbGVyIGhhbmRsZSBpdCAoZ2gtMjQ5OClcblx0XHRcdFx0XHRcdFx0XHRcdCggeGhyLnJlc3BvbnNlVHlwZSB8fCBcInRleHRcIiApICE9PSBcInRleHRcIiAgfHxcblx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiB4aHIucmVzcG9uc2VUZXh0ICE9PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0eyBiaW5hcnk6IHhoci5yZXNwb25zZSB9IDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0eyB0ZXh0OiB4aHIucmVzcG9uc2VUZXh0IH0sXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKClcblx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHQvLyBMaXN0ZW4gdG8gZXZlbnRzXG5cdFx0XHRcdHhoci5vbmxvYWQgPSBjYWxsYmFjaygpO1xuXHRcdFx0XHRlcnJvckNhbGxiYWNrID0geGhyLm9uZXJyb3IgPSB4aHIub250aW1lb3V0ID0gY2FsbGJhY2soIFwiZXJyb3JcIiApO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdFx0XHQvLyBVc2Ugb25yZWFkeXN0YXRlY2hhbmdlIHRvIHJlcGxhY2Ugb25hYm9ydFxuXHRcdFx0XHQvLyB0byBoYW5kbGUgdW5jYXVnaHQgYWJvcnRzXG5cdFx0XHRcdGlmICggeGhyLm9uYWJvcnQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR4aHIub25hYm9ydCA9IGVycm9yQ2FsbGJhY2s7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHQvLyBDaGVjayByZWFkeVN0YXRlIGJlZm9yZSB0aW1lb3V0IGFzIGl0IGNoYW5nZXNcblx0XHRcdFx0XHRcdGlmICggeGhyLnJlYWR5U3RhdGUgPT09IDQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQWxsb3cgb25lcnJvciB0byBiZSBjYWxsZWQgZmlyc3QsXG5cdFx0XHRcdFx0XHRcdC8vIGJ1dCB0aGF0IHdpbGwgbm90IGhhbmRsZSBhIG5hdGl2ZSBhYm9ydFxuXHRcdFx0XHRcdFx0XHQvLyBBbHNvLCBzYXZlIGVycm9yQ2FsbGJhY2sgdG8gYSB2YXJpYWJsZVxuXHRcdFx0XHRcdFx0XHQvLyBhcyB4aHIub25lcnJvciBjYW5ub3QgYmUgYWNjZXNzZWRcblx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRlcnJvckNhbGxiYWNrKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENyZWF0ZSB0aGUgYWJvcnQgY2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBjYWxsYmFjayggXCJhYm9ydFwiICk7XG5cblx0XHRcdFx0dHJ5IHtcblxuXHRcdFx0XHRcdC8vIERvIHNlbmQgdGhlIHJlcXVlc3QgKHRoaXMgbWF5IHJhaXNlIGFuIGV4Y2VwdGlvbilcblx0XHRcdFx0XHR4aHIuc2VuZCggb3B0aW9ucy5oYXNDb250ZW50ICYmIG9wdGlvbnMuZGF0YSB8fCBudWxsICk7XG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0Ly8gdHJhYy0xNDY4MzogT25seSByZXRocm93IGlmIHRoaXMgaGFzbid0IGJlZW4gbm90aWZpZWQgYXMgYW4gZXJyb3IgeWV0XG5cdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUHJldmVudCBhdXRvLWV4ZWN1dGlvbiBvZiBzY3JpcHRzIHdoZW4gbm8gZXhwbGljaXQgZGF0YVR5cGUgd2FzIHByb3ZpZGVkIChTZWUgZ2gtMjQzMilcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMuY29udGVudHMuc2NyaXB0ID0gZmFsc2U7XG5cdH1cbn0gKTtcblxuLy8gSW5zdGFsbCBzY3JpcHQgZGF0YVR5cGVcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0YWNjZXB0czoge1xuXHRcdHNjcmlwdDogXCJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIFwiICtcblx0XHRcdFwiYXBwbGljYXRpb24vZWNtYXNjcmlwdCwgYXBwbGljYXRpb24veC1lY21hc2NyaXB0XCJcblx0fSxcblx0Y29udGVudHM6IHtcblx0XHRzY3JpcHQ6IC9cXGIoPzpqYXZhfGVjbWEpc2NyaXB0XFxiL1xuXHR9LFxuXHRjb252ZXJ0ZXJzOiB7XG5cdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCB0ZXh0ICk7XG5cdFx0XHRyZXR1cm4gdGV4dDtcblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSGFuZGxlIGNhY2hlJ3Mgc3BlY2lhbCBjYXNlIGFuZCBjcm9zc0RvbWFpblxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRzLmNhY2hlID0gZmFsc2U7XG5cdH1cblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMudHlwZSA9IFwiR0VUXCI7XG5cdH1cbn0gKTtcblxuLy8gQmluZCBzY3JpcHQgdGFnIGhhY2sgdHJhbnNwb3J0XG5qUXVlcnkuYWpheFRyYW5zcG9ydCggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cblx0Ly8gVGhpcyB0cmFuc3BvcnQgb25seSBkZWFscyB3aXRoIGNyb3NzIGRvbWFpbiBvciBmb3JjZWQtYnktYXR0cnMgcmVxdWVzdHNcblx0aWYgKCBzLmNyb3NzRG9tYWluIHx8IHMuc2NyaXB0QXR0cnMgKSB7XG5cdFx0dmFyIHNjcmlwdCwgY2FsbGJhY2s7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBfLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0c2NyaXB0ID0galF1ZXJ5KCBcIjxzY3JpcHQ+XCIgKVxuXHRcdFx0XHRcdC5hdHRyKCBzLnNjcmlwdEF0dHJzIHx8IHt9IClcblx0XHRcdFx0XHQucHJvcCggeyBjaGFyc2V0OiBzLnNjcmlwdENoYXJzZXQsIHNyYzogcy51cmwgfSApXG5cdFx0XHRcdFx0Lm9uKCBcImxvYWQgZXJyb3JcIiwgY2FsbGJhY2sgPSBmdW5jdGlvbiggZXZ0ICkge1xuXHRcdFx0XHRcdFx0c2NyaXB0LnJlbW92ZSgpO1xuXHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBudWxsO1xuXHRcdFx0XHRcdFx0aWYgKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCBldnQudHlwZSA9PT0gXCJlcnJvclwiID8gNDA0IDogMjAwLCBldnQudHlwZSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHQvLyBVc2UgbmF0aXZlIERPTSBtYW5pcHVsYXRpb24gdG8gYXZvaWQgb3VyIGRvbU1hbmlwIEFKQVggdHJpY2tlcnlcblx0XHRcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0WyAwIF0gKTtcblx0XHRcdH0sXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIG9sZENhbGxiYWNrcyA9IFtdLFxuXHRyanNvbnAgPSAvKD0pXFw/KD89JnwkKXxcXD9cXD8vO1xuXG4vLyBEZWZhdWx0IGpzb25wIHNldHRpbmdzXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGpzb25wOiBcImNhbGxiYWNrXCIsXG5cdGpzb25wQ2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjYWxsYmFjayA9IG9sZENhbGxiYWNrcy5wb3AoKSB8fCAoIGpRdWVyeS5leHBhbmRvICsgXCJfXCIgKyAoIG5vbmNlLmd1aWQrKyApICk7XG5cdFx0dGhpc1sgY2FsbGJhY2sgXSA9IHRydWU7XG5cdFx0cmV0dXJuIGNhbGxiYWNrO1xuXHR9XG59ICk7XG5cbi8vIERldGVjdCwgbm9ybWFsaXplIG9wdGlvbnMgYW5kIGluc3RhbGwgY2FsbGJhY2tzIGZvciBqc29ucCByZXF1ZXN0c1xualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwianNvbiBqc29ucFwiLCBmdW5jdGlvbiggcywgb3JpZ2luYWxTZXR0aW5ncywganFYSFIgKSB7XG5cblx0dmFyIGNhbGxiYWNrTmFtZSwgb3ZlcndyaXR0ZW4sIHJlc3BvbnNlQ29udGFpbmVyLFxuXHRcdGpzb25Qcm9wID0gcy5qc29ucCAhPT0gZmFsc2UgJiYgKCByanNvbnAudGVzdCggcy51cmwgKSA/XG5cdFx0XHRcInVybFwiIDpcblx0XHRcdHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKVxuXHRcdFx0XHRcdC5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgJiZcblx0XHRcdFx0cmpzb25wLnRlc3QoIHMuZGF0YSApICYmIFwiZGF0YVwiXG5cdFx0KTtcblxuXHQvLyBIYW5kbGUgaWZmIHRoZSBleHBlY3RlZCBkYXRhIHR5cGUgaXMgXCJqc29ucFwiIG9yIHdlIGhhdmUgYSBwYXJhbWV0ZXIgdG8gc2V0XG5cdGlmICgganNvblByb3AgfHwgcy5kYXRhVHlwZXNbIDAgXSA9PT0gXCJqc29ucFwiICkge1xuXG5cdFx0Ly8gR2V0IGNhbGxiYWNrIG5hbWUsIHJlbWVtYmVyaW5nIHByZWV4aXN0aW5nIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCBpdFxuXHRcdGNhbGxiYWNrTmFtZSA9IHMuanNvbnBDYWxsYmFjayA9IGlzRnVuY3Rpb24oIHMuanNvbnBDYWxsYmFjayApID9cblx0XHRcdHMuanNvbnBDYWxsYmFjaygpIDpcblx0XHRcdHMuanNvbnBDYWxsYmFjaztcblxuXHRcdC8vIEluc2VydCBjYWxsYmFjayBpbnRvIHVybCBvciBmb3JtIGRhdGFcblx0XHRpZiAoIGpzb25Qcm9wICkge1xuXHRcdFx0c1sganNvblByb3AgXSA9IHNbIGpzb25Qcm9wIF0ucmVwbGFjZSggcmpzb25wLCBcIiQxXCIgKyBjYWxsYmFja05hbWUgKTtcblx0XHR9IGVsc2UgaWYgKCBzLmpzb25wICE9PSBmYWxzZSApIHtcblx0XHRcdHMudXJsICs9ICggcnF1ZXJ5LnRlc3QoIHMudXJsICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmpzb25wICsgXCI9XCIgKyBjYWxsYmFja05hbWU7XG5cdFx0fVxuXG5cdFx0Ly8gVXNlIGRhdGEgY29udmVydGVyIHRvIHJldHJpZXZlIGpzb24gYWZ0ZXIgc2NyaXB0IGV4ZWN1dGlvblxuXHRcdHMuY29udmVydGVyc1sgXCJzY3JpcHQganNvblwiIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggIXJlc3BvbnNlQ29udGFpbmVyICkge1xuXHRcdFx0XHRqUXVlcnkuZXJyb3IoIGNhbGxiYWNrTmFtZSArIFwiIHdhcyBub3QgY2FsbGVkXCIgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXNwb25zZUNvbnRhaW5lclsgMCBdO1xuXHRcdH07XG5cblx0XHQvLyBGb3JjZSBqc29uIGRhdGFUeXBlXG5cdFx0cy5kYXRhVHlwZXNbIDAgXSA9IFwianNvblwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja1xuXHRcdG92ZXJ3cml0dGVuID0gd2luZG93WyBjYWxsYmFja05hbWUgXTtcblx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IGFyZ3VtZW50cztcblx0XHR9O1xuXG5cdFx0Ly8gQ2xlYW4tdXAgZnVuY3Rpb24gKGZpcmVzIGFmdGVyIGNvbnZlcnRlcnMpXG5cdFx0anFYSFIuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gSWYgcHJldmlvdXMgdmFsdWUgZGlkbid0IGV4aXN0IC0gcmVtb3ZlIGl0XG5cdFx0XHRpZiAoIG92ZXJ3cml0dGVuID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdGpRdWVyeSggd2luZG93ICkucmVtb3ZlUHJvcCggY2FsbGJhY2tOYW1lICk7XG5cblx0XHRcdC8vIE90aGVyd2lzZSByZXN0b3JlIHByZWV4aXN0aW5nIHZhbHVlXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gb3ZlcndyaXR0ZW47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNhdmUgYmFjayBhcyBmcmVlXG5cdFx0XHRpZiAoIHNbIGNhbGxiYWNrTmFtZSBdICkge1xuXG5cdFx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHJlLXVzaW5nIHRoZSBvcHRpb25zIGRvZXNuJ3Qgc2NyZXcgdGhpbmdzIGFyb3VuZFxuXHRcdFx0XHRzLmpzb25wQ2FsbGJhY2sgPSBvcmlnaW5hbFNldHRpbmdzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHRcdFx0Ly8gU2F2ZSB0aGUgY2FsbGJhY2sgbmFtZSBmb3IgZnV0dXJlIHVzZVxuXHRcdFx0XHRvbGRDYWxsYmFja3MucHVzaCggY2FsbGJhY2tOYW1lICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENhbGwgaWYgaXQgd2FzIGEgZnVuY3Rpb24gYW5kIHdlIGhhdmUgYSByZXNwb25zZVxuXHRcdFx0aWYgKCByZXNwb25zZUNvbnRhaW5lciAmJiBpc0Z1bmN0aW9uKCBvdmVyd3JpdHRlbiApICkge1xuXHRcdFx0XHRvdmVyd3JpdHRlbiggcmVzcG9uc2VDb250YWluZXJbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IG92ZXJ3cml0dGVuID0gdW5kZWZpbmVkO1xuXHRcdH0gKTtcblxuXHRcdC8vIERlbGVnYXRlIHRvIHNjcmlwdFxuXHRcdHJldHVybiBcInNjcmlwdFwiO1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA4IG9ubHlcbi8vIEluIFNhZmFyaSA4IGRvY3VtZW50cyBjcmVhdGVkIHZpYSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnRcbi8vIGNvbGxhcHNlIHNpYmxpbmcgZm9ybXM6IHRoZSBzZWNvbmQgb25lIGJlY29tZXMgYSBjaGlsZCBvZiB0aGUgZmlyc3Qgb25lLlxuLy8gQmVjYXVzZSBvZiB0aGF0LCB0aGlzIHNlY3VyaXR5IG1lYXN1cmUgaGFzIHRvIGJlIGRpc2FibGVkIGluIFNhZmFyaSA4LlxuLy8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNzMzN1xuc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgPSAoIGZ1bmN0aW9uKCkge1xuXHR2YXIgYm9keSA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApLmJvZHk7XG5cdGJvZHkuaW5uZXJIVE1MID0gXCI8Zm9ybT48L2Zvcm0+PGZvcm0+PC9mb3JtPlwiO1xuXHRyZXR1cm4gYm9keS5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMjtcbn0gKSgpO1xuXG5cbi8vIEFyZ3VtZW50IFwiZGF0YVwiIHNob3VsZCBiZSBzdHJpbmcgb2YgaHRtbFxuLy8gY29udGV4dCAob3B0aW9uYWwpOiBJZiBzcGVjaWZpZWQsIHRoZSBmcmFnbWVudCB3aWxsIGJlIGNyZWF0ZWQgaW4gdGhpcyBjb250ZXh0LFxuLy8gZGVmYXVsdHMgdG8gZG9jdW1lbnRcbi8vIGtlZXBTY3JpcHRzIChvcHRpb25hbCk6IElmIHRydWUsIHdpbGwgaW5jbHVkZSBzY3JpcHRzIHBhc3NlZCBpbiB0aGUgaHRtbCBzdHJpbmdcbmpRdWVyeS5wYXJzZUhUTUwgPSBmdW5jdGlvbiggZGF0YSwgY29udGV4dCwga2VlcFNjcmlwdHMgKSB7XG5cdGlmICggdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIFtdO1xuXHR9XG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGtlZXBTY3JpcHRzID0gY29udGV4dDtcblx0XHRjb250ZXh0ID0gZmFsc2U7XG5cdH1cblxuXHR2YXIgYmFzZSwgcGFyc2VkLCBzY3JpcHRzO1xuXG5cdGlmICggIWNvbnRleHQgKSB7XG5cblx0XHQvLyBTdG9wIHNjcmlwdHMgb3IgaW5saW5lIGV2ZW50IGhhbmRsZXJzIGZyb20gYmVpbmcgZXhlY3V0ZWQgaW1tZWRpYXRlbHlcblx0XHQvLyBieSB1c2luZyBkb2N1bWVudC5pbXBsZW1lbnRhdGlvblxuXHRcdGlmICggc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgKSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCBcIlwiICk7XG5cblx0XHRcdC8vIFNldCB0aGUgYmFzZSBocmVmIGZvciB0aGUgY3JlYXRlZCBkb2N1bWVudFxuXHRcdFx0Ly8gc28gYW55IHBhcnNlZCBlbGVtZW50cyB3aXRoIFVSTHNcblx0XHRcdC8vIGFyZSBiYXNlZCBvbiB0aGUgZG9jdW1lbnQncyBVUkwgKGdoLTI5NjUpXG5cdFx0XHRiYXNlID0gY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImJhc2VcIiApO1xuXHRcdFx0YmFzZS5ocmVmID0gZG9jdW1lbnQubG9jYXRpb24uaHJlZjtcblx0XHRcdGNvbnRleHQuaGVhZC5hcHBlbmRDaGlsZCggYmFzZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQ7XG5cdFx0fVxuXHR9XG5cblx0cGFyc2VkID0gcnNpbmdsZVRhZy5leGVjKCBkYXRhICk7XG5cdHNjcmlwdHMgPSAha2VlcFNjcmlwdHMgJiYgW107XG5cblx0Ly8gU2luZ2xlIHRhZ1xuXHRpZiAoIHBhcnNlZCApIHtcblx0XHRyZXR1cm4gWyBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIHBhcnNlZFsgMSBdICkgXTtcblx0fVxuXG5cdHBhcnNlZCA9IGJ1aWxkRnJhZ21lbnQoIFsgZGF0YSBdLCBjb250ZXh0LCBzY3JpcHRzICk7XG5cblx0aWYgKCBzY3JpcHRzICYmIHNjcmlwdHMubGVuZ3RoICkge1xuXHRcdGpRdWVyeSggc2NyaXB0cyApLnJlbW92ZSgpO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIHBhcnNlZC5jaGlsZE5vZGVzICk7XG59O1xuXG5cbi8qKlxuICogTG9hZCBhIHVybCBpbnRvIGEgcGFnZVxuICovXG5qUXVlcnkuZm4ubG9hZCA9IGZ1bmN0aW9uKCB1cmwsIHBhcmFtcywgY2FsbGJhY2sgKSB7XG5cdHZhciBzZWxlY3RvciwgdHlwZSwgcmVzcG9uc2UsXG5cdFx0c2VsZiA9IHRoaXMsXG5cdFx0b2ZmID0gdXJsLmluZGV4T2YoIFwiIFwiICk7XG5cblx0aWYgKCBvZmYgPiAtMSApIHtcblx0XHRzZWxlY3RvciA9IHN0cmlwQW5kQ29sbGFwc2UoIHVybC5zbGljZSggb2ZmICkgKTtcblx0XHR1cmwgPSB1cmwuc2xpY2UoIDAsIG9mZiApO1xuXHR9XG5cblx0Ly8gSWYgaXQncyBhIGZ1bmN0aW9uXG5cdGlmICggaXNGdW5jdGlvbiggcGFyYW1zICkgKSB7XG5cblx0XHQvLyBXZSBhc3N1bWUgdGhhdCBpdCdzIHRoZSBjYWxsYmFja1xuXHRcdGNhbGxiYWNrID0gcGFyYW1zO1xuXHRcdHBhcmFtcyA9IHVuZGVmaW5lZDtcblxuXHQvLyBPdGhlcndpc2UsIGJ1aWxkIGEgcGFyYW0gc3RyaW5nXG5cdH0gZWxzZSBpZiAoIHBhcmFtcyAmJiB0eXBlb2YgcGFyYW1zID09PSBcIm9iamVjdFwiICkge1xuXHRcdHR5cGUgPSBcIlBPU1RcIjtcblx0fVxuXG5cdC8vIElmIHdlIGhhdmUgZWxlbWVudHMgdG8gbW9kaWZ5LCBtYWtlIHRoZSByZXF1ZXN0XG5cdGlmICggc2VsZi5sZW5ndGggPiAwICkge1xuXHRcdGpRdWVyeS5hamF4KCB7XG5cdFx0XHR1cmw6IHVybCxcblxuXHRcdFx0Ly8gSWYgXCJ0eXBlXCIgdmFyaWFibGUgaXMgdW5kZWZpbmVkLCB0aGVuIFwiR0VUXCIgbWV0aG9kIHdpbGwgYmUgdXNlZC5cblx0XHRcdC8vIE1ha2UgdmFsdWUgb2YgdGhpcyBmaWVsZCBleHBsaWNpdCBzaW5jZVxuXHRcdFx0Ly8gdXNlciBjYW4gb3ZlcnJpZGUgaXQgdGhyb3VnaCBhamF4U2V0dXAgbWV0aG9kXG5cdFx0XHR0eXBlOiB0eXBlIHx8IFwiR0VUXCIsXG5cdFx0XHRkYXRhVHlwZTogXCJodG1sXCIsXG5cdFx0XHRkYXRhOiBwYXJhbXNcblx0XHR9ICkuZG9uZSggZnVuY3Rpb24oIHJlc3BvbnNlVGV4dCApIHtcblxuXHRcdFx0Ly8gU2F2ZSByZXNwb25zZSBmb3IgdXNlIGluIGNvbXBsZXRlIGNhbGxiYWNrXG5cdFx0XHRyZXNwb25zZSA9IGFyZ3VtZW50cztcblxuXHRcdFx0c2VsZi5odG1sKCBzZWxlY3RvciA/XG5cblx0XHRcdFx0Ly8gSWYgYSBzZWxlY3RvciB3YXMgc3BlY2lmaWVkLCBsb2NhdGUgdGhlIHJpZ2h0IGVsZW1lbnRzIGluIGEgZHVtbXkgZGl2XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgc2NyaXB0cyB0byBhdm9pZCBJRSAnUGVybWlzc2lvbiBEZW5pZWQnIGVycm9yc1xuXHRcdFx0XHRqUXVlcnkoIFwiPGRpdj5cIiApLmFwcGVuZCggalF1ZXJ5LnBhcnNlSFRNTCggcmVzcG9uc2VUZXh0ICkgKS5maW5kKCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgdXNlIHRoZSBmdWxsIHJlc3VsdFxuXHRcdFx0XHRyZXNwb25zZVRleHQgKTtcblxuXHRcdC8vIElmIHRoZSByZXF1ZXN0IHN1Y2NlZWRzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJkYXRhXCIsIFwic3RhdHVzXCIsIFwianFYSFJcIlxuXHRcdC8vIGJ1dCB0aGV5IGFyZSBpZ25vcmVkIGJlY2F1c2UgcmVzcG9uc2Ugd2FzIHNldCBhYm92ZS5cblx0XHQvLyBJZiBpdCBmYWlscywgdGhpcyBmdW5jdGlvbiBnZXRzIFwianFYSFJcIiwgXCJzdGF0dXNcIiwgXCJlcnJvclwiXG5cdFx0fSApLmFsd2F5cyggY2FsbGJhY2sgJiYgZnVuY3Rpb24oIGpxWEhSLCBzdGF0dXMgKSB7XG5cdFx0XHRzZWxmLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRjYWxsYmFjay5hcHBseSggdGhpcywgcmVzcG9uc2UgfHwgWyBqcVhIUi5yZXNwb25zZVRleHQsIHN0YXR1cywganFYSFIgXSApO1xuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdHJldHVybiB0aGlzO1xufTtcblxuXG5cblxualF1ZXJ5LmV4cHIucHNldWRvcy5hbmltYXRlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4galF1ZXJ5LmdyZXAoIGpRdWVyeS50aW1lcnMsIGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gZWxlbSA9PT0gZm4uZWxlbTtcblx0fSApLmxlbmd0aDtcbn07XG5cblxuXG5cbmpRdWVyeS5vZmZzZXQgPSB7XG5cdHNldE9mZnNldDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGkgKSB7XG5cdFx0dmFyIGN1clBvc2l0aW9uLCBjdXJMZWZ0LCBjdXJDU1NUb3AsIGN1clRvcCwgY3VyT2Zmc2V0LCBjdXJDU1NMZWZ0LCBjYWxjdWxhdGVQb3NpdGlvbixcblx0XHRcdHBvc2l0aW9uID0galF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICksXG5cdFx0XHRjdXJFbGVtID0galF1ZXJ5KCBlbGVtICksXG5cdFx0XHRwcm9wcyA9IHt9O1xuXG5cdFx0Ly8gU2V0IHBvc2l0aW9uIGZpcnN0LCBpbi1jYXNlIHRvcC9sZWZ0IGFyZSBzZXQgZXZlbiBvbiBzdGF0aWMgZWxlbVxuXHRcdGlmICggcG9zaXRpb24gPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRlbGVtLnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xuXHRcdH1cblxuXHRcdGN1ck9mZnNldCA9IGN1ckVsZW0ub2Zmc2V0KCk7XG5cdFx0Y3VyQ1NTVG9wID0galF1ZXJ5LmNzcyggZWxlbSwgXCJ0b3BcIiApO1xuXHRcdGN1ckNTU0xlZnQgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImxlZnRcIiApO1xuXHRcdGNhbGN1bGF0ZVBvc2l0aW9uID0gKCBwb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiIHx8IHBvc2l0aW9uID09PSBcImZpeGVkXCIgKSAmJlxuXHRcdFx0KCBjdXJDU1NUb3AgKyBjdXJDU1NMZWZ0ICkuaW5kZXhPZiggXCJhdXRvXCIgKSA+IC0xO1xuXG5cdFx0Ly8gTmVlZCB0byBiZSBhYmxlIHRvIGNhbGN1bGF0ZSBwb3NpdGlvbiBpZiBlaXRoZXJcblx0XHQvLyB0b3Agb3IgbGVmdCBpcyBhdXRvIGFuZCBwb3NpdGlvbiBpcyBlaXRoZXIgYWJzb2x1dGUgb3IgZml4ZWRcblx0XHRpZiAoIGNhbGN1bGF0ZVBvc2l0aW9uICkge1xuXHRcdFx0Y3VyUG9zaXRpb24gPSBjdXJFbGVtLnBvc2l0aW9uKCk7XG5cdFx0XHRjdXJUb3AgPSBjdXJQb3NpdGlvbi50b3A7XG5cdFx0XHRjdXJMZWZ0ID0gY3VyUG9zaXRpb24ubGVmdDtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJUb3AgPSBwYXJzZUZsb2F0KCBjdXJDU1NUb3AgKSB8fCAwO1xuXHRcdFx0Y3VyTGVmdCA9IHBhcnNlRmxvYXQoIGN1ckNTU0xlZnQgKSB8fCAwO1xuXHRcdH1cblxuXHRcdGlmICggaXNGdW5jdGlvbiggb3B0aW9ucyApICkge1xuXG5cdFx0XHQvLyBVc2UgalF1ZXJ5LmV4dGVuZCBoZXJlIHRvIGFsbG93IG1vZGlmaWNhdGlvbiBvZiBjb29yZGluYXRlcyBhcmd1bWVudCAoZ2gtMTg0OClcblx0XHRcdG9wdGlvbnMgPSBvcHRpb25zLmNhbGwoIGVsZW0sIGksIGpRdWVyeS5leHRlbmQoIHt9LCBjdXJPZmZzZXQgKSApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0aW9ucy50b3AgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLnRvcCA9ICggb3B0aW9ucy50b3AgLSBjdXJPZmZzZXQudG9wICkgKyBjdXJUb3A7XG5cdFx0fVxuXHRcdGlmICggb3B0aW9ucy5sZWZ0ICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy5sZWZ0ID0gKCBvcHRpb25zLmxlZnQgLSBjdXJPZmZzZXQubGVmdCApICsgY3VyTGVmdDtcblx0XHR9XG5cblx0XHRpZiAoIFwidXNpbmdcIiBpbiBvcHRpb25zICkge1xuXHRcdFx0b3B0aW9ucy51c2luZy5jYWxsKCBlbGVtLCBwcm9wcyApO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1ckVsZW0uY3NzKCBwcm9wcyApO1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdC8vIG9mZnNldCgpIHJlbGF0ZXMgYW4gZWxlbWVudCdzIGJvcmRlciBib3ggdG8gdGhlIGRvY3VtZW50IG9yaWdpblxuXHRvZmZzZXQ6IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdFx0Ly8gUHJlc2VydmUgY2hhaW5pbmcgZm9yIHNldHRlclxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiBvcHRpb25zID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHR0aGlzIDpcblx0XHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0XHRqUXVlcnkub2Zmc2V0LnNldE9mZnNldCggdGhpcywgb3B0aW9ucywgaSApO1xuXHRcdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0dmFyIHJlY3QsIHdpbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB6ZXJvcyBmb3IgZGlzY29ubmVjdGVkIGFuZCBoaWRkZW4gKGRpc3BsYXk6IG5vbmUpIGVsZW1lbnRzIChnaC0yMzEwKVxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdC8vIFJ1bm5pbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGFcblx0XHQvLyBkaXNjb25uZWN0ZWQgbm9kZSBpbiBJRSB0aHJvd3MgYW4gZXJyb3Jcblx0XHRpZiAoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cdFx0fVxuXG5cdFx0Ly8gR2V0IGRvY3VtZW50LXJlbGF0aXZlIHBvc2l0aW9uIGJ5IGFkZGluZyB2aWV3cG9ydCBzY3JvbGwgdG8gdmlld3BvcnQtcmVsYXRpdmUgZ0JDUlxuXHRcdHJlY3QgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRcdHdpbiA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldztcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiByZWN0LnRvcCArIHdpbi5wYWdlWU9mZnNldCxcblx0XHRcdGxlZnQ6IHJlY3QubGVmdCArIHdpbi5wYWdlWE9mZnNldFxuXHRcdH07XG5cdH0sXG5cblx0Ly8gcG9zaXRpb24oKSByZWxhdGVzIGFuIGVsZW1lbnQncyBtYXJnaW4gYm94IHRvIGl0cyBvZmZzZXQgcGFyZW50J3MgcGFkZGluZyBib3hcblx0Ly8gVGhpcyBjb3JyZXNwb25kcyB0byB0aGUgYmVoYXZpb3Igb2YgQ1NTIGFic29sdXRlIHBvc2l0aW9uaW5nXG5cdHBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRpZiAoICF0aGlzWyAwIF0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIG9mZnNldFBhcmVudCwgb2Zmc2V0LCBkb2MsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0cGFyZW50T2Zmc2V0ID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblxuXHRcdC8vIHBvc2l0aW9uOmZpeGVkIGVsZW1lbnRzIGFyZSBvZmZzZXQgZnJvbSB0aGUgdmlld3BvcnQsIHdoaWNoIGl0c2VsZiBhbHdheXMgaGFzIHplcm8gb2Zmc2V0XG5cdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSA9PT0gXCJmaXhlZFwiICkge1xuXG5cdFx0XHQvLyBBc3N1bWUgcG9zaXRpb246Zml4ZWQgaW1wbGllcyBhdmFpbGFiaWxpdHkgb2YgZ2V0Qm91bmRpbmdDbGllbnRSZWN0XG5cdFx0XHRvZmZzZXQgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdG9mZnNldCA9IHRoaXMub2Zmc2V0KCk7XG5cblx0XHRcdC8vIEFjY291bnQgZm9yIHRoZSAqcmVhbCogb2Zmc2V0IHBhcmVudCwgd2hpY2ggY2FuIGJlIHRoZSBkb2N1bWVudCBvciBpdHMgcm9vdCBlbGVtZW50XG5cdFx0XHQvLyB3aGVuIGEgc3RhdGljYWxseSBwb3NpdGlvbmVkIGVsZW1lbnQgaXMgaWRlbnRpZmllZFxuXHRcdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50O1xuXHRcdFx0b2Zmc2V0UGFyZW50ID0gZWxlbS5vZmZzZXRQYXJlbnQgfHwgZG9jLmRvY3VtZW50RWxlbWVudDtcblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmXG5cdFx0XHRcdCggb2Zmc2V0UGFyZW50ID09PSBkb2MuYm9keSB8fCBvZmZzZXRQYXJlbnQgPT09IGRvYy5kb2N1bWVudEVsZW1lbnQgKSAmJlxuXHRcdFx0XHRqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkge1xuXG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBvZmZzZXRQYXJlbnQgJiYgb2Zmc2V0UGFyZW50ICE9PSBlbGVtICYmIG9mZnNldFBhcmVudC5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSBib3JkZXJzIGludG8gaXRzIG9mZnNldCwgc2luY2UgdGhleSBhcmUgb3V0c2lkZSBpdHMgY29udGVudCBvcmlnaW5cblx0XHRcdFx0cGFyZW50T2Zmc2V0ID0galF1ZXJ5KCBvZmZzZXRQYXJlbnQgKS5vZmZzZXQoKTtcblx0XHRcdFx0cGFyZW50T2Zmc2V0LnRvcCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwiYm9yZGVyVG9wV2lkdGhcIiwgdHJ1ZSApO1xuXHRcdFx0XHRwYXJlbnRPZmZzZXQubGVmdCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwiYm9yZGVyTGVmdFdpZHRoXCIsIHRydWUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTdWJ0cmFjdCBwYXJlbnQgb2Zmc2V0cyBhbmQgZWxlbWVudCBtYXJnaW5zXG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogb2Zmc2V0LnRvcCAtIHBhcmVudE9mZnNldC50b3AgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpblRvcFwiLCB0cnVlICksXG5cdFx0XHRsZWZ0OiBvZmZzZXQubGVmdCAtIHBhcmVudE9mZnNldC5sZWZ0IC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIsIHRydWUgKVxuXHRcdH07XG5cdH0sXG5cblx0Ly8gVGhpcyBtZXRob2Qgd2lsbCByZXR1cm4gZG9jdW1lbnRFbGVtZW50IGluIHRoZSBmb2xsb3dpbmcgY2FzZXM6XG5cdC8vIDEpIEZvciB0aGUgZWxlbWVudCBpbnNpZGUgdGhlIGlmcmFtZSB3aXRob3V0IG9mZnNldFBhcmVudCwgdGhpcyBtZXRob2Qgd2lsbCByZXR1cm5cblx0Ly8gICAgZG9jdW1lbnRFbGVtZW50IG9mIHRoZSBwYXJlbnQgd2luZG93XG5cdC8vIDIpIEZvciB0aGUgaGlkZGVuIG9yIGRldGFjaGVkIGVsZW1lbnRcblx0Ly8gMykgRm9yIGJvZHkgb3IgaHRtbCBlbGVtZW50LCBpLmUuIGluIGNhc2Ugb2YgdGhlIGh0bWwgbm9kZSAtIGl0IHdpbGwgcmV0dXJuIGl0c2VsZlxuXHQvL1xuXHQvLyBidXQgdGhvc2UgZXhjZXB0aW9ucyB3ZXJlIG5ldmVyIHByZXNlbnRlZCBhcyBhIHJlYWwgbGlmZSB1c2UtY2FzZXNcblx0Ly8gYW5kIG1pZ2h0IGJlIGNvbnNpZGVyZWQgYXMgbW9yZSBwcmVmZXJhYmxlIHJlc3VsdHMuXG5cdC8vXG5cdC8vIFRoaXMgbG9naWMsIGhvd2V2ZXIsIGlzIG5vdCBndWFyYW50ZWVkIGFuZCBjYW4gY2hhbmdlIGF0IGFueSBwb2ludCBpbiB0aGUgZnV0dXJlXG5cdG9mZnNldFBhcmVudDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudDtcblxuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiYgalF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50Lm9mZnNldFBhcmVudDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG9mZnNldFBhcmVudCB8fCBkb2N1bWVudEVsZW1lbnQ7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbi8vIENyZWF0ZSBzY3JvbGxMZWZ0IGFuZCBzY3JvbGxUb3AgbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgc2Nyb2xsTGVmdDogXCJwYWdlWE9mZnNldFwiLCBzY3JvbGxUb3A6IFwicGFnZVlPZmZzZXRcIiB9LCBmdW5jdGlvbiggbWV0aG9kLCBwcm9wICkge1xuXHR2YXIgdG9wID0gXCJwYWdlWU9mZnNldFwiID09PSBwcm9wO1xuXG5cdGpRdWVyeS5mblsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdmFsICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBtZXRob2QsIHZhbCApIHtcblxuXHRcdFx0Ly8gQ29hbGVzY2UgZG9jdW1lbnRzIGFuZCB3aW5kb3dzXG5cdFx0XHR2YXIgd2luO1xuXHRcdFx0aWYgKCBpc1dpbmRvdyggZWxlbSApICkge1xuXHRcdFx0XHR3aW4gPSBlbGVtO1xuXHRcdFx0fSBlbHNlIGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0d2luID0gZWxlbS5kZWZhdWx0Vmlldztcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHdpbiA/IHdpblsgcHJvcCBdIDogZWxlbVsgbWV0aG9kIF07XG5cdFx0XHR9XG5cblx0XHRcdGlmICggd2luICkge1xuXHRcdFx0XHR3aW4uc2Nyb2xsVG8oXG5cdFx0XHRcdFx0IXRvcCA/IHZhbCA6IHdpbi5wYWdlWE9mZnNldCxcblx0XHRcdFx0XHR0b3AgPyB2YWwgOiB3aW4ucGFnZVlPZmZzZXRcblx0XHRcdFx0KTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbVsgbWV0aG9kIF0gPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSwgbWV0aG9kLCB2YWwsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fTtcbn0gKTtcblxuLy8gU3VwcG9ydDogU2FmYXJpIDw9NyAtIDkuMSwgQ2hyb21lIDw9MzcgLSA0OVxuLy8gQWRkIHRoZSB0b3AvbGVmdCBjc3NIb29rcyB1c2luZyBqUXVlcnkuZm4ucG9zaXRpb25cbi8vIFdlYmtpdCBidWc6IGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0yOTA4NFxuLy8gQmxpbmsgYnVnOiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD01ODkzNDdcbi8vIGdldENvbXB1dGVkU3R5bGUgcmV0dXJucyBwZXJjZW50IHdoZW4gc3BlY2lmaWVkIGZvciB0b3AvbGVmdC9ib3R0b20vcmlnaHQ7XG4vLyByYXRoZXIgdGhhbiBtYWtlIHRoZSBjc3MgbW9kdWxlIGRlcGVuZCBvbiB0aGUgb2Zmc2V0IG1vZHVsZSwganVzdCBjaGVjayBmb3IgaXQgaGVyZVxualF1ZXJ5LmVhY2goIFsgXCJ0b3BcIiwgXCJsZWZ0XCIgXSwgZnVuY3Rpb24oIF9pLCBwcm9wICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByb3AgXSA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5waXhlbFBvc2l0aW9uLFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGNvbXB1dGVkID0gY3VyQ1NTKCBlbGVtLCBwcm9wICk7XG5cblx0XHRcdFx0Ly8gSWYgY3VyQ1NTIHJldHVybnMgcGVyY2VudGFnZSwgZmFsbGJhY2sgdG8gb2Zmc2V0XG5cdFx0XHRcdHJldHVybiBybnVtbm9ucHgudGVzdCggY29tcHV0ZWQgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBlbGVtICkucG9zaXRpb24oKVsgcHJvcCBdICsgXCJweFwiIDpcblx0XHRcdFx0XHRjb21wdXRlZDtcblx0XHRcdH1cblx0XHR9XG5cdCk7XG59ICk7XG5cblxuLy8gQ3JlYXRlIGlubmVySGVpZ2h0LCBpbm5lcldpZHRoLCBoZWlnaHQsIHdpZHRoLCBvdXRlckhlaWdodCBhbmQgb3V0ZXJXaWR0aCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBIZWlnaHQ6IFwiaGVpZ2h0XCIsIFdpZHRoOiBcIndpZHRoXCIgfSwgZnVuY3Rpb24oIG5hbWUsIHR5cGUgKSB7XG5cdGpRdWVyeS5lYWNoKCB7XG5cdFx0cGFkZGluZzogXCJpbm5lclwiICsgbmFtZSxcblx0XHRjb250ZW50OiB0eXBlLFxuXHRcdFwiXCI6IFwib3V0ZXJcIiArIG5hbWVcblx0fSwgZnVuY3Rpb24oIGRlZmF1bHRFeHRyYSwgZnVuY05hbWUgKSB7XG5cblx0XHQvLyBNYXJnaW4gaXMgb25seSBmb3Igb3V0ZXJIZWlnaHQsIG91dGVyV2lkdGhcblx0XHRqUXVlcnkuZm5bIGZ1bmNOYW1lIF0gPSBmdW5jdGlvbiggbWFyZ2luLCB2YWx1ZSApIHtcblx0XHRcdHZhciBjaGFpbmFibGUgPSBhcmd1bWVudHMubGVuZ3RoICYmICggZGVmYXVsdEV4dHJhIHx8IHR5cGVvZiBtYXJnaW4gIT09IFwiYm9vbGVhblwiICksXG5cdFx0XHRcdGV4dHJhID0gZGVmYXVsdEV4dHJhIHx8ICggbWFyZ2luID09PSB0cnVlIHx8IHZhbHVlID09PSB0cnVlID8gXCJtYXJnaW5cIiA6IFwiYm9yZGVyXCIgKTtcblxuXHRcdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIHR5cGUsIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgZG9jO1xuXG5cdFx0XHRcdGlmICggaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vICQoIHdpbmRvdyApLm91dGVyV2lkdGgvSGVpZ2h0IHJldHVybiB3L2ggaW5jbHVkaW5nIHNjcm9sbGJhcnMgKGdoLTE3MjkpXG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmNOYW1lLmluZGV4T2YoIFwib3V0ZXJcIiApID09PSAwID9cblx0XHRcdFx0XHRcdGVsZW1bIFwiaW5uZXJcIiArIG5hbWUgXSA6XG5cdFx0XHRcdFx0XHRlbGVtLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFsgXCJjbGllbnRcIiArIG5hbWUgXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEdldCBkb2N1bWVudCB3aWR0aCBvciBoZWlnaHRcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdGRvYyA9IGVsZW0uZG9jdW1lbnRFbGVtZW50O1xuXG5cdFx0XHRcdFx0Ly8gRWl0aGVyIHNjcm9sbFtXaWR0aC9IZWlnaHRdIG9yIG9mZnNldFtXaWR0aC9IZWlnaHRdIG9yIGNsaWVudFtXaWR0aC9IZWlnaHRdLFxuXHRcdFx0XHRcdC8vIHdoaWNoZXZlciBpcyBncmVhdGVzdFxuXHRcdFx0XHRcdHJldHVybiBNYXRoLm1heChcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJzY3JvbGxcIiArIG5hbWUgXSwgZG9jWyBcInNjcm9sbFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcIm9mZnNldFwiICsgbmFtZSBdLCBkb2NbIFwib2Zmc2V0XCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRkb2NbIFwiY2xpZW50XCIgKyBuYW1lIF1cblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXG5cdFx0XHRcdFx0Ly8gR2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudCwgcmVxdWVzdGluZyBidXQgbm90IGZvcmNpbmcgcGFyc2VGbG9hdFxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIHR5cGUsIGV4dHJhICkgOlxuXG5cdFx0XHRcdFx0Ly8gU2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudFxuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgdHlwZSwgdmFsdWUsIGV4dHJhICk7XG5cdFx0XHR9LCB0eXBlLCBjaGFpbmFibGUgPyBtYXJnaW4gOiB1bmRlZmluZWQsIGNoYWluYWJsZSApO1xuXHRcdH07XG5cdH0gKTtcbn0gKTtcblxuXG5qUXVlcnkuZWFjaCggW1xuXHRcImFqYXhTdGFydFwiLFxuXHRcImFqYXhTdG9wXCIsXG5cdFwiYWpheENvbXBsZXRlXCIsXG5cdFwiYWpheEVycm9yXCIsXG5cdFwiYWpheFN1Y2Nlc3NcIixcblx0XCJhamF4U2VuZFwiXG5dLCBmdW5jdGlvbiggX2ksIHR5cGUgKSB7XG5cdGpRdWVyeS5mblsgdHlwZSBdID0gZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlLCBmbiApO1xuXHR9O1xufSApO1xuXG5cblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0YmluZDogZnVuY3Rpb24oIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIG51bGwsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuYmluZDogZnVuY3Rpb24oIHR5cGVzLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vZmYoIHR5cGVzLCBudWxsLCBmbiApO1xuXHR9LFxuXG5cdGRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBmbiApIHtcblxuXHRcdC8vICggbmFtZXNwYWNlICkgb3IgKCBzZWxlY3RvciwgdHlwZXMgWywgZm5dIClcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/XG5cdFx0XHR0aGlzLm9mZiggc2VsZWN0b3IsIFwiKipcIiApIDpcblx0XHRcdHRoaXMub2ZmKCB0eXBlcywgc2VsZWN0b3IgfHwgXCIqKlwiLCBmbiApO1xuXHR9LFxuXG5cdGhvdmVyOiBmdW5jdGlvbiggZm5PdmVyLCBmbk91dCApIHtcblx0XHRyZXR1cm4gdGhpcy5tb3VzZWVudGVyKCBmbk92ZXIgKS5tb3VzZWxlYXZlKCBmbk91dCB8fCBmbk92ZXIgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaChcblx0KCBcImJsdXIgZm9jdXMgZm9jdXNpbiBmb2N1c291dCByZXNpemUgc2Nyb2xsIGNsaWNrIGRibGNsaWNrIFwiICtcblx0XCJtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBcIiArXG5cdFwiY2hhbmdlIHNlbGVjdCBzdWJtaXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBjb250ZXh0bWVudVwiICkuc3BsaXQoIFwiIFwiICksXG5cdGZ1bmN0aW9uKCBfaSwgbmFtZSApIHtcblxuXHRcdC8vIEhhbmRsZSBldmVudCBiaW5kaW5nXG5cdFx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggZGF0YSwgZm4gKSB7XG5cdFx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDAgP1xuXHRcdFx0XHR0aGlzLm9uKCBuYW1lLCBudWxsLCBkYXRhLCBmbiApIDpcblx0XHRcdFx0dGhpcy50cmlnZ2VyKCBuYW1lICk7XG5cdFx0fTtcblx0fVxuKTtcblxuXG5cblxuLy8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5XG4vLyBNYWtlIHN1cmUgd2UgdHJpbSBCT00gYW5kIE5CU1Bcbi8vIFJlcXVpcmUgdGhhdCB0aGUgXCJ3aGl0ZXNwYWNlIHJ1blwiIHN0YXJ0cyBmcm9tIGEgbm9uLXdoaXRlc3BhY2Vcbi8vIHRvIGF2b2lkIE8oTl4yKSBiZWhhdmlvciB3aGVuIHRoZSBlbmdpbmUgd291bGQgdHJ5IG1hdGNoaW5nIFwiXFxzKyRcIiBhdCBlYWNoIHNwYWNlIHBvc2l0aW9uLlxudmFyIHJ0cmltID0gL15bXFxzXFx1RkVGRlxceEEwXSt8KFteXFxzXFx1RkVGRlxceEEwXSlbXFxzXFx1RkVGRlxceEEwXSskL2c7XG5cbi8vIEJpbmQgYSBmdW5jdGlvbiB0byBhIGNvbnRleHQsIG9wdGlvbmFsbHkgcGFydGlhbGx5IGFwcGx5aW5nIGFueVxuLy8gYXJndW1lbnRzLlxuLy8galF1ZXJ5LnByb3h5IGlzIGRlcHJlY2F0ZWQgdG8gcHJvbW90ZSBzdGFuZGFyZHMgKHNwZWNpZmljYWxseSBGdW5jdGlvbiNiaW5kKVxuLy8gSG93ZXZlciwgaXQgaXMgbm90IHNsYXRlZCBmb3IgcmVtb3ZhbCBhbnkgdGltZSBzb29uXG5qUXVlcnkucHJveHkgPSBmdW5jdGlvbiggZm4sIGNvbnRleHQgKSB7XG5cdHZhciB0bXAsIGFyZ3MsIHByb3h5O1xuXG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0dG1wID0gZm5bIGNvbnRleHQgXTtcblx0XHRjb250ZXh0ID0gZm47XG5cdFx0Zm4gPSB0bXA7XG5cdH1cblxuXHQvLyBRdWljayBjaGVjayB0byBkZXRlcm1pbmUgaWYgdGFyZ2V0IGlzIGNhbGxhYmxlLCBpbiB0aGUgc3BlY1xuXHQvLyB0aGlzIHRocm93cyBhIFR5cGVFcnJvciwgYnV0IHdlIHdpbGwganVzdCByZXR1cm4gdW5kZWZpbmVkLlxuXHRpZiAoICFpc0Z1bmN0aW9uKCBmbiApICkge1xuXHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdH1cblxuXHQvLyBTaW11bGF0ZWQgYmluZFxuXHRhcmdzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzLCAyICk7XG5cdHByb3h5ID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGZuLmFwcGx5KCBjb250ZXh0IHx8IHRoaXMsIGFyZ3MuY29uY2F0KCBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSApICk7XG5cdH07XG5cblx0Ly8gU2V0IHRoZSBndWlkIG9mIHVuaXF1ZSBoYW5kbGVyIHRvIHRoZSBzYW1lIG9mIG9yaWdpbmFsIGhhbmRsZXIsIHNvIGl0IGNhbiBiZSByZW1vdmVkXG5cdHByb3h5Lmd1aWQgPSBmbi5ndWlkID0gZm4uZ3VpZCB8fCBqUXVlcnkuZ3VpZCsrO1xuXG5cdHJldHVybiBwcm94eTtcbn07XG5cbmpRdWVyeS5ob2xkUmVhZHkgPSBmdW5jdGlvbiggaG9sZCApIHtcblx0aWYgKCBob2xkICkge1xuXHRcdGpRdWVyeS5yZWFkeVdhaXQrKztcblx0fSBlbHNlIHtcblx0XHRqUXVlcnkucmVhZHkoIHRydWUgKTtcblx0fVxufTtcbmpRdWVyeS5pc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbmpRdWVyeS5wYXJzZUpTT04gPSBKU09OLnBhcnNlO1xualF1ZXJ5Lm5vZGVOYW1lID0gbm9kZU5hbWU7XG5qUXVlcnkuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5qUXVlcnkuaXNXaW5kb3cgPSBpc1dpbmRvdztcbmpRdWVyeS5jYW1lbENhc2UgPSBjYW1lbENhc2U7XG5qUXVlcnkudHlwZSA9IHRvVHlwZTtcblxualF1ZXJ5Lm5vdyA9IERhdGUubm93O1xuXG5qUXVlcnkuaXNOdW1lcmljID0gZnVuY3Rpb24oIG9iaiApIHtcblxuXHQvLyBBcyBvZiBqUXVlcnkgMy4wLCBpc051bWVyaWMgaXMgbGltaXRlZCB0b1xuXHQvLyBzdHJpbmdzIGFuZCBudW1iZXJzIChwcmltaXRpdmVzIG9yIG9iamVjdHMpXG5cdC8vIHRoYXQgY2FuIGJlIGNvZXJjZWQgdG8gZmluaXRlIG51bWJlcnMgKGdoLTI2NjIpXG5cdHZhciB0eXBlID0galF1ZXJ5LnR5cGUoIG9iaiApO1xuXHRyZXR1cm4gKCB0eXBlID09PSBcIm51bWJlclwiIHx8IHR5cGUgPT09IFwic3RyaW5nXCIgKSAmJlxuXG5cdFx0Ly8gcGFyc2VGbG9hdCBOYU5zIG51bWVyaWMtY2FzdCBmYWxzZSBwb3NpdGl2ZXMgKFwiXCIpXG5cdFx0Ly8gLi4uYnV0IG1pc2ludGVycHJldHMgbGVhZGluZy1udW1iZXIgc3RyaW5ncywgcGFydGljdWxhcmx5IGhleCBsaXRlcmFscyAoXCIweC4uLlwiKVxuXHRcdC8vIHN1YnRyYWN0aW9uIGZvcmNlcyBpbmZpbml0aWVzIHRvIE5hTlxuXHRcdCFpc05hTiggb2JqIC0gcGFyc2VGbG9hdCggb2JqICkgKTtcbn07XG5cbmpRdWVyeS50cmltID0gZnVuY3Rpb24oIHRleHQgKSB7XG5cdHJldHVybiB0ZXh0ID09IG51bGwgP1xuXHRcdFwiXCIgOlxuXHRcdCggdGV4dCArIFwiXCIgKS5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICk7XG59O1xuXG5cblxuLy8gUmVnaXN0ZXIgYXMgYSBuYW1lZCBBTUQgbW9kdWxlLCBzaW5jZSBqUXVlcnkgY2FuIGJlIGNvbmNhdGVuYXRlZCB3aXRoIG90aGVyXG4vLyBmaWxlcyB0aGF0IG1heSB1c2UgZGVmaW5lLCBidXQgbm90IHZpYSBhIHByb3BlciBjb25jYXRlbmF0aW9uIHNjcmlwdCB0aGF0XG4vLyB1bmRlcnN0YW5kcyBhbm9ueW1vdXMgQU1EIG1vZHVsZXMuIEEgbmFtZWQgQU1EIGlzIHNhZmVzdCBhbmQgbW9zdCByb2J1c3Rcbi8vIHdheSB0byByZWdpc3Rlci4gTG93ZXJjYXNlIGpxdWVyeSBpcyB1c2VkIGJlY2F1c2UgQU1EIG1vZHVsZSBuYW1lcyBhcmVcbi8vIGRlcml2ZWQgZnJvbSBmaWxlIG5hbWVzLCBhbmQgalF1ZXJ5IGlzIG5vcm1hbGx5IGRlbGl2ZXJlZCBpbiBhIGxvd2VyY2FzZVxuLy8gZmlsZSBuYW1lLiBEbyB0aGlzIGFmdGVyIGNyZWF0aW5nIHRoZSBnbG9iYWwgc28gdGhhdCBpZiBhbiBBTUQgbW9kdWxlIHdhbnRzXG4vLyB0byBjYWxsIG5vQ29uZmxpY3QgdG8gaGlkZSB0aGlzIHZlcnNpb24gb2YgalF1ZXJ5LCBpdCB3aWxsIHdvcmsuXG5cbi8vIE5vdGUgdGhhdCBmb3IgbWF4aW11bSBwb3J0YWJpbGl0eSwgbGlicmFyaWVzIHRoYXQgYXJlIG5vdCBqUXVlcnkgc2hvdWxkXG4vLyBkZWNsYXJlIHRoZW1zZWx2ZXMgYXMgYW5vbnltb3VzIG1vZHVsZXMsIGFuZCBhdm9pZCBzZXR0aW5nIGEgZ2xvYmFsIGlmIGFuXG4vLyBBTUQgbG9hZGVyIGlzIHByZXNlbnQuIGpRdWVyeSBpcyBhIHNwZWNpYWwgY2FzZS4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2pyYnVya2UvcmVxdWlyZWpzL3dpa2kvVXBkYXRpbmctZXhpc3RpbmctbGlicmFyaWVzI3dpa2ktYW5vblxuXG5pZiAoIHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kICkge1xuXHRkZWZpbmUoIFwianF1ZXJ5XCIsIFtdLCBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5O1xuXHR9ICk7XG59XG5cblxuXG5cbnZhclxuXG5cdC8vIE1hcCBvdmVyIGpRdWVyeSBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfalF1ZXJ5ID0gd2luZG93LmpRdWVyeSxcblxuXHQvLyBNYXAgb3ZlciB0aGUgJCBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfJCA9IHdpbmRvdy4kO1xuXG5qUXVlcnkubm9Db25mbGljdCA9IGZ1bmN0aW9uKCBkZWVwICkge1xuXHRpZiAoIHdpbmRvdy4kID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LiQgPSBfJDtcblx0fVxuXG5cdGlmICggZGVlcCAmJiB3aW5kb3cualF1ZXJ5ID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LmpRdWVyeSA9IF9qUXVlcnk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5O1xufTtcblxuLy8gRXhwb3NlIGpRdWVyeSBhbmQgJCBpZGVudGlmaWVycywgZXZlbiBpbiBBTURcbi8vICh0cmFjLTcxMDIjY29tbWVudDoxMCwgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvcHVsbC81NTcpXG4vLyBhbmQgQ29tbW9uSlMgZm9yIGJyb3dzZXIgZW11bGF0b3JzICh0cmFjLTEzNTY2KVxuaWYgKCB0eXBlb2Ygbm9HbG9iYWwgPT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdHdpbmRvdy5qUXVlcnkgPSB3aW5kb3cuJCA9IGpRdWVyeTtcbn1cblxuXG5cblxucmV0dXJuIGpRdWVyeTtcbn0gKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8gcnVudGltZSBoZWxwZXIgZm9yIHNldHRpbmcgcHJvcGVydGllcyBvbiBjb21wb25lbnRzXG4vLyBpbiBhIHRyZWUtc2hha2FibGUgd2F5XG5leHBvcnRzLmRlZmF1bHQgPSAoc2ZjLCBwcm9wcykgPT4ge1xuICAgIGNvbnN0IHRhcmdldCA9IHNmYy5fX3ZjY09wdHMgfHwgc2ZjO1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsXSBvZiBwcm9wcykge1xuICAgICAgICB0YXJnZXRba2V5XSA9IHZhbDtcbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbn07XG4iLCJpbXBvcnQgeyByZW5kZXIgfSBmcm9tIFwiLi9DYXRhbG9nLXByb2R1Y3RzLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD03ZjA3NjZmYlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL0NhdGFsb2ctcHJvZHVjdHMudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCJcbmV4cG9ydCAqIGZyb20gXCIuL0NhdGFsb2ctcHJvZHVjdHMudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCJcblxuaW1wb3J0IFwiLi9DYXRhbG9nLXByb2R1Y3RzLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTdmMDc2NmZiJmxhbmc9c2Nzc1wiXG5cbmltcG9ydCBleHBvcnRDb21wb25lbnQgZnJvbSBcIkM6XFxcXFVzZXJzXFxcXFVzZXJcXFxcRGVza3RvcFxcXFx3ZWJwYWNrLXByb2plY3RcXFxcd2VicGFjay1wcm9qZWN0XFxcXG5vZGVfbW9kdWxlc1xcXFx2dWUtbG9hZGVyXFxcXGRpc3RcXFxcZXhwb3J0SGVscGVyLmpzXCJcbmNvbnN0IF9fZXhwb3J0c19fID0gLyojX19QVVJFX18qL2V4cG9ydENvbXBvbmVudChzY3JpcHQsIFtbJ3JlbmRlcicscmVuZGVyXSxbJ19fZmlsZScsXCJzcmMvanMtbW9kdWxlcy9DYXRhbG9nLXByb2R1Y3RzLnZ1ZVwiXV0pXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICBfX2V4cG9ydHNfXy5fX2htcklkID0gXCI3ZjA3NjZmYlwiXG4gIGNvbnN0IGFwaSA9IF9fVlVFX0hNUl9SVU5USU1FX19cbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAoIWFwaS5jcmVhdGVSZWNvcmQoJzdmMDc2NmZiJywgX19leHBvcnRzX18pKSB7XG4gICAgYXBpLnJlbG9hZCgnN2YwNzY2ZmInLCBfX2V4cG9ydHNfXylcbiAgfVxuICBcbiAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL0NhdGFsb2ctcHJvZHVjdHMudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTdmMDc2NmZiXCIsICgpID0+IHtcbiAgICBhcGkucmVyZW5kZXIoJzdmMDc2NmZiJywgcmVuZGVyKVxuICB9KVxuXG59XG5cblxuZXhwb3J0IGRlZmF1bHQgX19leHBvcnRzX18iLCJpbXBvcnQgeyByZW5kZXIgfSBmcm9tIFwiLi9Qcm9kdWN0LWNvdW50LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD1kYzRhN2U0NFwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL1Byb2R1Y3QtY291bnQudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCJcbmV4cG9ydCAqIGZyb20gXCIuL1Byb2R1Y3QtY291bnQudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCJcblxuaW1wb3J0IFwiLi9Qcm9kdWN0LWNvdW50LnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPWRjNGE3ZTQ0Jmxhbmc9c2Nzc1wiXG5cbmltcG9ydCBleHBvcnRDb21wb25lbnQgZnJvbSBcIkM6XFxcXFVzZXJzXFxcXFVzZXJcXFxcRGVza3RvcFxcXFx3ZWJwYWNrLXByb2plY3RcXFxcd2VicGFjay1wcm9qZWN0XFxcXG5vZGVfbW9kdWxlc1xcXFx2dWUtbG9hZGVyXFxcXGRpc3RcXFxcZXhwb3J0SGVscGVyLmpzXCJcbmNvbnN0IF9fZXhwb3J0c19fID0gLyojX19QVVJFX18qL2V4cG9ydENvbXBvbmVudChzY3JpcHQsIFtbJ3JlbmRlcicscmVuZGVyXSxbJ19fZmlsZScsXCJzcmMvanMtbW9kdWxlcy9Qcm9kdWN0LWNvdW50LnZ1ZVwiXV0pXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICBfX2V4cG9ydHNfXy5fX2htcklkID0gXCJkYzRhN2U0NFwiXG4gIGNvbnN0IGFwaSA9IF9fVlVFX0hNUl9SVU5USU1FX19cbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAoIWFwaS5jcmVhdGVSZWNvcmQoJ2RjNGE3ZTQ0JywgX19leHBvcnRzX18pKSB7XG4gICAgYXBpLnJlbG9hZCgnZGM0YTdlNDQnLCBfX2V4cG9ydHNfXylcbiAgfVxuICBcbiAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL1Byb2R1Y3QtY291bnQudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWRjNGE3ZTQ0XCIsICgpID0+IHtcbiAgICBhcGkucmVyZW5kZXIoJ2RjNGE3ZTQ0JywgcmVuZGVyKVxuICB9KVxuXG59XG5cblxuZXhwb3J0IGRlZmF1bHQgX19leHBvcnRzX18iLCJpbXBvcnQgeyByZW5kZXIgfSBmcm9tIFwiLi9Qcm9kdWN0LWRldGFpbHMudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTRkYzM4MjVlXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vUHJvZHVjdC1kZXRhaWxzLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qc1wiXG5leHBvcnQgKiBmcm9tIFwiLi9Qcm9kdWN0LWRldGFpbHMudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCJcblxuaW1wb3J0IFwiLi9Qcm9kdWN0LWRldGFpbHMudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9NGRjMzgyNWUmbGFuZz1zY3NzXCJcblxuaW1wb3J0IGV4cG9ydENvbXBvbmVudCBmcm9tIFwiQzpcXFxcVXNlcnNcXFxcVXNlclxcXFxEZXNrdG9wXFxcXHdlYnBhY2stcHJvamVjdFxcXFx3ZWJwYWNrLXByb2plY3RcXFxcbm9kZV9tb2R1bGVzXFxcXHZ1ZS1sb2FkZXJcXFxcZGlzdFxcXFxleHBvcnRIZWxwZXIuanNcIlxuY29uc3QgX19leHBvcnRzX18gPSAvKiNfX1BVUkVfXyovZXhwb3J0Q29tcG9uZW50KHNjcmlwdCwgW1sncmVuZGVyJyxyZW5kZXJdLFsnX19maWxlJyxcInNyYy9qcy1tb2R1bGVzL1Byb2R1Y3QtZGV0YWlscy52dWVcIl1dKVxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgX19leHBvcnRzX18uX19obXJJZCA9IFwiNGRjMzgyNWVcIlxuICBjb25zdCBhcGkgPSBfX1ZVRV9ITVJfUlVOVElNRV9fXG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKCFhcGkuY3JlYXRlUmVjb3JkKCc0ZGMzODI1ZScsIF9fZXhwb3J0c19fKSkge1xuICAgIGFwaS5yZWxvYWQoJzRkYzM4MjVlJywgX19leHBvcnRzX18pXG4gIH1cbiAgXG4gIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9Qcm9kdWN0LWRldGFpbHMudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTRkYzM4MjVlXCIsICgpID0+IHtcbiAgICBhcGkucmVyZW5kZXIoJzRkYzM4MjVlJywgcmVuZGVyKVxuICB9KVxuXG59XG5cblxuZXhwb3J0IGRlZmF1bHQgX19leHBvcnRzX18iLCIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/P3J1bGVTZXRbMV0ucnVsZXNbOV0udXNlWzBdIS4vQ2F0YWxvZy1wcm9kdWN0cy52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD03ZjA3NjZmYiZsYW5nPXNjc3NcIik7XG5pZihjb250ZW50Ll9fZXNNb2R1bGUpIGNvbnRlbnQgPSBjb250ZW50LmRlZmF1bHQ7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIGFkZCA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlc0NsaWVudC5qc1wiKS5kZWZhdWx0XG52YXIgdXBkYXRlID0gYWRkKFwiMzZjODdkNThcIiwgY29udGVudCwgZmFsc2UsIHt9KTtcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcbmlmKG1vZHVsZS5ob3QpIHtcbiAvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuIGlmKCFjb250ZW50LmxvY2Fscykge1xuICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3Qvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2luZGV4LmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzldLnVzZVswXSEuL0NhdGFsb2ctcHJvZHVjdHMudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9N2YwNzY2ZmImbGFuZz1zY3NzXCIsIGZ1bmN0aW9uKCkge1xuICAgICB2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3Qvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2luZGV4LmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzldLnVzZVswXSEuL0NhdGFsb2ctcHJvZHVjdHMudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9N2YwNzY2ZmImbGFuZz1zY3NzXCIpO1xuICAgICBpZihuZXdDb250ZW50Ll9fZXNNb2R1bGUpIG5ld0NvbnRlbnQgPSBuZXdDb250ZW50LmRlZmF1bHQ7XG4gICAgIGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuICAgICB1cGRhdGUobmV3Q29udGVudCk7XG4gICB9KTtcbiB9XG4gLy8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9pbmRleC5qcz8/cnVsZVNldFsxXS5ydWxlc1s5XS51c2VbMF0hLi9Qcm9kdWN0LWNvdW50LnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPWRjNGE3ZTQ0Jmxhbmc9c2Nzc1wiKTtcbmlmKGNvbnRlbnQuX19lc01vZHVsZSkgY29udGVudCA9IGNvbnRlbnQuZGVmYXVsdDtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgYWRkID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpLmRlZmF1bHRcbnZhciB1cGRhdGUgPSBhZGQoXCIxNmFiYjcxYVwiLCBjb250ZW50LCBmYWxzZSwge30pO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuIC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG4gaWYoIWNvbnRlbnQubG9jYWxzKSB7XG4gICBtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/P3J1bGVTZXRbMV0ucnVsZXNbOV0udXNlWzBdIS4vUHJvZHVjdC1jb3VudC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD1kYzRhN2U0NCZsYW5nPXNjc3NcIiwgZnVuY3Rpb24oKSB7XG4gICAgIHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/P3J1bGVTZXRbMV0ucnVsZXNbOV0udXNlWzBdIS4vUHJvZHVjdC1jb3VudC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD1kYzRhN2U0NCZsYW5nPXNjc3NcIik7XG4gICAgIGlmKG5ld0NvbnRlbnQuX19lc01vZHVsZSkgbmV3Q29udGVudCA9IG5ld0NvbnRlbnQuZGVmYXVsdDtcbiAgICAgaWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG4gICAgIHVwZGF0ZShuZXdDb250ZW50KTtcbiAgIH0pO1xuIH1cbiAvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG4gbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3Qvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2luZGV4LmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzldLnVzZVswXSEuL1Byb2R1Y3QtZGV0YWlscy52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD00ZGMzODI1ZSZsYW5nPXNjc3NcIik7XG5pZihjb250ZW50Ll9fZXNNb2R1bGUpIGNvbnRlbnQgPSBjb250ZW50LmRlZmF1bHQ7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIGFkZCA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlc0NsaWVudC5qc1wiKS5kZWZhdWx0XG52YXIgdXBkYXRlID0gYWRkKFwiNTZlZDM4NjBcIiwgY29udGVudCwgZmFsc2UsIHt9KTtcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcbmlmKG1vZHVsZS5ob3QpIHtcbiAvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuIGlmKCFjb250ZW50LmxvY2Fscykge1xuICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3Qvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2luZGV4LmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzldLnVzZVswXSEuL1Byb2R1Y3QtZGV0YWlscy52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD00ZGMzODI1ZSZsYW5nPXNjc3NcIiwgZnVuY3Rpb24oKSB7XG4gICAgIHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/P3J1bGVTZXRbMV0ucnVsZXNbOV0udXNlWzBdIS4vUHJvZHVjdC1kZXRhaWxzLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTRkYzM4MjVlJmxhbmc9c2Nzc1wiKTtcbiAgICAgaWYobmV3Q29udGVudC5fX2VzTW9kdWxlKSBuZXdDb250ZW50ID0gbmV3Q29udGVudC5kZWZhdWx0O1xuICAgICBpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcbiAgICAgdXBkYXRlKG5ld0NvbnRlbnQpO1xuICAgfSk7XG4gfVxuIC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3NcbiBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCIvKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4gIE1vZGlmaWVkIGJ5IEV2YW4gWW91IEB5eXg5OTA4MDNcbiovXG5cbmltcG9ydCBsaXN0VG9TdHlsZXMgZnJvbSAnLi9saXN0VG9TdHlsZXMnXG5cbnZhciBoYXNEb2N1bWVudCA9IHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCdcblxuaWYgKHR5cGVvZiBERUJVRyAhPT0gJ3VuZGVmaW5lZCcgJiYgREVCVUcpIHtcbiAgaWYgKCFoYXNEb2N1bWVudCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAndnVlLXN0eWxlLWxvYWRlciBjYW5ub3QgYmUgdXNlZCBpbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50LiAnICtcbiAgICBcIlVzZSB7IHRhcmdldDogJ25vZGUnIH0gaW4geW91ciBXZWJwYWNrIGNvbmZpZyB0byBpbmRpY2F0ZSBhIHNlcnZlci1yZW5kZXJpbmcgZW52aXJvbm1lbnQuXCJcbiAgKSB9XG59XG5cbi8qXG50eXBlIFN0eWxlT2JqZWN0ID0ge1xuICBpZDogbnVtYmVyO1xuICBwYXJ0czogQXJyYXk8U3R5bGVPYmplY3RQYXJ0PlxufVxuXG50eXBlIFN0eWxlT2JqZWN0UGFydCA9IHtcbiAgY3NzOiBzdHJpbmc7XG4gIG1lZGlhOiBzdHJpbmc7XG4gIHNvdXJjZU1hcDogP3N0cmluZ1xufVxuKi9cblxudmFyIHN0eWxlc0luRG9tID0gey8qXG4gIFtpZDogbnVtYmVyXToge1xuICAgIGlkOiBudW1iZXIsXG4gICAgcmVmczogbnVtYmVyLFxuICAgIHBhcnRzOiBBcnJheTwob2JqPzogU3R5bGVPYmplY3RQYXJ0KSA9PiB2b2lkPlxuICB9XG4qL31cblxudmFyIGhlYWQgPSBoYXNEb2N1bWVudCAmJiAoZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdKVxudmFyIHNpbmdsZXRvbkVsZW1lbnQgPSBudWxsXG52YXIgc2luZ2xldG9uQ291bnRlciA9IDBcbnZhciBpc1Byb2R1Y3Rpb24gPSBmYWxzZVxudmFyIG5vb3AgPSBmdW5jdGlvbiAoKSB7fVxudmFyIG9wdGlvbnMgPSBudWxsXG52YXIgc3NySWRLZXkgPSAnZGF0YS12dWUtc3NyLWlkJ1xuXG4vLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cbi8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2VcbnZhciBpc09sZElFID0gdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgL21zaWUgWzYtOV1cXGIvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpKVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGRTdHlsZXNDbGllbnQgKHBhcmVudElkLCBsaXN0LCBfaXNQcm9kdWN0aW9uLCBfb3B0aW9ucykge1xuICBpc1Byb2R1Y3Rpb24gPSBfaXNQcm9kdWN0aW9uXG5cbiAgb3B0aW9ucyA9IF9vcHRpb25zIHx8IHt9XG5cbiAgdmFyIHN0eWxlcyA9IGxpc3RUb1N0eWxlcyhwYXJlbnRJZCwgbGlzdClcbiAgYWRkU3R5bGVzVG9Eb20oc3R5bGVzKVxuXG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUgKG5ld0xpc3QpIHtcbiAgICB2YXIgbWF5UmVtb3ZlID0gW11cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGl0ZW0gPSBzdHlsZXNbaV1cbiAgICAgIHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdXG4gICAgICBkb21TdHlsZS5yZWZzLS1cbiAgICAgIG1heVJlbW92ZS5wdXNoKGRvbVN0eWxlKVxuICAgIH1cbiAgICBpZiAobmV3TGlzdCkge1xuICAgICAgc3R5bGVzID0gbGlzdFRvU3R5bGVzKHBhcmVudElkLCBuZXdMaXN0KVxuICAgICAgYWRkU3R5bGVzVG9Eb20oc3R5bGVzKVxuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZXMgPSBbXVxuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1heVJlbW92ZS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRvbVN0eWxlID0gbWF5UmVtb3ZlW2ldXG4gICAgICBpZiAoZG9tU3R5bGUucmVmcyA9PT0gMCkge1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgZG9tU3R5bGUucGFydHNbal0oKVxuICAgICAgICB9XG4gICAgICAgIGRlbGV0ZSBzdHlsZXNJbkRvbVtkb21TdHlsZS5pZF1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYWRkU3R5bGVzVG9Eb20gKHN0eWxlcyAvKiBBcnJheTxTdHlsZU9iamVjdD4gKi8pIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IHN0eWxlc1tpXVxuICAgIHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdXG4gICAgaWYgKGRvbVN0eWxlKSB7XG4gICAgICBkb21TdHlsZS5yZWZzKytcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgZG9tU3R5bGUucGFydHNbal0oaXRlbS5wYXJ0c1tqXSlcbiAgICAgIH1cbiAgICAgIGZvciAoOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICBkb21TdHlsZS5wYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0pKVxuICAgICAgfVxuICAgICAgaWYgKGRvbVN0eWxlLnBhcnRzLmxlbmd0aCA+IGl0ZW0ucGFydHMubGVuZ3RoKSB7XG4gICAgICAgIGRvbVN0eWxlLnBhcnRzLmxlbmd0aCA9IGl0ZW0ucGFydHMubGVuZ3RoXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBwYXJ0cyA9IFtdXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgcGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdKSlcbiAgICAgIH1cbiAgICAgIHN0eWxlc0luRG9tW2l0ZW0uaWRdID0geyBpZDogaXRlbS5pZCwgcmVmczogMSwgcGFydHM6IHBhcnRzIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlU3R5bGVFbGVtZW50ICgpIHtcbiAgdmFyIHN0eWxlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJylcbiAgc3R5bGVFbGVtZW50LnR5cGUgPSAndGV4dC9jc3MnXG4gIGhlYWQuYXBwZW5kQ2hpbGQoc3R5bGVFbGVtZW50KVxuICByZXR1cm4gc3R5bGVFbGVtZW50XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlIChvYmogLyogU3R5bGVPYmplY3RQYXJ0ICovKSB7XG4gIHZhciB1cGRhdGUsIHJlbW92ZVxuICB2YXIgc3R5bGVFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcignc3R5bGVbJyArIHNzcklkS2V5ICsgJ349XCInICsgb2JqLmlkICsgJ1wiXScpXG5cbiAgaWYgKHN0eWxlRWxlbWVudCkge1xuICAgIGlmIChpc1Byb2R1Y3Rpb24pIHtcbiAgICAgIC8vIGhhcyBTU1Igc3R5bGVzIGFuZCBpbiBwcm9kdWN0aW9uIG1vZGUuXG4gICAgICAvLyBzaW1wbHkgZG8gbm90aGluZy5cbiAgICAgIHJldHVybiBub29wXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGhhcyBTU1Igc3R5bGVzIGJ1dCBpbiBkZXYgbW9kZS5cbiAgICAgIC8vIGZvciBzb21lIHJlYXNvbiBDaHJvbWUgY2FuJ3QgaGFuZGxlIHNvdXJjZSBtYXAgaW4gc2VydmVyLXJlbmRlcmVkXG4gICAgICAvLyBzdHlsZSB0YWdzIC0gc291cmNlIG1hcHMgaW4gPHN0eWxlPiBvbmx5IHdvcmtzIGlmIHRoZSBzdHlsZSB0YWcgaXNcbiAgICAgIC8vIGNyZWF0ZWQgYW5kIGluc2VydGVkIGR5bmFtaWNhbGx5LiBTbyB3ZSByZW1vdmUgdGhlIHNlcnZlciByZW5kZXJlZFxuICAgICAgLy8gc3R5bGVzIGFuZCBpbmplY3QgbmV3IG9uZXMuXG4gICAgICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpXG4gICAgfVxuICB9XG5cbiAgaWYgKGlzT2xkSUUpIHtcbiAgICAvLyB1c2Ugc2luZ2xldG9uIG1vZGUgZm9yIElFOS5cbiAgICB2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrK1xuICAgIHN0eWxlRWxlbWVudCA9IHNpbmdsZXRvbkVsZW1lbnQgfHwgKHNpbmdsZXRvbkVsZW1lbnQgPSBjcmVhdGVTdHlsZUVsZW1lbnQoKSlcbiAgICB1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGVFbGVtZW50LCBzdHlsZUluZGV4LCBmYWxzZSlcbiAgICByZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGVFbGVtZW50LCBzdHlsZUluZGV4LCB0cnVlKVxuICB9IGVsc2Uge1xuICAgIC8vIHVzZSBtdWx0aS1zdHlsZS10YWcgbW9kZSBpbiBhbGwgb3RoZXIgY2FzZXNcbiAgICBzdHlsZUVsZW1lbnQgPSBjcmVhdGVTdHlsZUVsZW1lbnQoKVxuICAgIHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZUVsZW1lbnQpXG4gICAgcmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KVxuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZShvYmopXG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChuZXdPYmogLyogU3R5bGVPYmplY3RQYXJ0ICovKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiZcbiAgICAgICAgICBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJlxuICAgICAgICAgIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXApIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICB1cGRhdGUob2JqID0gbmV3T2JqKVxuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmUoKVxuICAgIH1cbiAgfVxufVxuXG52YXIgcmVwbGFjZVRleHQgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgdGV4dFN0b3JlID0gW11cblxuICByZXR1cm4gZnVuY3Rpb24gKGluZGV4LCByZXBsYWNlbWVudCkge1xuICAgIHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudFxuICAgIHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpXG4gIH1cbn0pKClcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyAoc3R5bGVFbGVtZW50LCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcbiAgdmFyIGNzcyA9IHJlbW92ZSA/ICcnIDogb2JqLmNzc1xuXG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKVxuICB9IGVsc2Uge1xuICAgIHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKVxuICAgIHZhciBjaGlsZE5vZGVzID0gc3R5bGVFbGVtZW50LmNoaWxkTm9kZXNcbiAgICBpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSlcbiAgICBpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pXG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChjc3NOb2RlKVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseVRvVGFnIChzdHlsZUVsZW1lbnQsIG9iaikge1xuICB2YXIgY3NzID0gb2JqLmNzc1xuICB2YXIgbWVkaWEgPSBvYmoubWVkaWFcbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXBcblxuICBpZiAobWVkaWEpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKCdtZWRpYScsIG1lZGlhKVxuICB9XG4gIGlmIChvcHRpb25zLnNzcklkKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShzc3JJZEtleSwgb2JqLmlkKVxuICB9XG5cbiAgaWYgKHNvdXJjZU1hcCkge1xuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLmNocm9tZS5jb20vZGV2dG9vbHMvZG9jcy9qYXZhc2NyaXB0LWRlYnVnZ2luZ1xuICAgIC8vIHRoaXMgbWFrZXMgc291cmNlIG1hcHMgaW5zaWRlIHN0eWxlIHRhZ3Mgd29yayBwcm9wZXJseSBpbiBDaHJvbWVcbiAgICBjc3MgKz0gJ1xcbi8qIyBzb3VyY2VVUkw9JyArIHNvdXJjZU1hcC5zb3VyY2VzWzBdICsgJyAqLydcbiAgICAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yNjYwMzg3NVxuICAgIGNzcyArPSAnXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCwnICsgYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSArICcgKi8nXG4gIH1cblxuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzXG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpXG4gICAgfVxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKVxuICB9XG59XG4iLCIvKipcbiAqIFRyYW5zbGF0ZXMgdGhlIGxpc3QgZm9ybWF0IHByb2R1Y2VkIGJ5IGNzcy1sb2FkZXIgaW50byBzb21ldGhpbmdcbiAqIGVhc2llciB0byBtYW5pcHVsYXRlLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsaXN0VG9TdHlsZXMgKHBhcmVudElkLCBsaXN0KSB7XG4gIHZhciBzdHlsZXMgPSBbXVxuICB2YXIgbmV3U3R5bGVzID0ge31cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldXG4gICAgdmFyIGlkID0gaXRlbVswXVxuICAgIHZhciBjc3MgPSBpdGVtWzFdXG4gICAgdmFyIG1lZGlhID0gaXRlbVsyXVxuICAgIHZhciBzb3VyY2VNYXAgPSBpdGVtWzNdXG4gICAgdmFyIHBhcnQgPSB7XG4gICAgICBpZDogcGFyZW50SWQgKyAnOicgKyBpLFxuICAgICAgY3NzOiBjc3MsXG4gICAgICBtZWRpYTogbWVkaWEsXG4gICAgICBzb3VyY2VNYXA6IHNvdXJjZU1hcFxuICAgIH1cbiAgICBpZiAoIW5ld1N0eWxlc1tpZF0pIHtcbiAgICAgIHN0eWxlcy5wdXNoKG5ld1N0eWxlc1tpZF0gPSB7IGlkOiBpZCwgcGFydHM6IFtwYXJ0XSB9KVxuICAgIH0gZWxzZSB7XG4gICAgICBuZXdTdHlsZXNbaWRdLnBhcnRzLnB1c2gocGFydClcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN0eWxlc1xufVxuIiwiaW1wb3J0IHsgaW5pdEN1c3RvbUZvcm1hdHRlciwgd2FybiB9IGZyb20gJ0B2dWUvcnVudGltZS1kb20nO1xuZXhwb3J0ICogZnJvbSAnQHZ1ZS9ydW50aW1lLWRvbSc7XG5cbmZ1bmN0aW9uIGluaXREZXYoKSB7XG4gIHtcbiAgICBpbml0Q3VzdG9tRm9ybWF0dGVyKCk7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBpbml0RGV2KCk7XG59XG5jb25zdCBjb21waWxlID0gKCkgPT4ge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgd2FybihcbiAgICAgIGBSdW50aW1lIGNvbXBpbGF0aW9uIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBidWlsZCBvZiBWdWUuYCArIChgIENvbmZpZ3VyZSB5b3VyIGJ1bmRsZXIgdG8gYWxpYXMgXCJ2dWVcIiB0byBcInZ1ZS9kaXN0L3Z1ZS5lc20tYnVuZGxlci5qc1wiLmAgKVxuICAgICAgLyogc2hvdWxkIG5vdCBoYXBwZW4gKi9cbiAgICApO1xuICB9XG59O1xuXG5leHBvcnQgeyBjb21waWxlIH07XG4iLCIvKiFcbiAqIHBpbmlhIHYyLjEuNlxuICogKGMpIDIwMjMgRWR1YXJkbyBTYW4gTWFydGluIE1vcm90ZVxuICogQGxpY2Vuc2UgTUlUXG4gKi9cbmltcG9ydCB7IGhhc0luamVjdGlvbkNvbnRleHQsIGluamVjdCwgdG9SYXcsIHdhdGNoLCB1bnJlZiwgbWFya1JhdywgZWZmZWN0U2NvcGUsIHJlZiwgaXNWdWUyLCBpc1JlZiwgaXNSZWFjdGl2ZSwgc2V0LCBnZXRDdXJyZW50U2NvcGUsIG9uU2NvcGVEaXNwb3NlLCBnZXRDdXJyZW50SW5zdGFuY2UsIHJlYWN0aXZlLCB0b1JlZiwgZGVsLCBuZXh0VGljaywgY29tcHV0ZWQsIHRvUmVmcyB9IGZyb20gJ3Z1ZS1kZW1pJztcbmltcG9ydCB7IHNldHVwRGV2dG9vbHNQbHVnaW4gfSBmcm9tICdAdnVlL2RldnRvb2xzLWFwaSc7XG5cbi8qKlxuICogc2V0QWN0aXZlUGluaWEgbXVzdCBiZSBjYWxsZWQgdG8gaGFuZGxlIFNTUiBhdCB0aGUgdG9wIG9mIGZ1bmN0aW9ucyBsaWtlXG4gKiBgZmV0Y2hgLCBgc2V0dXBgLCBgc2VydmVyUHJlZmV0Y2hgIGFuZCBvdGhlcnNcbiAqL1xubGV0IGFjdGl2ZVBpbmlhO1xuLyoqXG4gKiBTZXRzIG9yIHVuc2V0cyB0aGUgYWN0aXZlIHBpbmlhLiBVc2VkIGluIFNTUiBhbmQgaW50ZXJuYWxseSB3aGVuIGNhbGxpbmdcbiAqIGFjdGlvbnMgYW5kIGdldHRlcnNcbiAqXG4gKiBAcGFyYW0gcGluaWEgLSBQaW5pYSBpbnN0YW5jZVxuICovXG4vLyBAdHMtZXhwZWN0LWVycm9yOiBjYW5ub3QgY29uc3RyYWluIHRoZSB0eXBlIG9mIHRoZSByZXR1cm5cbmNvbnN0IHNldEFjdGl2ZVBpbmlhID0gKHBpbmlhKSA9PiAoYWN0aXZlUGluaWEgPSBwaW5pYSk7XG4vKipcbiAqIEdldCB0aGUgY3VycmVudGx5IGFjdGl2ZSBwaW5pYSBpZiB0aGVyZSBpcyBhbnkuXG4gKi9cbmNvbnN0IGdldEFjdGl2ZVBpbmlhID0gKCkgPT4gKGhhc0luamVjdGlvbkNvbnRleHQoKSAmJiBpbmplY3QocGluaWFTeW1ib2wpKSB8fCBhY3RpdmVQaW5pYTtcbmNvbnN0IHBpbmlhU3ltYm9sID0gKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/IFN5bWJvbCgncGluaWEnKSA6IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIFN5bWJvbCgpKTtcblxuZnVuY3Rpb24gaXNQbGFpbk9iamVjdChcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5vKSB7XG4gICAgcmV0dXJuIChvICYmXG4gICAgICAgIHR5cGVvZiBvID09PSAnb2JqZWN0JyAmJlxuICAgICAgICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykgPT09ICdbb2JqZWN0IE9iamVjdF0nICYmXG4gICAgICAgIHR5cGVvZiBvLnRvSlNPTiAhPT0gJ2Z1bmN0aW9uJyk7XG59XG4vLyB0eXBlIERlZXBSZWFkb25seTxUPiA9IHsgcmVhZG9ubHkgW1AgaW4ga2V5b2YgVF06IERlZXBSZWFkb25seTxUW1BdPiB9XG4vLyBUT0RPOiBjYW4gd2UgY2hhbmdlIHRoZXNlIHRvIG51bWJlcnM/XG4vKipcbiAqIFBvc3NpYmxlIHR5cGVzIGZvciBTdWJzY3JpcHRpb25DYWxsYmFja1xuICovXG52YXIgTXV0YXRpb25UeXBlO1xuKGZ1bmN0aW9uIChNdXRhdGlvblR5cGUpIHtcbiAgICAvKipcbiAgICAgKiBEaXJlY3QgbXV0YXRpb24gb2YgdGhlIHN0YXRlOlxuICAgICAqXG4gICAgICogLSBgc3RvcmUubmFtZSA9ICduZXcgbmFtZSdgXG4gICAgICogLSBgc3RvcmUuJHN0YXRlLm5hbWUgPSAnbmV3IG5hbWUnYFxuICAgICAqIC0gYHN0b3JlLmxpc3QucHVzaCgnbmV3IGl0ZW0nKWBcbiAgICAgKi9cbiAgICBNdXRhdGlvblR5cGVbXCJkaXJlY3RcIl0gPSBcImRpcmVjdFwiO1xuICAgIC8qKlxuICAgICAqIE11dGF0ZWQgdGhlIHN0YXRlIHdpdGggYCRwYXRjaGAgYW5kIGFuIG9iamVjdFxuICAgICAqXG4gICAgICogLSBgc3RvcmUuJHBhdGNoKHsgbmFtZTogJ25ld05hbWUnIH0pYFxuICAgICAqL1xuICAgIE11dGF0aW9uVHlwZVtcInBhdGNoT2JqZWN0XCJdID0gXCJwYXRjaCBvYmplY3RcIjtcbiAgICAvKipcbiAgICAgKiBNdXRhdGVkIHRoZSBzdGF0ZSB3aXRoIGAkcGF0Y2hgIGFuZCBhIGZ1bmN0aW9uXG4gICAgICpcbiAgICAgKiAtIGBzdG9yZS4kcGF0Y2goc3RhdGUgPT4gc3RhdGUubmFtZSA9ICduZXdOYW1lJylgXG4gICAgICovXG4gICAgTXV0YXRpb25UeXBlW1wicGF0Y2hGdW5jdGlvblwiXSA9IFwicGF0Y2ggZnVuY3Rpb25cIjtcbiAgICAvLyBtYXliZSByZXNldD8gZm9yICRzdGF0ZSA9IHt9IGFuZCAkcmVzZXRcbn0pKE11dGF0aW9uVHlwZSB8fCAoTXV0YXRpb25UeXBlID0ge30pKTtcblxuY29uc3QgSVNfQ0xJRU5UID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCc7XG4vKipcbiAqIFNob3VsZCB3ZSBhZGQgdGhlIGRldnRvb2xzIHBsdWdpbnMuXG4gKiAtIG9ubHkgaWYgZGV2IG1vZGUgb3IgZm9yY2VkIHRocm91Z2ggdGhlIHByb2QgZGV2dG9vbHMgZmxhZ1xuICogLSBub3QgaW4gdGVzdFxuICogLSBvbmx5IGlmIHdpbmRvdyBleGlzdHMgKGNvdWxkIGNoYW5nZSBpbiB0aGUgZnV0dXJlKVxuICovXG5jb25zdCBVU0VfREVWVE9PTFMgPSAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHx8ICh0eXBlb2YgX19WVUVfUFJPRF9ERVZUT09MU19fICE9PSAndW5kZWZpbmVkJyAmJiBfX1ZVRV9QUk9EX0RFVlRPT0xTX18pKSAmJiAhKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAndGVzdCcpICYmIElTX0NMSUVOVDtcblxuLypcbiAqIEZpbGVTYXZlci5qcyBBIHNhdmVBcygpIEZpbGVTYXZlciBpbXBsZW1lbnRhdGlvbi5cbiAqXG4gKiBPcmlnaW5hbGx5IGJ5IEVsaSBHcmV5LCBhZGFwdGVkIGFzIGFuIEVTTSBtb2R1bGUgYnkgRWR1YXJkbyBTYW4gTWFydGluXG4gKiBNb3JvdGUuXG4gKlxuICogTGljZW5zZSA6IE1JVFxuICovXG4vLyBUaGUgb25lIGFuZCBvbmx5IHdheSBvZiBnZXR0aW5nIGdsb2JhbCBzY29wZSBpbiBhbGwgZW52aXJvbm1lbnRzXG4vLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3EvMzI3NzE4Mi8xMDA4OTk5XG5jb25zdCBfZ2xvYmFsID0gLyojX19QVVJFX18qLyAoKCkgPT4gdHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcgJiYgd2luZG93LndpbmRvdyA9PT0gd2luZG93XG4gICAgPyB3aW5kb3dcbiAgICA6IHR5cGVvZiBzZWxmID09PSAnb2JqZWN0JyAmJiBzZWxmLnNlbGYgPT09IHNlbGZcbiAgICAgICAgPyBzZWxmXG4gICAgICAgIDogdHlwZW9mIGdsb2JhbCA9PT0gJ29iamVjdCcgJiYgZ2xvYmFsLmdsb2JhbCA9PT0gZ2xvYmFsXG4gICAgICAgICAgICA/IGdsb2JhbFxuICAgICAgICAgICAgOiB0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCdcbiAgICAgICAgICAgICAgICA/IGdsb2JhbFRoaXNcbiAgICAgICAgICAgICAgICA6IHsgSFRNTEVsZW1lbnQ6IG51bGwgfSkoKTtcbmZ1bmN0aW9uIGJvbShibG9iLCB7IGF1dG9Cb20gPSBmYWxzZSB9ID0ge30pIHtcbiAgICAvLyBwcmVwZW5kIEJPTSBmb3IgVVRGLTggWE1MIGFuZCB0ZXh0LyogdHlwZXMgKGluY2x1ZGluZyBIVE1MKVxuICAgIC8vIG5vdGU6IHlvdXIgYnJvd3NlciB3aWxsIGF1dG9tYXRpY2FsbHkgY29udmVydCBVVEYtMTYgVStGRUZGIHRvIEVGIEJCIEJGXG4gICAgaWYgKGF1dG9Cb20gJiZcbiAgICAgICAgL15cXHMqKD86dGV4dFxcL1xcUyp8YXBwbGljYXRpb25cXC94bWx8XFxTKlxcL1xcUypcXCt4bWwpXFxzKjsuKmNoYXJzZXRcXHMqPVxccyp1dGYtOC9pLnRlc3QoYmxvYi50eXBlKSkge1xuICAgICAgICByZXR1cm4gbmV3IEJsb2IoW1N0cmluZy5mcm9tQ2hhckNvZGUoMHhmZWZmKSwgYmxvYl0sIHsgdHlwZTogYmxvYi50eXBlIH0pO1xuICAgIH1cbiAgICByZXR1cm4gYmxvYjtcbn1cbmZ1bmN0aW9uIGRvd25sb2FkKHVybCwgbmFtZSwgb3B0cykge1xuICAgIGNvbnN0IHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgIHhoci5vcGVuKCdHRVQnLCB1cmwpO1xuICAgIHhoci5yZXNwb25zZVR5cGUgPSAnYmxvYic7XG4gICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2F2ZUFzKHhoci5yZXNwb25zZSwgbmFtZSwgb3B0cyk7XG4gICAgfTtcbiAgICB4aHIub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignY291bGQgbm90IGRvd25sb2FkIGZpbGUnKTtcbiAgICB9O1xuICAgIHhoci5zZW5kKCk7XG59XG5mdW5jdGlvbiBjb3JzRW5hYmxlZCh1cmwpIHtcbiAgICBjb25zdCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAvLyB1c2Ugc3luYyB0byBhdm9pZCBwb3B1cCBibG9ja2VyXG4gICAgeGhyLm9wZW4oJ0hFQUQnLCB1cmwsIGZhbHNlKTtcbiAgICB0cnkge1xuICAgICAgICB4aHIuc2VuZCgpO1xuICAgIH1cbiAgICBjYXRjaCAoZSkgeyB9XG4gICAgcmV0dXJuIHhoci5zdGF0dXMgPj0gMjAwICYmIHhoci5zdGF0dXMgPD0gMjk5O1xufVxuLy8gYGEuY2xpY2soKWAgZG9lc24ndCB3b3JrIGZvciBhbGwgYnJvd3NlcnMgKCM0NjUpXG5mdW5jdGlvbiBjbGljayhub2RlKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgbm9kZS5kaXNwYXRjaEV2ZW50KG5ldyBNb3VzZUV2ZW50KCdjbGljaycpKTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc3QgZXZ0ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ01vdXNlRXZlbnRzJyk7XG4gICAgICAgIGV2dC5pbml0TW91c2VFdmVudCgnY2xpY2snLCB0cnVlLCB0cnVlLCB3aW5kb3csIDAsIDAsIDAsIDgwLCAyMCwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDAsIG51bGwpO1xuICAgICAgICBub2RlLmRpc3BhdGNoRXZlbnQoZXZ0KTtcbiAgICB9XG59XG5jb25zdCBfbmF2aWdhdG9yID0gXG4gdHlwZW9mIG5hdmlnYXRvciA9PT0gJ29iamVjdCcgPyBuYXZpZ2F0b3IgOiB7IHVzZXJBZ2VudDogJycgfTtcbi8vIERldGVjdCBXZWJWaWV3IGluc2lkZSBhIG5hdGl2ZSBtYWNPUyBhcHAgYnkgcnVsaW5nIG91dCBhbGwgYnJvd3NlcnNcbi8vIFdlIGp1c3QgbmVlZCB0byBjaGVjayBmb3IgJ1NhZmFyaScgYmVjYXVzZSBhbGwgb3RoZXIgYnJvd3NlcnMgKGJlc2lkZXMgRmlyZWZveCkgaW5jbHVkZSB0aGF0IHRvb1xuLy8gaHR0cHM6Ly93d3cud2hhdGlzbXlicm93c2VyLmNvbS9ndWlkZXMvdGhlLWxhdGVzdC11c2VyLWFnZW50L21hY29zXG5jb25zdCBpc01hY09TV2ViVmlldyA9IC8qI19fUFVSRV9fKi8gKCgpID0+IC9NYWNpbnRvc2gvLnRlc3QoX25hdmlnYXRvci51c2VyQWdlbnQpICYmXG4gICAgL0FwcGxlV2ViS2l0Ly50ZXN0KF9uYXZpZ2F0b3IudXNlckFnZW50KSAmJlxuICAgICEvU2FmYXJpLy50ZXN0KF9uYXZpZ2F0b3IudXNlckFnZW50KSkoKTtcbmNvbnN0IHNhdmVBcyA9ICFJU19DTElFTlRcbiAgICA/ICgpID0+IHsgfSAvLyBub29wXG4gICAgOiAvLyBVc2UgZG93bmxvYWQgYXR0cmlidXRlIGZpcnN0IGlmIHBvc3NpYmxlICgjMTkzIEx1bWlhIG1vYmlsZSkgdW5sZXNzIHRoaXMgaXMgYSBtYWNPUyBXZWJWaWV3IG9yIG1pbmkgcHJvZ3JhbVxuICAgICAgICB0eXBlb2YgSFRNTEFuY2hvckVsZW1lbnQgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICAnZG93bmxvYWQnIGluIEhUTUxBbmNob3JFbGVtZW50LnByb3RvdHlwZSAmJlxuICAgICAgICAgICAgIWlzTWFjT1NXZWJWaWV3XG4gICAgICAgICAgICA/IGRvd25sb2FkU2F2ZUFzXG4gICAgICAgICAgICA6IC8vIFVzZSBtc1NhdmVPck9wZW5CbG9iIGFzIGEgc2Vjb25kIGFwcHJvYWNoXG4gICAgICAgICAgICAgICAgJ21zU2F2ZU9yT3BlbkJsb2InIGluIF9uYXZpZ2F0b3JcbiAgICAgICAgICAgICAgICAgICAgPyBtc1NhdmVBc1xuICAgICAgICAgICAgICAgICAgICA6IC8vIEZhbGxiYWNrIHRvIHVzaW5nIEZpbGVSZWFkZXIgYW5kIGEgcG9wdXBcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVTYXZlclNhdmVBcztcbmZ1bmN0aW9uIGRvd25sb2FkU2F2ZUFzKGJsb2IsIG5hbWUgPSAnZG93bmxvYWQnLCBvcHRzKSB7XG4gICAgY29uc3QgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICBhLmRvd25sb2FkID0gbmFtZTtcbiAgICBhLnJlbCA9ICdub29wZW5lcic7IC8vIHRhYm5hYmJpbmdcbiAgICAvLyBUT0RPOiBkZXRlY3QgY2hyb21lIGV4dGVuc2lvbnMgJiBwYWNrYWdlZCBhcHBzXG4gICAgLy8gYS50YXJnZXQgPSAnX2JsYW5rJ1xuICAgIGlmICh0eXBlb2YgYmxvYiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgLy8gU3VwcG9ydCByZWd1bGFyIGxpbmtzXG4gICAgICAgIGEuaHJlZiA9IGJsb2I7XG4gICAgICAgIGlmIChhLm9yaWdpbiAhPT0gbG9jYXRpb24ub3JpZ2luKSB7XG4gICAgICAgICAgICBpZiAoY29yc0VuYWJsZWQoYS5ocmVmKSkge1xuICAgICAgICAgICAgICAgIGRvd25sb2FkKGJsb2IsIG5hbWUsIG9wdHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgYS50YXJnZXQgPSAnX2JsYW5rJztcbiAgICAgICAgICAgICAgICBjbGljayhhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNsaWNrKGEpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBTdXBwb3J0IGJsb2JzXG4gICAgICAgIGEuaHJlZiA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgVVJMLnJldm9rZU9iamVjdFVSTChhLmhyZWYpO1xuICAgICAgICB9LCA0ZTQpOyAvLyA0MHNcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjbGljayhhKTtcbiAgICAgICAgfSwgMCk7XG4gICAgfVxufVxuZnVuY3Rpb24gbXNTYXZlQXMoYmxvYiwgbmFtZSA9ICdkb3dubG9hZCcsIG9wdHMpIHtcbiAgICBpZiAodHlwZW9mIGJsb2IgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmIChjb3JzRW5hYmxlZChibG9iKSkge1xuICAgICAgICAgICAgZG93bmxvYWQoYmxvYiwgbmFtZSwgb3B0cyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgICAgICAgYS5ocmVmID0gYmxvYjtcbiAgICAgICAgICAgIGEudGFyZ2V0ID0gJ19ibGFuayc7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBjbGljayhhKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBAdHMtaWdub3JlOiB3b3JrcyBvbiB3aW5kb3dzXG4gICAgICAgIG5hdmlnYXRvci5tc1NhdmVPck9wZW5CbG9iKGJvbShibG9iLCBvcHRzKSwgbmFtZSk7XG4gICAgfVxufVxuZnVuY3Rpb24gZmlsZVNhdmVyU2F2ZUFzKGJsb2IsIG5hbWUsIG9wdHMsIHBvcHVwKSB7XG4gICAgLy8gT3BlbiBhIHBvcHVwIGltbWVkaWF0ZWx5IGRvIGdvIGFyb3VuZCBwb3B1cCBibG9ja2VyXG4gICAgLy8gTW9zdGx5IG9ubHkgYXZhaWxhYmxlIG9uIHVzZXIgaW50ZXJhY3Rpb24gYW5kIHRoZSBmaWxlUmVhZGVyIGlzIGFzeW5jIHNvLi4uXG4gICAgcG9wdXAgPSBwb3B1cCB8fCBvcGVuKCcnLCAnX2JsYW5rJyk7XG4gICAgaWYgKHBvcHVwKSB7XG4gICAgICAgIHBvcHVwLmRvY3VtZW50LnRpdGxlID0gcG9wdXAuZG9jdW1lbnQuYm9keS5pbm5lclRleHQgPSAnZG93bmxvYWRpbmcuLi4nO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGJsb2IgPT09ICdzdHJpbmcnKVxuICAgICAgICByZXR1cm4gZG93bmxvYWQoYmxvYiwgbmFtZSwgb3B0cyk7XG4gICAgY29uc3QgZm9yY2UgPSBibG9iLnR5cGUgPT09ICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nO1xuICAgIGNvbnN0IGlzU2FmYXJpID0gL2NvbnN0cnVjdG9yL2kudGVzdChTdHJpbmcoX2dsb2JhbC5IVE1MRWxlbWVudCkpIHx8ICdzYWZhcmknIGluIF9nbG9iYWw7XG4gICAgY29uc3QgaXNDaHJvbWVJT1MgPSAvQ3JpT1NcXC9bXFxkXSsvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgaWYgKChpc0Nocm9tZUlPUyB8fCAoZm9yY2UgJiYgaXNTYWZhcmkpIHx8IGlzTWFjT1NXZWJWaWV3KSAmJlxuICAgICAgICB0eXBlb2YgRmlsZVJlYWRlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgLy8gU2FmYXJpIGRvZXNuJ3QgYWxsb3cgZG93bmxvYWRpbmcgb2YgYmxvYiBVUkxzXG4gICAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgICAgIHJlYWRlci5vbmxvYWRlbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBsZXQgdXJsID0gcmVhZGVyLnJlc3VsdDtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdXJsICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHBvcHVwID0gbnVsbDtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1dyb25nIHJlYWRlci5yZXN1bHQgdHlwZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdXJsID0gaXNDaHJvbWVJT1NcbiAgICAgICAgICAgICAgICA/IHVybFxuICAgICAgICAgICAgICAgIDogdXJsLnJlcGxhY2UoL15kYXRhOlteO10qOy8sICdkYXRhOmF0dGFjaG1lbnQvZmlsZTsnKTtcbiAgICAgICAgICAgIGlmIChwb3B1cCkge1xuICAgICAgICAgICAgICAgIHBvcHVwLmxvY2F0aW9uLmhyZWYgPSB1cmw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBsb2NhdGlvbi5hc3NpZ24odXJsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBvcHVwID0gbnVsbDsgLy8gcmV2ZXJzZS10YWJuYWJiaW5nICM0NjBcbiAgICAgICAgfTtcbiAgICAgICAgcmVhZGVyLnJlYWRBc0RhdGFVUkwoYmxvYik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCB1cmwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xuICAgICAgICBpZiAocG9wdXApXG4gICAgICAgICAgICBwb3B1cC5sb2NhdGlvbi5hc3NpZ24odXJsKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgbG9jYXRpb24uaHJlZiA9IHVybDtcbiAgICAgICAgcG9wdXAgPSBudWxsOyAvLyByZXZlcnNlLXRhYm5hYmJpbmcgIzQ2MFxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIFVSTC5yZXZva2VPYmplY3RVUkwodXJsKTtcbiAgICAgICAgfSwgNGU0KTsgLy8gNDBzXG4gICAgfVxufVxuXG4vKipcbiAqIFNob3dzIGEgdG9hc3Qgb3IgY29uc29sZS5sb2dcbiAqXG4gKiBAcGFyYW0gbWVzc2FnZSAtIG1lc3NhZ2UgdG8gbG9nXG4gKiBAcGFyYW0gdHlwZSAtIGRpZmZlcmVudCBjb2xvciBvZiB0aGUgdG9vbHRpcFxuICovXG5mdW5jdGlvbiB0b2FzdE1lc3NhZ2UobWVzc2FnZSwgdHlwZSkge1xuICAgIGNvbnN0IHBpbmlhTWVzc2FnZSA9ICfwn42NICcgKyBtZXNzYWdlO1xuICAgIGlmICh0eXBlb2YgX19WVUVfREVWVE9PTFNfVE9BU1RfXyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyBObyBsb25nZXIgYXZhaWxhYmxlIDooXG4gICAgICAgIF9fVlVFX0RFVlRPT0xTX1RPQVNUX18ocGluaWFNZXNzYWdlLCB0eXBlKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZSA9PT0gJ2Vycm9yJykge1xuICAgICAgICBjb25zb2xlLmVycm9yKHBpbmlhTWVzc2FnZSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGUgPT09ICd3YXJuJykge1xuICAgICAgICBjb25zb2xlLndhcm4ocGluaWFNZXNzYWdlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnNvbGUubG9nKHBpbmlhTWVzc2FnZSk7XG4gICAgfVxufVxuZnVuY3Rpb24gaXNQaW5pYShvKSB7XG4gICAgcmV0dXJuICdfYScgaW4gbyAmJiAnaW5zdGFsbCcgaW4gbztcbn1cblxuLyoqXG4gKiBUaGlzIGZpbGUgY29udGFpbiBkZXZ0b29scyBhY3Rpb25zLCB0aGV5IGFyZSBub3QgUGluaWEgYWN0aW9ucy5cbiAqL1xuLy8gLS0tXG5mdW5jdGlvbiBjaGVja0NsaXBib2FyZEFjY2VzcygpIHtcbiAgICBpZiAoISgnY2xpcGJvYXJkJyBpbiBuYXZpZ2F0b3IpKSB7XG4gICAgICAgIHRvYXN0TWVzc2FnZShgWW91ciBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCB0aGUgQ2xpcGJvYXJkIEFQSWAsICdlcnJvcicpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59XG5mdW5jdGlvbiBjaGVja05vdEZvY3VzZWRFcnJvcihlcnJvcikge1xuICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yICYmXG4gICAgICAgIGVycm9yLm1lc3NhZ2UudG9Mb3dlckNhc2UoKS5pbmNsdWRlcygnZG9jdW1lbnQgaXMgbm90IGZvY3VzZWQnKSkge1xuICAgICAgICB0b2FzdE1lc3NhZ2UoJ1lvdSBuZWVkIHRvIGFjdGl2YXRlIHRoZSBcIkVtdWxhdGUgYSBmb2N1c2VkIHBhZ2VcIiBzZXR0aW5nIGluIHRoZSBcIlJlbmRlcmluZ1wiIHBhbmVsIG9mIGRldnRvb2xzLicsICd3YXJuJyk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5hc3luYyBmdW5jdGlvbiBhY3Rpb25HbG9iYWxDb3B5U3RhdGUocGluaWEpIHtcbiAgICBpZiAoY2hlY2tDbGlwYm9hcmRBY2Nlc3MoKSlcbiAgICAgICAgcmV0dXJuO1xuICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IG5hdmlnYXRvci5jbGlwYm9hcmQud3JpdGVUZXh0KEpTT04uc3RyaW5naWZ5KHBpbmlhLnN0YXRlLnZhbHVlKSk7XG4gICAgICAgIHRvYXN0TWVzc2FnZSgnR2xvYmFsIHN0YXRlIGNvcGllZCB0byBjbGlwYm9hcmQuJyk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAoY2hlY2tOb3RGb2N1c2VkRXJyb3IoZXJyb3IpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0b2FzdE1lc3NhZ2UoYEZhaWxlZCB0byBzZXJpYWxpemUgdGhlIHN0YXRlLiBDaGVjayB0aGUgY29uc29sZSBmb3IgbW9yZSBkZXRhaWxzLmAsICdlcnJvcicpO1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICB9XG59XG5hc3luYyBmdW5jdGlvbiBhY3Rpb25HbG9iYWxQYXN0ZVN0YXRlKHBpbmlhKSB7XG4gICAgaWYgKGNoZWNrQ2xpcGJvYXJkQWNjZXNzKCkpXG4gICAgICAgIHJldHVybjtcbiAgICB0cnkge1xuICAgICAgICBsb2FkU3RvcmVzU3RhdGUocGluaWEsIEpTT04ucGFyc2UoYXdhaXQgbmF2aWdhdG9yLmNsaXBib2FyZC5yZWFkVGV4dCgpKSk7XG4gICAgICAgIHRvYXN0TWVzc2FnZSgnR2xvYmFsIHN0YXRlIHBhc3RlZCBmcm9tIGNsaXBib2FyZC4nKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGlmIChjaGVja05vdEZvY3VzZWRFcnJvcihlcnJvcikpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRvYXN0TWVzc2FnZShgRmFpbGVkIHRvIGRlc2VyaWFsaXplIHRoZSBzdGF0ZSBmcm9tIGNsaXBib2FyZC4gQ2hlY2sgdGhlIGNvbnNvbGUgZm9yIG1vcmUgZGV0YWlscy5gLCAnZXJyb3InKTtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgfVxufVxuYXN5bmMgZnVuY3Rpb24gYWN0aW9uR2xvYmFsU2F2ZVN0YXRlKHBpbmlhKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgc2F2ZUFzKG5ldyBCbG9iKFtKU09OLnN0cmluZ2lmeShwaW5pYS5zdGF0ZS52YWx1ZSldLCB7XG4gICAgICAgICAgICB0eXBlOiAndGV4dC9wbGFpbjtjaGFyc2V0PXV0Zi04JyxcbiAgICAgICAgfSksICdwaW5pYS1zdGF0ZS5qc29uJyk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICB0b2FzdE1lc3NhZ2UoYEZhaWxlZCB0byBleHBvcnQgdGhlIHN0YXRlIGFzIEpTT04uIENoZWNrIHRoZSBjb25zb2xlIGZvciBtb3JlIGRldGFpbHMuYCwgJ2Vycm9yJyk7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgIH1cbn1cbmxldCBmaWxlSW5wdXQ7XG5mdW5jdGlvbiBnZXRGaWxlT3BlbmVyKCkge1xuICAgIGlmICghZmlsZUlucHV0KSB7XG4gICAgICAgIGZpbGVJbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgICAgIGZpbGVJbnB1dC50eXBlID0gJ2ZpbGUnO1xuICAgICAgICBmaWxlSW5wdXQuYWNjZXB0ID0gJy5qc29uJztcbiAgICB9XG4gICAgZnVuY3Rpb24gb3BlbkZpbGUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBmaWxlSW5wdXQub25jaGFuZ2UgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZmlsZXMgPSBmaWxlSW5wdXQuZmlsZXM7XG4gICAgICAgICAgICAgICAgaWYgKCFmaWxlcylcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUobnVsbCk7XG4gICAgICAgICAgICAgICAgY29uc3QgZmlsZSA9IGZpbGVzLml0ZW0oMCk7XG4gICAgICAgICAgICAgICAgaWYgKCFmaWxlKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShudWxsKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSh7IHRleHQ6IGF3YWl0IGZpbGUudGV4dCgpLCBmaWxlIH0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmU6IFRPRE86IGNoYW5nZWQgZnJvbSA0LjMgdG8gNC40XG4gICAgICAgICAgICBmaWxlSW5wdXQub25jYW5jZWwgPSAoKSA9PiByZXNvbHZlKG51bGwpO1xuICAgICAgICAgICAgZmlsZUlucHV0Lm9uZXJyb3IgPSByZWplY3Q7XG4gICAgICAgICAgICBmaWxlSW5wdXQuY2xpY2soKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBvcGVuRmlsZTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGFjdGlvbkdsb2JhbE9wZW5TdGF0ZUZpbGUocGluaWEpIHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBvcGVuID0gZ2V0RmlsZU9wZW5lcigpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBvcGVuKCk7XG4gICAgICAgIGlmICghcmVzdWx0KVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCB7IHRleHQsIGZpbGUgfSA9IHJlc3VsdDtcbiAgICAgICAgbG9hZFN0b3Jlc1N0YXRlKHBpbmlhLCBKU09OLnBhcnNlKHRleHQpKTtcbiAgICAgICAgdG9hc3RNZXNzYWdlKGBHbG9iYWwgc3RhdGUgaW1wb3J0ZWQgZnJvbSBcIiR7ZmlsZS5uYW1lfVwiLmApO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgdG9hc3RNZXNzYWdlKGBGYWlsZWQgdG8gaW1wb3J0IHRoZSBzdGF0ZSBmcm9tIEpTT04uIENoZWNrIHRoZSBjb25zb2xlIGZvciBtb3JlIGRldGFpbHMuYCwgJ2Vycm9yJyk7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGxvYWRTdG9yZXNTdGF0ZShwaW5pYSwgc3RhdGUpIHtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBzdGF0ZSkge1xuICAgICAgICBjb25zdCBzdG9yZVN0YXRlID0gcGluaWEuc3RhdGUudmFsdWVba2V5XTtcbiAgICAgICAgaWYgKHN0b3JlU3RhdGUpIHtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oc3RvcmVTdGF0ZSwgc3RhdGVba2V5XSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGZvcm1hdERpc3BsYXkoZGlzcGxheSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIF9jdXN0b206IHtcbiAgICAgICAgICAgIGRpc3BsYXksXG4gICAgICAgIH0sXG4gICAgfTtcbn1cbmNvbnN0IFBJTklBX1JPT1RfTEFCRUwgPSAn8J+NjSBQaW5pYSAocm9vdCknO1xuY29uc3QgUElOSUFfUk9PVF9JRCA9ICdfcm9vdCc7XG5mdW5jdGlvbiBmb3JtYXRTdG9yZUZvckluc3BlY3RvclRyZWUoc3RvcmUpIHtcbiAgICByZXR1cm4gaXNQaW5pYShzdG9yZSlcbiAgICAgICAgPyB7XG4gICAgICAgICAgICBpZDogUElOSUFfUk9PVF9JRCxcbiAgICAgICAgICAgIGxhYmVsOiBQSU5JQV9ST09UX0xBQkVMLFxuICAgICAgICB9XG4gICAgICAgIDoge1xuICAgICAgICAgICAgaWQ6IHN0b3JlLiRpZCxcbiAgICAgICAgICAgIGxhYmVsOiBzdG9yZS4kaWQsXG4gICAgICAgIH07XG59XG5mdW5jdGlvbiBmb3JtYXRTdG9yZUZvckluc3BlY3RvclN0YXRlKHN0b3JlKSB7XG4gICAgaWYgKGlzUGluaWEoc3RvcmUpKSB7XG4gICAgICAgIGNvbnN0IHN0b3JlTmFtZXMgPSBBcnJheS5mcm9tKHN0b3JlLl9zLmtleXMoKSk7XG4gICAgICAgIGNvbnN0IHN0b3JlTWFwID0gc3RvcmUuX3M7XG4gICAgICAgIGNvbnN0IHN0YXRlID0ge1xuICAgICAgICAgICAgc3RhdGU6IHN0b3JlTmFtZXMubWFwKChzdG9yZUlkKSA9PiAoe1xuICAgICAgICAgICAgICAgIGVkaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGtleTogc3RvcmVJZCxcbiAgICAgICAgICAgICAgICB2YWx1ZTogc3RvcmUuc3RhdGUudmFsdWVbc3RvcmVJZF0sXG4gICAgICAgICAgICB9KSksXG4gICAgICAgICAgICBnZXR0ZXJzOiBzdG9yZU5hbWVzXG4gICAgICAgICAgICAgICAgLmZpbHRlcigoaWQpID0+IHN0b3JlTWFwLmdldChpZCkuX2dldHRlcnMpXG4gICAgICAgICAgICAgICAgLm1hcCgoaWQpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdG9yZSA9IHN0b3JlTWFwLmdldChpZCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgZWRpdGFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBrZXk6IGlkLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogc3RvcmUuX2dldHRlcnMucmVkdWNlKChnZXR0ZXJzLCBrZXkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldHRlcnNba2V5XSA9IHN0b3JlW2tleV07XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2V0dGVycztcbiAgICAgICAgICAgICAgICAgICAgfSwge30pLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cbiAgICBjb25zdCBzdGF0ZSA9IHtcbiAgICAgICAgc3RhdGU6IE9iamVjdC5rZXlzKHN0b3JlLiRzdGF0ZSkubWFwKChrZXkpID0+ICh7XG4gICAgICAgICAgICBlZGl0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgIHZhbHVlOiBzdG9yZS4kc3RhdGVba2V5XSxcbiAgICAgICAgfSkpLFxuICAgIH07XG4gICAgLy8gYXZvaWQgYWRkaW5nIGVtcHR5IGdldHRlcnNcbiAgICBpZiAoc3RvcmUuX2dldHRlcnMgJiYgc3RvcmUuX2dldHRlcnMubGVuZ3RoKSB7XG4gICAgICAgIHN0YXRlLmdldHRlcnMgPSBzdG9yZS5fZ2V0dGVycy5tYXAoKGdldHRlck5hbWUpID0+ICh7XG4gICAgICAgICAgICBlZGl0YWJsZTogZmFsc2UsXG4gICAgICAgICAgICBrZXk6IGdldHRlck5hbWUsXG4gICAgICAgICAgICB2YWx1ZTogc3RvcmVbZ2V0dGVyTmFtZV0sXG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgaWYgKHN0b3JlLl9jdXN0b21Qcm9wZXJ0aWVzLnNpemUpIHtcbiAgICAgICAgc3RhdGUuY3VzdG9tUHJvcGVydGllcyA9IEFycmF5LmZyb20oc3RvcmUuX2N1c3RvbVByb3BlcnRpZXMpLm1hcCgoa2V5KSA9PiAoe1xuICAgICAgICAgICAgZWRpdGFibGU6IHRydWUsXG4gICAgICAgICAgICBrZXksXG4gICAgICAgICAgICB2YWx1ZTogc3RvcmVba2V5XSxcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICByZXR1cm4gc3RhdGU7XG59XG5mdW5jdGlvbiBmb3JtYXRFdmVudERhdGEoZXZlbnRzKSB7XG4gICAgaWYgKCFldmVudHMpXG4gICAgICAgIHJldHVybiB7fTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShldmVudHMpKSB7XG4gICAgICAgIC8vIFRPRE86IGhhbmRsZSBhZGQgYW5kIGRlbGV0ZSBmb3IgYXJyYXlzIGFuZCBvYmplY3RzXG4gICAgICAgIHJldHVybiBldmVudHMucmVkdWNlKChkYXRhLCBldmVudCkgPT4ge1xuICAgICAgICAgICAgZGF0YS5rZXlzLnB1c2goZXZlbnQua2V5KTtcbiAgICAgICAgICAgIGRhdGEub3BlcmF0aW9ucy5wdXNoKGV2ZW50LnR5cGUpO1xuICAgICAgICAgICAgZGF0YS5vbGRWYWx1ZVtldmVudC5rZXldID0gZXZlbnQub2xkVmFsdWU7XG4gICAgICAgICAgICBkYXRhLm5ld1ZhbHVlW2V2ZW50LmtleV0gPSBldmVudC5uZXdWYWx1ZTtcbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICB9LCB7XG4gICAgICAgICAgICBvbGRWYWx1ZToge30sXG4gICAgICAgICAgICBrZXlzOiBbXSxcbiAgICAgICAgICAgIG9wZXJhdGlvbnM6IFtdLFxuICAgICAgICAgICAgbmV3VmFsdWU6IHt9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBvcGVyYXRpb246IGZvcm1hdERpc3BsYXkoZXZlbnRzLnR5cGUpLFxuICAgICAgICAgICAga2V5OiBmb3JtYXREaXNwbGF5KGV2ZW50cy5rZXkpLFxuICAgICAgICAgICAgb2xkVmFsdWU6IGV2ZW50cy5vbGRWYWx1ZSxcbiAgICAgICAgICAgIG5ld1ZhbHVlOiBldmVudHMubmV3VmFsdWUsXG4gICAgICAgIH07XG4gICAgfVxufVxuZnVuY3Rpb24gZm9ybWF0TXV0YXRpb25UeXBlKHR5cGUpIHtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSBNdXRhdGlvblR5cGUuZGlyZWN0OlxuICAgICAgICAgICAgcmV0dXJuICdtdXRhdGlvbic7XG4gICAgICAgIGNhc2UgTXV0YXRpb25UeXBlLnBhdGNoRnVuY3Rpb246XG4gICAgICAgICAgICByZXR1cm4gJyRwYXRjaCc7XG4gICAgICAgIGNhc2UgTXV0YXRpb25UeXBlLnBhdGNoT2JqZWN0OlxuICAgICAgICAgICAgcmV0dXJuICckcGF0Y2gnO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuICd1bmtub3duJztcbiAgICB9XG59XG5cbi8vIHRpbWVsaW5lIGNhbiBiZSBwYXVzZWQgd2hlbiBkaXJlY3RseSBjaGFuZ2luZyB0aGUgc3RhdGVcbmxldCBpc1RpbWVsaW5lQWN0aXZlID0gdHJ1ZTtcbmNvbnN0IGNvbXBvbmVudFN0YXRlVHlwZXMgPSBbXTtcbmNvbnN0IE1VVEFUSU9OU19MQVlFUl9JRCA9ICdwaW5pYTptdXRhdGlvbnMnO1xuY29uc3QgSU5TUEVDVE9SX0lEID0gJ3BpbmlhJztcbmNvbnN0IHsgYXNzaWduOiBhc3NpZ24kMSB9ID0gT2JqZWN0O1xuLyoqXG4gKiBHZXRzIHRoZSBkaXNwbGF5ZWQgbmFtZSBvZiBhIHN0b3JlIGluIGRldnRvb2xzXG4gKlxuICogQHBhcmFtIGlkIC0gaWQgb2YgdGhlIHN0b3JlXG4gKiBAcmV0dXJucyBhIGZvcm1hdHRlZCBzdHJpbmdcbiAqL1xuY29uc3QgZ2V0U3RvcmVUeXBlID0gKGlkKSA9PiAn8J+NjSAnICsgaWQ7XG4vKipcbiAqIEFkZCB0aGUgcGluaWEgcGx1Z2luIHdpdGhvdXQgYW55IHN0b3JlLiBBbGxvd3MgZGlzcGxheWluZyBhIFBpbmlhIHBsdWdpbiB0YWJcbiAqIGFzIHNvb24gYXMgaXQgaXMgYWRkZWQgdG8gdGhlIGFwcGxpY2F0aW9uLlxuICpcbiAqIEBwYXJhbSBhcHAgLSBWdWUgYXBwbGljYXRpb25cbiAqIEBwYXJhbSBwaW5pYSAtIHBpbmlhIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIHJlZ2lzdGVyUGluaWFEZXZ0b29scyhhcHAsIHBpbmlhKSB7XG4gICAgc2V0dXBEZXZ0b29sc1BsdWdpbih7XG4gICAgICAgIGlkOiAnZGV2LmVzbS5waW5pYScsXG4gICAgICAgIGxhYmVsOiAnUGluaWEg8J+NjScsXG4gICAgICAgIGxvZ286ICdodHRwczovL3BpbmlhLnZ1ZWpzLm9yZy9sb2dvLnN2ZycsXG4gICAgICAgIHBhY2thZ2VOYW1lOiAncGluaWEnLFxuICAgICAgICBob21lcGFnZTogJ2h0dHBzOi8vcGluaWEudnVlanMub3JnJyxcbiAgICAgICAgY29tcG9uZW50U3RhdGVUeXBlcyxcbiAgICAgICAgYXBwLFxuICAgIH0sIChhcGkpID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiBhcGkubm93ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0b2FzdE1lc3NhZ2UoJ1lvdSBzZWVtIHRvIGJlIHVzaW5nIGFuIG91dGRhdGVkIHZlcnNpb24gb2YgVnVlIERldnRvb2xzLiBBcmUgeW91IHN0aWxsIHVzaW5nIHRoZSBCZXRhIHJlbGVhc2UgaW5zdGVhZCBvZiB0aGUgc3RhYmxlIG9uZT8gWW91IGNhbiBmaW5kIHRoZSBsaW5rcyBhdCBodHRwczovL2RldnRvb2xzLnZ1ZWpzLm9yZy9ndWlkZS9pbnN0YWxsYXRpb24uaHRtbC4nKTtcbiAgICAgICAgfVxuICAgICAgICBhcGkuYWRkVGltZWxpbmVMYXllcih7XG4gICAgICAgICAgICBpZDogTVVUQVRJT05TX0xBWUVSX0lELFxuICAgICAgICAgICAgbGFiZWw6IGBQaW5pYSDwn42NYCxcbiAgICAgICAgICAgIGNvbG9yOiAweGU1ZGY4OCxcbiAgICAgICAgfSk7XG4gICAgICAgIGFwaS5hZGRJbnNwZWN0b3Ioe1xuICAgICAgICAgICAgaWQ6IElOU1BFQ1RPUl9JRCxcbiAgICAgICAgICAgIGxhYmVsOiAnUGluaWEg8J+NjScsXG4gICAgICAgICAgICBpY29uOiAnc3RvcmFnZScsXG4gICAgICAgICAgICB0cmVlRmlsdGVyUGxhY2Vob2xkZXI6ICdTZWFyY2ggc3RvcmVzJyxcbiAgICAgICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGljb246ICdjb250ZW50X2NvcHknLFxuICAgICAgICAgICAgICAgICAgICBhY3Rpb246ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbkdsb2JhbENvcHlTdGF0ZShwaW5pYSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHRvb2x0aXA6ICdTZXJpYWxpemUgYW5kIGNvcHkgdGhlIHN0YXRlJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaWNvbjogJ2NvbnRlbnRfcGFzdGUnLFxuICAgICAgICAgICAgICAgICAgICBhY3Rpb246IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IGFjdGlvbkdsb2JhbFBhc3RlU3RhdGUocGluaWEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXBpLnNlbmRJbnNwZWN0b3JUcmVlKElOU1BFQ1RPUl9JRCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcGkuc2VuZEluc3BlY3RvclN0YXRlKElOU1BFQ1RPUl9JRCk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHRvb2x0aXA6ICdSZXBsYWNlIHRoZSBzdGF0ZSB3aXRoIHRoZSBjb250ZW50IG9mIHlvdXIgY2xpcGJvYXJkJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaWNvbjogJ3NhdmUnLFxuICAgICAgICAgICAgICAgICAgICBhY3Rpb246ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbkdsb2JhbFNhdmVTdGF0ZShwaW5pYSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHRvb2x0aXA6ICdTYXZlIHRoZSBzdGF0ZSBhcyBhIEpTT04gZmlsZScsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGljb246ICdmb2xkZXJfb3BlbicsXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbjogYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgYWN0aW9uR2xvYmFsT3BlblN0YXRlRmlsZShwaW5pYSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcGkuc2VuZEluc3BlY3RvclRyZWUoSU5TUEVDVE9SX0lEKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFwaS5zZW5kSW5zcGVjdG9yU3RhdGUoSU5TUEVDVE9SX0lEKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgdG9vbHRpcDogJ0ltcG9ydCB0aGUgc3RhdGUgZnJvbSBhIEpTT04gZmlsZScsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBub2RlQWN0aW9uczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaWNvbjogJ3Jlc3RvcmUnLFxuICAgICAgICAgICAgICAgICAgICB0b29sdGlwOiAnUmVzZXQgdGhlIHN0YXRlICh3aXRoIFwiJHJlc2V0XCIpJyxcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiAobm9kZUlkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdG9yZSA9IHBpbmlhLl9zLmdldChub2RlSWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzdG9yZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0TWVzc2FnZShgQ2Fubm90IHJlc2V0IFwiJHtub2RlSWR9XCIgc3RvcmUgYmVjYXVzZSBpdCB3YXNuJ3QgZm91bmQuYCwgJ3dhcm4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBzdG9yZS4kcmVzZXQgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdE1lc3NhZ2UoYENhbm5vdCByZXNldCBcIiR7bm9kZUlkfVwiIHN0b3JlIGJlY2F1c2UgaXQgZG9lc24ndCBoYXZlIGEgXCIkcmVzZXRcIiBtZXRob2QgaW1wbGVtZW50ZWQuYCwgJ3dhcm4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0b3JlLiRyZXNldCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0TWVzc2FnZShgU3RvcmUgXCIke25vZGVJZH1cIiByZXNldC5gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSk7XG4gICAgICAgIGFwaS5vbi5pbnNwZWN0Q29tcG9uZW50KChwYXlsb2FkLCBjdHgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHByb3h5ID0gKHBheWxvYWQuY29tcG9uZW50SW5zdGFuY2UgJiZcbiAgICAgICAgICAgICAgICBwYXlsb2FkLmNvbXBvbmVudEluc3RhbmNlLnByb3h5KTtcbiAgICAgICAgICAgIGlmIChwcm94eSAmJiBwcm94eS5fcFN0b3Jlcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBpbmlhU3RvcmVzID0gcGF5bG9hZC5jb21wb25lbnRJbnN0YW5jZS5wcm94eS5fcFN0b3JlcztcbiAgICAgICAgICAgICAgICBPYmplY3QudmFsdWVzKHBpbmlhU3RvcmVzKS5mb3JFYWNoKChzdG9yZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBwYXlsb2FkLmluc3RhbmNlRGF0YS5zdGF0ZS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGdldFN0b3JlVHlwZShzdG9yZS4kaWQpLFxuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiAnc3RhdGUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZWRpdGFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogc3RvcmUuX2lzT3B0aW9uc0FQSVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY3VzdG9tOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdG9SYXcoc3RvcmUuJHN0YXRlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb246ICdyZXN0b3JlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9vbHRpcDogJ1Jlc2V0IHRoZSBzdGF0ZSBvZiB0aGlzIHN0b3JlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiAoKSA9PiBzdG9yZS4kcmVzZXQoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAvLyBOT1RFOiB3b3JrYXJvdW5kIHRvIHVud3JhcCB0cmFuc2ZlcnJlZCByZWZzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKHN0b3JlLiRzdGF0ZSkucmVkdWNlKChzdGF0ZSwga2V5KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZVtrZXldID0gc3RvcmUuJHN0YXRlW2tleV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHt9KSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdG9yZS5fZ2V0dGVycyAmJiBzdG9yZS5fZ2V0dGVycy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBheWxvYWQuaW5zdGFuY2VEYXRhLnN0YXRlLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGdldFN0b3JlVHlwZShzdG9yZS4kaWQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleTogJ2dldHRlcnMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVkaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogc3RvcmUuX2dldHRlcnMucmVkdWNlKChnZXR0ZXJzLCBrZXkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldHRlcnNba2V5XSA9IHN0b3JlW2tleV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiB3ZSBqdXN0IHdhbnQgdG8gc2hvdyBpdCBpbiBkZXZ0b29sc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0dGVyc1trZXldID0gZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdldHRlcnM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwge30pLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGFwaS5vbi5nZXRJbnNwZWN0b3JUcmVlKChwYXlsb2FkKSA9PiB7XG4gICAgICAgICAgICBpZiAocGF5bG9hZC5hcHAgPT09IGFwcCAmJiBwYXlsb2FkLmluc3BlY3RvcklkID09PSBJTlNQRUNUT1JfSUQpIHtcbiAgICAgICAgICAgICAgICBsZXQgc3RvcmVzID0gW3BpbmlhXTtcbiAgICAgICAgICAgICAgICBzdG9yZXMgPSBzdG9yZXMuY29uY2F0KEFycmF5LmZyb20ocGluaWEuX3MudmFsdWVzKCkpKTtcbiAgICAgICAgICAgICAgICBwYXlsb2FkLnJvb3ROb2RlcyA9IChwYXlsb2FkLmZpbHRlclxuICAgICAgICAgICAgICAgICAgICA/IHN0b3Jlcy5maWx0ZXIoKHN0b3JlKSA9PiAnJGlkJyBpbiBzdG9yZVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBzdG9yZS4kaWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudG9Mb3dlckNhc2UoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5pbmNsdWRlcyhwYXlsb2FkLmZpbHRlci50b0xvd2VyQ2FzZSgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBQSU5JQV9ST09UX0xBQkVMLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMocGF5bG9hZC5maWx0ZXIudG9Mb3dlckNhc2UoKSkpXG4gICAgICAgICAgICAgICAgICAgIDogc3RvcmVzKS5tYXAoZm9ybWF0U3RvcmVGb3JJbnNwZWN0b3JUcmVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGFwaS5vbi5nZXRJbnNwZWN0b3JTdGF0ZSgocGF5bG9hZCkgPT4ge1xuICAgICAgICAgICAgaWYgKHBheWxvYWQuYXBwID09PSBhcHAgJiYgcGF5bG9hZC5pbnNwZWN0b3JJZCA9PT0gSU5TUEVDVE9SX0lEKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaW5zcGVjdGVkU3RvcmUgPSBwYXlsb2FkLm5vZGVJZCA9PT0gUElOSUFfUk9PVF9JRFxuICAgICAgICAgICAgICAgICAgICA/IHBpbmlhXG4gICAgICAgICAgICAgICAgICAgIDogcGluaWEuX3MuZ2V0KHBheWxvYWQubm9kZUlkKTtcbiAgICAgICAgICAgICAgICBpZiAoIWluc3BlY3RlZFN0b3JlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgY291bGQgYmUgdGhlIHNlbGVjdGVkIHN0b3JlIHJlc3RvcmVkIGZvciBhIGRpZmZlcmVudCBwcm9qZWN0XG4gICAgICAgICAgICAgICAgICAgIC8vIHNvIGl0J3MgYmV0dGVyIG5vdCB0byBzYXkgYW55dGhpbmcgaGVyZVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChpbnNwZWN0ZWRTdG9yZSkge1xuICAgICAgICAgICAgICAgICAgICBwYXlsb2FkLnN0YXRlID0gZm9ybWF0U3RvcmVGb3JJbnNwZWN0b3JTdGF0ZShpbnNwZWN0ZWRTdG9yZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgYXBpLm9uLmVkaXRJbnNwZWN0b3JTdGF0ZSgocGF5bG9hZCwgY3R4KSA9PiB7XG4gICAgICAgICAgICBpZiAocGF5bG9hZC5hcHAgPT09IGFwcCAmJiBwYXlsb2FkLmluc3BlY3RvcklkID09PSBJTlNQRUNUT1JfSUQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpbnNwZWN0ZWRTdG9yZSA9IHBheWxvYWQubm9kZUlkID09PSBQSU5JQV9ST09UX0lEXG4gICAgICAgICAgICAgICAgICAgID8gcGluaWFcbiAgICAgICAgICAgICAgICAgICAgOiBwaW5pYS5fcy5nZXQocGF5bG9hZC5ub2RlSWQpO1xuICAgICAgICAgICAgICAgIGlmICghaW5zcGVjdGVkU3RvcmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRvYXN0TWVzc2FnZShgc3RvcmUgXCIke3BheWxvYWQubm9kZUlkfVwiIG5vdCBmb3VuZGAsICdlcnJvcicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCB7IHBhdGggfSA9IHBheWxvYWQ7XG4gICAgICAgICAgICAgICAgaWYgKCFpc1BpbmlhKGluc3BlY3RlZFN0b3JlKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBhY2Nlc3Mgb25seSB0aGUgc3RhdGVcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhdGgubGVuZ3RoICE9PSAxIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAhaW5zcGVjdGVkU3RvcmUuX2N1c3RvbVByb3BlcnRpZXMuaGFzKHBhdGhbMF0pIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXRoWzBdIGluIGluc3BlY3RlZFN0b3JlLiRzdGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aC51bnNoaWZ0KCckc3RhdGUnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gUm9vdCBhY2Nlc3MsIHdlIGNhbiBvbWl0IHRoZSBgLnZhbHVlYCBiZWNhdXNlIHRoZSBkZXZ0b29scyBBUEkgZG9lcyBpdCBmb3IgdXNcbiAgICAgICAgICAgICAgICAgICAgcGF0aC51bnNoaWZ0KCdzdGF0ZScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpc1RpbWVsaW5lQWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcGF5bG9hZC5zZXQoaW5zcGVjdGVkU3RvcmUsIHBhdGgsIHBheWxvYWQuc3RhdGUudmFsdWUpO1xuICAgICAgICAgICAgICAgIGlzVGltZWxpbmVBY3RpdmUgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgYXBpLm9uLmVkaXRDb21wb25lbnRTdGF0ZSgocGF5bG9hZCkgPT4ge1xuICAgICAgICAgICAgaWYgKHBheWxvYWQudHlwZS5zdGFydHNXaXRoKCfwn42NJykpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdG9yZUlkID0gcGF5bG9hZC50eXBlLnJlcGxhY2UoL17wn42NXFxzKi8sICcnKTtcbiAgICAgICAgICAgICAgICBjb25zdCBzdG9yZSA9IHBpbmlhLl9zLmdldChzdG9yZUlkKTtcbiAgICAgICAgICAgICAgICBpZiAoIXN0b3JlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0b2FzdE1lc3NhZ2UoYHN0b3JlIFwiJHtzdG9yZUlkfVwiIG5vdCBmb3VuZGAsICdlcnJvcicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCB7IHBhdGggfSA9IHBheWxvYWQ7XG4gICAgICAgICAgICAgICAgaWYgKHBhdGhbMF0gIT09ICdzdGF0ZScpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRvYXN0TWVzc2FnZShgSW52YWxpZCBwYXRoIGZvciBzdG9yZSBcIiR7c3RvcmVJZH1cIjpcXG4ke3BhdGh9XFxuT25seSBzdGF0ZSBjYW4gYmUgbW9kaWZpZWQuYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIHJld3JpdGUgdGhlIGZpcnN0IGVudHJ5IHRvIGJlIGFibGUgdG8gZGlyZWN0bHkgc2V0IHRoZSBzdGF0ZSBhc1xuICAgICAgICAgICAgICAgIC8vIHdlbGwgYXMgYW55IG90aGVyIHBhdGhcbiAgICAgICAgICAgICAgICBwYXRoWzBdID0gJyRzdGF0ZSc7XG4gICAgICAgICAgICAgICAgaXNUaW1lbGluZUFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHBheWxvYWQuc2V0KHN0b3JlLCBwYXRoLCBwYXlsb2FkLnN0YXRlLnZhbHVlKTtcbiAgICAgICAgICAgICAgICBpc1RpbWVsaW5lQWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBhZGRTdG9yZVRvRGV2dG9vbHMoYXBwLCBzdG9yZSkge1xuICAgIGlmICghY29tcG9uZW50U3RhdGVUeXBlcy5pbmNsdWRlcyhnZXRTdG9yZVR5cGUoc3RvcmUuJGlkKSkpIHtcbiAgICAgICAgY29tcG9uZW50U3RhdGVUeXBlcy5wdXNoKGdldFN0b3JlVHlwZShzdG9yZS4kaWQpKTtcbiAgICB9XG4gICAgc2V0dXBEZXZ0b29sc1BsdWdpbih7XG4gICAgICAgIGlkOiAnZGV2LmVzbS5waW5pYScsXG4gICAgICAgIGxhYmVsOiAnUGluaWEg8J+NjScsXG4gICAgICAgIGxvZ286ICdodHRwczovL3BpbmlhLnZ1ZWpzLm9yZy9sb2dvLnN2ZycsXG4gICAgICAgIHBhY2thZ2VOYW1lOiAncGluaWEnLFxuICAgICAgICBob21lcGFnZTogJ2h0dHBzOi8vcGluaWEudnVlanMub3JnJyxcbiAgICAgICAgY29tcG9uZW50U3RhdGVUeXBlcyxcbiAgICAgICAgYXBwLFxuICAgICAgICBzZXR0aW5nczoge1xuICAgICAgICAgICAgbG9nU3RvcmVDaGFuZ2VzOiB7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdOb3RpZnkgYWJvdXQgbmV3L2RlbGV0ZWQgc3RvcmVzJyxcbiAgICAgICAgICAgICAgICB0eXBlOiAnYm9vbGVhbicsXG4gICAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlOiB0cnVlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8vIHVzZUVtb2ppczoge1xuICAgICAgICAgICAgLy8gICBsYWJlbDogJ1VzZSBlbW9qaXMgaW4gbWVzc2FnZXMg4pqh77iPJyxcbiAgICAgICAgICAgIC8vICAgdHlwZTogJ2Jvb2xlYW4nLFxuICAgICAgICAgICAgLy8gICBkZWZhdWx0VmFsdWU6IHRydWUsXG4gICAgICAgICAgICAvLyB9LFxuICAgICAgICB9LFxuICAgIH0sIChhcGkpID0+IHtcbiAgICAgICAgLy8gZ3JhY2VmdWxseSBoYW5kbGUgZXJyb3JzXG4gICAgICAgIGNvbnN0IG5vdyA9IHR5cGVvZiBhcGkubm93ID09PSAnZnVuY3Rpb24nID8gYXBpLm5vdy5iaW5kKGFwaSkgOiBEYXRlLm5vdztcbiAgICAgICAgc3RvcmUuJG9uQWN0aW9uKCh7IGFmdGVyLCBvbkVycm9yLCBuYW1lLCBhcmdzIH0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGdyb3VwSWQgPSBydW5uaW5nQWN0aW9uSWQrKztcbiAgICAgICAgICAgIGFwaS5hZGRUaW1lbGluZUV2ZW50KHtcbiAgICAgICAgICAgICAgICBsYXllcklkOiBNVVRBVElPTlNfTEFZRVJfSUQsXG4gICAgICAgICAgICAgICAgZXZlbnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgdGltZTogbm93KCksXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn8J+bqyAnICsgbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgc3VidGl0bGU6ICdzdGFydCcsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0b3JlOiBmb3JtYXREaXNwbGF5KHN0b3JlLiRpZCksXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb246IGZvcm1hdERpc3BsYXkobmFtZSksXG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBncm91cElkLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGFmdGVyKChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgICBhY3RpdmVBY3Rpb24gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgYXBpLmFkZFRpbWVsaW5lRXZlbnQoe1xuICAgICAgICAgICAgICAgICAgICBsYXllcklkOiBNVVRBVElPTlNfTEFZRVJfSUQsXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lOiBub3coKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn8J+brCAnICsgbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnRpdGxlOiAnZW5kJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdG9yZTogZm9ybWF0RGlzcGxheShzdG9yZS4kaWQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogZm9ybWF0RGlzcGxheShuYW1lKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmdzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBncm91cElkLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBvbkVycm9yKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIGFjdGl2ZUFjdGlvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBhcGkuYWRkVGltZWxpbmVFdmVudCh7XG4gICAgICAgICAgICAgICAgICAgIGxheWVySWQ6IE1VVEFUSU9OU19MQVlFUl9JRCxcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWU6IG5vdygpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbG9nVHlwZTogJ2Vycm9yJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn8J+SpSAnICsgbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnRpdGxlOiAnZW5kJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdG9yZTogZm9ybWF0RGlzcGxheShzdG9yZS4kaWQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogZm9ybWF0RGlzcGxheShuYW1lKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmdzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwSWQsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSwgdHJ1ZSk7XG4gICAgICAgIHN0b3JlLl9jdXN0b21Qcm9wZXJ0aWVzLmZvckVhY2goKG5hbWUpID0+IHtcbiAgICAgICAgICAgIHdhdGNoKCgpID0+IHVucmVmKHN0b3JlW25hbWVdKSwgKG5ld1ZhbHVlLCBvbGRWYWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgIGFwaS5ub3RpZnlDb21wb25lbnRVcGRhdGUoKTtcbiAgICAgICAgICAgICAgICBhcGkuc2VuZEluc3BlY3RvclN0YXRlKElOU1BFQ1RPUl9JRCk7XG4gICAgICAgICAgICAgICAgaWYgKGlzVGltZWxpbmVBY3RpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgYXBpLmFkZFRpbWVsaW5lRXZlbnQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJJZDogTVVUQVRJT05TX0xBWUVSX0lELFxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lOiBub3coKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ0NoYW5nZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VidGl0bGU6IG5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2xkVmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBncm91cElkOiBhY3RpdmVBY3Rpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB7IGRlZXA6IHRydWUgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBzdG9yZS4kc3Vic2NyaWJlKCh7IGV2ZW50cywgdHlwZSB9LCBzdGF0ZSkgPT4ge1xuICAgICAgICAgICAgYXBpLm5vdGlmeUNvbXBvbmVudFVwZGF0ZSgpO1xuICAgICAgICAgICAgYXBpLnNlbmRJbnNwZWN0b3JTdGF0ZShJTlNQRUNUT1JfSUQpO1xuICAgICAgICAgICAgaWYgKCFpc1RpbWVsaW5lQWN0aXZlKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIC8vIHJvb3RTdG9yZS5zdGF0ZVtzdG9yZS5pZF0gPSBzdGF0ZVxuICAgICAgICAgICAgY29uc3QgZXZlbnREYXRhID0ge1xuICAgICAgICAgICAgICAgIHRpbWU6IG5vdygpLFxuICAgICAgICAgICAgICAgIHRpdGxlOiBmb3JtYXRNdXRhdGlvblR5cGUodHlwZSksXG4gICAgICAgICAgICAgICAgZGF0YTogYXNzaWduJDEoeyBzdG9yZTogZm9ybWF0RGlzcGxheShzdG9yZS4kaWQpIH0sIGZvcm1hdEV2ZW50RGF0YShldmVudHMpKSxcbiAgICAgICAgICAgICAgICBncm91cElkOiBhY3RpdmVBY3Rpb24sXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKHR5cGUgPT09IE11dGF0aW9uVHlwZS5wYXRjaEZ1bmN0aW9uKSB7XG4gICAgICAgICAgICAgICAgZXZlbnREYXRhLnN1YnRpdGxlID0gJ+Kkte+4jyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlID09PSBNdXRhdGlvblR5cGUucGF0Y2hPYmplY3QpIHtcbiAgICAgICAgICAgICAgICBldmVudERhdGEuc3VidGl0bGUgPSAn8J+nqSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChldmVudHMgJiYgIUFycmF5LmlzQXJyYXkoZXZlbnRzKSkge1xuICAgICAgICAgICAgICAgIGV2ZW50RGF0YS5zdWJ0aXRsZSA9IGV2ZW50cy50eXBlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGV2ZW50cykge1xuICAgICAgICAgICAgICAgIGV2ZW50RGF0YS5kYXRhWydyYXdFdmVudChzKSddID0ge1xuICAgICAgICAgICAgICAgICAgICBfY3VzdG9tOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiAnRGVidWdnZXJFdmVudCcsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnb2JqZWN0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvb2x0aXA6ICdyYXcgRGVidWdnZXJFdmVudFtdJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBldmVudHMsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFwaS5hZGRUaW1lbGluZUV2ZW50KHtcbiAgICAgICAgICAgICAgICBsYXllcklkOiBNVVRBVElPTlNfTEFZRVJfSUQsXG4gICAgICAgICAgICAgICAgZXZlbnQ6IGV2ZW50RGF0YSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCB7IGRldGFjaGVkOiB0cnVlLCBmbHVzaDogJ3N5bmMnIH0pO1xuICAgICAgICBjb25zdCBob3RVcGRhdGUgPSBzdG9yZS5faG90VXBkYXRlO1xuICAgICAgICBzdG9yZS5faG90VXBkYXRlID0gbWFya1JhdygobmV3U3RvcmUpID0+IHtcbiAgICAgICAgICAgIGhvdFVwZGF0ZShuZXdTdG9yZSk7XG4gICAgICAgICAgICBhcGkuYWRkVGltZWxpbmVFdmVudCh7XG4gICAgICAgICAgICAgICAgbGF5ZXJJZDogTVVUQVRJT05TX0xBWUVSX0lELFxuICAgICAgICAgICAgICAgIGV2ZW50OiB7XG4gICAgICAgICAgICAgICAgICAgIHRpbWU6IG5vdygpLFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ/CflKUgJyArIHN0b3JlLiRpZCxcbiAgICAgICAgICAgICAgICAgICAgc3VidGl0bGU6ICdITVIgdXBkYXRlJyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RvcmU6IGZvcm1hdERpc3BsYXkoc3RvcmUuJGlkKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZm86IGZvcm1hdERpc3BsYXkoYEhNUiB1cGRhdGVgKSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyB1cGRhdGUgdGhlIGRldnRvb2xzIHRvb1xuICAgICAgICAgICAgYXBpLm5vdGlmeUNvbXBvbmVudFVwZGF0ZSgpO1xuICAgICAgICAgICAgYXBpLnNlbmRJbnNwZWN0b3JUcmVlKElOU1BFQ1RPUl9JRCk7XG4gICAgICAgICAgICBhcGkuc2VuZEluc3BlY3RvclN0YXRlKElOU1BFQ1RPUl9JRCk7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCB7ICRkaXNwb3NlIH0gPSBzdG9yZTtcbiAgICAgICAgc3RvcmUuJGRpc3Bvc2UgPSAoKSA9PiB7XG4gICAgICAgICAgICAkZGlzcG9zZSgpO1xuICAgICAgICAgICAgYXBpLm5vdGlmeUNvbXBvbmVudFVwZGF0ZSgpO1xuICAgICAgICAgICAgYXBpLnNlbmRJbnNwZWN0b3JUcmVlKElOU1BFQ1RPUl9JRCk7XG4gICAgICAgICAgICBhcGkuc2VuZEluc3BlY3RvclN0YXRlKElOU1BFQ1RPUl9JRCk7XG4gICAgICAgICAgICBhcGkuZ2V0U2V0dGluZ3MoKS5sb2dTdG9yZUNoYW5nZXMgJiZcbiAgICAgICAgICAgICAgICB0b2FzdE1lc3NhZ2UoYERpc3Bvc2VkIFwiJHtzdG9yZS4kaWR9XCIgc3RvcmUg8J+XkWApO1xuICAgICAgICB9O1xuICAgICAgICAvLyB0cmlnZ2VyIGFuIHVwZGF0ZSBzbyBpdCBjYW4gZGlzcGxheSBuZXcgcmVnaXN0ZXJlZCBzdG9yZXNcbiAgICAgICAgYXBpLm5vdGlmeUNvbXBvbmVudFVwZGF0ZSgpO1xuICAgICAgICBhcGkuc2VuZEluc3BlY3RvclRyZWUoSU5TUEVDVE9SX0lEKTtcbiAgICAgICAgYXBpLnNlbmRJbnNwZWN0b3JTdGF0ZShJTlNQRUNUT1JfSUQpO1xuICAgICAgICBhcGkuZ2V0U2V0dGluZ3MoKS5sb2dTdG9yZUNoYW5nZXMgJiZcbiAgICAgICAgICAgIHRvYXN0TWVzc2FnZShgXCIke3N0b3JlLiRpZH1cIiBzdG9yZSBpbnN0YWxsZWQg8J+GlWApO1xuICAgIH0pO1xufVxubGV0IHJ1bm5pbmdBY3Rpb25JZCA9IDA7XG5sZXQgYWN0aXZlQWN0aW9uO1xuLyoqXG4gKiBQYXRjaGVzIGEgc3RvcmUgdG8gZW5hYmxlIGFjdGlvbiBncm91cGluZyBpbiBkZXZ0b29scyBieSB3cmFwcGluZyB0aGUgc3RvcmUgd2l0aCBhIFByb3h5IHRoYXQgaXMgcGFzc2VkIGFzIHRoZVxuICogY29udGV4dCBvZiBhbGwgYWN0aW9ucywgYWxsb3dpbmcgdXMgdG8gc2V0IGBydW5uaW5nQWN0aW9uYCBvbiBlYWNoIGFjY2VzcyBhbmQgZWZmZWN0aXZlbHkgYXNzb2NpYXRpbmcgYW55IHN0YXRlXG4gKiBtdXRhdGlvbiB0byB0aGUgYWN0aW9uLlxuICpcbiAqIEBwYXJhbSBzdG9yZSAtIHN0b3JlIHRvIHBhdGNoXG4gKiBAcGFyYW0gYWN0aW9uTmFtZXMgLSBsaXN0IG9mIGFjdGlvbnN0IHRvIHBhdGNoXG4gKi9cbmZ1bmN0aW9uIHBhdGNoQWN0aW9uRm9yR3JvdXBpbmcoc3RvcmUsIGFjdGlvbk5hbWVzLCB3cmFwV2l0aFByb3h5KSB7XG4gICAgLy8gb3JpZ2luYWwgYWN0aW9ucyBvZiB0aGUgc3RvcmUgYXMgdGhleSBhcmUgZ2l2ZW4gYnkgcGluaWEuIFdlIGFyZSBnb2luZyB0byBvdmVycmlkZSB0aGVtXG4gICAgY29uc3QgYWN0aW9ucyA9IGFjdGlvbk5hbWVzLnJlZHVjZSgoc3RvcmVBY3Rpb25zLCBhY3Rpb25OYW1lKSA9PiB7XG4gICAgICAgIC8vIHVzZSB0b1JhdyB0byBhdm9pZCB0cmFja2luZyAjNTQxXG4gICAgICAgIHN0b3JlQWN0aW9uc1thY3Rpb25OYW1lXSA9IHRvUmF3KHN0b3JlKVthY3Rpb25OYW1lXTtcbiAgICAgICAgcmV0dXJuIHN0b3JlQWN0aW9ucztcbiAgICB9LCB7fSk7XG4gICAgZm9yIChjb25zdCBhY3Rpb25OYW1lIGluIGFjdGlvbnMpIHtcbiAgICAgICAgc3RvcmVbYWN0aW9uTmFtZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLyB0aGUgcnVubmluZyBhY3Rpb24gaWQgaXMgaW5jcmVtZW50ZWQgaW4gYSBiZWZvcmUgYWN0aW9uIGhvb2tcbiAgICAgICAgICAgIGNvbnN0IF9hY3Rpb25JZCA9IHJ1bm5pbmdBY3Rpb25JZDtcbiAgICAgICAgICAgIGNvbnN0IHRyYWNrZWRTdG9yZSA9IHdyYXBXaXRoUHJveHlcbiAgICAgICAgICAgICAgICA/IG5ldyBQcm94eShzdG9yZSwge1xuICAgICAgICAgICAgICAgICAgICBnZXQoLi4uYXJncykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZlQWN0aW9uID0gX2FjdGlvbklkO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlZmxlY3QuZ2V0KC4uLmFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBzZXQoLi4uYXJncykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZlQWN0aW9uID0gX2FjdGlvbklkO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlZmxlY3Quc2V0KC4uLmFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgOiBzdG9yZTtcbiAgICAgICAgICAgIC8vIEZvciBTZXR1cCBTdG9yZXMgd2UgbmVlZCBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1hc3luYy1jb250ZXh0XG4gICAgICAgICAgICBhY3RpdmVBY3Rpb24gPSBfYWN0aW9uSWQ7XG4gICAgICAgICAgICBjb25zdCByZXRWYWx1ZSA9IGFjdGlvbnNbYWN0aW9uTmFtZV0uYXBwbHkodHJhY2tlZFN0b3JlLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgLy8gdGhpcyBpcyBzYWZlciBhcyBhc3luYyBhY3Rpb25zIGluIFNldHVwIFN0b3JlcyB3b3VsZCBhc3NvY2lhdGUgbXV0YXRpb25zIGRvbmUgb3V0c2lkZSBvZiB0aGUgYWN0aW9uXG4gICAgICAgICAgICBhY3RpdmVBY3Rpb24gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICByZXR1cm4gcmV0VmFsdWU7XG4gICAgICAgIH07XG4gICAgfVxufVxuLyoqXG4gKiBwaW5pYS51c2UoZGV2dG9vbHNQbHVnaW4pXG4gKi9cbmZ1bmN0aW9uIGRldnRvb2xzUGx1Z2luKHsgYXBwLCBzdG9yZSwgb3B0aW9ucyB9KSB7XG4gICAgLy8gSE1SIG1vZHVsZVxuICAgIGlmIChzdG9yZS4kaWQuc3RhcnRzV2l0aCgnX19ob3Q6JykpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBkZXRlY3Qgb3B0aW9uIGFwaSB2cyBzZXR1cCBhcGlcbiAgICBzdG9yZS5faXNPcHRpb25zQVBJID0gISFvcHRpb25zLnN0YXRlO1xuICAgIHBhdGNoQWN0aW9uRm9yR3JvdXBpbmcoc3RvcmUsIE9iamVjdC5rZXlzKG9wdGlvbnMuYWN0aW9ucyksIHN0b3JlLl9pc09wdGlvbnNBUEkpO1xuICAgIC8vIFVwZ3JhZGUgdGhlIEhNUiB0byBhbHNvIHVwZGF0ZSB0aGUgbmV3IGFjdGlvbnNcbiAgICBjb25zdCBvcmlnaW5hbEhvdFVwZGF0ZSA9IHN0b3JlLl9ob3RVcGRhdGU7XG4gICAgdG9SYXcoc3RvcmUpLl9ob3RVcGRhdGUgPSBmdW5jdGlvbiAobmV3U3RvcmUpIHtcbiAgICAgICAgb3JpZ2luYWxIb3RVcGRhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgcGF0Y2hBY3Rpb25Gb3JHcm91cGluZyhzdG9yZSwgT2JqZWN0LmtleXMobmV3U3RvcmUuX2htclBheWxvYWQuYWN0aW9ucyksICEhc3RvcmUuX2lzT3B0aW9uc0FQSSk7XG4gICAgfTtcbiAgICBhZGRTdG9yZVRvRGV2dG9vbHMoYXBwLCBcbiAgICAvLyBGSVhNRTogaXMgdGhlcmUgYSB3YXkgdG8gYWxsb3cgdGhlIGFzc2lnbm1lbnQgZnJvbSBTdG9yZTxJZCwgUywgRywgQT4gdG8gU3RvcmVHZW5lcmljP1xuICAgIHN0b3JlKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgUGluaWEgaW5zdGFuY2UgdG8gYmUgdXNlZCBieSB0aGUgYXBwbGljYXRpb25cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUGluaWEoKSB7XG4gICAgY29uc3Qgc2NvcGUgPSBlZmZlY3RTY29wZSh0cnVlKTtcbiAgICAvLyBOT1RFOiBoZXJlIHdlIGNvdWxkIGNoZWNrIHRoZSB3aW5kb3cgb2JqZWN0IGZvciBhIHN0YXRlIGFuZCBkaXJlY3RseSBzZXQgaXRcbiAgICAvLyBpZiB0aGVyZSBpcyBhbnl0aGluZyBsaWtlIGl0IHdpdGggVnVlIDMgU1NSXG4gICAgY29uc3Qgc3RhdGUgPSBzY29wZS5ydW4oKCkgPT4gcmVmKHt9KSk7XG4gICAgbGV0IF9wID0gW107XG4gICAgLy8gcGx1Z2lucyBhZGRlZCBiZWZvcmUgY2FsbGluZyBhcHAudXNlKHBpbmlhKVxuICAgIGxldCB0b0JlSW5zdGFsbGVkID0gW107XG4gICAgY29uc3QgcGluaWEgPSBtYXJrUmF3KHtcbiAgICAgICAgaW5zdGFsbChhcHApIHtcbiAgICAgICAgICAgIC8vIHRoaXMgYWxsb3dzIGNhbGxpbmcgdXNlU3RvcmUoKSBvdXRzaWRlIG9mIGEgY29tcG9uZW50IHNldHVwIGFmdGVyXG4gICAgICAgICAgICAvLyBpbnN0YWxsaW5nIHBpbmlhJ3MgcGx1Z2luXG4gICAgICAgICAgICBzZXRBY3RpdmVQaW5pYShwaW5pYSk7XG4gICAgICAgICAgICBpZiAoIWlzVnVlMikge1xuICAgICAgICAgICAgICAgIHBpbmlhLl9hID0gYXBwO1xuICAgICAgICAgICAgICAgIGFwcC5wcm92aWRlKHBpbmlhU3ltYm9sLCBwaW5pYSk7XG4gICAgICAgICAgICAgICAgYXBwLmNvbmZpZy5nbG9iYWxQcm9wZXJ0aWVzLiRwaW5pYSA9IHBpbmlhO1xuICAgICAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICAgICAgICAgICAgaWYgKFVTRV9ERVZUT09MUykge1xuICAgICAgICAgICAgICAgICAgICByZWdpc3RlclBpbmlhRGV2dG9vbHMoYXBwLCBwaW5pYSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRvQmVJbnN0YWxsZWQuZm9yRWFjaCgocGx1Z2luKSA9PiBfcC5wdXNoKHBsdWdpbikpO1xuICAgICAgICAgICAgICAgIHRvQmVJbnN0YWxsZWQgPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdXNlKHBsdWdpbikge1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9hICYmICFpc1Z1ZTIpIHtcbiAgICAgICAgICAgICAgICB0b0JlSW5zdGFsbGVkLnB1c2gocGx1Z2luKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIF9wLnB1c2gocGx1Z2luKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICBfcCxcbiAgICAgICAgLy8gaXQncyBhY3R1YWxseSB1bmRlZmluZWQgaGVyZVxuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgIF9hOiBudWxsLFxuICAgICAgICBfZTogc2NvcGUsXG4gICAgICAgIF9zOiBuZXcgTWFwKCksXG4gICAgICAgIHN0YXRlLFxuICAgIH0pO1xuICAgIC8vIHBpbmlhIGRldnRvb2xzIHJlbHkgb24gZGV2IG9ubHkgZmVhdHVyZXMgc28gdGhleSBjYW5ub3QgYmUgZm9yY2VkIHVubGVzc1xuICAgIC8vIHRoZSBkZXYgYnVpbGQgb2YgVnVlIGlzIHVzZWQuIEF2b2lkIG9sZCBicm93c2VycyBsaWtlIElFMTEuXG4gICAgaWYgKFVTRV9ERVZUT09MUyAmJiB0eXBlb2YgUHJveHkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHBpbmlhLnVzZShkZXZ0b29sc1BsdWdpbik7XG4gICAgfVxuICAgIHJldHVybiBwaW5pYTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBmdW5jdGlvbiBpcyBhIGBTdG9yZURlZmluaXRpb25gLlxuICpcbiAqIEBwYXJhbSBmbiAtIG9iamVjdCB0byB0ZXN0XG4gKiBAcmV0dXJucyB0cnVlIGlmIGBmbmAgaXMgYSBTdG9yZURlZmluaXRpb25cbiAqL1xuY29uc3QgaXNVc2VTdG9yZSA9IChmbikgPT4ge1xuICAgIHJldHVybiB0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGZuLiRpZCA9PT0gJ3N0cmluZyc7XG59O1xuLyoqXG4gKiBNdXRhdGVzIGluIHBsYWNlIGBuZXdTdGF0ZWAgd2l0aCBgb2xkU3RhdGVgIHRvIF9ob3QgdXBkYXRlXyBpdC4gSXQgd2lsbFxuICogcmVtb3ZlIGFueSBrZXkgbm90IGV4aXN0aW5nIGluIGBuZXdTdGF0ZWAgYW5kIHJlY3Vyc2l2ZWx5IG1lcmdlIHBsYWluXG4gKiBvYmplY3RzLlxuICpcbiAqIEBwYXJhbSBuZXdTdGF0ZSAtIG5ldyBzdGF0ZSBvYmplY3QgdG8gYmUgcGF0Y2hlZFxuICogQHBhcmFtIG9sZFN0YXRlIC0gb2xkIHN0YXRlIHRoYXQgc2hvdWxkIGJlIHVzZWQgdG8gcGF0Y2ggbmV3U3RhdGVcbiAqIEByZXR1cm5zIC0gbmV3U3RhdGVcbiAqL1xuZnVuY3Rpb24gcGF0Y2hPYmplY3QobmV3U3RhdGUsIG9sZFN0YXRlKSB7XG4gICAgLy8gbm8gbmVlZCB0byBnbyB0aHJvdWdoIHN5bWJvbHMgYmVjYXVzZSB0aGV5IGNhbm5vdCBiZSBzZXJpYWxpemVkIGFueXdheVxuICAgIGZvciAoY29uc3Qga2V5IGluIG9sZFN0YXRlKSB7XG4gICAgICAgIGNvbnN0IHN1YlBhdGNoID0gb2xkU3RhdGVba2V5XTtcbiAgICAgICAgLy8gc2tpcCB0aGUgd2hvbGUgc3ViIHRyZWVcbiAgICAgICAgaWYgKCEoa2V5IGluIG5ld1N0YXRlKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdGFyZ2V0VmFsdWUgPSBuZXdTdGF0ZVtrZXldO1xuICAgICAgICBpZiAoaXNQbGFpbk9iamVjdCh0YXJnZXRWYWx1ZSkgJiZcbiAgICAgICAgICAgIGlzUGxhaW5PYmplY3Qoc3ViUGF0Y2gpICYmXG4gICAgICAgICAgICAhaXNSZWYoc3ViUGF0Y2gpICYmXG4gICAgICAgICAgICAhaXNSZWFjdGl2ZShzdWJQYXRjaCkpIHtcbiAgICAgICAgICAgIG5ld1N0YXRlW2tleV0gPSBwYXRjaE9iamVjdCh0YXJnZXRWYWx1ZSwgc3ViUGF0Y2gpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gb2JqZWN0cyBhcmUgZWl0aGVyIGEgYml0IG1vcmUgY29tcGxleCAoZS5nLiByZWZzKSBvciBwcmltaXRpdmVzLCBzbyB3ZVxuICAgICAgICAgICAgLy8ganVzdCBzZXQgdGhlIHdob2xlIHRoaW5nXG4gICAgICAgICAgICBpZiAoaXNWdWUyKSB7XG4gICAgICAgICAgICAgICAgc2V0KG5ld1N0YXRlLCBrZXksIHN1YlBhdGNoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG5ld1N0YXRlW2tleV0gPSBzdWJQYXRjaDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3U3RhdGU7XG59XG4vKipcbiAqIENyZWF0ZXMgYW4gX2FjY2VwdF8gZnVuY3Rpb24gdG8gcGFzcyB0byBgaW1wb3J0Lm1ldGEuaG90YCBpbiBWaXRlIGFwcGxpY2F0aW9ucy5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBganNcbiAqIGNvbnN0IHVzZVVzZXIgPSBkZWZpbmVTdG9yZSguLi4pXG4gKiBpZiAoaW1wb3J0Lm1ldGEuaG90KSB7XG4gKiAgIGltcG9ydC5tZXRhLmhvdC5hY2NlcHQoYWNjZXB0SE1SVXBkYXRlKHVzZVVzZXIsIGltcG9ydC5tZXRhLmhvdCkpXG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gaW5pdGlhbFVzZVN0b3JlIC0gcmV0dXJuIG9mIHRoZSBkZWZpbmVTdG9yZSB0byBob3QgdXBkYXRlXG4gKiBAcGFyYW0gaG90IC0gYGltcG9ydC5tZXRhLmhvdGBcbiAqL1xuZnVuY3Rpb24gYWNjZXB0SE1SVXBkYXRlKGluaXRpYWxVc2VTdG9yZSwgaG90KSB7XG4gICAgLy8gc3RyaXAgYXMgbXVjaCBhcyBwb3NzaWJsZSBmcm9tIGlpZmUucHJvZFxuICAgIGlmICghKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgIHJldHVybiAoKSA9PiB7IH07XG4gICAgfVxuICAgIHJldHVybiAobmV3TW9kdWxlKSA9PiB7XG4gICAgICAgIGNvbnN0IHBpbmlhID0gaG90LmRhdGEucGluaWEgfHwgaW5pdGlhbFVzZVN0b3JlLl9waW5pYTtcbiAgICAgICAgaWYgKCFwaW5pYSkge1xuICAgICAgICAgICAgLy8gdGhpcyBzdG9yZSBpcyBzdGlsbCBub3QgdXNlZFxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIHByZXNlcnZlIHRoZSBwaW5pYSBpbnN0YW5jZSBhY3Jvc3MgbG9hZHNcbiAgICAgICAgaG90LmRhdGEucGluaWEgPSBwaW5pYTtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ2dvdCBkYXRhJywgbmV3U3RvcmUpXG4gICAgICAgIGZvciAoY29uc3QgZXhwb3J0TmFtZSBpbiBuZXdNb2R1bGUpIHtcbiAgICAgICAgICAgIGNvbnN0IHVzZVN0b3JlID0gbmV3TW9kdWxlW2V4cG9ydE5hbWVdO1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2NoZWNraW5nIGZvcicsIGV4cG9ydE5hbWUpXG4gICAgICAgICAgICBpZiAoaXNVc2VTdG9yZSh1c2VTdG9yZSkgJiYgcGluaWEuX3MuaGFzKHVzZVN0b3JlLiRpZCkpIHtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnQWNjZXB0aW5nIHVwZGF0ZSBmb3InLCB1c2VTdG9yZS4kaWQpXG4gICAgICAgICAgICAgICAgY29uc3QgaWQgPSB1c2VTdG9yZS4kaWQ7XG4gICAgICAgICAgICAgICAgaWYgKGlkICE9PSBpbml0aWFsVXNlU3RvcmUuJGlkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgVGhlIGlkIG9mIHRoZSBzdG9yZSBjaGFuZ2VkIGZyb20gXCIke2luaXRpYWxVc2VTdG9yZS4kaWR9XCIgdG8gXCIke2lkfVwiLiBSZWxvYWRpbmcuYCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIHJldHVybiBpbXBvcnQubWV0YS5ob3QuaW52YWxpZGF0ZSgpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBob3QuaW52YWxpZGF0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBleGlzdGluZ1N0b3JlID0gcGluaWEuX3MuZ2V0KGlkKTtcbiAgICAgICAgICAgICAgICBpZiAoIWV4aXN0aW5nU3RvcmUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFtQaW5pYV06IHNraXBwaW5nIGhtciBiZWNhdXNlIHN0b3JlIGRvZXNuJ3QgZXhpc3QgeWV0YCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdXNlU3RvcmUocGluaWEsIGV4aXN0aW5nU3RvcmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbn1cblxuY29uc3Qgbm9vcCA9ICgpID0+IHsgfTtcbmZ1bmN0aW9uIGFkZFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb25zLCBjYWxsYmFjaywgZGV0YWNoZWQsIG9uQ2xlYW51cCA9IG5vb3ApIHtcbiAgICBzdWJzY3JpcHRpb25zLnB1c2goY2FsbGJhY2spO1xuICAgIGNvbnN0IHJlbW92ZVN1YnNjcmlwdGlvbiA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgaWR4ID0gc3Vic2NyaXB0aW9ucy5pbmRleE9mKGNhbGxiYWNrKTtcbiAgICAgICAgaWYgKGlkeCA+IC0xKSB7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb25zLnNwbGljZShpZHgsIDEpO1xuICAgICAgICAgICAgb25DbGVhbnVwKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGlmICghZGV0YWNoZWQgJiYgZ2V0Q3VycmVudFNjb3BlKCkpIHtcbiAgICAgICAgb25TY29wZURpc3Bvc2UocmVtb3ZlU3Vic2NyaXB0aW9uKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlbW92ZVN1YnNjcmlwdGlvbjtcbn1cbmZ1bmN0aW9uIHRyaWdnZXJTdWJzY3JpcHRpb25zKHN1YnNjcmlwdGlvbnMsIC4uLmFyZ3MpIHtcbiAgICBzdWJzY3JpcHRpb25zLnNsaWNlKCkuZm9yRWFjaCgoY2FsbGJhY2spID0+IHtcbiAgICAgICAgY2FsbGJhY2soLi4uYXJncyk7XG4gICAgfSk7XG59XG5cbmNvbnN0IGZhbGxiYWNrUnVuV2l0aENvbnRleHQgPSAoZm4pID0+IGZuKCk7XG5mdW5jdGlvbiBtZXJnZVJlYWN0aXZlT2JqZWN0cyh0YXJnZXQsIHBhdGNoVG9BcHBseSkge1xuICAgIC8vIEhhbmRsZSBNYXAgaW5zdGFuY2VzXG4gICAgaWYgKHRhcmdldCBpbnN0YW5jZW9mIE1hcCAmJiBwYXRjaFRvQXBwbHkgaW5zdGFuY2VvZiBNYXApIHtcbiAgICAgICAgcGF0Y2hUb0FwcGx5LmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHRhcmdldC5zZXQoa2V5LCB2YWx1ZSkpO1xuICAgIH1cbiAgICAvLyBIYW5kbGUgU2V0IGluc3RhbmNlc1xuICAgIGlmICh0YXJnZXQgaW5zdGFuY2VvZiBTZXQgJiYgcGF0Y2hUb0FwcGx5IGluc3RhbmNlb2YgU2V0KSB7XG4gICAgICAgIHBhdGNoVG9BcHBseS5mb3JFYWNoKHRhcmdldC5hZGQsIHRhcmdldCk7XG4gICAgfVxuICAgIC8vIG5vIG5lZWQgdG8gZ28gdGhyb3VnaCBzeW1ib2xzIGJlY2F1c2UgdGhleSBjYW5ub3QgYmUgc2VyaWFsaXplZCBhbnl3YXlcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBwYXRjaFRvQXBwbHkpIHtcbiAgICAgICAgaWYgKCFwYXRjaFRvQXBwbHkuaGFzT3duUHJvcGVydHkoa2V5KSlcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjb25zdCBzdWJQYXRjaCA9IHBhdGNoVG9BcHBseVtrZXldO1xuICAgICAgICBjb25zdCB0YXJnZXRWYWx1ZSA9IHRhcmdldFtrZXldO1xuICAgICAgICBpZiAoaXNQbGFpbk9iamVjdCh0YXJnZXRWYWx1ZSkgJiZcbiAgICAgICAgICAgIGlzUGxhaW5PYmplY3Qoc3ViUGF0Y2gpICYmXG4gICAgICAgICAgICB0YXJnZXQuaGFzT3duUHJvcGVydHkoa2V5KSAmJlxuICAgICAgICAgICAgIWlzUmVmKHN1YlBhdGNoKSAmJlxuICAgICAgICAgICAgIWlzUmVhY3RpdmUoc3ViUGF0Y2gpKSB7XG4gICAgICAgICAgICAvLyBOT1RFOiBoZXJlIEkgd2FudGVkIHRvIHdhcm4gYWJvdXQgaW5jb25zaXN0ZW50IHR5cGVzIGJ1dCBpdCdzIG5vdCBwb3NzaWJsZSBiZWNhdXNlIGluIHNldHVwIHN0b3JlcyBvbmUgbWlnaHRcbiAgICAgICAgICAgIC8vIHN0YXJ0IHRoZSB2YWx1ZSBvZiBhIHByb3BlcnR5IGFzIGEgY2VydGFpbiB0eXBlIGUuZy4gYSBNYXAsIGFuZCB0aGVuIGZvciBzb21lIHJlYXNvbiwgZHVyaW5nIFNTUiwgY2hhbmdlIHRoYXRcbiAgICAgICAgICAgIC8vIHRvIGB1bmRlZmluZWRgLiBXaGVuIHRyeWluZyB0byBoeWRyYXRlLCB3ZSB3YW50IHRvIG92ZXJyaWRlIHRoZSBNYXAgd2l0aCBgdW5kZWZpbmVkYC5cbiAgICAgICAgICAgIHRhcmdldFtrZXldID0gbWVyZ2VSZWFjdGl2ZU9iamVjdHModGFyZ2V0VmFsdWUsIHN1YlBhdGNoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IHN1YlBhdGNoIGlzIGEgdmFsaWQgdmFsdWVcbiAgICAgICAgICAgIHRhcmdldFtrZXldID0gc3ViUGF0Y2g7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbn1cbmNvbnN0IHNraXBIeWRyYXRlU3ltYm9sID0gKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpXG4gICAgPyBTeW1ib2woJ3BpbmlhOnNraXBIeWRyYXRpb24nKVxuICAgIDogLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8gU3ltYm9sKCk7XG5jb25zdCBza2lwSHlkcmF0ZU1hcCA9IC8qI19fUFVSRV9fKi8gbmV3IFdlYWtNYXAoKTtcbi8qKlxuICogVGVsbHMgUGluaWEgdG8gc2tpcCB0aGUgaHlkcmF0aW9uIHByb2Nlc3Mgb2YgYSBnaXZlbiBvYmplY3QuIFRoaXMgaXMgdXNlZnVsIGluIHNldHVwIHN0b3JlcyAob25seSkgd2hlbiB5b3UgcmV0dXJuIGFcbiAqIHN0YXRlZnVsIG9iamVjdCBpbiB0aGUgc3RvcmUgYnV0IGl0IGlzbid0IHJlYWxseSBzdGF0ZS4gZS5nLiByZXR1cm5pbmcgYSByb3V0ZXIgaW5zdGFuY2UgaW4gYSBzZXR1cCBzdG9yZS5cbiAqXG4gKiBAcGFyYW0gb2JqIC0gdGFyZ2V0IG9iamVjdFxuICogQHJldHVybnMgb2JqXG4gKi9cbmZ1bmN0aW9uIHNraXBIeWRyYXRlKG9iaikge1xuICAgIHJldHVybiBpc1Z1ZTJcbiAgICAgICAgPyAvLyBpbiBAdnVlL2NvbXBvc2l0aW9uLWFwaSwgdGhlIHJlZnMgYXJlIHNlYWxlZCBzbyBkZWZpbmVQcm9wZXJ0eSBkb2Vzbid0IHdvcmsuLi5cbiAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIHNraXBIeWRyYXRlTWFwLnNldChvYmosIDEpICYmIG9ialxuICAgICAgICA6IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIHNraXBIeWRyYXRlU3ltYm9sLCB7fSk7XG59XG4vKipcbiAqIFJldHVybnMgd2hldGhlciBhIHZhbHVlIHNob3VsZCBiZSBoeWRyYXRlZFxuICpcbiAqIEBwYXJhbSBvYmogLSB0YXJnZXQgdmFyaWFibGVcbiAqIEByZXR1cm5zIHRydWUgaWYgYG9iamAgc2hvdWxkIGJlIGh5ZHJhdGVkXG4gKi9cbmZ1bmN0aW9uIHNob3VsZEh5ZHJhdGUob2JqKSB7XG4gICAgcmV0dXJuIGlzVnVlMlxuICAgICAgICA/IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovICFza2lwSHlkcmF0ZU1hcC5oYXMob2JqKVxuICAgICAgICA6ICFpc1BsYWluT2JqZWN0KG9iaikgfHwgIW9iai5oYXNPd25Qcm9wZXJ0eShza2lwSHlkcmF0ZVN5bWJvbCk7XG59XG5jb25zdCB7IGFzc2lnbiB9ID0gT2JqZWN0O1xuZnVuY3Rpb24gaXNDb21wdXRlZChvKSB7XG4gICAgcmV0dXJuICEhKGlzUmVmKG8pICYmIG8uZWZmZWN0KTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZU9wdGlvbnNTdG9yZShpZCwgb3B0aW9ucywgcGluaWEsIGhvdCkge1xuICAgIGNvbnN0IHsgc3RhdGUsIGFjdGlvbnMsIGdldHRlcnMgfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgaW5pdGlhbFN0YXRlID0gcGluaWEuc3RhdGUudmFsdWVbaWRdO1xuICAgIGxldCBzdG9yZTtcbiAgICBmdW5jdGlvbiBzZXR1cCgpIHtcbiAgICAgICAgaWYgKCFpbml0aWFsU3RhdGUgJiYgKCEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgfHwgIWhvdCkpIHtcbiAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICAgICAgaWYgKGlzVnVlMikge1xuICAgICAgICAgICAgICAgIHNldChwaW5pYS5zdGF0ZS52YWx1ZSwgaWQsIHN0YXRlID8gc3RhdGUoKSA6IHt9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHBpbmlhLnN0YXRlLnZhbHVlW2lkXSA9IHN0YXRlID8gc3RhdGUoKSA6IHt9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIGF2b2lkIGNyZWF0aW5nIGEgc3RhdGUgaW4gcGluaWEuc3RhdGUudmFsdWVcbiAgICAgICAgY29uc3QgbG9jYWxTdGF0ZSA9IChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBob3RcbiAgICAgICAgICAgID8gLy8gdXNlIHJlZigpIHRvIHVud3JhcCByZWZzIGluc2lkZSBzdGF0ZSBUT0RPOiBjaGVjayBpZiB0aGlzIGlzIHN0aWxsIG5lY2Vzc2FyeVxuICAgICAgICAgICAgICAgIHRvUmVmcyhyZWYoc3RhdGUgPyBzdGF0ZSgpIDoge30pLnZhbHVlKVxuICAgICAgICAgICAgOiB0b1JlZnMocGluaWEuc3RhdGUudmFsdWVbaWRdKTtcbiAgICAgICAgcmV0dXJuIGFzc2lnbihsb2NhbFN0YXRlLCBhY3Rpb25zLCBPYmplY3Qua2V5cyhnZXR0ZXJzIHx8IHt9KS5yZWR1Y2UoKGNvbXB1dGVkR2V0dGVycywgbmFtZSkgPT4ge1xuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBuYW1lIGluIGxvY2FsU3RhdGUpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYFvwn42NXTogQSBnZXR0ZXIgY2Fubm90IGhhdmUgdGhlIHNhbWUgbmFtZSBhcyBhbm90aGVyIHN0YXRlIHByb3BlcnR5LiBSZW5hbWUgb25lIG9mIHRoZW0uIEZvdW5kIHdpdGggXCIke25hbWV9XCIgaW4gc3RvcmUgXCIke2lkfVwiLmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29tcHV0ZWRHZXR0ZXJzW25hbWVdID0gbWFya1Jhdyhjb21wdXRlZCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgc2V0QWN0aXZlUGluaWEocGluaWEpO1xuICAgICAgICAgICAgICAgIC8vIGl0IHdhcyBjcmVhdGVkIGp1c3QgYmVmb3JlXG4gICAgICAgICAgICAgICAgY29uc3Qgc3RvcmUgPSBwaW5pYS5fcy5nZXQoaWQpO1xuICAgICAgICAgICAgICAgIC8vIGFsbG93IGNyb3NzIHVzaW5nIHN0b3Jlc1xuICAgICAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgICAgICAgICAgaWYgKGlzVnVlMiAmJiAhc3RvcmUuX3IpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICAgICAgLy8gcmV0dXJuIGdldHRlcnMhW25hbWVdLmNhbGwoY29udGV4dCwgY29udGV4dClcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBhdm9pZCByZWFkaW5nIHRoZSBnZXR0ZXIgd2hpbGUgYXNzaWduaW5nIHdpdGggYSBnbG9iYWwgdmFyaWFibGVcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0dGVyc1tuYW1lXS5jYWxsKHN0b3JlLCBzdG9yZSk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICByZXR1cm4gY29tcHV0ZWRHZXR0ZXJzO1xuICAgICAgICB9LCB7fSkpO1xuICAgIH1cbiAgICBzdG9yZSA9IGNyZWF0ZVNldHVwU3RvcmUoaWQsIHNldHVwLCBvcHRpb25zLCBwaW5pYSwgaG90LCB0cnVlKTtcbiAgICByZXR1cm4gc3RvcmU7XG59XG5mdW5jdGlvbiBjcmVhdGVTZXR1cFN0b3JlKCRpZCwgc2V0dXAsIG9wdGlvbnMgPSB7fSwgcGluaWEsIGhvdCwgaXNPcHRpb25zU3RvcmUpIHtcbiAgICBsZXQgc2NvcGU7XG4gICAgY29uc3Qgb3B0aW9uc0ZvclBsdWdpbiA9IGFzc2lnbih7IGFjdGlvbnM6IHt9IH0sIG9wdGlvbnMpO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIXBpbmlhLl9lLmFjdGl2ZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1BpbmlhIGRlc3Ryb3llZCcpO1xuICAgIH1cbiAgICAvLyB3YXRjaGVyIG9wdGlvbnMgZm9yICRzdWJzY3JpYmVcbiAgICBjb25zdCAkc3Vic2NyaWJlT3B0aW9ucyA9IHtcbiAgICAgICAgZGVlcDogdHJ1ZSxcbiAgICAgICAgLy8gZmx1c2g6ICdwb3N0JyxcbiAgICB9O1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhaXNWdWUyKSB7XG4gICAgICAgICRzdWJzY3JpYmVPcHRpb25zLm9uVHJpZ2dlciA9IChldmVudCkgPT4ge1xuICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgICAgICAgIGlmIChpc0xpc3RlbmluZykge1xuICAgICAgICAgICAgICAgIGRlYnVnZ2VyRXZlbnRzID0gZXZlbnQ7XG4gICAgICAgICAgICAgICAgLy8gYXZvaWQgdHJpZ2dlcmluZyB0aGlzIHdoaWxlIHRoZSBzdG9yZSBpcyBiZWluZyBidWlsdCBhbmQgdGhlIHN0YXRlIGlzIGJlaW5nIHNldCBpbiBwaW5pYVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaXNMaXN0ZW5pbmcgPT0gZmFsc2UgJiYgIXN0b3JlLl9ob3RVcGRhdGluZykge1xuICAgICAgICAgICAgICAgIC8vIGxldCBwYXRjaCBzZW5kIGFsbCB0aGUgZXZlbnRzIHRvZ2V0aGVyIGxhdGVyXG4gICAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShkZWJ1Z2dlckV2ZW50cykpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVidWdnZXJFdmVudHMucHVzaChldmVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCfwn42NIGRlYnVnZ2VyRXZlbnRzIHNob3VsZCBiZSBhbiBhcnJheS4gVGhpcyBpcyBtb3N0IGxpa2VseSBhbiBpbnRlcm5hbCBQaW5pYSBidWcuJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbiAgICAvLyBpbnRlcm5hbCBzdGF0ZVxuICAgIGxldCBpc0xpc3RlbmluZzsgLy8gc2V0IHRvIHRydWUgYXQgdGhlIGVuZFxuICAgIGxldCBpc1N5bmNMaXN0ZW5pbmc7IC8vIHNldCB0byB0cnVlIGF0IHRoZSBlbmRcbiAgICBsZXQgc3Vic2NyaXB0aW9ucyA9IFtdO1xuICAgIGxldCBhY3Rpb25TdWJzY3JpcHRpb25zID0gW107XG4gICAgbGV0IGRlYnVnZ2VyRXZlbnRzO1xuICAgIGNvbnN0IGluaXRpYWxTdGF0ZSA9IHBpbmlhLnN0YXRlLnZhbHVlWyRpZF07XG4gICAgLy8gYXZvaWQgc2V0dGluZyB0aGUgc3RhdGUgZm9yIG9wdGlvbiBzdG9yZXMgaWYgaXQgaXMgc2V0XG4gICAgLy8gYnkgdGhlIHNldHVwXG4gICAgaWYgKCFpc09wdGlvbnNTdG9yZSAmJiAhaW5pdGlhbFN0YXRlICYmICghKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHx8ICFob3QpKSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAoaXNWdWUyKSB7XG4gICAgICAgICAgICBzZXQocGluaWEuc3RhdGUudmFsdWUsICRpZCwge30pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcGluaWEuc3RhdGUudmFsdWVbJGlkXSA9IHt9O1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGhvdFN0YXRlID0gcmVmKHt9KTtcbiAgICAvLyBhdm9pZCB0cmlnZ2VyaW5nIHRvbyBtYW55IGxpc3RlbmVyc1xuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy9waW5pYS9pc3N1ZXMvMTEyOVxuICAgIGxldCBhY3RpdmVMaXN0ZW5lcjtcbiAgICBmdW5jdGlvbiAkcGF0Y2gocGFydGlhbFN0YXRlT3JNdXRhdG9yKSB7XG4gICAgICAgIGxldCBzdWJzY3JpcHRpb25NdXRhdGlvbjtcbiAgICAgICAgaXNMaXN0ZW5pbmcgPSBpc1N5bmNMaXN0ZW5pbmcgPSBmYWxzZTtcbiAgICAgICAgLy8gcmVzZXQgdGhlIGRlYnVnZ2VyIGV2ZW50cyBzaW5jZSBwYXRjaGVzIGFyZSBzeW5jXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgIGRlYnVnZ2VyRXZlbnRzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBwYXJ0aWFsU3RhdGVPck11dGF0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHBhcnRpYWxTdGF0ZU9yTXV0YXRvcihwaW5pYS5zdGF0ZS52YWx1ZVskaWRdKTtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbk11dGF0aW9uID0ge1xuICAgICAgICAgICAgICAgIHR5cGU6IE11dGF0aW9uVHlwZS5wYXRjaEZ1bmN0aW9uLFxuICAgICAgICAgICAgICAgIHN0b3JlSWQ6ICRpZCxcbiAgICAgICAgICAgICAgICBldmVudHM6IGRlYnVnZ2VyRXZlbnRzLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG1lcmdlUmVhY3RpdmVPYmplY3RzKHBpbmlhLnN0YXRlLnZhbHVlWyRpZF0sIHBhcnRpYWxTdGF0ZU9yTXV0YXRvcik7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb25NdXRhdGlvbiA9IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBNdXRhdGlvblR5cGUucGF0Y2hPYmplY3QsXG4gICAgICAgICAgICAgICAgcGF5bG9hZDogcGFydGlhbFN0YXRlT3JNdXRhdG9yLFxuICAgICAgICAgICAgICAgIHN0b3JlSWQ6ICRpZCxcbiAgICAgICAgICAgICAgICBldmVudHM6IGRlYnVnZ2VyRXZlbnRzLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBteUxpc3RlbmVySWQgPSAoYWN0aXZlTGlzdGVuZXIgPSBTeW1ib2woKSk7XG4gICAgICAgIG5leHRUaWNrKCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBpZiAoYWN0aXZlTGlzdGVuZXIgPT09IG15TGlzdGVuZXJJZCkge1xuICAgICAgICAgICAgICAgIGlzTGlzdGVuaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlzU3luY0xpc3RlbmluZyA9IHRydWU7XG4gICAgICAgIC8vIGJlY2F1c2Ugd2UgcGF1c2VkIHRoZSB3YXRjaGVyLCB3ZSBuZWVkIHRvIG1hbnVhbGx5IGNhbGwgdGhlIHN1YnNjcmlwdGlvbnNcbiAgICAgICAgdHJpZ2dlclN1YnNjcmlwdGlvbnMoc3Vic2NyaXB0aW9ucywgc3Vic2NyaXB0aW9uTXV0YXRpb24sIHBpbmlhLnN0YXRlLnZhbHVlWyRpZF0pO1xuICAgIH1cbiAgICBjb25zdCAkcmVzZXQgPSBpc09wdGlvbnNTdG9yZVxuICAgICAgICA/IGZ1bmN0aW9uICRyZXNldCgpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgc3RhdGUgfSA9IG9wdGlvbnM7XG4gICAgICAgICAgICBjb25zdCBuZXdTdGF0ZSA9IHN0YXRlID8gc3RhdGUoKSA6IHt9O1xuICAgICAgICAgICAgLy8gd2UgdXNlIGEgcGF0Y2ggdG8gZ3JvdXAgYWxsIGNoYW5nZXMgaW50byBvbmUgc2luZ2xlIHN1YnNjcmlwdGlvblxuICAgICAgICAgICAgdGhpcy4kcGF0Y2goKCRzdGF0ZSkgPT4ge1xuICAgICAgICAgICAgICAgIGFzc2lnbigkc3RhdGUsIG5ld1N0YXRlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIDogLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKVxuICAgICAgICAgICAgICAgID8gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYPCfjY06IFN0b3JlIFwiJHskaWR9XCIgaXMgYnVpbHQgdXNpbmcgdGhlIHNldHVwIHN5bnRheCBhbmQgZG9lcyBub3QgaW1wbGVtZW50ICRyZXNldCgpLmApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICA6IG5vb3A7XG4gICAgZnVuY3Rpb24gJGRpc3Bvc2UoKSB7XG4gICAgICAgIHNjb3BlLnN0b3AoKTtcbiAgICAgICAgc3Vic2NyaXB0aW9ucyA9IFtdO1xuICAgICAgICBhY3Rpb25TdWJzY3JpcHRpb25zID0gW107XG4gICAgICAgIHBpbmlhLl9zLmRlbGV0ZSgkaWQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXcmFwcyBhbiBhY3Rpb24gdG8gaGFuZGxlIHN1YnNjcmlwdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbmFtZSAtIG5hbWUgb2YgdGhlIGFjdGlvblxuICAgICAqIEBwYXJhbSBhY3Rpb24gLSBhY3Rpb24gdG8gd3JhcFxuICAgICAqIEByZXR1cm5zIGEgd3JhcHBlZCBhY3Rpb24gdG8gaGFuZGxlIHN1YnNjcmlwdGlvbnNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwQWN0aW9uKG5hbWUsIGFjdGlvbikge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc2V0QWN0aXZlUGluaWEocGluaWEpO1xuICAgICAgICAgICAgY29uc3QgYXJncyA9IEFycmF5LmZyb20oYXJndW1lbnRzKTtcbiAgICAgICAgICAgIGNvbnN0IGFmdGVyQ2FsbGJhY2tMaXN0ID0gW107XG4gICAgICAgICAgICBjb25zdCBvbkVycm9yQ2FsbGJhY2tMaXN0ID0gW107XG4gICAgICAgICAgICBmdW5jdGlvbiBhZnRlcihjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIGFmdGVyQ2FsbGJhY2tMaXN0LnB1c2goY2FsbGJhY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gb25FcnJvcihjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIG9uRXJyb3JDYWxsYmFja0xpc3QucHVzaChjYWxsYmFjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICB0cmlnZ2VyU3Vic2NyaXB0aW9ucyhhY3Rpb25TdWJzY3JpcHRpb25zLCB7XG4gICAgICAgICAgICAgICAgYXJncyxcbiAgICAgICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgICAgIHN0b3JlLFxuICAgICAgICAgICAgICAgIGFmdGVyLFxuICAgICAgICAgICAgICAgIG9uRXJyb3IsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGxldCByZXQ7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldCA9IGFjdGlvbi5hcHBseSh0aGlzICYmIHRoaXMuJGlkID09PSAkaWQgPyB0aGlzIDogc3RvcmUsIGFyZ3MpO1xuICAgICAgICAgICAgICAgIC8vIGhhbmRsZSBzeW5jIGVycm9yc1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgdHJpZ2dlclN1YnNjcmlwdGlvbnMob25FcnJvckNhbGxiYWNrTGlzdCwgZXJyb3IpO1xuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJldCBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmV0XG4gICAgICAgICAgICAgICAgICAgIC50aGVuKCh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyU3Vic2NyaXB0aW9ucyhhZnRlckNhbGxiYWNrTGlzdCwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyU3Vic2NyaXB0aW9ucyhvbkVycm9yQ2FsbGJhY2tMaXN0LCBlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB0cmlnZ2VyIGFmdGVyIGNhbGxiYWNrc1xuICAgICAgICAgICAgdHJpZ2dlclN1YnNjcmlwdGlvbnMoYWZ0ZXJDYWxsYmFja0xpc3QsIHJldCk7XG4gICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICB9O1xuICAgIH1cbiAgICBjb25zdCBfaG1yUGF5bG9hZCA9IC8qI19fUFVSRV9fKi8gbWFya1Jhdyh7XG4gICAgICAgIGFjdGlvbnM6IHt9LFxuICAgICAgICBnZXR0ZXJzOiB7fSxcbiAgICAgICAgc3RhdGU6IFtdLFxuICAgICAgICBob3RTdGF0ZSxcbiAgICB9KTtcbiAgICBjb25zdCBwYXJ0aWFsU3RvcmUgPSB7XG4gICAgICAgIF9wOiBwaW5pYSxcbiAgICAgICAgLy8gX3M6IHNjb3BlLFxuICAgICAgICAkaWQsXG4gICAgICAgICRvbkFjdGlvbjogYWRkU3Vic2NyaXB0aW9uLmJpbmQobnVsbCwgYWN0aW9uU3Vic2NyaXB0aW9ucyksXG4gICAgICAgICRwYXRjaCxcbiAgICAgICAgJHJlc2V0LFxuICAgICAgICAkc3Vic2NyaWJlKGNhbGxiYWNrLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgICAgIGNvbnN0IHJlbW92ZVN1YnNjcmlwdGlvbiA9IGFkZFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb25zLCBjYWxsYmFjaywgb3B0aW9ucy5kZXRhY2hlZCwgKCkgPT4gc3RvcFdhdGNoZXIoKSk7XG4gICAgICAgICAgICBjb25zdCBzdG9wV2F0Y2hlciA9IHNjb3BlLnJ1bigoKSA9PiB3YXRjaCgoKSA9PiBwaW5pYS5zdGF0ZS52YWx1ZVskaWRdLCAoc3RhdGUpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5mbHVzaCA9PT0gJ3N5bmMnID8gaXNTeW5jTGlzdGVuaW5nIDogaXNMaXN0ZW5pbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soe1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RvcmVJZDogJGlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogTXV0YXRpb25UeXBlLmRpcmVjdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50czogZGVidWdnZXJFdmVudHMsXG4gICAgICAgICAgICAgICAgICAgIH0sIHN0YXRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBhc3NpZ24oe30sICRzdWJzY3JpYmVPcHRpb25zLCBvcHRpb25zKSkpO1xuICAgICAgICAgICAgcmV0dXJuIHJlbW92ZVN1YnNjcmlwdGlvbjtcbiAgICAgICAgfSxcbiAgICAgICAgJGRpc3Bvc2UsXG4gICAgfTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoaXNWdWUyKSB7XG4gICAgICAgIC8vIHN0YXJ0IGFzIG5vbiByZWFkeVxuICAgICAgICBwYXJ0aWFsU3RvcmUuX3IgPSBmYWxzZTtcbiAgICB9XG4gICAgY29uc3Qgc3RvcmUgPSByZWFjdGl2ZSgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgfHwgVVNFX0RFVlRPT0xTXG4gICAgICAgID8gYXNzaWduKHtcbiAgICAgICAgICAgIF9obXJQYXlsb2FkLFxuICAgICAgICAgICAgX2N1c3RvbVByb3BlcnRpZXM6IG1hcmtSYXcobmV3IFNldCgpKSwgLy8gZGV2dG9vbHMgY3VzdG9tIHByb3BlcnRpZXNcbiAgICAgICAgfSwgcGFydGlhbFN0b3JlXG4gICAgICAgIC8vIG11c3QgYmUgYWRkZWQgbGF0ZXJcbiAgICAgICAgLy8gc2V0dXBTdG9yZVxuICAgICAgICApXG4gICAgICAgIDogcGFydGlhbFN0b3JlKTtcbiAgICAvLyBzdG9yZSB0aGUgcGFydGlhbCBzdG9yZSBub3cgc28gdGhlIHNldHVwIG9mIHN0b3JlcyBjYW4gaW5zdGFudGlhdGUgZWFjaCBvdGhlciBiZWZvcmUgdGhleSBhcmUgZmluaXNoZWQgd2l0aG91dFxuICAgIC8vIGNyZWF0aW5nIGluZmluaXRlIGxvb3BzLlxuICAgIHBpbmlhLl9zLnNldCgkaWQsIHN0b3JlKTtcbiAgICBjb25zdCBydW5XaXRoQ29udGV4dCA9IChwaW5pYS5fYSAmJiBwaW5pYS5fYS5ydW5XaXRoQ29udGV4dCkgfHwgZmFsbGJhY2tSdW5XaXRoQ29udGV4dDtcbiAgICAvLyBUT0RPOiBpZGVhIGNyZWF0ZSBza2lwU2VyaWFsaXplIHRoYXQgbWFya3MgcHJvcGVydGllcyBhcyBub24gc2VyaWFsaXphYmxlIGFuZCB0aGV5IGFyZSBza2lwcGVkXG4gICAgY29uc3Qgc2V0dXBTdG9yZSA9IHBpbmlhLl9lLnJ1bigoKSA9PiB7XG4gICAgICAgIHNjb3BlID0gZWZmZWN0U2NvcGUoKTtcbiAgICAgICAgcmV0dXJuIHJ1bldpdGhDb250ZXh0KCgpID0+IHNjb3BlLnJ1bihzZXR1cCkpO1xuICAgIH0pO1xuICAgIC8vIG92ZXJ3cml0ZSBleGlzdGluZyBhY3Rpb25zIHRvIHN1cHBvcnQgJG9uQWN0aW9uXG4gICAgZm9yIChjb25zdCBrZXkgaW4gc2V0dXBTdG9yZSkge1xuICAgICAgICBjb25zdCBwcm9wID0gc2V0dXBTdG9yZVtrZXldO1xuICAgICAgICBpZiAoKGlzUmVmKHByb3ApICYmICFpc0NvbXB1dGVkKHByb3ApKSB8fCBpc1JlYWN0aXZlKHByb3ApKSB7XG4gICAgICAgICAgICAvLyBtYXJrIGl0IGFzIGEgcGllY2Ugb2Ygc3RhdGUgdG8gYmUgc2VyaWFsaXplZFxuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBob3QpIHtcbiAgICAgICAgICAgICAgICBzZXQoaG90U3RhdGUudmFsdWUsIGtleSwgdG9SZWYoc2V0dXBTdG9yZSwga2V5KSk7XG4gICAgICAgICAgICAgICAgLy8gY3JlYXRlT3B0aW9uU3RvcmUgZGlyZWN0bHkgc2V0cyB0aGUgc3RhdGUgaW4gcGluaWEuc3RhdGUudmFsdWUgc28gd2VcbiAgICAgICAgICAgICAgICAvLyBjYW4ganVzdCBza2lwIHRoYXRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKCFpc09wdGlvbnNTdG9yZSkge1xuICAgICAgICAgICAgICAgIC8vIGluIHNldHVwIHN0b3JlcyB3ZSBtdXN0IGh5ZHJhdGUgdGhlIHN0YXRlIGFuZCBzeW5jIHBpbmlhIHN0YXRlIHRyZWUgd2l0aCB0aGUgcmVmcyB0aGUgdXNlciBqdXN0IGNyZWF0ZWRcbiAgICAgICAgICAgICAgICBpZiAoaW5pdGlhbFN0YXRlICYmIHNob3VsZEh5ZHJhdGUocHJvcCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzUmVmKHByb3ApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wLnZhbHVlID0gaW5pdGlhbFN0YXRlW2tleV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBwcm9iYWJseSBhIHJlYWN0aXZlIG9iamVjdCwgbGV0cyByZWN1cnNpdmVseSBhc3NpZ25cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IHByb3AgaXMgdW5rbm93blxuICAgICAgICAgICAgICAgICAgICAgICAgbWVyZ2VSZWFjdGl2ZU9iamVjdHMocHJvcCwgaW5pdGlhbFN0YXRlW2tleV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIHRyYW5zZmVyIHRoZSByZWYgdG8gdGhlIHBpbmlhIHN0YXRlIHRvIGtlZXAgZXZlcnl0aGluZyBpbiBzeW5jXG4gICAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICAgICAgaWYgKGlzVnVlMikge1xuICAgICAgICAgICAgICAgICAgICBzZXQocGluaWEuc3RhdGUudmFsdWVbJGlkXSwga2V5LCBwcm9wKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBpbmlhLnN0YXRlLnZhbHVlWyRpZF1ba2V5XSA9IHByb3A7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICBfaG1yUGF5bG9hZC5zdGF0ZS5wdXNoKGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBhY3Rpb25cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgcHJvcCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogd2UgYXJlIG92ZXJyaWRpbmcgdGhlIGZ1bmN0aW9uIHdlIGF2b2lkIHdyYXBwaW5nIGlmXG4gICAgICAgICAgICBjb25zdCBhY3Rpb25WYWx1ZSA9IChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBob3QgPyBwcm9wIDogd3JhcEFjdGlvbihrZXksIHByb3ApO1xuICAgICAgICAgICAgLy8gdGhpcyBhIGhvdCBtb2R1bGUgcmVwbGFjZW1lbnQgc3RvcmUgYmVjYXVzZSB0aGUgaG90VXBkYXRlIG1ldGhvZCBuZWVkc1xuICAgICAgICAgICAgLy8gdG8gZG8gaXQgd2l0aCB0aGUgcmlnaHQgY29udGV4dFxuICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICBpZiAoaXNWdWUyKSB7XG4gICAgICAgICAgICAgICAgc2V0KHNldHVwU3RvcmUsIGtleSwgYWN0aW9uVmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgICAgICAgIHNldHVwU3RvcmVba2V5XSA9IGFjdGlvblZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICBfaG1yUGF5bG9hZC5hY3Rpb25zW2tleV0gPSBwcm9wO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gbGlzdCBhY3Rpb25zIHNvIHRoZXkgY2FuIGJlIHVzZWQgaW4gcGx1Z2luc1xuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgICAgb3B0aW9uc0ZvclBsdWdpbi5hY3Rpb25zW2tleV0gPSBwcm9wO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgLy8gYWRkIGdldHRlcnMgZm9yIGRldnRvb2xzXG4gICAgICAgICAgICBpZiAoaXNDb21wdXRlZChwcm9wKSkge1xuICAgICAgICAgICAgICAgIF9obXJQYXlsb2FkLmdldHRlcnNba2V5XSA9IGlzT3B0aW9uc1N0b3JlXG4gICAgICAgICAgICAgICAgICAgID8gLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5nZXR0ZXJzW2tleV1cbiAgICAgICAgICAgICAgICAgICAgOiBwcm9wO1xuICAgICAgICAgICAgICAgIGlmIChJU19DTElFTlQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZ2V0dGVycyA9IHNldHVwU3RvcmUuX2dldHRlcnMgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IHNhbWVcbiAgICAgICAgICAgICAgICAgICAgICAgIChzZXR1cFN0b3JlLl9nZXR0ZXJzID0gbWFya1JhdyhbXSkpO1xuICAgICAgICAgICAgICAgICAgICBnZXR0ZXJzLnB1c2goa2V5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gYWRkIHRoZSBzdGF0ZSwgZ2V0dGVycywgYW5kIGFjdGlvbiBwcm9wZXJ0aWVzXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKGlzVnVlMikge1xuICAgICAgICBPYmplY3Qua2V5cyhzZXR1cFN0b3JlKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgICAgIHNldChzdG9yZSwga2V5LCBzZXR1cFN0b3JlW2tleV0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGFzc2lnbihzdG9yZSwgc2V0dXBTdG9yZSk7XG4gICAgICAgIC8vIGFsbG93cyByZXRyaWV2aW5nIHJlYWN0aXZlIG9iamVjdHMgd2l0aCBgc3RvcmVUb1JlZnMoKWAuIE11c3QgYmUgY2FsbGVkIGFmdGVyIGFzc2lnbmluZyB0byB0aGUgcmVhY3RpdmUgb2JqZWN0LlxuICAgICAgICAvLyBNYWtlIGBzdG9yZVRvUmVmcygpYCB3b3JrIHdpdGggYHJlYWN0aXZlKClgICM3OTlcbiAgICAgICAgYXNzaWduKHRvUmF3KHN0b3JlKSwgc2V0dXBTdG9yZSk7XG4gICAgfVxuICAgIC8vIHVzZSB0aGlzIGluc3RlYWQgb2YgYSBjb21wdXRlZCB3aXRoIHNldHRlciB0byBiZSBhYmxlIHRvIGNyZWF0ZSBpdCBhbnl3aGVyZVxuICAgIC8vIHdpdGhvdXQgbGlua2luZyB0aGUgY29tcHV0ZWQgbGlmZXNwYW4gdG8gd2hlcmV2ZXIgdGhlIHN0b3JlIGlzIGZpcnN0XG4gICAgLy8gY3JlYXRlZC5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc3RvcmUsICckc3RhdGUnLCB7XG4gICAgICAgIGdldDogKCkgPT4gKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBob3QgPyBob3RTdGF0ZS52YWx1ZSA6IHBpbmlhLnN0YXRlLnZhbHVlWyRpZF0pLFxuICAgICAgICBzZXQ6IChzdGF0ZSkgPT4ge1xuICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGhvdCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignY2Fubm90IHNldCBob3RTdGF0ZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJHBhdGNoKCgkc3RhdGUpID0+IHtcbiAgICAgICAgICAgICAgICBhc3NpZ24oJHN0YXRlLCBzdGF0ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICB9KTtcbiAgICAvLyBhZGQgdGhlIGhvdFVwZGF0ZSBiZWZvcmUgcGx1Z2lucyB0byBhbGxvdyB0aGVtIHRvIG92ZXJyaWRlIGl0XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgIHN0b3JlLl9ob3RVcGRhdGUgPSBtYXJrUmF3KChuZXdTdG9yZSkgPT4ge1xuICAgICAgICAgICAgc3RvcmUuX2hvdFVwZGF0aW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIG5ld1N0b3JlLl9obXJQYXlsb2FkLnN0YXRlLmZvckVhY2goKHN0YXRlS2V5KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlS2V5IGluIHN0b3JlLiRzdGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdTdGF0ZVRhcmdldCA9IG5ld1N0b3JlLiRzdGF0ZVtzdGF0ZUtleV07XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG9sZFN0YXRlU291cmNlID0gc3RvcmUuJHN0YXRlW3N0YXRlS2V5XTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBuZXdTdGF0ZVRhcmdldCA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzUGxhaW5PYmplY3QobmV3U3RhdGVUYXJnZXQpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBpc1BsYWluT2JqZWN0KG9sZFN0YXRlU291cmNlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGF0Y2hPYmplY3QobmV3U3RhdGVUYXJnZXQsIG9sZFN0YXRlU291cmNlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRyYW5zZmVyIHRoZSByZWZcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1N0b3JlLiRzdGF0ZVtzdGF0ZUtleV0gPSBvbGRTdGF0ZVNvdXJjZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBwYXRjaCBkaXJlY3QgYWNjZXNzIHByb3BlcnRpZXMgdG8gYWxsb3cgc3RvcmUuc3RhdGVQcm9wZXJ0eSB0byB3b3JrIGFzXG4gICAgICAgICAgICAgICAgLy8gc3RvcmUuJHN0YXRlLnN0YXRlUHJvcGVydHlcbiAgICAgICAgICAgICAgICBzZXQoc3RvcmUsIHN0YXRlS2V5LCB0b1JlZihuZXdTdG9yZS4kc3RhdGUsIHN0YXRlS2V5KSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIHJlbW92ZSBkZWxldGVkIHN0YXRlIHByb3BlcnRpZXNcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHN0b3JlLiRzdGF0ZSkuZm9yRWFjaCgoc3RhdGVLZXkpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIShzdGF0ZUtleSBpbiBuZXdTdG9yZS4kc3RhdGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbChzdG9yZSwgc3RhdGVLZXkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gYXZvaWQgZGV2dG9vbHMgbG9nZ2luZyB0aGlzIGFzIGEgbXV0YXRpb25cbiAgICAgICAgICAgIGlzTGlzdGVuaW5nID0gZmFsc2U7XG4gICAgICAgICAgICBpc1N5bmNMaXN0ZW5pbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIHBpbmlhLnN0YXRlLnZhbHVlWyRpZF0gPSB0b1JlZihuZXdTdG9yZS5faG1yUGF5bG9hZCwgJ2hvdFN0YXRlJyk7XG4gICAgICAgICAgICBpc1N5bmNMaXN0ZW5pbmcgPSB0cnVlO1xuICAgICAgICAgICAgbmV4dFRpY2soKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICBpc0xpc3RlbmluZyA9IHRydWU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgYWN0aW9uTmFtZSBpbiBuZXdTdG9yZS5faG1yUGF5bG9hZC5hY3Rpb25zKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYWN0aW9uID0gbmV3U3RvcmVbYWN0aW9uTmFtZV07XG4gICAgICAgICAgICAgICAgc2V0KHN0b3JlLCBhY3Rpb25OYW1lLCB3cmFwQWN0aW9uKGFjdGlvbk5hbWUsIGFjdGlvbikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVE9ETzogZG9lcyB0aGlzIHdvcmsgaW4gYm90aCBzZXR1cCBhbmQgb3B0aW9uIHN0b3JlP1xuICAgICAgICAgICAgZm9yIChjb25zdCBnZXR0ZXJOYW1lIGluIG5ld1N0b3JlLl9obXJQYXlsb2FkLmdldHRlcnMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBnZXR0ZXIgPSBuZXdTdG9yZS5faG1yUGF5bG9hZC5nZXR0ZXJzW2dldHRlck5hbWVdO1xuICAgICAgICAgICAgICAgIGNvbnN0IGdldHRlclZhbHVlID0gaXNPcHRpb25zU3RvcmVcbiAgICAgICAgICAgICAgICAgICAgPyAvLyBzcGVjaWFsIGhhbmRsaW5nIG9mIG9wdGlvbnMgYXBpXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wdXRlZCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0QWN0aXZlUGluaWEocGluaWEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBnZXR0ZXIuY2FsbChzdG9yZSwgc3RvcmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgOiBnZXR0ZXI7XG4gICAgICAgICAgICAgICAgc2V0KHN0b3JlLCBnZXR0ZXJOYW1lLCBnZXR0ZXJWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyByZW1vdmUgZGVsZXRlZCBnZXR0ZXJzXG4gICAgICAgICAgICBPYmplY3Qua2V5cyhzdG9yZS5faG1yUGF5bG9hZC5nZXR0ZXJzKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIShrZXkgaW4gbmV3U3RvcmUuX2htclBheWxvYWQuZ2V0dGVycykpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsKHN0b3JlLCBrZXkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gcmVtb3ZlIG9sZCBhY3Rpb25zXG4gICAgICAgICAgICBPYmplY3Qua2V5cyhzdG9yZS5faG1yUGF5bG9hZC5hY3Rpb25zKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIShrZXkgaW4gbmV3U3RvcmUuX2htclBheWxvYWQuYWN0aW9ucykpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsKHN0b3JlLCBrZXkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gdXBkYXRlIHRoZSB2YWx1ZXMgdXNlZCBpbiBkZXZ0b29scyBhbmQgdG8gYWxsb3cgZGVsZXRpbmcgbmV3IHByb3BlcnRpZXMgbGF0ZXIgb25cbiAgICAgICAgICAgIHN0b3JlLl9obXJQYXlsb2FkID0gbmV3U3RvcmUuX2htclBheWxvYWQ7XG4gICAgICAgICAgICBzdG9yZS5fZ2V0dGVycyA9IG5ld1N0b3JlLl9nZXR0ZXJzO1xuICAgICAgICAgICAgc3RvcmUuX2hvdFVwZGF0aW5nID0gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoVVNFX0RFVlRPT0xTKSB7XG4gICAgICAgIGNvbnN0IG5vbkVudW1lcmFibGUgPSB7XG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIC8vIGF2b2lkIHdhcm5pbmcgb24gZGV2dG9vbHMgdHJ5aW5nIHRvIGRpc3BsYXkgdGhpcyBwcm9wZXJ0eVxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIH07XG4gICAgICAgIFsnX3AnLCAnX2htclBheWxvYWQnLCAnX2dldHRlcnMnLCAnX2N1c3RvbVByb3BlcnRpZXMnXS5mb3JFYWNoKChwKSA9PiB7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc3RvcmUsIHAsIGFzc2lnbih7IHZhbHVlOiBzdG9yZVtwXSB9LCBub25FbnVtZXJhYmxlKSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoaXNWdWUyKSB7XG4gICAgICAgIC8vIG1hcmsgdGhlIHN0b3JlIGFzIHJlYWR5IGJlZm9yZSBwbHVnaW5zXG4gICAgICAgIHN0b3JlLl9yID0gdHJ1ZTtcbiAgICB9XG4gICAgLy8gYXBwbHkgYWxsIHBsdWdpbnNcbiAgICBwaW5pYS5fcC5mb3JFYWNoKChleHRlbmRlcikgPT4ge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgICBpZiAoVVNFX0RFVlRPT0xTKSB7XG4gICAgICAgICAgICBjb25zdCBleHRlbnNpb25zID0gc2NvcGUucnVuKCgpID0+IGV4dGVuZGVyKHtcbiAgICAgICAgICAgICAgICBzdG9yZSxcbiAgICAgICAgICAgICAgICBhcHA6IHBpbmlhLl9hLFxuICAgICAgICAgICAgICAgIHBpbmlhLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IG9wdGlvbnNGb3JQbHVnaW4sXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhleHRlbnNpb25zIHx8IHt9KS5mb3JFYWNoKChrZXkpID0+IHN0b3JlLl9jdXN0b21Qcm9wZXJ0aWVzLmFkZChrZXkpKTtcbiAgICAgICAgICAgIGFzc2lnbihzdG9yZSwgZXh0ZW5zaW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBhc3NpZ24oc3RvcmUsIHNjb3BlLnJ1bigoKSA9PiBleHRlbmRlcih7XG4gICAgICAgICAgICAgICAgc3RvcmUsXG4gICAgICAgICAgICAgICAgYXBwOiBwaW5pYS5fYSxcbiAgICAgICAgICAgICAgICBwaW5pYSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBvcHRpb25zRm9yUGx1Z2luLFxuICAgICAgICAgICAgfSkpKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcbiAgICAgICAgc3RvcmUuJHN0YXRlICYmXG4gICAgICAgIHR5cGVvZiBzdG9yZS4kc3RhdGUgPT09ICdvYmplY3QnICYmXG4gICAgICAgIHR5cGVvZiBzdG9yZS4kc3RhdGUuY29uc3RydWN0b3IgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgICAgIXN0b3JlLiRzdGF0ZS5jb25zdHJ1Y3Rvci50b1N0cmluZygpLmluY2x1ZGVzKCdbbmF0aXZlIGNvZGVdJykpIHtcbiAgICAgICAgY29uc29sZS53YXJuKGBb8J+NjV06IFRoZSBcInN0YXRlXCIgbXVzdCBiZSBhIHBsYWluIG9iamVjdC4gSXQgY2Fubm90IGJlXFxuYCArXG4gICAgICAgICAgICBgXFx0c3RhdGU6ICgpID0+IG5ldyBNeUNsYXNzKClcXG5gICtcbiAgICAgICAgICAgIGBGb3VuZCBpbiBzdG9yZSBcIiR7c3RvcmUuJGlkfVwiLmApO1xuICAgIH1cbiAgICAvLyBvbmx5IGFwcGx5IGh5ZHJhdGUgdG8gb3B0aW9uIHN0b3JlcyB3aXRoIGFuIGluaXRpYWwgc3RhdGUgaW4gcGluaWFcbiAgICBpZiAoaW5pdGlhbFN0YXRlICYmXG4gICAgICAgIGlzT3B0aW9uc1N0b3JlICYmXG4gICAgICAgIG9wdGlvbnMuaHlkcmF0ZSkge1xuICAgICAgICBvcHRpb25zLmh5ZHJhdGUoc3RvcmUuJHN0YXRlLCBpbml0aWFsU3RhdGUpO1xuICAgIH1cbiAgICBpc0xpc3RlbmluZyA9IHRydWU7XG4gICAgaXNTeW5jTGlzdGVuaW5nID0gdHJ1ZTtcbiAgICByZXR1cm4gc3RvcmU7XG59XG5mdW5jdGlvbiBkZWZpbmVTdG9yZShcbi8vIFRPRE86IGFkZCBwcm9wZXIgdHlwZXMgZnJvbSBhYm92ZVxuaWRPck9wdGlvbnMsIHNldHVwLCBzZXR1cE9wdGlvbnMpIHtcbiAgICBsZXQgaWQ7XG4gICAgbGV0IG9wdGlvbnM7XG4gICAgY29uc3QgaXNTZXR1cFN0b3JlID0gdHlwZW9mIHNldHVwID09PSAnZnVuY3Rpb24nO1xuICAgIGlmICh0eXBlb2YgaWRPck9wdGlvbnMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlkID0gaWRPck9wdGlvbnM7XG4gICAgICAgIC8vIHRoZSBvcHRpb24gc3RvcmUgc2V0dXAgd2lsbCBjb250YWluIHRoZSBhY3R1YWwgb3B0aW9ucyBpbiB0aGlzIGNhc2VcbiAgICAgICAgb3B0aW9ucyA9IGlzU2V0dXBTdG9yZSA/IHNldHVwT3B0aW9ucyA6IHNldHVwO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgb3B0aW9ucyA9IGlkT3JPcHRpb25zO1xuICAgICAgICBpZCA9IGlkT3JPcHRpb25zLmlkO1xuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHR5cGVvZiBpZCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgW/CfjY1dOiBcImRlZmluZVN0b3JlKClcIiBtdXN0IGJlIHBhc3NlZCBhIHN0b3JlIGlkIGFzIGl0cyBmaXJzdCBhcmd1bWVudC5gKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiB1c2VTdG9yZShwaW5pYSwgaG90KSB7XG4gICAgICAgIGNvbnN0IGhhc0NvbnRleHQgPSBoYXNJbmplY3Rpb25Db250ZXh0KCk7XG4gICAgICAgIHBpbmlhID1cbiAgICAgICAgICAgIC8vIGluIHRlc3QgbW9kZSwgaWdub3JlIHRoZSBhcmd1bWVudCBwcm92aWRlZCBhcyB3ZSBjYW4gYWx3YXlzIHJldHJpZXZlIGFcbiAgICAgICAgICAgIC8vIHBpbmlhIGluc3RhbmNlIHdpdGggZ2V0QWN0aXZlUGluaWEoKVxuICAgICAgICAgICAgKChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Rlc3QnKSAmJiBhY3RpdmVQaW5pYSAmJiBhY3RpdmVQaW5pYS5fdGVzdGluZyA/IG51bGwgOiBwaW5pYSkgfHxcbiAgICAgICAgICAgICAgICAoaGFzQ29udGV4dCA/IGluamVjdChwaW5pYVN5bWJvbCwgbnVsbCkgOiBudWxsKTtcbiAgICAgICAgaWYgKHBpbmlhKVxuICAgICAgICAgICAgc2V0QWN0aXZlUGluaWEocGluaWEpO1xuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFhY3RpdmVQaW5pYSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBb8J+NjV06IFwiZ2V0QWN0aXZlUGluaWEoKVwiIHdhcyBjYWxsZWQgYnV0IHRoZXJlIHdhcyBubyBhY3RpdmUgUGluaWEuIERpZCB5b3UgZm9yZ2V0IHRvIGluc3RhbGwgcGluaWE/XFxuYCArXG4gICAgICAgICAgICAgICAgYFxcdGNvbnN0IHBpbmlhID0gY3JlYXRlUGluaWEoKVxcbmAgK1xuICAgICAgICAgICAgICAgIGBcXHRhcHAudXNlKHBpbmlhKVxcbmAgK1xuICAgICAgICAgICAgICAgIGBUaGlzIHdpbGwgZmFpbCBpbiBwcm9kdWN0aW9uLmApO1xuICAgICAgICB9XG4gICAgICAgIHBpbmlhID0gYWN0aXZlUGluaWE7XG4gICAgICAgIGlmICghcGluaWEuX3MuaGFzKGlkKSkge1xuICAgICAgICAgICAgLy8gY3JlYXRpbmcgdGhlIHN0b3JlIHJlZ2lzdGVycyBpdCBpbiBgcGluaWEuX3NgXG4gICAgICAgICAgICBpZiAoaXNTZXR1cFN0b3JlKSB7XG4gICAgICAgICAgICAgICAgY3JlYXRlU2V0dXBTdG9yZShpZCwgc2V0dXAsIG9wdGlvbnMsIHBpbmlhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNyZWF0ZU9wdGlvbnNTdG9yZShpZCwgb3B0aW9ucywgcGluaWEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiBub3QgdGhlIHJpZ2h0IGluZmVycmVkIHR5cGVcbiAgICAgICAgICAgICAgICB1c2VTdG9yZS5fcGluaWEgPSBwaW5pYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdG9yZSA9IHBpbmlhLl9zLmdldChpZCk7XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgaG90KSB7XG4gICAgICAgICAgICBjb25zdCBob3RJZCA9ICdfX2hvdDonICsgaWQ7XG4gICAgICAgICAgICBjb25zdCBuZXdTdG9yZSA9IGlzU2V0dXBTdG9yZVxuICAgICAgICAgICAgICAgID8gY3JlYXRlU2V0dXBTdG9yZShob3RJZCwgc2V0dXAsIG9wdGlvbnMsIHBpbmlhLCB0cnVlKVxuICAgICAgICAgICAgICAgIDogY3JlYXRlT3B0aW9uc1N0b3JlKGhvdElkLCBhc3NpZ24oe30sIG9wdGlvbnMpLCBwaW5pYSwgdHJ1ZSk7XG4gICAgICAgICAgICBob3QuX2hvdFVwZGF0ZShuZXdTdG9yZSk7XG4gICAgICAgICAgICAvLyBjbGVhbnVwIHRoZSBzdGF0ZSBwcm9wZXJ0aWVzIGFuZCB0aGUgc3RvcmUgZnJvbSB0aGUgY2FjaGVcbiAgICAgICAgICAgIGRlbGV0ZSBwaW5pYS5zdGF0ZS52YWx1ZVtob3RJZF07XG4gICAgICAgICAgICBwaW5pYS5fcy5kZWxldGUoaG90SWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgSVNfQ0xJRU5UKSB7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50SW5zdGFuY2UgPSBnZXRDdXJyZW50SW5zdGFuY2UoKTtcbiAgICAgICAgICAgIC8vIHNhdmUgc3RvcmVzIGluIGluc3RhbmNlcyB0byBhY2Nlc3MgdGhlbSBkZXZ0b29sc1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRJbnN0YW5jZSAmJlxuICAgICAgICAgICAgICAgIGN1cnJlbnRJbnN0YW5jZS5wcm94eSAmJlxuICAgICAgICAgICAgICAgIC8vIGF2b2lkIGFkZGluZyBzdG9yZXMgdGhhdCBhcmUganVzdCBidWlsdCBmb3IgaG90IG1vZHVsZSByZXBsYWNlbWVudFxuICAgICAgICAgICAgICAgICFob3QpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB2bSA9IGN1cnJlbnRJbnN0YW5jZS5wcm94eTtcbiAgICAgICAgICAgICAgICBjb25zdCBjYWNoZSA9ICdfcFN0b3JlcycgaW4gdm0gPyB2bS5fcFN0b3JlcyA6ICh2bS5fcFN0b3JlcyA9IHt9KTtcbiAgICAgICAgICAgICAgICBjYWNoZVtpZF0gPSBzdG9yZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBTdG9yZUdlbmVyaWMgY2Fubm90IGJlIGNhc3RlZCB0b3dhcmRzIFN0b3JlXG4gICAgICAgIHJldHVybiBzdG9yZTtcbiAgICB9XG4gICAgdXNlU3RvcmUuJGlkID0gaWQ7XG4gICAgcmV0dXJuIHVzZVN0b3JlO1xufVxuXG5sZXQgbWFwU3RvcmVTdWZmaXggPSAnU3RvcmUnO1xuLyoqXG4gKiBDaGFuZ2VzIHRoZSBzdWZmaXggYWRkZWQgYnkgYG1hcFN0b3JlcygpYC4gQ2FuIGJlIHNldCB0byBhbiBlbXB0eSBzdHJpbmcuXG4gKiBEZWZhdWx0cyB0byBgXCJTdG9yZVwiYC4gTWFrZSBzdXJlIHRvIGV4dGVuZCB0aGUgTWFwU3RvcmVzQ3VzdG9taXphdGlvblxuICogaW50ZXJmYWNlIGlmIHlvdSBhcmUgdXNpbmcgVHlwZVNjcmlwdC5cbiAqXG4gKiBAcGFyYW0gc3VmZml4IC0gbmV3IHN1ZmZpeFxuICovXG5mdW5jdGlvbiBzZXRNYXBTdG9yZVN1ZmZpeChzdWZmaXggLy8gY291bGQgYmUgJ1N0b3JlJyBidXQgdGhhdCB3b3VsZCBiZSBhbm5veWluZyBmb3IgSlNcbikge1xuICAgIG1hcFN0b3JlU3VmZml4ID0gc3VmZml4O1xufVxuLyoqXG4gKiBBbGxvd3MgdXNpbmcgc3RvcmVzIHdpdGhvdXQgdGhlIGNvbXBvc2l0aW9uIEFQSSAoYHNldHVwKClgKSBieSBnZW5lcmF0aW5nIGFuXG4gKiBvYmplY3QgdG8gYmUgc3ByZWFkIGluIHRoZSBgY29tcHV0ZWRgIGZpZWxkIG9mIGEgY29tcG9uZW50LiBJdCBhY2NlcHRzIGEgbGlzdFxuICogb2Ygc3RvcmUgZGVmaW5pdGlvbnMuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGpzXG4gKiBleHBvcnQgZGVmYXVsdCB7XG4gKiAgIGNvbXB1dGVkOiB7XG4gKiAgICAgLy8gb3RoZXIgY29tcHV0ZWQgcHJvcGVydGllc1xuICogICAgIC4uLm1hcFN0b3Jlcyh1c2VVc2VyU3RvcmUsIHVzZUNhcnRTdG9yZSlcbiAqICAgfSxcbiAqXG4gKiAgIGNyZWF0ZWQoKSB7XG4gKiAgICAgdGhpcy51c2VyU3RvcmUgLy8gc3RvcmUgd2l0aCBpZCBcInVzZXJcIlxuICogICAgIHRoaXMuY2FydFN0b3JlIC8vIHN0b3JlIHdpdGggaWQgXCJjYXJ0XCJcbiAqICAgfVxuICogfVxuICogYGBgXG4gKlxuICogQHBhcmFtIHN0b3JlcyAtIGxpc3Qgb2Ygc3RvcmVzIHRvIG1hcCB0byBhbiBvYmplY3RcbiAqL1xuZnVuY3Rpb24gbWFwU3RvcmVzKC4uLnN0b3Jlcykge1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgQXJyYXkuaXNBcnJheShzdG9yZXNbMF0pKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihgW/CfjY1dOiBEaXJlY3RseSBwYXNzIGFsbCBzdG9yZXMgdG8gXCJtYXBTdG9yZXMoKVwiIHdpdGhvdXQgcHV0dGluZyB0aGVtIGluIGFuIGFycmF5OlxcbmAgK1xuICAgICAgICAgICAgYFJlcGxhY2VcXG5gICtcbiAgICAgICAgICAgIGBcXHRtYXBTdG9yZXMoW3VzZUF1dGhTdG9yZSwgdXNlQ2FydFN0b3JlXSlcXG5gICtcbiAgICAgICAgICAgIGB3aXRoXFxuYCArXG4gICAgICAgICAgICBgXFx0bWFwU3RvcmVzKHVzZUF1dGhTdG9yZSwgdXNlQ2FydFN0b3JlKVxcbmAgK1xuICAgICAgICAgICAgYFRoaXMgd2lsbCBmYWlsIGluIHByb2R1Y3Rpb24gaWYgbm90IGZpeGVkLmApO1xuICAgICAgICBzdG9yZXMgPSBzdG9yZXNbMF07XG4gICAgfVxuICAgIHJldHVybiBzdG9yZXMucmVkdWNlKChyZWR1Y2VkLCB1c2VTdG9yZSkgPT4ge1xuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiAkaWQgaXMgYWRkZWQgYnkgZGVmaW5lU3RvcmVcbiAgICAgICAgcmVkdWNlZFt1c2VTdG9yZS4kaWQgKyBtYXBTdG9yZVN1ZmZpeF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdXNlU3RvcmUodGhpcy4kcGluaWEpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gcmVkdWNlZDtcbiAgICB9LCB7fSk7XG59XG4vKipcbiAqIEFsbG93cyB1c2luZyBzdGF0ZSBhbmQgZ2V0dGVycyBmcm9tIG9uZSBzdG9yZSB3aXRob3V0IHVzaW5nIHRoZSBjb21wb3NpdGlvblxuICogQVBJIChgc2V0dXAoKWApIGJ5IGdlbmVyYXRpbmcgYW4gb2JqZWN0IHRvIGJlIHNwcmVhZCBpbiB0aGUgYGNvbXB1dGVkYCBmaWVsZFxuICogb2YgYSBjb21wb25lbnQuXG4gKlxuICogQHBhcmFtIHVzZVN0b3JlIC0gc3RvcmUgdG8gbWFwIGZyb21cbiAqIEBwYXJhbSBrZXlzT3JNYXBwZXIgLSBhcnJheSBvciBvYmplY3RcbiAqL1xuZnVuY3Rpb24gbWFwU3RhdGUodXNlU3RvcmUsIGtleXNPck1hcHBlcikge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KGtleXNPck1hcHBlcilcbiAgICAgICAgPyBrZXlzT3JNYXBwZXIucmVkdWNlKChyZWR1Y2VkLCBrZXkpID0+IHtcbiAgICAgICAgICAgIHJlZHVjZWRba2V5XSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdXNlU3RvcmUodGhpcy4kcGluaWEpW2tleV07XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIHJlZHVjZWQ7XG4gICAgICAgIH0sIHt9KVxuICAgICAgICA6IE9iamVjdC5rZXlzKGtleXNPck1hcHBlcikucmVkdWNlKChyZWR1Y2VkLCBrZXkpID0+IHtcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgICAgIHJlZHVjZWRba2V5XSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdG9yZSA9IHVzZVN0b3JlKHRoaXMuJHBpbmlhKTtcbiAgICAgICAgICAgICAgICBjb25zdCBzdG9yZUtleSA9IGtleXNPck1hcHBlcltrZXldO1xuICAgICAgICAgICAgICAgIC8vIGZvciBzb21lIHJlYXNvbiBUUyBpcyB1bmFibGUgdG8gaW5mZXIgdGhlIHR5cGUgb2Ygc3RvcmVLZXkgdG8gYmUgYVxuICAgICAgICAgICAgICAgIC8vIGZ1bmN0aW9uXG4gICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBzdG9yZUtleSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICAgICAgICA/IHN0b3JlS2V5LmNhbGwodGhpcywgc3RvcmUpXG4gICAgICAgICAgICAgICAgICAgIDogc3RvcmVbc3RvcmVLZXldO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiByZWR1Y2VkO1xuICAgICAgICB9LCB7fSk7XG59XG4vKipcbiAqIEFsaWFzIGZvciBgbWFwU3RhdGUoKWAuIFlvdSBzaG91bGQgdXNlIGBtYXBTdGF0ZSgpYCBpbnN0ZWFkLlxuICogQGRlcHJlY2F0ZWQgdXNlIGBtYXBTdGF0ZSgpYCBpbnN0ZWFkLlxuICovXG5jb25zdCBtYXBHZXR0ZXJzID0gbWFwU3RhdGU7XG4vKipcbiAqIEFsbG93cyBkaXJlY3RseSB1c2luZyBhY3Rpb25zIGZyb20geW91ciBzdG9yZSB3aXRob3V0IHVzaW5nIHRoZSBjb21wb3NpdGlvblxuICogQVBJIChgc2V0dXAoKWApIGJ5IGdlbmVyYXRpbmcgYW4gb2JqZWN0IHRvIGJlIHNwcmVhZCBpbiB0aGUgYG1ldGhvZHNgIGZpZWxkXG4gKiBvZiBhIGNvbXBvbmVudC5cbiAqXG4gKiBAcGFyYW0gdXNlU3RvcmUgLSBzdG9yZSB0byBtYXAgZnJvbVxuICogQHBhcmFtIGtleXNPck1hcHBlciAtIGFycmF5IG9yIG9iamVjdFxuICovXG5mdW5jdGlvbiBtYXBBY3Rpb25zKHVzZVN0b3JlLCBrZXlzT3JNYXBwZXIpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShrZXlzT3JNYXBwZXIpXG4gICAgICAgID8ga2V5c09yTWFwcGVyLnJlZHVjZSgocmVkdWNlZCwga2V5KSA9PiB7XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICByZWR1Y2VkW2tleV0gPSBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICAgICAgICAgIHJldHVybiB1c2VTdG9yZSh0aGlzLiRwaW5pYSlba2V5XSguLi5hcmdzKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gcmVkdWNlZDtcbiAgICAgICAgfSwge30pXG4gICAgICAgIDogT2JqZWN0LmtleXMoa2V5c09yTWFwcGVyKS5yZWR1Y2UoKHJlZHVjZWQsIGtleSkgPT4ge1xuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgICAgcmVkdWNlZFtrZXldID0gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdXNlU3RvcmUodGhpcy4kcGluaWEpW2tleXNPck1hcHBlcltrZXldXSguLi5hcmdzKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gcmVkdWNlZDtcbiAgICAgICAgfSwge30pO1xufVxuLyoqXG4gKiBBbGxvd3MgdXNpbmcgc3RhdGUgYW5kIGdldHRlcnMgZnJvbSBvbmUgc3RvcmUgd2l0aG91dCB1c2luZyB0aGUgY29tcG9zaXRpb25cbiAqIEFQSSAoYHNldHVwKClgKSBieSBnZW5lcmF0aW5nIGFuIG9iamVjdCB0byBiZSBzcHJlYWQgaW4gdGhlIGBjb21wdXRlZGAgZmllbGRcbiAqIG9mIGEgY29tcG9uZW50LlxuICpcbiAqIEBwYXJhbSB1c2VTdG9yZSAtIHN0b3JlIHRvIG1hcCBmcm9tXG4gKiBAcGFyYW0ga2V5c09yTWFwcGVyIC0gYXJyYXkgb3Igb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIG1hcFdyaXRhYmxlU3RhdGUodXNlU3RvcmUsIGtleXNPck1hcHBlcikge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KGtleXNPck1hcHBlcilcbiAgICAgICAgPyBrZXlzT3JNYXBwZXIucmVkdWNlKChyZWR1Y2VkLCBrZXkpID0+IHtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIHJlZHVjZWRba2V5XSA9IHtcbiAgICAgICAgICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1c2VTdG9yZSh0aGlzLiRwaW5pYSlba2V5XTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldCh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBpdCdzIGVhc2llciB0byB0eXBlIGl0IGhlcmUgYXMgYW55XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAodXNlU3RvcmUodGhpcy4kcGluaWEpW2tleV0gPSB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gcmVkdWNlZDtcbiAgICAgICAgfSwge30pXG4gICAgICAgIDogT2JqZWN0LmtleXMoa2V5c09yTWFwcGVyKS5yZWR1Y2UoKHJlZHVjZWQsIGtleSkgPT4ge1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgcmVkdWNlZFtrZXldID0ge1xuICAgICAgICAgICAgICAgIGdldCgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVzZVN0b3JlKHRoaXMuJHBpbmlhKVtrZXlzT3JNYXBwZXJba2V5XV07XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzZXQodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gaXQncyBlYXNpZXIgdG8gdHlwZSBpdCBoZXJlIGFzIGFueVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHVzZVN0b3JlKHRoaXMuJHBpbmlhKVtrZXlzT3JNYXBwZXJba2V5XV0gPSB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gcmVkdWNlZDtcbiAgICAgICAgfSwge30pO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IG9mIHJlZmVyZW5jZXMgd2l0aCBhbGwgdGhlIHN0YXRlLCBnZXR0ZXJzLCBhbmQgcGx1Z2luLWFkZGVkXG4gKiBzdGF0ZSBwcm9wZXJ0aWVzIG9mIHRoZSBzdG9yZS4gU2ltaWxhciB0byBgdG9SZWZzKClgIGJ1dCBzcGVjaWZpY2FsbHlcbiAqIGRlc2lnbmVkIGZvciBQaW5pYSBzdG9yZXMgc28gbWV0aG9kcyBhbmQgbm9uIHJlYWN0aXZlIHByb3BlcnRpZXMgYXJlXG4gKiBjb21wbGV0ZWx5IGlnbm9yZWQuXG4gKlxuICogQHBhcmFtIHN0b3JlIC0gc3RvcmUgdG8gZXh0cmFjdCB0aGUgcmVmcyBmcm9tXG4gKi9cbmZ1bmN0aW9uIHN0b3JlVG9SZWZzKHN0b3JlKSB7XG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy9waW5pYS9pc3N1ZXMvODUyXG4gICAgLy8gSXQncyBlYXNpZXIgdG8ganVzdCB1c2UgdG9SZWZzKCkgZXZlbiBpZiBpdCBpbmNsdWRlcyBtb3JlIHN0dWZmXG4gICAgaWYgKGlzVnVlMikge1xuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiB0b1JlZnMgaW5jbHVkZSBtZXRob2RzIGFuZCBvdGhlcnNcbiAgICAgICAgcmV0dXJuIHRvUmVmcyhzdG9yZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBzdG9yZSA9IHRvUmF3KHN0b3JlKTtcbiAgICAgICAgY29uc3QgcmVmcyA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBzdG9yZSkge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBzdG9yZVtrZXldO1xuICAgICAgICAgICAgaWYgKGlzUmVmKHZhbHVlKSB8fCBpc1JlYWN0aXZlKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IHRoZSBrZXkgaXMgc3RhdGUgb3IgZ2V0dGVyXG4gICAgICAgICAgICAgICAgcmVmc1trZXldID1cbiAgICAgICAgICAgICAgICAgICAgLy8gLS0tXG4gICAgICAgICAgICAgICAgICAgIHRvUmVmKHN0b3JlLCBrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZWZzO1xuICAgIH1cbn1cblxuLyoqXG4gKiBWdWUgMiBQbHVnaW4gdGhhdCBtdXN0IGJlIGluc3RhbGxlZCBmb3IgcGluaWEgdG8gd29yay4gTm90ZSAqKnlvdSBkb24ndCBuZWVkXG4gKiB0aGlzIHBsdWdpbiBpZiB5b3UgYXJlIHVzaW5nIE51eHQuanMqKi4gVXNlIHRoZSBgYnVpbGRNb2R1bGVgIGluc3RlYWQ6XG4gKiBodHRwczovL3BpbmlhLnZ1ZWpzLm9yZy9zc3IvbnV4dC5odG1sLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqc1xuICogaW1wb3J0IFZ1ZSBmcm9tICd2dWUnXG4gKiBpbXBvcnQgeyBQaW5pYVZ1ZVBsdWdpbiwgY3JlYXRlUGluaWEgfSBmcm9tICdwaW5pYSdcbiAqXG4gKiBWdWUudXNlKFBpbmlhVnVlUGx1Z2luKVxuICogY29uc3QgcGluaWEgPSBjcmVhdGVQaW5pYSgpXG4gKlxuICogbmV3IFZ1ZSh7XG4gKiAgIGVsOiAnI2FwcCcsXG4gKiAgIC8vIC4uLlxuICogICBwaW5pYSxcbiAqIH0pXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gX1Z1ZSAtIGBWdWVgIGltcG9ydGVkIGZyb20gJ3Z1ZScuXG4gKi9cbmNvbnN0IFBpbmlhVnVlUGx1Z2luID0gZnVuY3Rpb24gKF9WdWUpIHtcbiAgICAvLyBFcXVpdmFsZW50IG9mXG4gICAgLy8gYXBwLmNvbmZpZy5nbG9iYWxQcm9wZXJ0aWVzLiRwaW5pYSA9IHBpbmlhXG4gICAgX1Z1ZS5taXhpbih7XG4gICAgICAgIGJlZm9yZUNyZWF0ZSgpIHtcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLiRvcHRpb25zO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMucGluaWEpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwaW5pYSA9IG9wdGlvbnMucGluaWE7XG4gICAgICAgICAgICAgICAgLy8gSEFDSzogdGFrZW4gZnJvbSBwcm92aWRlKCk6IGh0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy9jb21wb3NpdGlvbi1hcGkvYmxvYi9tYWluL3NyYy9hcGlzL2luamVjdC50cyNMMzFcbiAgICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5fcHJvdmlkZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJvdmlkZUNhY2hlID0ge307XG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnX3Byb3ZpZGVkJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0OiAoKSA9PiBwcm92aWRlQ2FjaGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXQ6ICh2KSA9PiBPYmplY3QuYXNzaWduKHByb3ZpZGVDYWNoZSwgdiksXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl9wcm92aWRlZFtwaW5pYVN5bWJvbF0gPSBwaW5pYTtcbiAgICAgICAgICAgICAgICAvLyBwcm9wYWdhdGUgdGhlIHBpbmlhIGluc3RhbmNlIGluIGFuIFNTUiBmcmllbmRseSB3YXlcbiAgICAgICAgICAgICAgICAvLyBhdm9pZCBhZGRpbmcgaXQgdG8gbnV4dCB0d2ljZVxuICAgICAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLiRwaW5pYSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiRwaW5pYSA9IHBpbmlhO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwaW5pYS5fYSA9IHRoaXM7XG4gICAgICAgICAgICAgICAgaWYgKElTX0NMSUVOVCkge1xuICAgICAgICAgICAgICAgICAgICAvLyB0aGlzIGFsbG93cyBjYWxsaW5nIHVzZVN0b3JlKCkgb3V0c2lkZSBvZiBhIGNvbXBvbmVudCBzZXR1cCBhZnRlclxuICAgICAgICAgICAgICAgICAgICAvLyBpbnN0YWxsaW5nIHBpbmlhJ3MgcGx1Z2luXG4gICAgICAgICAgICAgICAgICAgIHNldEFjdGl2ZVBpbmlhKHBpbmlhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKFVTRV9ERVZUT09MUykge1xuICAgICAgICAgICAgICAgICAgICByZWdpc3RlclBpbmlhRGV2dG9vbHMocGluaWEuX2EsIHBpbmlhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICghdGhpcy4kcGluaWEgJiYgb3B0aW9ucy5wYXJlbnQgJiYgb3B0aW9ucy5wYXJlbnQuJHBpbmlhKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kcGluaWEgPSBvcHRpb25zLnBhcmVudC4kcGluaWE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRlc3Ryb3llZCgpIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9wU3RvcmVzO1xuICAgICAgICB9LFxuICAgIH0pO1xufTtcblxuZXhwb3J0IHsgTXV0YXRpb25UeXBlLCBQaW5pYVZ1ZVBsdWdpbiwgYWNjZXB0SE1SVXBkYXRlLCBjcmVhdGVQaW5pYSwgZGVmaW5lU3RvcmUsIGdldEFjdGl2ZVBpbmlhLCBtYXBBY3Rpb25zLCBtYXBHZXR0ZXJzLCBtYXBTdGF0ZSwgbWFwU3RvcmVzLCBtYXBXcml0YWJsZVN0YXRlLCBzZXRBY3RpdmVQaW5pYSwgc2V0TWFwU3RvcmVTdWZmaXgsIHNraXBIeWRyYXRlLCBzdG9yZVRvUmVmcyB9O1xuIiwiaW1wb3J0ICogYXMgVnVlIGZyb20gJ3Z1ZSdcblxudmFyIGlzVnVlMiA9IGZhbHNlXG52YXIgaXNWdWUzID0gdHJ1ZVxudmFyIFZ1ZTIgPSB1bmRlZmluZWRcblxuZnVuY3Rpb24gaW5zdGFsbCgpIHt9XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXQodGFyZ2V0LCBrZXksIHZhbCkge1xuICBpZiAoQXJyYXkuaXNBcnJheSh0YXJnZXQpKSB7XG4gICAgdGFyZ2V0Lmxlbmd0aCA9IE1hdGgubWF4KHRhcmdldC5sZW5ndGgsIGtleSlcbiAgICB0YXJnZXQuc3BsaWNlKGtleSwgMSwgdmFsKVxuICAgIHJldHVybiB2YWxcbiAgfVxuICB0YXJnZXRba2V5XSA9IHZhbFxuICByZXR1cm4gdmFsXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWwodGFyZ2V0LCBrZXkpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0KSkge1xuICAgIHRhcmdldC5zcGxpY2Uoa2V5LCAxKVxuICAgIHJldHVyblxuICB9XG4gIGRlbGV0ZSB0YXJnZXRba2V5XVxufVxuXG5leHBvcnQgKiBmcm9tICd2dWUnXG5leHBvcnQge1xuICBWdWUsXG4gIFZ1ZTIsXG4gIGlzVnVlMixcbiAgaXNWdWUzLFxuICBpbnN0YWxsLFxufVxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBfX3dlYnBhY2tfbW9kdWxlc19fO1xuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsInZhciBzY3JpcHRVcmw7XG5pZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5nLmltcG9ydFNjcmlwdHMpIHNjcmlwdFVybCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5sb2NhdGlvbiArIFwiXCI7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuZG9jdW1lbnQ7XG5pZiAoIXNjcmlwdFVybCAmJiBkb2N1bWVudCkge1xuXHRpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdClcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyY1xuXHRpZiAoIXNjcmlwdFVybCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0aWYoc2NyaXB0cy5sZW5ndGgpIHNjcmlwdFVybCA9IHNjcmlwdHNbc2NyaXB0cy5sZW5ndGggLSAxXS5zcmNcblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmw7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5iID0gZG9jdW1lbnQuYmFzZVVSSSB8fCBzZWxmLmxvY2F0aW9uLmhyZWY7XG5cbi8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgYW5kIGxvYWRpbmcgY2h1bmtzXG4vLyB1bmRlZmluZWQgPSBjaHVuayBub3QgbG9hZGVkLCBudWxsID0gY2h1bmsgcHJlbG9hZGVkL3ByZWZldGNoZWRcbi8vIFtyZXNvbHZlLCByZWplY3QsIFByb21pc2VdID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxudmFyIGluc3RhbGxlZENodW5rcyA9IHtcblx0XCJpbmRleFwiOiAwXG59O1xuXG4vLyBubyBjaHVuayBvbiBkZW1hbmQgbG9hZGluZ1xuXG4vLyBubyBwcmVmZXRjaGluZ1xuXG4vLyBubyBwcmVsb2FkZWRcblxuLy8gbm8gSE1SXG5cbi8vIG5vIEhNUiBtYW5pZmVzdFxuXG4vLyBubyBvbiBjaHVua3MgbG9hZGVkXG5cbi8vIG5vIGpzb25wIGZ1bmN0aW9uIiwiaW1wb3J0IHsgY3JlYXRlUGluaWEgfSBmcm9tICdwaW5pYSc7XG5pbXBvcnQgeyBjcmVhdGVBcHAgfSBmcm9tICd2dWUnO1xuaW1wb3J0ICcuL2pzLW1vZHVsZXMvaGVhZGVyJztcbmltcG9ydCAnLi9qcy1tb2R1bGVzL3N1YnNyaXB0aW9uJztcbmltcG9ydCAnLi9qcy1tb2R1bGVzL2luZm8tYmFubmVyJztcbmltcG9ydCBtZXNzYWdlIGZyb20gJy4vanMtbW9kdWxlcy9DYXRhbG9nLXByb2R1Y3RzLnZ1ZSc7XG5pbXBvcnQgbWVzIGZyb20gJy4vanMtbW9kdWxlcy9Qcm9kdWN0LWRldGFpbHMudnVlJztcbmltcG9ydCBtZXNzIGZyb20gJy4vanMtbW9kdWxlcy9Qcm9kdWN0LWNvdW50LnZ1ZSc7XG5cbmNyZWF0ZUFwcChtZXNzYWdlKS5tb3VudCgnI2NhdGFsb2cnKTtcbmNyZWF0ZUFwcChtZXMpLnVzZShjcmVhdGVQaW5pYSgpKS5tb3VudCgnI3Byb2R1Y3QnKTtcbmNyZWF0ZUFwcChtZXNzKS5tb3VudCgnI3Byb2R1Y3QtY291bnQnKTtcblxuJCh3aW5kb3cpLm9uKCdsb2FkJywgKCkgPT4ge1xuICBjb25zdCBpbmZvQmFubmVyQ2xvc2VkID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2luZm9CYW5uZXJDbG9zZWQnKTtcbiAgaWYgKCEoaW5mb0Jhbm5lckNsb3NlZCAmJiBpbmZvQmFubmVyQ2xvc2VkID09PSAndHJ1ZScpKSB7XG4gICAgJCgnLmluZm8tYmFubmVyJykucmVtb3ZlQ2xhc3MoJ2hpZGRlbicpO1xuICAgICQoJyNoZWFkZXInKS5hZGRDbGFzcygnaGVhZGVyJyk7XG4gIH1cblxuICBjb25zdCBzdG9yYWdlID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2NvdW50Jyk7XG4gIGlmIChzdG9yYWdlKSB7XG4gICAgY29uc3QgcHJvZHVjdENvdW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLndyYXBwZXJfX3Byb2R1Y3QtY291bnQnKTtcbiAgICBwcm9kdWN0Q291bnQuY2xhc3NMaXN0LmFkZCgnd3JhcHBlcl9fcHJvZHVjdC1jb3VudC1hY3RpdmUnKTtcbiAgICBwcm9kdWN0Q291bnQuY2xhc3NMaXN0LnJlbW92ZSgnd3JhcHBlcl9fcHJvZHVjdC1jb3VudC1hY3RpdmUtYW5pbWF0aW9uJyk7XG4gICAgcHJvZHVjdENvdW50LnRleHRDb250ZW50ID0gc3RvcmFnZTtcbiAgfVxufSk7XG5cbi8qIGNvbnN0IHByb2R1Y3REZXRhaWxzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLXByb2R1Y3QtZGV0YWlscycpO1xuXG5pZiAocHJvZHVjdERldGFpbHMpIHtcbiAgbmV3IFByb2R1Y3REZXRhaWxzKCk7XG59ICovXG4iXSwibmFtZXMiOlsiSE9PS19TRVRVUCIsIkhPT0tfUExVR0lOX1NFVFRJTkdTX1NFVCIsImdldERldnRvb2xzR2xvYmFsSG9vayIsImdldFRhcmdldCIsIl9fVlVFX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJuYXZpZ2F0b3IiLCJ3aW5kb3ciLCJnIiwiaXNQcm94eUF2YWlsYWJsZSIsIlByb3h5Iiwic2V0dXBEZXZ0b29sc1BsdWdpbiIsInBsdWdpbkRlc2NyaXB0b3IiLCJzZXR1cEZuIiwiZGVzY3JpcHRvciIsInRhcmdldCIsImhvb2siLCJlbmFibGVQcm94eSIsImVuYWJsZUVhcmx5UHJveHkiLCJfX1ZVRV9ERVZUT09MU19QTFVHSU5fQVBJX0FWQUlMQUJMRV9fIiwicHJveHkiLCJBcGlQcm94eSIsIl9fVlVFX0RFVlRPT0xTX1BMVUdJTlNfXyIsInB1c2giLCJwcm94aWVkVGFyZ2V0IiwiZW1pdCIsImNvbnN0cnVjdG9yIiwicGx1Z2luIiwidGhpcyIsInRhcmdldFF1ZXVlIiwib25RdWV1ZSIsImRlZmF1bHRTZXR0aW5ncyIsInNldHRpbmdzIiwiaWQiLCJpdGVtIiwiZGVmYXVsdFZhbHVlIiwibG9jYWxTZXR0aW5nc1NhdmVJZCIsImN1cnJlbnRTZXR0aW5ncyIsIk9iamVjdCIsImFzc2lnbiIsInJhdyIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJkYXRhIiwiSlNPTiIsInBhcnNlIiwiZSIsImZhbGxiYWNrcyIsImdldFNldHRpbmdzIiwic2V0U2V0dGluZ3MiLCJ2YWx1ZSIsInNldEl0ZW0iLCJzdHJpbmdpZnkiLCJub3ciLCJvbiIsInBsdWdpbklkIiwicHJveGllZE9uIiwiZ2V0IiwiX3RhcmdldCIsInByb3AiLCJhcmdzIiwibWV0aG9kIiwia2V5cyIsImluY2x1ZGVzIiwicmVzb2x2ZSIsIlByb21pc2UiLCJhc3luYyIsInN1cHBvcnRlZCIsInBlcmYiLCJpc1BlcmZvcm1hbmNlU3VwcG9ydGVkIiwiX2EiLCJ1bmRlZmluZWQiLCJwZXJmb3JtYW5jZSIsInBlcmZfaG9va3MiLCJEYXRlIiwid2FybiIsIm1zZyIsImNvbnNvbGUiLCJhY3RpdmVFZmZlY3RTY29wZSIsIkVmZmVjdFNjb3BlIiwiZGV0YWNoZWQiLCJfYWN0aXZlIiwiZWZmZWN0cyIsImNsZWFudXBzIiwicGFyZW50IiwiaW5kZXgiLCJzY29wZXMiLCJhY3RpdmUiLCJydW4iLCJmbiIsImN1cnJlbnRFZmZlY3RTY29wZSIsIm9mZiIsInN0b3AiLCJmcm9tUGFyZW50IiwiaSIsImwiLCJsZW5ndGgiLCJsYXN0IiwicG9wIiwiZWZmZWN0U2NvcGUiLCJyZWNvcmRFZmZlY3RTY29wZSIsImVmZmVjdCIsInNjb3BlIiwiZ2V0Q3VycmVudFNjb3BlIiwib25TY29wZURpc3Bvc2UiLCJjcmVhdGVEZXAiLCJkZXAiLCJTZXQiLCJ3IiwibiIsIndhc1RyYWNrZWQiLCJ0cmFja09wQml0IiwibmV3VHJhY2tlZCIsInRhcmdldE1hcCIsIldlYWtNYXAiLCJlZmZlY3RUcmFja0RlcHRoIiwiYWN0aXZlRWZmZWN0IiwiSVRFUkFURV9LRVkiLCJTeW1ib2wiLCJNQVBfS0VZX0lURVJBVEVfS0VZIiwiUmVhY3RpdmVFZmZlY3QiLCJzY2hlZHVsZXIiLCJkZXBzIiwibGFzdFNob3VsZFRyYWNrIiwic2hvdWxkVHJhY2siLCJpbml0RGVwTWFya2VycyIsImNsZWFudXBFZmZlY3QiLCJwdHIiLCJkZWxldGUiLCJmaW5hbGl6ZURlcE1hcmtlcnMiLCJkZWZlclN0b3AiLCJvblN0b3AiLCJlZmZlY3QyIiwib3B0aW9ucyIsIl9lZmZlY3QiLCJleHRlbmQiLCJsYXp5IiwicnVubmVyIiwiYmluZCIsInRyYWNrU3RhY2siLCJwYXVzZVRyYWNraW5nIiwiZW5hYmxlVHJhY2tpbmciLCJyZXNldFRyYWNraW5nIiwidHJhY2siLCJ0eXBlIiwia2V5IiwiZGVwc01hcCIsInNldCIsIk1hcCIsInRyYWNrRWZmZWN0cyIsImRlYnVnZ2VyRXZlbnRFeHRyYUluZm8iLCJzaG91bGRUcmFjazIiLCJoYXMiLCJhZGQiLCJvblRyYWNrIiwidHJpZ2dlciIsIm5ld1ZhbHVlIiwib2xkVmFsdWUiLCJvbGRUYXJnZXQiLCJ2YWx1ZXMiLCJpc0FycmF5IiwibmV3TGVuZ3RoIiwiTnVtYmVyIiwiZm9yRWFjaCIsImtleTIiLCJpc0ludGVnZXJLZXkiLCJpc01hcCIsImV2ZW50SW5mbyIsInRyaWdnZXJFZmZlY3RzIiwiY29tcHV0ZWQiLCJ0cmlnZ2VyRWZmZWN0IiwiYWxsb3dSZWN1cnNlIiwib25UcmlnZ2VyIiwiaXNOb25UcmFja2FibGVLZXlzIiwibWFrZU1hcCIsImJ1aWx0SW5TeW1ib2xzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImZpbHRlciIsIm1hcCIsImlzU3ltYm9sIiwiZ2V0JDEiLCJjcmVhdGVHZXR0ZXIiLCJzaGFsbG93R2V0IiwicmVhZG9ubHlHZXQiLCJzaGFsbG93UmVhZG9ubHlHZXQiLCJhcnJheUluc3RydW1lbnRhdGlvbnMiLCJjcmVhdGVBcnJheUluc3RydW1lbnRhdGlvbnMiLCJpbnN0cnVtZW50YXRpb25zIiwiYXJyIiwidG9SYXciLCJyZXMiLCJhcHBseSIsImhhc093blByb3BlcnR5Iiwib2JqIiwiaXNSZWFkb25seTIiLCJzaGFsbG93IiwicmVjZWl2ZXIiLCJzaGFsbG93UmVhZG9ubHlNYXAiLCJyZWFkb25seU1hcCIsInNoYWxsb3dSZWFjdGl2ZU1hcCIsInJlYWN0aXZlTWFwIiwidGFyZ2V0SXNBcnJheSIsImhhc093biIsIlJlZmxlY3QiLCJpc1JlZiIsImlzT2JqZWN0IiwicmVhZG9ubHkiLCJyZWFjdGl2ZSIsInNldCQxIiwiY3JlYXRlU2V0dGVyIiwic2hhbGxvd1NldCIsImlzUmVhZG9ubHkiLCJpc1NoYWxsb3ciLCJoYWRLZXkiLCJyZXN1bHQiLCJoYXNDaGFuZ2VkIiwibXV0YWJsZUhhbmRsZXJzIiwiZGVsZXRlUHJvcGVydHkiLCJvd25LZXlzIiwicmVhZG9ubHlIYW5kbGVycyIsIlN0cmluZyIsInNoYWxsb3dSZWFjdGl2ZUhhbmRsZXJzIiwic2hhbGxvd1JlYWRvbmx5SGFuZGxlcnMiLCJ0b1NoYWxsb3ciLCJnZXRQcm90byIsInYiLCJnZXRQcm90b3R5cGVPZiIsInJhd1RhcmdldCIsInJhd0tleSIsImhhczIiLCJ3cmFwIiwidG9SZWFkb25seSIsInRvUmVhY3RpdmUiLCJjYWxsIiwic2l6ZSIsImdldDIiLCJjaGVja0lkZW50aXR5S2V5cyIsImRlbGV0ZUVudHJ5IiwiY2xlYXIiLCJoYWRJdGVtcyIsImNyZWF0ZUZvckVhY2giLCJjYWxsYmFjayIsInRoaXNBcmciLCJvYnNlcnZlZCIsImNyZWF0ZUl0ZXJhYmxlTWV0aG9kIiwidGFyZ2V0SXNNYXAiLCJpc1BhaXIiLCJpdGVyYXRvciIsImlzS2V5T25seSIsImlubmVySXRlcmF0b3IiLCJuZXh0IiwiZG9uZSIsImNyZWF0ZVJlYWRvbmx5TWV0aG9kIiwiY2FwaXRhbGl6ZSIsImNyZWF0ZUluc3RydW1lbnRhdGlvbnMiLCJtdXRhYmxlSW5zdHJ1bWVudGF0aW9uczIiLCJzaGFsbG93SW5zdHJ1bWVudGF0aW9uczIiLCJyZWFkb25seUluc3RydW1lbnRhdGlvbnMyIiwic2hhbGxvd1JlYWRvbmx5SW5zdHJ1bWVudGF0aW9uczIiLCJtdXRhYmxlSW5zdHJ1bWVudGF0aW9ucyIsInJlYWRvbmx5SW5zdHJ1bWVudGF0aW9ucyIsInNoYWxsb3dJbnN0cnVtZW50YXRpb25zIiwic2hhbGxvd1JlYWRvbmx5SW5zdHJ1bWVudGF0aW9ucyIsImNyZWF0ZUluc3RydW1lbnRhdGlvbkdldHRlciIsIm11dGFibGVDb2xsZWN0aW9uSGFuZGxlcnMiLCJzaGFsbG93Q29sbGVjdGlvbkhhbmRsZXJzIiwicmVhZG9ubHlDb2xsZWN0aW9uSGFuZGxlcnMiLCJzaGFsbG93UmVhZG9ubHlDb2xsZWN0aW9uSGFuZGxlcnMiLCJ0b1Jhd1R5cGUiLCJjcmVhdGVSZWFjdGl2ZU9iamVjdCIsInNoYWxsb3dSZWFjdGl2ZSIsInNoYWxsb3dSZWFkb25seSIsImJhc2VIYW5kbGVycyIsImNvbGxlY3Rpb25IYW5kbGVycyIsInByb3h5TWFwIiwiZXhpc3RpbmdQcm94eSIsInRhcmdldFR5cGUiLCJpc0V4dGVuc2libGUiLCJyYXdUeXBlIiwidGFyZ2V0VHlwZU1hcCIsImlzUmVhY3RpdmUiLCJpc1Byb3h5IiwibWFya1JhdyIsImRlZiIsInRyYWNrUmVmVmFsdWUiLCJyZWYyIiwidHJpZ2dlclJlZlZhbHVlIiwibmV3VmFsIiwiciIsIl9fdl9pc1JlZiIsInJlZiIsImNyZWF0ZVJlZiIsInNoYWxsb3dSZWYiLCJyYXdWYWx1ZSIsIlJlZkltcGwiLCJfX3ZfaXNTaGFsbG93IiwiX3Jhd1ZhbHVlIiwiX3ZhbHVlIiwidXNlRGlyZWN0VmFsdWUiLCJ0cmlnZ2VyUmVmIiwidW5yZWYiLCJ0b1ZhbHVlIiwic291cmNlIiwiaXNGdW5jdGlvbiIsInNoYWxsb3dVbndyYXBIYW5kbGVycyIsInByb3h5UmVmcyIsIm9iamVjdFdpdGhSZWZzIiwiQ3VzdG9tUmVmSW1wbCIsImZhY3RvcnkiLCJfZ2V0IiwiX3NldCIsImN1c3RvbVJlZiIsInRvUmVmcyIsIm9iamVjdCIsInJldCIsIkFycmF5IiwicHJvcGVydHlUb1JlZiIsIk9iamVjdFJlZkltcGwiLCJfb2JqZWN0IiwiX2tleSIsIl9kZWZhdWx0VmFsdWUiLCJ2YWwiLCJHZXR0ZXJSZWZJbXBsIiwiX2dldHRlciIsIl9fdl9pc1JlYWRvbmx5IiwidG9SZWYiLCJhcmd1bWVudHMiLCJDb21wdXRlZFJlZkltcGwiLCJnZXR0ZXIiLCJfc2V0dGVyIiwiaXNTU1IiLCJfZGlydHkiLCJfY2FjaGVhYmxlIiwic2VsZiIsImdldHRlck9yT3B0aW9ucyIsImRlYnVnT3B0aW9ucyIsInNldHRlciIsIm9ubHlHZXR0ZXIiLCJjUmVmIiwidGljayIsInF1ZXVlIiwicXVldWVkIiwiZmx1c2giLCJEZWZlcnJlZENvbXB1dGVkUmVmSW1wbCIsImNvbXBhcmVUYXJnZXQiLCJoYXNDb21wYXJlVGFyZ2V0Iiwic2NoZWR1bGVkIiwiY29tcHV0ZWRUcmlnZ2VyIiwidmFsdWVUb0NvbXBhcmUiLCJ0aGVuIiwiZGVmZXJyZWRDb21wdXRlZCIsInN0YWNrIiwicHVzaFdhcm5pbmdDb250ZXh0Iiwidm5vZGUiLCJwb3BXYXJuaW5nQ29udGV4dCIsImFzc2VydE51bWJlciIsIkVycm9yVHlwZVN0cmluZ3MiLCJjYWxsV2l0aEVycm9ySGFuZGxpbmciLCJpbnN0YW5jZSIsImVyciIsImhhbmRsZUVycm9yIiwiY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmciLCJpc1Byb21pc2UiLCJjYXRjaCIsInRocm93SW5EZXYiLCJjb250ZXh0Vk5vZGUiLCJjdXIiLCJleHBvc2VkSW5zdGFuY2UiLCJlcnJvckluZm8iLCJlcnJvckNhcHR1cmVkSG9va3MiLCJlYyIsImFwcEVycm9ySGFuZGxlciIsImFwcENvbnRleHQiLCJjb25maWciLCJlcnJvckhhbmRsZXIiLCJlcnJvciIsImxvZ0Vycm9yIiwiaXNGbHVzaGluZyIsImlzRmx1c2hQZW5kaW5nIiwiZmx1c2hJbmRleCIsInBlbmRpbmdQb3N0Rmx1c2hDYnMiLCJhY3RpdmVQb3N0Rmx1c2hDYnMiLCJwb3N0Rmx1c2hJbmRleCIsInJlc29sdmVkUHJvbWlzZSIsImN1cnJlbnRGbHVzaFByb21pc2UiLCJuZXh0VGljayIsInAiLCJxdWV1ZUpvYiIsImpvYiIsInNwbGljZSIsInN0YXJ0IiwiZW5kIiwibWlkZGxlIiwiZ2V0SWQiLCJmaW5kSW5zZXJ0aW9uSW5kZXgiLCJxdWV1ZUZsdXNoIiwiZmx1c2hKb2JzIiwicXVldWVQb3N0Rmx1c2hDYiIsImNiIiwiZmx1c2hQcmVGbHVzaENicyIsInNlZW4iLCJwcmUiLCJjaGVja1JlY3Vyc2l2ZVVwZGF0ZXMiLCJmbHVzaFBvc3RGbHVzaENicyIsImRlZHVwZWQiLCJzb3J0IiwiYSIsImIiLCJJbmZpbml0eSIsImNvbXBhcmF0b3IiLCJkaWZmIiwiY2hlY2siLCJjb3VudCIsIm93bmVySW5zdGFuY2UiLCJnZXRDb21wb25lbnROYW1lIiwiaXNIbXJVcGRhdGluZyIsImhtckRpcnR5Q29tcG9uZW50cyIsImdldEdsb2JhbFRoaXMiLCJfX1ZVRV9ITVJfUlVOVElNRV9fIiwiY3JlYXRlUmVjb3JkIiwidHJ5V3JhcCIsInJlcmVuZGVyIiwibmV3UmVuZGVyIiwicmVjb3JkIiwiaW5pdGlhbERlZiIsInJlbmRlciIsImluc3RhbmNlcyIsIm5vcm1hbGl6ZUNsYXNzQ29tcG9uZW50IiwicmVuZGVyQ2FjaGUiLCJ1cGRhdGUiLCJyZWxvYWQiLCJuZXdDb21wIiwidXBkYXRlQ29tcG9uZW50RGVmIiwib2xkQ29tcCIsInByb3BzQ2FjaGUiLCJlbWl0c0NhY2hlIiwib3B0aW9uc0NhY2hlIiwiY2VSZWxvYWQiLCJzdHlsZXMiLCJsb2NhdGlvbiIsImNvbXBvbmVudCIsImlzQ2xhc3NDb21wb25lbnQiLCJfX3ZjY09wdHMiLCJhcmciLCJkZXZ0b29scyIsImJ1ZmZlciIsImRldnRvb2xzTm90SW5zdGFsbGVkIiwiZW1pdCQxIiwiZXZlbnQiLCJzZXREZXZ0b29sc0hvb2siLCJfYiIsImVuYWJsZWQiLCJIVE1MRWxlbWVudCIsInVzZXJBZ2VudCIsIl9fVlVFX0RFVlRPT0xTX0hPT0tfUkVQTEFZX18iLCJuZXdIb29rIiwic2V0VGltZW91dCIsImRldnRvb2xzQ29tcG9uZW50QWRkZWQiLCJjcmVhdGVEZXZ0b29sc0NvbXBvbmVudEhvb2siLCJkZXZ0b29sc0NvbXBvbmVudFVwZGF0ZWQiLCJfZGV2dG9vbHNDb21wb25lbnRSZW1vdmVkIiwiYXBwIiwidWlkIiwiZGV2dG9vbHNQZXJmU3RhcnQiLCJjcmVhdGVEZXZ0b29sc1BlcmZvcm1hbmNlSG9vayIsImRldnRvb2xzUGVyZkVuZCIsInRpbWUiLCJyYXdBcmdzIiwiaXNVbm1vdW50ZWQiLCJwcm9wcyIsIkVNUFRZX09CSiIsImVtaXRzT3B0aW9ucyIsInByb3BzT3B0aW9ucyIsInZhbGlkYXRvciIsInRvSGFuZGxlcktleSIsImlzTW9kZWxMaXN0ZW5lciIsInN0YXJ0c1dpdGgiLCJtb2RlbEFyZyIsInNsaWNlIiwibW9kaWZpZXJzS2V5IiwibnVtYmVyIiwidHJpbSIsImlzU3RyaW5nIiwibG9vc2VUb051bWJlciIsInBhcmFtcyIsImRldnRvb2xzQ29tcG9uZW50RW1pdCIsImxvd2VyQ2FzZUV2ZW50IiwidG9Mb3dlckNhc2UiLCJmb3JtYXRDb21wb25lbnROYW1lIiwiaHlwaGVuYXRlIiwiaGFuZGxlck5hbWUiLCJoYW5kbGVyIiwiY2FtZWxpemUiLCJvbmNlSGFuZGxlciIsImVtaXR0ZWQiLCJub3JtYWxpemVFbWl0c09wdGlvbnMiLCJjb21wIiwiYXNNaXhpbiIsImNhY2hlIiwiY2FjaGVkIiwiZW1pdHMiLCJub3JtYWxpemVkIiwiaGFzRXh0ZW5kcyIsIl9fVlVFX09QVElPTlNfQVBJX18iLCJleHRlbmRFbWl0cyIsInJhdzIiLCJub3JtYWxpemVkRnJvbUV4dGVuZCIsIm1peGlucyIsImV4dGVuZHMiLCJpc0VtaXRMaXN0ZW5lciIsImlzT24iLCJyZXBsYWNlIiwiY3VycmVudFJlbmRlcmluZ0luc3RhbmNlIiwiY3VycmVudFNjb3BlSWQiLCJzZXRDdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UiLCJwcmV2IiwiX19zY29wZUlkIiwicHVzaFNjb3BlSWQiLCJwb3BTY29wZUlkIiwid2l0aFNjb3BlSWQiLCJfaWQiLCJ3aXRoQ3R4IiwiY3R4IiwiaXNOb25TY29wZWRTbG90IiwiX24iLCJyZW5kZXJGbldpdGhDb250ZXh0IiwiX2QiLCJzZXRCbG9ja1RyYWNraW5nIiwicHJldkluc3RhbmNlIiwiX2MiLCJhY2Nlc3NlZEF0dHJzIiwibWFya0F0dHJzQWNjZXNzZWQiLCJyZW5kZXJDb21wb25lbnRSb290IiwiQ29tcG9uZW50Iiwid2l0aFByb3h5Iiwic2xvdHMiLCJhdHRycyIsInNldHVwU3RhdGUiLCJpbmhlcml0QXR0cnMiLCJmYWxsdGhyb3VnaEF0dHJzIiwic2hhcGVGbGFnIiwicHJveHlUb1VzZSIsIm5vcm1hbGl6ZVZOb2RlIiwicmVuZGVyMiIsImdldEZ1bmN0aW9uYWxGYWxsdGhyb3VnaCIsImJsb2NrU3RhY2siLCJjcmVhdGVWTm9kZSIsIkNvbW1lbnQiLCJzZXRSb290Iiwicm9vdCIsInBhdGNoRmxhZyIsImdldENoaWxkUm9vdCIsInNvbWUiLCJmaWx0ZXJNb2RlbExpc3RlbmVycyIsImNsb25lVk5vZGUiLCJhbGxBdHRycyIsImV2ZW50QXR0cnMiLCJleHRyYUF0dHJzIiwiam9pbiIsImRpcnMiLCJpc0VsZW1lbnRSb290IiwiY29uY2F0IiwidHJhbnNpdGlvbiIsInJhd0NoaWxkcmVuIiwiY2hpbGRyZW4iLCJkeW5hbWljQ2hpbGRyZW4iLCJjaGlsZFJvb3QiLCJmaWx0ZXJTaW5nbGVSb290IiwiaW5kZXhPZiIsImR5bmFtaWNJbmRleCIsInVwZGF0ZWRSb290Iiwic2luZ2xlUm9vdCIsImNoaWxkIiwiaXNWTm9kZSIsImhhc1Byb3BzQ2hhbmdlZCIsInByZXZQcm9wcyIsIm5leHRQcm9wcyIsIm5leHRLZXlzIiwidXBkYXRlSE9DSG9zdEVsIiwiZWwiLCJzdWJUcmVlIiwiaXNTdXNwZW5zZSIsIl9faXNTdXNwZW5zZSIsIlN1c3BlbnNlIiwibmFtZSIsInByb2Nlc3MiLCJuMSIsIm4yIiwiY29udGFpbmVyIiwiYW5jaG9yIiwicGFyZW50Q29tcG9uZW50IiwicGFyZW50U3VzcGVuc2UiLCJpc1NWRyIsInNsb3RTY29wZUlkcyIsIm9wdGltaXplZCIsInJlbmRlcmVySW50ZXJuYWxzIiwicGF0Y2giLCJvIiwiY3JlYXRlRWxlbWVudCIsImhpZGRlbkNvbnRhaW5lciIsInN1c3BlbnNlIiwiY3JlYXRlU3VzcGVuc2VCb3VuZGFyeSIsInBlbmRpbmdCcmFuY2giLCJzc0NvbnRlbnQiLCJ0cmlnZ2VyRXZlbnQiLCJzc0ZhbGxiYWNrIiwic2V0QWN0aXZlQnJhbmNoIiwibW91bnRTdXNwZW5zZSIsInVtIiwidW5tb3VudCIsIm5ld0JyYW5jaCIsIm5ld0ZhbGxiYWNrIiwiYWN0aXZlQnJhbmNoIiwiaXNJbkZhbGxiYWNrIiwiaXNIeWRyYXRpbmciLCJpc1NhbWVWTm9kZVR5cGUiLCJwZW5kaW5nSWQiLCJ0aW1lb3V0IiwiZmFsbGJhY2siLCJwYXRjaFN1c3BlbnNlIiwiaHlkcmF0ZSIsIm5vZGUiLCJoeWRyYXRlTm9kZSIsInBhcmVudE5vZGUiLCJkb2N1bWVudCIsImNyZWF0ZSIsIm5vcm1hbGl6ZSIsImlzU2xvdENoaWxkcmVuIiwibm9ybWFsaXplU3VzcGVuc2VTbG90IiwiZGVmYXVsdCIsImV2ZW50TGlzdGVuZXIiLCJoYXNXYXJuZWQiLCJpbmZvIiwibSIsIm1vdmUiLCJyZW1vdmUiLCJwYXJlbnRTdXNwZW5zZUlkIiwiaXNTdXNwZW5zaWJsZSIsInN1c3BlbnNpYmxlIiwiaXNWTm9kZVN1c3BlbnNpYmxlIiwidG9OdW1iZXIiLCJyZXN1bWUiLCJzeW5jIiwiRXJyb3IiLCJ2bm9kZTIiLCJwYXJlbnRDb21wb25lbnQyIiwiY29udGFpbmVyMiIsImRlbGF5RW50ZXIiLCJtb2RlIiwiYWZ0ZXJMZWF2ZSIsImFuY2hvcjIiLCJoYXNVbnJlc29sdmVkQW5jZXN0b3IiLCJmYWxsYmFja1ZOb2RlIiwiaXNTVkcyIiwibW91bnRGYWxsYmFjayIsInJlZ2lzdGVyRGVwIiwic2V0dXBSZW5kZXJFZmZlY3QiLCJpc0luUGVuZGluZ1N1c3BlbnNlIiwiaHlkcmF0ZWRFbCIsImFzeW5jRGVwIiwiYXN5bmNTZXR1cFJlc3VsdCIsInN1c3BlbnNlSWQiLCJhc3luY1Jlc29sdmVkIiwiaGFuZGxlU2V0dXBSZXN1bHQiLCJwbGFjZWhvbGRlciIsInBhcmVudFN1c3BlbnNlMiIsImRvUmVtb3ZlIiwicyIsImJsb2NrIiwidHJhY2tCbG9jayIsImlzQmxvY2tUcmVlRW5hYmxlZCIsIm9wZW5CbG9jayIsImN1cnJlbnRCbG9jayIsImNsb3NlQmxvY2siLCJzaW5nbGVDaGlsZCIsImMiLCJxdWV1ZUVmZmVjdFdpdGhTdXNwZW5zZSIsImJyYW5jaCIsIndhdGNoRWZmZWN0IiwiZG9XYXRjaCIsIndhdGNoUG9zdEVmZmVjdCIsIndhdGNoU3luY0VmZmVjdCIsIklOSVRJQUxfV0FUQ0hFUl9WQUxVRSIsIndhdGNoIiwiaW1tZWRpYXRlIiwiZGVlcCIsImN1cnJlbnRJbnN0YW5jZSIsImNsZWFudXAiLCJmb3JjZVRyaWdnZXIiLCJpc011bHRpU291cmNlIiwidHJhdmVyc2UiLCJvbkNsZWFudXAiLCJOT09QIiwiYmFzZUdldHRlciIsInNzckNsZWFudXAiLCJpc0luU1NSQ29tcG9uZW50U2V0dXAiLCJ1c2VTU1JDb250ZXh0IiwiX193YXRjaGVySGFuZGxlcyIsImZpbGwiLCJxdWV1ZVBvc3RSZW5kZXJFZmZlY3QiLCJ1bndhdGNoIiwiaW5zdGFuY2VXYXRjaCIsInB1YmxpY1RoaXMiLCJjcmVhdGVQYXRoR2V0dGVyIiwic2V0Q3VycmVudEluc3RhbmNlIiwidW5zZXRDdXJyZW50SW5zdGFuY2UiLCJwYXRoIiwic2VnbWVudHMiLCJzcGxpdCIsImlzU2V0IiwiaXNQbGFpbk9iamVjdCIsInZhbGlkYXRlRGlyZWN0aXZlTmFtZSIsImlzQnVpbHRJbkRpcmVjdGl2ZSIsIndpdGhEaXJlY3RpdmVzIiwiZGlyZWN0aXZlcyIsImludGVybmFsSW5zdGFuY2UiLCJnZXRFeHBvc2VQcm94eSIsImJpbmRpbmdzIiwiZGlyIiwibW9kaWZpZXJzIiwibW91bnRlZCIsInVwZGF0ZWQiLCJpbnZva2VEaXJlY3RpdmVIb29rIiwicHJldlZOb2RlIiwib2xkQmluZGluZ3MiLCJiaW5kaW5nIiwidXNlVHJhbnNpdGlvblN0YXRlIiwic3RhdGUiLCJpc01vdW50ZWQiLCJpc0xlYXZpbmciLCJpc1VubW91bnRpbmciLCJsZWF2aW5nVk5vZGVzIiwib25Nb3VudGVkIiwib25CZWZvcmVVbm1vdW50IiwiVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IiLCJGdW5jdGlvbiIsIkJhc2VUcmFuc2l0aW9uUHJvcHNWYWxpZGF0b3JzIiwiYXBwZWFyIiwiQm9vbGVhbiIsInBlcnNpc3RlZCIsIm9uQmVmb3JlRW50ZXIiLCJvbkVudGVyIiwib25BZnRlckVudGVyIiwib25FbnRlckNhbmNlbGxlZCIsIm9uQmVmb3JlTGVhdmUiLCJvbkxlYXZlIiwib25BZnRlckxlYXZlIiwib25MZWF2ZUNhbmNlbGxlZCIsIm9uQmVmb3JlQXBwZWFyIiwib25BcHBlYXIiLCJvbkFmdGVyQXBwZWFyIiwib25BcHBlYXJDYW5jZWxsZWQiLCJCYXNlVHJhbnNpdGlvbiIsInNldHVwIiwiZ2V0Q3VycmVudEluc3RhbmNlIiwicHJldlRyYW5zaXRpb25LZXkiLCJnZXRUcmFuc2l0aW9uUmF3Q2hpbGRyZW4iLCJoYXNGb3VuZCIsInJhd1Byb3BzIiwiZW1wdHlQbGFjZWhvbGRlciIsImlubmVyQ2hpbGQiLCJnZXRLZWVwQWxpdmVDaGlsZCIsImVudGVySG9va3MiLCJyZXNvbHZlVHJhbnNpdGlvbkhvb2tzIiwic2V0VHJhbnNpdGlvbkhvb2tzIiwib2xkQ2hpbGQiLCJvbGRJbm5lckNoaWxkIiwidHJhbnNpdGlvbktleUNoYW5nZWQiLCJnZXRUcmFuc2l0aW9uS2V5IiwibGVhdmluZ0hvb2tzIiwiZGVsYXlMZWF2ZSIsImVhcmx5UmVtb3ZlIiwiZGVsYXllZExlYXZlIiwiZ2V0TGVhdmluZ05vZGVzRm9yVHlwZSIsIl9sZWF2ZUNiIiwibGVhdmluZ1ZOb2Rlc0NhY2hlIiwiY2FsbEhvb2siLCJjYWxsQXN5bmNIb29rIiwiZXZlcnkiLCJob29rMiIsImhvb2tzIiwiYmVmb3JlRW50ZXIiLCJsZWF2aW5nVk5vZGUiLCJlbnRlciIsImFmdGVySG9vayIsImNhbmNlbEhvb2siLCJjYWxsZWQiLCJfZW50ZXJDYiIsImNhbmNlbGxlZCIsImxlYXZlIiwiY2xvbmUiLCJpc0tlZXBBbGl2ZSIsImtlZXBDb21tZW50IiwicGFyZW50S2V5Iiwia2V5ZWRGcmFnbWVudENvdW50IiwiRnJhZ21lbnQiLCJkZWZpbmVDb21wb25lbnQiLCJleHRyYU9wdGlvbnMiLCJpc0FzeW5jV3JhcHBlciIsIl9fYXN5bmNMb2FkZXIiLCJkZWZpbmVBc3luY0NvbXBvbmVudCIsImxvYWRlciIsImxvYWRpbmdDb21wb25lbnQiLCJlcnJvckNvbXBvbmVudCIsImRlbGF5Iiwib25FcnJvciIsInVzZXJPbkVycm9yIiwicmVzb2x2ZWRDb21wIiwicGVuZGluZ1JlcXVlc3QiLCJyZXRyaWVzIiwibG9hZCIsInRoaXNSZXF1ZXN0IiwicmVqZWN0IiwiX19lc01vZHVsZSIsInRvU3RyaW5nVGFnIiwiX19hc3luY1Jlc29sdmVkIiwiY3JlYXRlSW5uZXJDb21wIiwibG9hZGVkIiwiZGVsYXllZCIsImNlIiwiX19pc0tlZXBBbGl2ZSIsIktlZXBBbGl2ZSIsImluY2x1ZGUiLCJSZWdFeHAiLCJleGNsdWRlIiwibWF4Iiwic2hhcmVkQ29udGV4dCIsInJlbmRlcmVyIiwiY3VycmVudCIsIl9fdl9jYWNoZSIsIl91bm1vdW50Iiwic3RvcmFnZUNvbnRhaW5lciIsInJlc2V0U2hhcGVGbGFnIiwicHJ1bmVDYWNoZSIsInBydW5lQ2FjaGVFbnRyeSIsImFjdGl2YXRlIiwiaW5zdGFuY2UyIiwiaXNEZWFjdGl2YXRlZCIsImludm9rZUFycmF5Rm5zIiwidm5vZGVIb29rIiwib25Wbm9kZU1vdW50ZWQiLCJpbnZva2VWTm9kZUhvb2siLCJkZWFjdGl2YXRlIiwiZGEiLCJvblZub2RlVW5tb3VudGVkIiwibWF0Y2hlcyIsInBlbmRpbmdDYWNoZUtleSIsImNhY2hlU3VidHJlZSIsImdldElubmVyQ2hpbGQiLCJvblVwZGF0ZWQiLCJyYXdWTm9kZSIsImNhY2hlZFZOb2RlIiwicGFyc2VJbnQiLCJwYXR0ZXJuIiwiaXNSZWdFeHAiLCJ0ZXN0Iiwib25BY3RpdmF0ZWQiLCJyZWdpc3RlcktlZXBBbGl2ZUhvb2siLCJvbkRlYWN0aXZhdGVkIiwid3JhcHBlZEhvb2siLCJfX3dkYyIsImluamVjdEhvb2siLCJpbmplY3RUb0tlZXBBbGl2ZVJvb3QiLCJrZWVwQWxpdmVSb290IiwiaW5qZWN0ZWQiLCJvblVubW91bnRlZCIsInByZXBlbmQiLCJfX3dlaCIsInVuc2hpZnQiLCJjcmVhdGVIb29rIiwibGlmZWN5Y2xlIiwib25CZWZvcmVNb3VudCIsIm9uQmVmb3JlVXBkYXRlIiwib25TZXJ2ZXJQcmVmZXRjaCIsIm9uUmVuZGVyVHJpZ2dlcmVkIiwib25SZW5kZXJUcmFja2VkIiwib25FcnJvckNhcHR1cmVkIiwiQ09NUE9ORU5UUyIsInJlc29sdmVDb21wb25lbnQiLCJtYXliZVNlbGZSZWZlcmVuY2UiLCJyZXNvbHZlQXNzZXQiLCJOVUxMX0RZTkFNSUNfQ09NUE9ORU5UIiwiZm9yIiwicmVzb2x2ZUR5bmFtaWNDb21wb25lbnQiLCJyZXNvbHZlRGlyZWN0aXZlIiwid2Fybk1pc3NpbmciLCJzZWxmTmFtZSIsInJlZ2lzdHJ5IiwicmVuZGVyTGlzdCIsInJlbmRlckl0ZW0iLCJpc0ludGVnZXIiLCJmcm9tIiwiY3JlYXRlU2xvdHMiLCJkeW5hbWljU2xvdHMiLCJzbG90IiwiaiIsInJlbmRlclNsb3QiLCJub1Nsb3R0ZWQiLCJpc0NFIiwidmFsaWRTbG90Q29udGVudCIsImVuc3VyZVZhbGlkVk5vZGUiLCJyZW5kZXJlZCIsImNyZWF0ZUJsb2NrIiwiXyIsInNjb3BlSWQiLCJ2bm9kZXMiLCJ0b0hhbmRsZXJzIiwicHJlc2VydmVDYXNlSWZOZWNlc3NhcnkiLCJnZXRQdWJsaWNJbnN0YW5jZSIsImlzU3RhdGVmdWxDb21wb25lbnQiLCJwdWJsaWNQcm9wZXJ0aWVzTWFwIiwiJCIsIiRlbCIsIiRkYXRhIiwiJHByb3BzIiwiJGF0dHJzIiwiJHNsb3RzIiwiJHJlZnMiLCJyZWZzIiwiJHBhcmVudCIsIiRyb290IiwiJGVtaXQiLCIkb3B0aW9ucyIsInJlc29sdmVNZXJnZWRPcHRpb25zIiwiJGZvcmNlVXBkYXRlIiwiZiIsIiRuZXh0VGljayIsIiR3YXRjaCIsImlzUmVzZXJ2ZWRQcmVmaXgiLCJoYXNTZXR1cEJpbmRpbmciLCJfX2lzU2NyaXB0U2V0dXAiLCJQdWJsaWNJbnN0YW5jZVByb3h5SGFuZGxlcnMiLCJhY2Nlc3NDYWNoZSIsIm5vcm1hbGl6ZWRQcm9wcyIsInNob3VsZENhY2hlQWNjZXNzIiwicHVibGljR2V0dGVyIiwiY3NzTW9kdWxlIiwiZ2xvYmFsUHJvcGVydGllcyIsIl9fY3NzTW9kdWxlcyIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIlJ1bnRpbWVDb21waWxlZFB1YmxpY0luc3RhbmNlUHJveHlIYW5kbGVycyIsInVuc2NvcGFibGVzIiwiaXNHbG9iYWxseVdoaXRlbGlzdGVkIiwiZGVmaW5lUHJvcHMiLCJkZWZpbmVFbWl0cyIsImRlZmluZUV4cG9zZSIsImV4cG9zZWQiLCJkZWZpbmVPcHRpb25zIiwiZGVmaW5lU2xvdHMiLCJkZWZpbmVNb2RlbCIsIndpdGhEZWZhdWx0cyIsImRlZmF1bHRzIiwidXNlU2xvdHMiLCJnZXRDb250ZXh0IiwidXNlQXR0cnMiLCJ1c2VNb2RlbCIsImxvY2FsIiwic2V0dXBDb250ZXh0IiwiY3JlYXRlU2V0dXBDb250ZXh0Iiwibm9ybWFsaXplUHJvcHNPckVtaXRzIiwicmVkdWNlIiwibWVyZ2VEZWZhdWx0cyIsIm9wdCIsInNraXBGYWN0b3J5IiwibWVyZ2VNb2RlbHMiLCJjcmVhdGVQcm9wc1Jlc3RQcm94eSIsImV4Y2x1ZGVkS2V5cyIsIndpdGhBc3luY0NvbnRleHQiLCJnZXRBd2FpdGFibGUiLCJhd2FpdGFibGUiLCJhcHBseU9wdGlvbnMiLCJiZWZvcmVDcmVhdGUiLCJkYXRhT3B0aW9ucyIsImNvbXB1dGVkT3B0aW9ucyIsIm1ldGhvZHMiLCJ3YXRjaE9wdGlvbnMiLCJwcm92aWRlIiwicHJvdmlkZU9wdGlvbnMiLCJpbmplY3QiLCJpbmplY3RPcHRpb25zIiwiY3JlYXRlZCIsImJlZm9yZU1vdW50IiwiYmVmb3JlVXBkYXRlIiwiYWN0aXZhdGVkIiwiZGVhY3RpdmF0ZWQiLCJiZWZvcmVEZXN0cm95IiwiYmVmb3JlVW5tb3VudCIsImRlc3Ryb3llZCIsInVubW91bnRlZCIsInJlbmRlclRyYWNrZWQiLCJyZW5kZXJUcmlnZ2VyZWQiLCJlcnJvckNhcHR1cmVkIiwic2VydmVyUHJlZmV0Y2giLCJleHBvc2UiLCJjb21wb25lbnRzIiwiZmlsdGVycyIsImNoZWNrRHVwbGljYXRlUHJvcGVydGllcyIsImNyZWF0ZUR1cGxpY2F0ZUNoZWNrZXIiLCJub3JtYWxpemVJbmplY3QiLCJyZXNvbHZlSW5qZWN0aW9ucyIsIm1ldGhvZEhhbmRsZXIiLCJ3cml0YWJsZSIsImNyZWF0ZVdhdGNoZXIiLCJwcm92aWRlcyIsInJlZ2lzdGVyTGlmZWN5Y2xlSG9vayIsInJlZ2lzdGVyIiwiX2hvb2siLCJoIiwiYmFzZSIsImV4dGVuZHNPcHRpb25zIiwiZ2xvYmFsTWl4aW5zIiwib3B0aW9uTWVyZ2VTdHJhdGVnaWVzIiwicmVzb2x2ZWQiLCJtZXJnZU9wdGlvbnMiLCJ0byIsInN0cmF0cyIsInN0cmF0IiwiaW50ZXJuYWxPcHRpb25NZXJnZVN0cmF0cyIsIm1lcmdlRGF0YUZuIiwibWVyZ2VFbWl0c09yUHJvcHNPcHRpb25zIiwibWVyZ2VPYmplY3RPcHRpb25zIiwibWVyZ2VBc0FycmF5IiwibWVyZ2VkIiwiY3JlYXRlQXBwQ29udGV4dCIsImlzTmF0aXZlVGFnIiwiTk8iLCJ3YXJuSGFuZGxlciIsImNvbXBpbGVyT3B0aW9ucyIsInVpZCQxIiwiY3JlYXRlQXBwQVBJIiwicm9vdENvbXBvbmVudCIsInJvb3RQcm9wcyIsImNvbnRleHQiLCJpbnN0YWxsZWRQbHVnaW5zIiwiX3VpZCIsIl9jb21wb25lbnQiLCJfcHJvcHMiLCJfY29udGFpbmVyIiwiX2NvbnRleHQiLCJfaW5zdGFuY2UiLCJ2ZXJzaW9uIiwidXNlIiwiaW5zdGFsbCIsIm1peGluIiwidmFsaWRhdGVDb21wb25lbnROYW1lIiwiZGlyZWN0aXZlIiwibW91bnQiLCJyb290Q29udGFpbmVyIiwiaXNIeWRyYXRlIiwiX192dWVfYXBwX18iLCJUZXh0IiwiU3RhdGljIiwiZGV2dG9vbHNJbml0QXBwIiwiZGV2dG9vbHNVbm1vdW50QXBwIiwicnVuV2l0aENvbnRleHQiLCJjdXJyZW50QXBwIiwicGFyZW50UHJvdmlkZXMiLCJ0cmVhdERlZmF1bHRBc0ZhY3RvcnkiLCJoYXNJbmplY3Rpb25Db250ZXh0Iiwic2V0RnVsbFByb3BzIiwibmVlZENhc3RLZXlzIiwicmF3Q2FzdFZhbHVlcyIsImhhc0F0dHJzQ2hhbmdlZCIsImlzUmVzZXJ2ZWRQcm9wIiwiY2FtZWxLZXkiLCJyYXdDdXJyZW50UHJvcHMiLCJjYXN0VmFsdWVzIiwicmVzb2x2ZVByb3BWYWx1ZSIsImlzQWJzZW50IiwiaGFzRGVmYXVsdCIsInByb3BzRGVmYXVsdHMiLCJub3JtYWxpemVQcm9wc09wdGlvbnMiLCJleHRlbmRQcm9wcyIsIkVNUFRZX0FSUiIsIm5vcm1hbGl6ZWRLZXkiLCJ2YWxpZGF0ZVByb3BOYW1lIiwiYm9vbGVhbkluZGV4IiwiZ2V0VHlwZUluZGV4Iiwic3RyaW5nSW5kZXgiLCJnZXRUeXBlIiwiY3RvciIsIm1hdGNoIiwidG9TdHJpbmciLCJpc1NhbWVUeXBlIiwiZXhwZWN0ZWRUeXBlcyIsImZpbmRJbmRleCIsInQiLCJ2YWxpZGF0ZVByb3BzIiwicmVzb2x2ZWRWYWx1ZXMiLCJ2YWxpZGF0ZVByb3AiLCJyZXF1aXJlZCIsInNraXBDaGVjayIsImlzVmFsaWQiLCJ0eXBlcyIsInZhbGlkIiwiZXhwZWN0ZWRUeXBlIiwiYXNzZXJ0VHlwZSIsIm1lc3NhZ2UiLCJyZWNlaXZlZFR5cGUiLCJleHBlY3RlZFZhbHVlIiwic3R5bGVWYWx1ZSIsInJlY2VpdmVkVmFsdWUiLCJpc0V4cGxpY2FibGUiLCJlbGVtIiwiaXNCb29sZWFuIiwiZ2V0SW52YWxpZFR5cGVNZXNzYWdlIiwiaXNTaW1wbGVUeXBlIiwiaXNJbnRlcm5hbEtleSIsIm5vcm1hbGl6ZVNsb3RWYWx1ZSIsIm5vcm1hbGl6ZVNsb3QiLCJyYXdTbG90Iiwibm9ybWFsaXplT2JqZWN0U2xvdHMiLCJyYXdTbG90cyIsIl9jdHgiLCJub3JtYWxpemVWTm9kZVNsb3RzIiwic2V0UmVmIiwicmF3UmVmIiwib2xkUmF3UmVmIiwiaXNVbm1vdW50IiwicmVmVmFsdWUiLCJvd25lciIsIm9sZFJlZiIsIl9pc1N0cmluZyIsIl9pc1JlZiIsImRvU2V0IiwiZXhpc3RpbmciLCJrIiwiaGFzTWlzbWF0Y2giLCJpc1NWR0NvbnRhaW5lciIsIm5hbWVzcGFjZVVSSSIsInRhZ05hbWUiLCJpc0NvbW1lbnQiLCJub2RlVHlwZSIsImNyZWF0ZUh5ZHJhdGlvbkZ1bmN0aW9ucyIsIm10IiwibW91bnRDb21wb25lbnQiLCJwYXRjaFByb3AiLCJjcmVhdGVUZXh0IiwibmV4dFNpYmxpbmciLCJpbnNlcnQiLCJjcmVhdGVDb21tZW50IiwiaXNGcmFnbWVudFN0YXJ0Iiwib25NaXNtYXRjaCIsImhhbmRsZU1pc21hdGNoIiwiZG9tVHlwZSIsIm5leHROb2RlIiwibmVlZFRvQWRvcHRDb250ZW50Iiwic3RhdGljQ291bnQiLCJvdXRlckhUTUwiLCJoeWRyYXRlRnJhZ21lbnQiLCJoeWRyYXRlRWxlbWVudCIsImxvY2F0ZUNsb3NpbmdBc3luY0FuY2hvciIsInByZXZpb3VzU2libGluZyIsImxhc3RDaGlsZCIsImNyZWF0ZVRleHRWTm9kZSIsImh5ZHJhdGVDaGlsZHJlbiIsImZvcmNlUGF0Y2hWYWx1ZSIsImVuZHNXaXRoIiwib25DbGljayIsInZub2RlSG9va3MiLCJvblZub2RlQmVmb3JlTW91bnQiLCJpbm5lckhUTUwiLCJ0ZXh0Q29udGVudCIsImZpcnN0Q2hpbGQiLCJwYXJlbnRWTm9kZSIsImZyYWdtZW50U2xvdFNjb3BlSWRzIiwiaXNGcmFnbWVudCIsIm5leHQyIiwiaGFzQ2hpbGROb2RlcyIsIl92bm9kZSIsInN0YXJ0TWVhc3VyZSIsImlzU3VwcG9ydGVkIiwibWFyayIsImVuZE1lYXN1cmUiLCJzdGFydFRhZyIsImVuZFRhZyIsIm1lYXN1cmUiLCJjbGVhck1hcmtzIiwiY3JlYXRlUmVuZGVyZXIiLCJiYXNlQ3JlYXRlUmVuZGVyZXIiLCJjcmVhdGVIeWRyYXRpb25SZW5kZXJlciIsImNyZWF0ZUh5ZHJhdGlvbkZucyIsIm5lZWRXYXJuIiwiX19WVUVfUFJPRF9ERVZUT09MU19fIiwibXVsdGkiLCJpbml0RmVhdHVyZUZsYWdzIiwiX19WVUVfXyIsImhvc3RJbnNlcnQiLCJob3N0UmVtb3ZlIiwiaG9zdFBhdGNoUHJvcCIsImhvc3RDcmVhdGVFbGVtZW50IiwiaG9zdENyZWF0ZVRleHQiLCJob3N0Q3JlYXRlQ29tbWVudCIsInNldFRleHQiLCJob3N0U2V0VGV4dCIsInNldEVsZW1lbnRUZXh0IiwiaG9zdFNldEVsZW1lbnRUZXh0IiwiaG9zdFBhcmVudE5vZGUiLCJob3N0TmV4dFNpYmxpbmciLCJzZXRTY29wZUlkIiwiaG9zdFNldFNjb3BlSWQiLCJpbnNlcnRTdGF0aWNDb250ZW50IiwiaG9zdEluc2VydFN0YXRpY0NvbnRlbnQiLCJnZXROZXh0SG9zdE5vZGUiLCJwcm9jZXNzVGV4dCIsInByb2Nlc3NDb21tZW50Tm9kZSIsIm1vdW50U3RhdGljTm9kZSIsInBhdGNoU3RhdGljTm9kZSIsInByb2Nlc3NGcmFnbWVudCIsInByb2Nlc3NFbGVtZW50IiwicHJvY2Vzc0NvbXBvbmVudCIsImludGVybmFscyIsInJlbW92ZVN0YXRpY05vZGUiLCJtb3VudEVsZW1lbnQiLCJwYXRjaEVsZW1lbnQiLCJpcyIsIm1vdW50Q2hpbGRyZW4iLCJ1bm1vdW50Q2hpbGRyZW4iLCJuZWVkQ2FsbFRyYW5zaXRpb25Ib29rcyIsImNsb25lSWZNb3VudGVkIiwib2xkUHJvcHMiLCJuZXdQcm9wcyIsInRvZ2dsZVJlY3Vyc2UiLCJvblZub2RlQmVmb3JlVXBkYXRlIiwiYXJlQ2hpbGRyZW5TVkciLCJwYXRjaEJsb2NrQ2hpbGRyZW4iLCJ0cmF2ZXJzZVN0YXRpY0NoaWxkcmVuIiwicGF0Y2hDaGlsZHJlbiIsInBhdGNoUHJvcHMiLCJjbGFzcyIsInN0eWxlIiwicHJvcHNUb1VwZGF0ZSIsImR5bmFtaWNQcm9wcyIsIm9uVm5vZGVVcGRhdGVkIiwib2xkQ2hpbGRyZW4iLCJuZXdDaGlsZHJlbiIsImZhbGxiYWNrQ29udGFpbmVyIiwib2xkVk5vZGUiLCJuZXdWTm9kZSIsImZyYWdtZW50U3RhcnRBbmNob3IiLCJmcmFnbWVudEVuZEFuY2hvciIsInVwZGF0ZUNvbXBvbmVudCIsImluaXRpYWxWTm9kZSIsImNyZWF0ZUNvbXBvbmVudEluc3RhbmNlIiwiX19obXJJZCIsInJlZ2lzdGVySE1SIiwic2V0dXBDb21wb25lbnQiLCJuZXh0Vk5vZGUiLCJwcmV2Q2hpbGRyZW4iLCJuZXh0Q2hpbGRyZW4iLCIkc3RhYmxlIiwic2hvdWxkVXBkYXRlQ29tcG9uZW50IiwidXBkYXRlQ29tcG9uZW50UHJlUmVuZGVyIiwiaW52YWxpZGF0ZUpvYiIsImJ1IiwidSIsIm9yaWdpbk5leHQiLCJuZXh0VHJlZSIsInByZXZUcmVlIiwiYm0iLCJpc0FzeW5jV3JhcHBlclZOb2RlIiwiaHlkcmF0ZVN1YlRyZWUiLCJzY29wZWRJbml0aWFsVk5vZGUiLCJydGMiLCJydGciLCJyYXdQcmV2UHJvcHMiLCJpc0luSG1yQ29udGV4dCIsImtlYmFiS2V5IiwiY2FtZWxpemVkS2V5IiwidXBkYXRlUHJvcHMiLCJuZWVkRGVsZXRpb25DaGVjayIsImRlbGV0aW9uQ29tcGFyaXNvblRhcmdldCIsInVwZGF0ZVNsb3RzIiwiYzEiLCJwcmV2U2hhcGVGbGFnIiwiYzIiLCJwYXRjaEtleWVkQ2hpbGRyZW4iLCJwYXRjaFVua2V5ZWRDaGlsZHJlbiIsIm9sZExlbmd0aCIsImNvbW1vbkxlbmd0aCIsIk1hdGgiLCJtaW4iLCJuZXh0Q2hpbGQiLCJwYXJlbnRBbmNob3IiLCJsMiIsImUxIiwiZTIiLCJuZXh0UG9zIiwiczEiLCJzMiIsImtleVRvTmV3SW5kZXhNYXAiLCJwYXRjaGVkIiwidG9CZVBhdGNoZWQiLCJtb3ZlZCIsIm1heE5ld0luZGV4U29GYXIiLCJuZXdJbmRleFRvT2xkSW5kZXhNYXAiLCJwcmV2Q2hpbGQiLCJuZXdJbmRleCIsImluY3JlYXNpbmdOZXdJbmRleFNlcXVlbmNlIiwibGVuIiwiYXJySSIsImdldFNlcXVlbmNlIiwibmV4dEluZGV4IiwibW92ZVR5cGUiLCJtb3ZlU3RhdGljTm9kZSIsInJlbW92ZTIiLCJwZXJmb3JtTGVhdmUiLCJzaG91bGRJbnZva2VEaXJzIiwic2hvdWxkSW52b2tlVm5vZGVIb29rIiwib25Wbm9kZUJlZm9yZVVubW91bnQiLCJ1bm1vdW50Q29tcG9uZW50IiwicmVtb3ZlRnJhZ21lbnQiLCJwZXJmb3JtUmVtb3ZlIiwidW5yZWdpc3RlckhNUiIsImJ1bSIsImNsZWFudXBCdWZmZXIiLCJtYyIsInBjIiwicGJjIiwiY3JlYXRlQXBwIiwiYWxsb3dlZCIsImNoMSIsImNoMiIsImlzVGVsZXBvcnREaXNhYmxlZCIsImRpc2FibGVkIiwiaXNUYXJnZXRTVkciLCJTVkdFbGVtZW50IiwicmVzb2x2ZVRhcmdldCIsInNlbGVjdCIsInRhcmdldFNlbGVjdG9yIiwibW92ZVRlbGVwb3J0IiwidGFyZ2V0QW5jaG9yIiwiaXNSZW9yZGVyIiwiVGVsZXBvcnQiLCJfX2lzVGVsZXBvcnQiLCJxdWVyeVNlbGVjdG9yIiwibWFpbkFuY2hvciIsIndhc0Rpc2FibGVkIiwiY3VycmVudENvbnRhaW5lciIsImN1cnJlbnRBbmNob3IiLCJuZXh0VGFyZ2V0IiwidXBkYXRlQ3NzVmFycyIsInRhcmdldE5vZGUiLCJfbHBhIiwidXQiLCJzZXRBdHRyaWJ1dGUiLCJkaXNhYmxlVHJhY2tpbmciLCJ2bm9kZUFyZ3NUcmFuc2Zvcm1lciIsInNldHVwQmxvY2siLCJjcmVhdGVFbGVtZW50QmxvY2siLCJjcmVhdGVCYXNlVk5vZGUiLCJfX3ZfaXNWTm9kZSIsInRyYW5zZm9ybVZOb2RlQXJncyIsInRyYW5zZm9ybWVyIiwiSW50ZXJuYWxPYmplY3RLZXkiLCJub3JtYWxpemVLZXkiLCJub3JtYWxpemVSZWYiLCJyZWZfa2V5IiwicmVmX2ZvciIsImlzQmxvY2tOb2RlIiwibmVlZEZ1bGxDaGlsZHJlbk5vcm1hbGl6YXRpb24iLCJfX3Zfc2tpcCIsIm5vcm1hbGl6ZUNoaWxkcmVuIiwiY2xvbmVkIiwiZ3VhcmRSZWFjdGl2ZVByb3BzIiwia2xhc3MiLCJub3JtYWxpemVDbGFzcyIsIm5vcm1hbGl6ZVN0eWxlIiwiaXNUZWxlcG9ydCIsIl9jcmVhdGVWTm9kZSIsImV4dHJhUHJvcHMiLCJtZXJnZVJlZiIsIm1lcmdlZFByb3BzIiwibWVyZ2VQcm9wcyIsImRlZXBDbG9uZVZOb2RlIiwidGV4dCIsImZsYWciLCJjcmVhdGVTdGF0aWNWTm9kZSIsImNvbnRlbnQiLCJudW1iZXJPZk5vZGVzIiwiY3JlYXRlQ29tbWVudFZOb2RlIiwiYXNCbG9jayIsIm1lbW8iLCJzbG90RmxhZyIsInRvTWVyZ2UiLCJpbmNvbWluZyIsImVtcHR5QXBwQ29udGV4dCIsImV4cG9zZVByb3h5IiwiYXR0cnNQcm94eSIsInNsb3RzUHJveHkiLCJiYyIsInNwIiwiY3JlYXRlRGV2UmVuZGVyQ29udGV4dCIsImludGVybmFsU2V0Q3VycmVudEluc3RhbmNlIiwiZ2xvYmFsQ3VycmVudEluc3RhbmNlU2V0dGVycyIsInNldHRlcnNLZXkiLCJpc0J1aWx0SW5UYWciLCJhcHBJc05hdGl2ZVRhZyIsImNvbXBpbGUiLCJpbnN0YWxsV2l0aFByb3h5IiwiaXNTdGF0ZWZ1bCIsImluaXRQcm9wcyIsImluaXRTbG90cyIsInNldHVwUmVzdWx0IiwibmFtZXMiLCJpc1J1bnRpbWVPbmx5IiwiZXhwb3NlUHJvcHNPblJlbmRlckNvbnRleHQiLCJyZXNvbHZlZFJlc3VsdCIsImZpbmlzaENvbXBvbmVudFNldHVwIiwic2V0dXBTdGF0ZWZ1bENvbXBvbmVudCIsIl9fc3NySW5saW5lUmVuZGVyIiwic3NyUmVuZGVyIiwiZGV2dG9vbHNSYXdTZXR1cFN0YXRlIiwiZXhwb3NlU2V0dXBTdGF0ZU9uUmVuZGVyQ29udGV4dCIsInJlZ2lzdGVyUnVudGltZUNvbXBpbGVyIiwiX2NvbXBpbGUiLCJfcmMiLCJza2lwT3B0aW9ucyIsInRlbXBsYXRlIiwiaXNDdXN0b21FbGVtZW50IiwiZGVsaW1pdGVycyIsImNvbXBvbmVudENvbXBpbGVyT3B0aW9ucyIsImZpbmFsQ29tcGlsZXJPcHRpb25zIiwiZXhwb3NlZFR5cGUiLCJmcmVlemUiLCJnZXRBdHRyc1Byb3h5IiwiZ2V0U2xvdHNQcm94eSIsImNsYXNzaWZ5UkUiLCJpbmNsdWRlSW5mZXJyZWQiLCJkaXNwbGF5TmFtZSIsIl9fbmFtZSIsImlzUm9vdCIsIl9fZmlsZSIsImluZmVyRnJvbVJlZ2lzdHJ5IiwidG9VcHBlckNhc2UiLCJwcm9wc09yQ2hpbGRyZW4iLCJwcm90b3R5cGUiLCJzc3JDb250ZXh0S2V5IiwiaW5pdEN1c3RvbUZvcm1hdHRlciIsIndpdGhNZW1vIiwiaXNNZW1vU2FtZSIsInNzclV0aWxzIiwicmVzb2x2ZUZpbHRlciIsImNvbXBhdFV0aWxzIiwiZG9jIiwidGVtcGxhdGVDb250YWluZXIiLCJub2RlT3BzIiwiaW5zZXJ0QmVmb3JlIiwicmVtb3ZlQ2hpbGQiLCJ0YWciLCJjcmVhdGVFbGVtZW50TlMiLCJtdWx0aXBsZSIsImNyZWF0ZVRleHROb2RlIiwibm9kZVZhbHVlIiwic2VsZWN0b3IiLCJiZWZvcmUiLCJjbG9uZU5vZGUiLCJ3cmFwcGVyIiwiYXBwZW5kQ2hpbGQiLCJzZW1pY29sb25SRSIsImltcG9ydGFudFJFIiwic2V0U3R5bGUiLCJzZXRQcm9wZXJ0eSIsInByZWZpeGVkIiwicmF3TmFtZSIsInByZWZpeENhY2hlIiwicHJlZml4ZXMiLCJhdXRvUHJlZml4IiwieGxpbmtOUyIsImFkZEV2ZW50TGlzdGVuZXIiLCJwYXRjaEV2ZW50IiwicHJldlZhbHVlIiwibmV4dFZhbHVlIiwiaW52b2tlcnMiLCJfdmVpIiwiZXhpc3RpbmdJbnZva2VyIiwib3B0aW9uc01vZGlmaWVyUkUiLCJwYXJzZU5hbWUiLCJpbnZva2VyIiwiaW5pdGlhbFZhbHVlIiwiX3Z0cyIsImF0dGFjaGVkIiwib3JpZ2luYWxTdG9wIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwiX3N0b3BwZWQiLCJwYXRjaFN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsImNhY2hlZE5vdyIsImdldE5vdyIsImNyZWF0ZUludm9rZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwibmF0aXZlT25SRSIsImRlZmluZUN1c3RvbUVsZW1lbnQiLCJoeWRyYXRlMiIsIkNvbXAiLCJWdWVDdXN0b21FbGVtZW50IiwiVnVlRWxlbWVudCIsImluaXRpYWxQcm9wcyIsInN1cGVyIiwiZGVmaW5lU1NSQ3VzdG9tRWxlbWVudCIsIkJhc2VDbGFzcyIsIl9kZWYiLCJfY29ubmVjdGVkIiwiX3Jlc29sdmVkIiwiX251bWJlclByb3BzIiwic2hhZG93Um9vdCIsImF0dGFjaFNoYWRvdyIsIl9yZXNvbHZlUHJvcHMiLCJjb25uZWN0ZWRDYWxsYmFjayIsIl91cGRhdGUiLCJfcmVzb2x2ZURlZiIsImRpc2Nvbm5lY3RlZENhbGxiYWNrIiwiYXR0cmlidXRlcyIsIl9zZXRBdHRyIiwiTXV0YXRpb25PYnNlcnZlciIsIm11dGF0aW9ucyIsImF0dHJpYnV0ZU5hbWUiLCJvYnNlcnZlIiwiaXNBc3luYyIsIm51bWJlclByb3BzIiwiX2FwcGx5U3R5bGVzIiwiYXN5bmNEZWYiLCJkZWNsYXJlZFByb3BLZXlzIiwiX3NldFByb3AiLCJfZ2V0UHJvcCIsImdldEF0dHJpYnV0ZSIsInNob3VsZFJlZmxlY3QiLCJzaG91bGRVcGRhdGUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJuZXdTdHlsZXMiLCJfc3R5bGVzIiwiZGlzcGF0Y2giLCJkaXNwYXRjaEV2ZW50IiwiQ3VzdG9tRXZlbnQiLCJkZXRhaWwiLCJob3N0IiwiY3NzIiwidXNlQ3NzTW9kdWxlIiwibW9kdWxlcyIsIm1vZCIsInVzZUNzc1ZhcnMiLCJ1cGRhdGVUZWxlcG9ydHMiLCJ2YXJzIiwicXVlcnlTZWxlY3RvckFsbCIsInNldFZhcnNPbk5vZGUiLCJzZXRWYXJzIiwic2V0VmFyc09uVk5vZGUiLCJvYiIsImNoaWxkTGlzdCIsImRpc2Nvbm5lY3QiLCJUUkFOU0lUSU9OIiwiQU5JTUFUSU9OIiwiVHJhbnNpdGlvbiIsInJlc29sdmVUcmFuc2l0aW9uUHJvcHMiLCJET01UcmFuc2l0aW9uUHJvcHNWYWxpZGF0b3JzIiwiZHVyYXRpb24iLCJlbnRlckZyb21DbGFzcyIsImVudGVyQWN0aXZlQ2xhc3MiLCJlbnRlclRvQ2xhc3MiLCJhcHBlYXJGcm9tQ2xhc3MiLCJhcHBlYXJBY3RpdmVDbGFzcyIsImFwcGVhclRvQ2xhc3MiLCJsZWF2ZUZyb21DbGFzcyIsImxlYXZlQWN0aXZlQ2xhc3MiLCJsZWF2ZVRvQ2xhc3MiLCJUcmFuc2l0aW9uUHJvcHNWYWxpZGF0b3JzIiwiaDIiLCJoYXNFeHBsaWNpdENhbGxiYWNrIiwiYmFzZVByb3BzIiwiZHVyYXRpb25zIiwiTnVtYmVyT2YiLCJub3JtYWxpemVEdXJhdGlvbiIsImVudGVyRHVyYXRpb24iLCJsZWF2ZUR1cmF0aW9uIiwiZmluaXNoRW50ZXIiLCJpc0FwcGVhciIsInJlbW92ZVRyYW5zaXRpb25DbGFzcyIsImZpbmlzaExlYXZlIiwiX2lzTGVhdmluZyIsIm1ha2VFbnRlckhvb2siLCJuZXh0RnJhbWUiLCJhZGRUcmFuc2l0aW9uQ2xhc3MiLCJ3aGVuVHJhbnNpdGlvbkVuZHMiLCJmb3JjZVJlZmxvdyIsImNscyIsImNsYXNzTGlzdCIsIl92dGMiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJlbmRJZCIsImV4cGxpY2l0VGltZW91dCIsIl9lbmRJZCIsInJlc29sdmVJZk5vdFN0YWxlIiwicHJvcENvdW50IiwiZ2V0VHJhbnNpdGlvbkluZm8iLCJlbmRFdmVudCIsImVuZGVkIiwib25FbmQiLCJnZXRDb21wdXRlZFN0eWxlIiwiZ2V0U3R5bGVQcm9wZXJ0aWVzIiwidHJhbnNpdGlvbkRlbGF5cyIsInRyYW5zaXRpb25EdXJhdGlvbnMiLCJ0cmFuc2l0aW9uVGltZW91dCIsImdldFRpbWVvdXQiLCJhbmltYXRpb25EZWxheXMiLCJhbmltYXRpb25EdXJhdGlvbnMiLCJhbmltYXRpb25UaW1lb3V0IiwiaGFzVHJhbnNmb3JtIiwiZGVsYXlzIiwiZCIsInRvTXMiLCJib2R5Iiwib2Zmc2V0SGVpZ2h0IiwicG9zaXRpb25NYXAiLCJuZXdQb3NpdGlvbk1hcCIsIlRyYW5zaXRpb25Hcm91cEltcGwiLCJtb3ZlQ2xhc3MiLCJkaXNwbGF5IiwiaGFzQ1NTVHJhbnNmb3JtIiwiY2FsbFBlbmRpbmdDYnMiLCJyZWNvcmRQb3NpdGlvbiIsIm1vdmVkQ2hpbGRyZW4iLCJhcHBseVRyYW5zbGF0aW9uIiwidHJhbnNmb3JtIiwid2Via2l0VHJhbnNmb3JtIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwiX21vdmVDYiIsInByb3BlcnR5TmFtZSIsImNzc1RyYW5zaXRpb25Qcm9wcyIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsIlRyYW5zaXRpb25Hcm91cCIsIm9sZFBvcyIsIm5ld1BvcyIsImR4IiwibGVmdCIsImR5IiwidG9wIiwiZ2V0TW9kZWxBc3NpZ25lciIsIm9uQ29tcG9zaXRpb25TdGFydCIsImNvbXBvc2luZyIsIm9uQ29tcG9zaXRpb25FbmQiLCJFdmVudCIsInZNb2RlbFRleHQiLCJfYXNzaWduIiwiY2FzdFRvTnVtYmVyIiwiZG9tVmFsdWUiLCJhY3RpdmVFbGVtZW50Iiwidk1vZGVsQ2hlY2tib3giLCJtb2RlbFZhbHVlIiwiX21vZGVsVmFsdWUiLCJlbGVtZW50VmFsdWUiLCJnZXRWYWx1ZSIsImNoZWNrZWQiLCJsb29zZUluZGV4T2YiLCJmb3VuZCIsImZpbHRlcmVkIiwiZ2V0Q2hlY2tib3hWYWx1ZSIsInNldENoZWNrZWQiLCJsb29zZUVxdWFsIiwidk1vZGVsUmFkaW8iLCJ2TW9kZWxTZWxlY3QiLCJpc1NldE1vZGVsIiwic2VsZWN0ZWRWYWwiLCJzZWxlY3RlZCIsInNldFNlbGVjdGVkIiwiX2JpbmRpbmciLCJpc011bHRpcGxlIiwib3B0aW9uIiwib3B0aW9uVmFsdWUiLCJzZWxlY3RlZEluZGV4Iiwidk1vZGVsRHluYW1pYyIsImNhbGxNb2RlbEhvb2siLCJyZXNvbHZlRHluYW1pY01vZGVsIiwic3lzdGVtTW9kaWZpZXJzIiwibW9kaWZpZXJHdWFyZHMiLCJzdG9wUHJvcGFnYXRpb24iLCJwcmV2ZW50IiwicHJldmVudERlZmF1bHQiLCJjdXJyZW50VGFyZ2V0IiwiY3RybCIsImN0cmxLZXkiLCJzaGlmdCIsInNoaWZ0S2V5IiwiYWx0IiwiYWx0S2V5IiwibWV0YSIsIm1ldGFLZXkiLCJidXR0b24iLCJyaWdodCIsImV4YWN0Iiwid2l0aE1vZGlmaWVycyIsImd1YXJkIiwia2V5TmFtZXMiLCJlc2MiLCJzcGFjZSIsInVwIiwiZG93biIsIndpdGhLZXlzIiwiZXZlbnRLZXkiLCJ2U2hvdyIsIl92b2QiLCJzZXREaXNwbGF5IiwicmVuZGVyZXJPcHRpb25zIiwidHJhbnNpdGlvbkNsYXNzZXMiLCJjbGFzc05hbWUiLCJwYXRjaENsYXNzIiwiaXNDc3NTdHJpbmciLCJjdXJyZW50RGlzcGxheSIsImNzc1RleHQiLCJwYXRjaFN0eWxlIiwic2hvdWxkU2V0QXNQcm9wIiwibmVlZFJlbW92ZSIsImluY2x1ZGVCb29sZWFuQXR0ciIsInBhdGNoRE9NUHJvcCIsIl90cnVlVmFsdWUiLCJfZmFsc2VWYWx1ZSIsInJlbW92ZUF0dHJpYnV0ZU5TIiwic2V0QXR0cmlidXRlTlMiLCJpc1NwZWNpYWxCb29sZWFuQXR0ciIsInBhdGNoQXR0ciIsImVuYWJsZWRIeWRyYXRpb24iLCJlbnN1cmVSZW5kZXJlciIsImVuc3VyZUh5ZHJhdGlvblJlbmRlcmVyIiwiaW5qZWN0TmF0aXZlVGFnQ2hlY2siLCJpbmplY3RDb21waWxlck9wdGlvbnNDaGVjayIsImNvbnRhaW5lck9yU2VsZWN0b3IiLCJub3JtYWxpemVDb250YWluZXIiLCJFbGVtZW50IiwiY3JlYXRlU1NSQXBwIiwiaXNIVE1MVGFnIiwiaXNTVkdUYWciLCJTaGFkb3dSb290Iiwic3NyRGlyZWN0aXZlSW5pdGlhbGl6ZWQiLCJpbml0RGlyZWN0aXZlc0ZvclNTUiIsImdldFNTUlByb3BzIiwibW9kZWxUb1VzZSIsInN0ciIsImV4cGVjdHNMb3dlckNhc2UiLCJsaXN0Iiwib25SRSIsInRvVHlwZVN0cmluZyIsImlzRGF0ZSIsIm9iamVjdFRvU3RyaW5nIiwiY2FjaGVTdHJpbmdGdW5jdGlvbiIsImNhbWVsaXplUkUiLCJoeXBoZW5hdGVSRSIsImNoYXJBdCIsImZucyIsInBhcnNlRmxvYXQiLCJpc05hTiIsIk5hTiIsIl9nbG9iYWxUaGlzIiwiZ2xvYmFsVGhpcyIsImlkZW50UkUiLCJnZW5Qcm9wc0FjY2Vzc0V4cCIsIlBhdGNoRmxhZ05hbWVzIiwic2xvdEZsYWdzVGV4dCIsImdlbmVyYXRlQ29kZUZyYW1lIiwibGluZXMiLCJuZXdsaW5lU2VxdWVuY2VzIiwiaWR4IiwibGluZSIsInJlcGVhdCIsImxpbmVMZW5ndGgiLCJuZXdMaW5lU2VxTGVuZ3RoIiwicGFkIiwicGFyc2VTdHJpbmdTdHlsZSIsImxpc3REZWxpbWl0ZXJSRSIsInByb3BlcnR5RGVsaW1pdGVyUkUiLCJzdHlsZUNvbW1lbnRSRSIsInRtcCIsInN0cmluZ2lmeVN0eWxlIiwibm9ybWFsaXplUHJvcHMiLCJpc1ZvaWRUYWciLCJzcGVjaWFsQm9vbGVhbkF0dHJzIiwiaXNCb29sZWFuQXR0ciIsInVuc2FmZUF0dHJDaGFyUkUiLCJhdHRyVmFsaWRhdGlvbkNhY2hlIiwiaXNTU1JTYWZlQXR0ck5hbWUiLCJpc1Vuc2FmZSIsInByb3BzVG9BdHRyTWFwIiwiYWNjZXB0Q2hhcnNldCIsImh0bWxGb3IiLCJodHRwRXF1aXYiLCJpc0tub3duSHRtbEF0dHIiLCJpc0tub3duU3ZnQXR0ciIsImVzY2FwZVJFIiwiZXNjYXBlSHRtbCIsInN0cmluZyIsImV4ZWMiLCJlc2NhcGVkIiwiaHRtbCIsImxhc3RJbmRleCIsImNoYXJDb2RlQXQiLCJjb21tZW50U3RyaXBSRSIsImVzY2FwZUh0bWxDb21tZW50Iiwic3JjIiwiYVZhbGlkVHlwZSIsImJWYWxpZFR5cGUiLCJnZXRUaW1lIiwiZXF1YWwiLCJsb29zZUNvbXBhcmVBcnJheXMiLCJhSGFzS2V5IiwiYkhhc0tleSIsInRvRGlzcGxheVN0cmluZyIsInJlcGxhY2VyIiwiZW50cmllcyIsInZhbDIiLCJsaW1pdCIsImNvdW50ZXIiLCJwcm9kdWN0cyIsImNhdGVnb3JpZXMiLCJicmFuZHMiLCJtYXhQcmljZSIsInByadGBZXMiLCJzZWxlY3RlZFByaWNlQ2F0ZWdvcnkiLCJwcmljZUZpbHRlcnMiLCJzb3J0aW5nIiwiaXNMb2FkTW9yZUhpZGRlbiIsImlzRmlsdGVyc0FjY29yZGlvbkhpZGRlbiIsImlzQ2F0ZWdvcmllc1Njcm9sbEhpZGRlbiIsImZpbHRlcnNBY2NvcmRpb25TdGF0dXMiLCJwcmljZSIsIm9uZVRoaXJkUHJpY2UiLCJjZWlsIiwicHJpY2VSYW5nZSIsIm1pblZhbHVlIiwibWF4VmFsdWUiLCJwcm9kdWN0c2ZpbHRlcmVkIiwicmVzQXJyIiwiX3RoaXMiLCJicmFuZCIsImNhdGVnb3J5IiwicHJvZHVjdHNTb3J0ZWQiLCJzb3J0ZWQiLCJmZXRjaCIsImpzb24iLCJfdGhpczIiLCJsb2ciLCJjcmVhdGVGaWx0ZXJzIiwiYXBwZWFyYW5jZUFjb3JkaW9uIiwiZmlsdGVyc0FjY29yZGlvbiIsImZpbHRlck5hbWUiLCJpbm5lclRleHQiLCJwcm9kdWN0IiwiX3RoaXMzIiwiZmlsdGVySXRlbXMiLCJmaW5kIiwiX3R5cGVvZiIsImxvYWRpbmdQcm9kdWN0cyIsIl90aGlzNCIsImNvdW50VmlzaWJsZSIsInVzZUNvdW50U3RvcmUiLCJhZGRDb3VudCIsImNvdW50QWRkIiwiaXNNb2RhbEFjdGl2ZSIsImxpbWl0ZWRDb3VudGVyIiwiYWRkUGx1cyIsImFkZE1pbnVzIiwiYWRkQ2FydCIsIl9jcmVhdGVFbGVtZW50Vk5vZGUiLCJocmVmIiwiX2hvaXN0ZWRfMSIsIl9ob2lzdGVkXzIiLCJfaG9pc3RlZF8zIiwiX2hvaXN0ZWRfNCIsIl9ub3JtYWxpemVDbGFzcyIsIl9ob2lzdGVkXzkiLCJfY3JlYXRlRWxlbWVudEJsb2NrIiwiX0ZyYWdtZW50Iiwib25DaGFuZ2UiLCJfaG9pc3RlZF8xMiIsIl9ob2lzdGVkXzE1IiwiX2hvaXN0ZWRfMTgiLCJfaG9pc3RlZF8xOSIsIl9ob2lzdGVkXzIwIiwiX2hvaXN0ZWRfMjEiLCJpbWFnZXMiLCJfaG9pc3RlZF8yMyIsInRpdGxlIiwiX2hvaXN0ZWRfMjQiLCJfaG9pc3RlZF8yNSIsIndpZHRoIiwiaGVpZ2h0Iiwidmlld2JveCIsInhtbG5zIiwiX2ltcG9ydHNfMCIsImFjdGlvbiIsIl9ob2lzdGVkXzUiLCJfaG9pc3RlZF8xMSIsIl9ob2lzdGVkXzEzIiwiX2hvaXN0ZWRfMTYiLCJfaG9pc3RlZF8xNyIsImNsaWNrIiwidG9nZ2xlQ2xhc3MiLCJyZW1vdmVDbGFzcyIsImZhZGVPdXQiLCJhZGRDbGFzcyIsImRlZmluZVN0b3JlIiwiYWN0aW9ucyIsImJ0bnRleHQiLCJfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyIsIlVSTCIsIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyIsIm1vZHVsZSIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibmVlZExheWVyIiwibWVkaWEiLCJkZWR1cGUiLCJzdXBwb3J0cyIsImxheWVyIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsIl9rIiwidXJsIiwiaGFzaCIsIm5lZWRRdW90ZXMiLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic291cmNlTWFwcGluZyIsImdsb2JhbCIsIm5vR2xvYmFsIiwiZmxhdCIsImFycmF5IiwiY2xhc3MydHlwZSIsImZuVG9TdHJpbmciLCJPYmplY3RGdW5jdGlvblN0cmluZyIsInN1cHBvcnQiLCJpc1dpbmRvdyIsInByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMiLCJub25jZSIsIm5vTW9kdWxlIiwiRE9NRXZhbCIsImNvZGUiLCJzY3JpcHQiLCJoZWFkIiwidG9UeXBlIiwialF1ZXJ5IiwiaW5pdCIsImlzQXJyYXlMaWtlIiwianF1ZXJ5IiwidG9BcnJheSIsIm51bSIsInB1c2hTdGFjayIsImVsZW1zIiwibWVyZ2UiLCJwcmV2T2JqZWN0IiwiZWFjaCIsImZpcnN0IiwiZXEiLCJldmVuIiwiZ3JlcCIsIl9lbGVtIiwib2RkIiwiY29weSIsImNvcHlJc0FycmF5IiwiZXhwYW5kbyIsInJhbmRvbSIsImlzUmVhZHkiLCJub29wIiwicHJvdG8iLCJDdG9yIiwiaXNFbXB0eU9iamVjdCIsImdsb2JhbEV2YWwiLCJtYWtlQXJyYXkiLCJyZXN1bHRzIiwiaW5BcnJheSIsInNlY29uZCIsImludmVydCIsImNhbGxiYWNrRXhwZWN0IiwiZ3VpZCIsIl9pIiwiU2l6emxlIiwiRXhwciIsImdldFRleHQiLCJpc1hNTCIsInRva2VuaXplIiwib3V0ZXJtb3N0Q29udGV4dCIsInNvcnRJbnB1dCIsImhhc0R1cGxpY2F0ZSIsInNldERvY3VtZW50IiwiZG9jRWxlbSIsImRvY3VtZW50SXNIVE1MIiwicmJ1Z2d5UVNBIiwicmJ1Z2d5TWF0Y2hlcyIsImNvbnRhaW5zIiwicHJlZmVycmVkRG9jIiwiZGlycnVucyIsImNsYXNzQ2FjaGUiLCJjcmVhdGVDYWNoZSIsInRva2VuQ2FjaGUiLCJjb21waWxlckNhY2hlIiwibm9ubmF0aXZlU2VsZWN0b3JDYWNoZSIsInNvcnRPcmRlciIsInB1c2hOYXRpdmUiLCJib29sZWFucyIsIndoaXRlc3BhY2UiLCJpZGVudGlmaWVyIiwicHNldWRvcyIsInJ3aGl0ZXNwYWNlIiwicnRyaW0iLCJyY29tbWEiLCJybGVhZGluZ0NvbWJpbmF0b3IiLCJyZGVzY2VuZCIsInJwc2V1ZG8iLCJyaWRlbnRpZmllciIsIm1hdGNoRXhwciIsInJodG1sIiwicmlucHV0cyIsInJoZWFkZXIiLCJybmF0aXZlIiwicnF1aWNrRXhwciIsInJzaWJsaW5nIiwicnVuZXNjYXBlIiwiZnVuZXNjYXBlIiwiZXNjYXBlIiwibm9uSGV4IiwiaGlnaCIsImZyb21DaGFyQ29kZSIsInJjc3Nlc2NhcGUiLCJmY3NzZXNjYXBlIiwiY2giLCJhc0NvZGVQb2ludCIsInVubG9hZEhhbmRsZXIiLCJpbkRpc2FibGVkRmllbGRzZXQiLCJhZGRDb21iaW5hdG9yIiwibm9kZU5hbWUiLCJjaGlsZE5vZGVzIiwiZWxzIiwic2VlZCIsIm5pZCIsImdyb3VwcyIsIm5ld1NlbGVjdG9yIiwibmV3Q29udGV4dCIsIm93bmVyRG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsInFzYSIsInRlc3RDb250ZXh0IiwidG9TZWxlY3RvciIsInFzYUVycm9yIiwiY2FjaGVMZW5ndGgiLCJtYXJrRnVuY3Rpb24iLCJhc3NlcnQiLCJhZGRIYW5kbGUiLCJhdHRySGFuZGxlIiwic2libGluZ0NoZWNrIiwic291cmNlSW5kZXgiLCJjcmVhdGVJbnB1dFBzZXVkbyIsImNyZWF0ZUJ1dHRvblBzZXVkbyIsImNyZWF0ZURpc2FibGVkUHNldWRvIiwiaXNEaXNhYmxlZCIsImNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8iLCJhcmd1bWVudCIsIm1hdGNoSW5kZXhlcyIsIm5hbWVzcGFjZSIsImRvY3VtZW50RWxlbWVudCIsImhhc0NvbXBhcmUiLCJzdWJXaW5kb3ciLCJkZWZhdWx0VmlldyIsImF0dGFjaEV2ZW50IiwiY3NzSGFzIiwiZ2V0QnlJZCIsImdldEVsZW1lbnRzQnlOYW1lIiwiYXR0cklkIiwiZ2V0QXR0cmlidXRlTm9kZSIsImlucHV0IiwibWF0Y2hlc1NlbGVjdG9yIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwibW96TWF0Y2hlc1NlbGVjdG9yIiwib01hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwiZGlzY29ubmVjdGVkTWF0Y2giLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImFkb3duIiwiYnVwIiwiY29tcGFyZSIsInNvcnREZXRhY2hlZCIsImF1cCIsImFwIiwiYnAiLCJleHByIiwiZWxlbWVudHMiLCJhdHRyIiwic3BlY2lmaWVkIiwic2VsIiwidW5pcXVlU29ydCIsImR1cGxpY2F0ZXMiLCJkZXRlY3REdXBsaWNhdGVzIiwic29ydFN0YWJsZSIsInNlbGVjdG9ycyIsImNyZWF0ZVBzZXVkbyIsInJlbGF0aXZlIiwicHJlRmlsdGVyIiwiZXhjZXNzIiwidW5xdW90ZWQiLCJub2RlTmFtZVNlbGVjdG9yIiwib3BlcmF0b3IiLCJ3aGF0IiwiX2FyZ3VtZW50Iiwic2ltcGxlIiwiZm9yd2FyZCIsIm9mVHlwZSIsInhtbCIsInVuaXF1ZUNhY2hlIiwib3V0ZXJDYWNoZSIsIm5vZGVJbmRleCIsInVzZUNhY2hlIiwidW5pcXVlSUQiLCJwc2V1ZG8iLCJzZXRGaWx0ZXJzIiwibWF0Y2hlZCIsIm1hdGNoZXIiLCJ1bm1hdGNoZWQiLCJsYW5nIiwiZWxlbUxhbmciLCJoYXNGb2N1cyIsInRhYkluZGV4IiwiX21hdGNoSW5kZXhlcyIsInJhZGlvIiwiY2hlY2tib3giLCJmaWxlIiwicGFzc3dvcmQiLCJpbWFnZSIsInN1Ym1pdCIsInJlc2V0IiwidG9rZW5zIiwiY29tYmluYXRvciIsInNraXAiLCJjaGVja05vbkVsZW1lbnRzIiwiZG9uZU5hbWUiLCJvbGRDYWNoZSIsIm5ld0NhY2hlIiwiZWxlbWVudE1hdGNoZXIiLCJtYXRjaGVycyIsImNvbmRlbnNlIiwibmV3VW5tYXRjaGVkIiwibWFwcGVkIiwic2V0TWF0Y2hlciIsInBvc3RGaWx0ZXIiLCJwb3N0RmluZGVyIiwicG9zdFNlbGVjdG9yIiwidGVtcCIsInByZU1hcCIsInBvc3RNYXAiLCJwcmVleGlzdGluZyIsImNvbnRleHRzIiwibXVsdGlwbGVDb250ZXh0cyIsIm1hdGNoZXJJbiIsIm1hdGNoZXJPdXQiLCJtYXRjaGVyRnJvbVRva2VucyIsImNoZWNrQ29udGV4dCIsImxlYWRpbmdSZWxhdGl2ZSIsImltcGxpY2l0UmVsYXRpdmUiLCJtYXRjaENvbnRleHQiLCJtYXRjaEFueUNvbnRleHQiLCJwYXJzZU9ubHkiLCJzb0ZhciIsInByZUZpbHRlcnMiLCJzZXRNYXRjaGVycyIsImVsZW1lbnRNYXRjaGVycyIsImJ5U2V0IiwiYnlFbGVtZW50Iiwic3VwZXJNYXRjaGVyIiwib3V0ZXJtb3N0IiwibWF0Y2hlZENvdW50Iiwic2V0TWF0Y2hlZCIsImNvbnRleHRCYWNrdXAiLCJkaXJydW5zVW5pcXVlIiwibWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzIiwidG9rZW4iLCJjb21waWxlZCIsIl9uYW1lIiwidW5pcXVlIiwiaXNYTUxEb2MiLCJlc2NhcGVTZWxlY3RvciIsInVudGlsIiwidHJ1bmNhdGUiLCJzaWJsaW5ncyIsInJuZWVkc0NvbnRleHQiLCJuZWVkc0NvbnRleHQiLCJyc2luZ2xlVGFnIiwid2lubm93IiwicXVhbGlmaWVyIiwibm90Iiwicm9vdGpRdWVyeSIsInBhcnNlSFRNTCIsInJlYWR5IiwicnBhcmVudHNwcmV2IiwiZ3VhcmFudGVlZFVuaXF1ZSIsImNvbnRlbnRzIiwic2libGluZyIsInRhcmdldHMiLCJjbG9zZXN0IiwicHJldkFsbCIsImFkZEJhY2siLCJwYXJlbnRzIiwicGFyZW50c1VudGlsIiwibmV4dEFsbCIsIm5leHRVbnRpbCIsInByZXZVbnRpbCIsImNvbnRlbnREb2N1bWVudCIsInJldmVyc2UiLCJybm90aHRtbHdoaXRlIiwiSWRlbnRpdHkiLCJUaHJvd2VyIiwiZXgiLCJhZG9wdFZhbHVlIiwibm9WYWx1ZSIsInByb21pc2UiLCJmYWlsIiwiQ2FsbGJhY2tzIiwiY3JlYXRlT3B0aW9ucyIsImZpcmluZyIsIm1lbW9yeSIsImZpcmVkIiwibG9ja2VkIiwiZmlyaW5nSW5kZXgiLCJmaXJlIiwib25jZSIsInN0b3BPbkZhbHNlIiwiZW1wdHkiLCJkaXNhYmxlIiwibG9jayIsImZpcmVXaXRoIiwiRGVmZXJyZWQiLCJmdW5jIiwidHVwbGVzIiwiYWx3YXlzIiwiZGVmZXJyZWQiLCJwaXBlIiwibmV3RGVmZXIiLCJ0dXBsZSIsInJldHVybmVkIiwicHJvZ3Jlc3MiLCJub3RpZnkiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJvblByb2dyZXNzIiwibWF4RGVwdGgiLCJkZXB0aCIsInNwZWNpYWwiLCJ0aGF0IiwibWlnaHRUaHJvdyIsIlR5cGVFcnJvciIsIm5vdGlmeVdpdGgiLCJyZXNvbHZlV2l0aCIsImV4Y2VwdGlvbkhvb2siLCJzdGFja1RyYWNlIiwicmVqZWN0V2l0aCIsImdldFN0YWNrSG9vayIsInN0YXRlU3RyaW5nIiwid2hlbiIsInNpbmdsZVZhbHVlIiwicmVtYWluaW5nIiwicmVzb2x2ZUNvbnRleHRzIiwicmVzb2x2ZVZhbHVlcyIsInByaW1hcnkiLCJ1cGRhdGVGdW5jIiwicmVycm9yTmFtZXMiLCJyZWFkeUV4Y2VwdGlvbiIsInJlYWR5TGlzdCIsImNvbXBsZXRlZCIsInJlYWR5V2FpdCIsIndhaXQiLCJyZWFkeVN0YXRlIiwiZG9TY3JvbGwiLCJhY2Nlc3MiLCJjaGFpbmFibGUiLCJlbXB0eUdldCIsImJ1bGsiLCJybXNQcmVmaXgiLCJyZGFzaEFscGhhIiwiZmNhbWVsQ2FzZSIsIl9hbGwiLCJsZXR0ZXIiLCJjYW1lbENhc2UiLCJhY2NlcHREYXRhIiwiRGF0YSIsImhhc0RhdGEiLCJkYXRhUHJpdiIsImRhdGFVc2VyIiwicmJyYWNlIiwicm11bHRpRGFzaCIsImRhdGFBdHRyIiwiZ2V0RGF0YSIsInJlbW92ZURhdGEiLCJfZGF0YSIsIl9yZW1vdmVEYXRhIiwiZGVxdWV1ZSIsInN0YXJ0TGVuZ3RoIiwiX3F1ZXVlSG9va3MiLCJjbGVhclF1ZXVlIiwiZGVmZXIiLCJwbnVtIiwicmNzc051bSIsImNzc0V4cGFuZCIsImlzQXR0YWNoZWQiLCJjb21wb3NlZCIsImdldFJvb3ROb2RlIiwiaXNIaWRkZW5XaXRoaW5UcmVlIiwiYWRqdXN0Q1NTIiwidmFsdWVQYXJ0cyIsInR3ZWVuIiwiYWRqdXN0ZWQiLCJzY2FsZSIsIm1heEl0ZXJhdGlvbnMiLCJjdXJyZW50VmFsdWUiLCJpbml0aWFsIiwidW5pdCIsImNzc051bWJlciIsImluaXRpYWxJblVuaXQiLCJkZWZhdWx0RGlzcGxheU1hcCIsImdldERlZmF1bHREaXNwbGF5Iiwic2hvd0hpZGUiLCJzaG93IiwiaGlkZSIsInRvZ2dsZSIsImRpdiIsInJjaGVja2FibGVUeXBlIiwicnRhZ05hbWUiLCJyc2NyaXB0VHlwZSIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJjaGVja0Nsb25lIiwibm9DbG9uZUNoZWNrZWQiLCJ3cmFwTWFwIiwidGhlYWQiLCJjb2wiLCJ0ciIsInRkIiwiX2RlZmF1bHQiLCJnZXRBbGwiLCJzZXRHbG9iYWxFdmFsIiwicmVmRWxlbWVudHMiLCJ0Ym9keSIsInRmb290IiwiY29sZ3JvdXAiLCJjYXB0aW9uIiwidGgiLCJvcHRncm91cCIsImJ1aWxkRnJhZ21lbnQiLCJzY3JpcHRzIiwic2VsZWN0aW9uIiwiaWdub3JlZCIsImZyYWdtZW50Iiwibm9kZXMiLCJodG1sUHJlZmlsdGVyIiwicnR5cGVuYW1lc3BhY2UiLCJyZXR1cm5UcnVlIiwicmV0dXJuRmFsc2UiLCJleHBlY3RTeW5jIiwic2FmZUFjdGl2ZUVsZW1lbnQiLCJvbmUiLCJvcmlnRm4iLCJsZXZlcmFnZU5hdGl2ZSIsIm5vdEFzeW5jIiwic2F2ZWQiLCJpc1RyaWdnZXIiLCJkZWxlZ2F0ZVR5cGUiLCJoYW5kbGVPYmpJbiIsImV2ZW50SGFuZGxlIiwiZXZlbnRzIiwiaGFuZGxlT2JqIiwiaGFuZGxlcnMiLCJuYW1lc3BhY2VzIiwib3JpZ1R5cGUiLCJlbGVtRGF0YSIsImhhbmRsZSIsInRyaWdnZXJlZCIsImJpbmRUeXBlIiwiZGVsZWdhdGVDb3VudCIsIm1hcHBlZFR5cGVzIiwib3JpZ0NvdW50IiwidGVhcmRvd24iLCJyZW1vdmVFdmVudCIsIm5hdGl2ZUV2ZW50IiwiaGFuZGxlclF1ZXVlIiwiZml4IiwiZGVsZWdhdGVUYXJnZXQiLCJwcmVEaXNwYXRjaCIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQiLCJybmFtZXNwYWNlIiwicG9zdERpc3BhdGNoIiwibWF0Y2hlZEhhbmRsZXJzIiwibWF0Y2hlZFNlbGVjdG9ycyIsImFkZFByb3AiLCJvcmlnaW5hbEV2ZW50Iiwibm9CdWJibGUiLCJiZWZvcmV1bmxvYWQiLCJyZXR1cm5WYWx1ZSIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZWxhdGVkVGFyZ2V0IiwidGltZVN0YW1wIiwiaXNTaW11bGF0ZWQiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsImNoYW5nZWRUb3VjaGVzIiwiZXZlbnRQaGFzZSIsInBhZ2VYIiwicGFnZVkiLCJ2aWV3IiwiY2hhckNvZGUiLCJrZXlDb2RlIiwiYnV0dG9ucyIsImNsaWVudFgiLCJjbGllbnRZIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJwb2ludGVySWQiLCJwb2ludGVyVHlwZSIsInNjcmVlblgiLCJzY3JlZW5ZIiwidGFyZ2V0VG91Y2hlcyIsInRvRWxlbWVudCIsInRvdWNoZXMiLCJ3aGljaCIsImZvY3VzIiwiYmx1ciIsIm1vdXNlZW50ZXIiLCJtb3VzZWxlYXZlIiwicG9pbnRlcmVudGVyIiwicG9pbnRlcmxlYXZlIiwib3JpZyIsInJlbGF0ZWQiLCJybm9Jbm5lcmh0bWwiLCJyY2hlY2tlZCIsInJjbGVhblNjcmlwdCIsIm1hbmlwdWxhdGlvblRhcmdldCIsImRpc2FibGVTY3JpcHQiLCJyZXN0b3JlU2NyaXB0IiwiY2xvbmVDb3B5RXZlbnQiLCJkZXN0IiwidWRhdGFPbGQiLCJ1ZGF0YUN1ciIsImZpeElucHV0IiwiZG9tTWFuaXAiLCJjb2xsZWN0aW9uIiwiaGFzU2NyaXB0cyIsImlOb0Nsb25lIiwidmFsdWVJc0Z1bmN0aW9uIiwiX2V2YWxVcmwiLCJrZWVwRGF0YSIsImNsZWFuRGF0YSIsImRhdGFBbmRFdmVudHMiLCJkZWVwRGF0YUFuZEV2ZW50cyIsInNyY0VsZW1lbnRzIiwiZGVzdEVsZW1lbnRzIiwiaW5QYWdlIiwiZGV0YWNoIiwiYXBwZW5kIiwiYWZ0ZXIiLCJyZXBsYWNlV2l0aCIsInJlcGxhY2VDaGlsZCIsImFwcGVuZFRvIiwicHJlcGVuZFRvIiwiaW5zZXJ0QWZ0ZXIiLCJyZXBsYWNlQWxsIiwib3JpZ2luYWwiLCJybnVtbm9ucHgiLCJyY3VzdG9tUHJvcCIsImdldFN0eWxlcyIsIm9wZW5lciIsInN3YXAiLCJvbGQiLCJyYm94U3R5bGUiLCJydHJpbUNTUyIsImN1ckNTUyIsIm1pbldpZHRoIiwibWF4V2lkdGgiLCJpc0N1c3RvbVByb3AiLCJnZXRQcm9wZXJ0eVZhbHVlIiwicGl4ZWxCb3hTdHlsZXMiLCJhZGRHZXRIb29rSWYiLCJjb25kaXRpb25GbiIsImhvb2tGbiIsImNvbXB1dGVTdHlsZVRlc3RzIiwiZGl2U3R5bGUiLCJwaXhlbFBvc2l0aW9uVmFsIiwicmVsaWFibGVNYXJnaW5MZWZ0VmFsIiwicm91bmRQaXhlbE1lYXN1cmVzIiwibWFyZ2luTGVmdCIsInBpeGVsQm94U3R5bGVzVmFsIiwiYm94U2l6aW5nUmVsaWFibGVWYWwiLCJwb3NpdGlvbiIsInNjcm9sbGJveFNpemVWYWwiLCJvZmZzZXRXaWR0aCIsInJvdW5kIiwicmVsaWFibGVUckRpbWVuc2lvbnNWYWwiLCJiYWNrZ3JvdW5kQ2xpcCIsImNsZWFyQ2xvbmVTdHlsZSIsImJveFNpemluZ1JlbGlhYmxlIiwicGl4ZWxQb3NpdGlvbiIsInJlbGlhYmxlTWFyZ2luTGVmdCIsInNjcm9sbGJveFNpemUiLCJyZWxpYWJsZVRyRGltZW5zaW9ucyIsInRhYmxlIiwidHJDaGlsZCIsInRyU3R5bGUiLCJib3JkZXJUb3BXaWR0aCIsImJvcmRlckJvdHRvbVdpZHRoIiwiY3NzUHJlZml4ZXMiLCJlbXB0eVN0eWxlIiwidmVuZG9yUHJvcHMiLCJmaW5hbFByb3BOYW1lIiwiZmluYWwiLCJjc3NQcm9wcyIsImNhcE5hbWUiLCJ2ZW5kb3JQcm9wTmFtZSIsInJkaXNwbGF5c3dhcCIsImNzc1Nob3ciLCJ2aXNpYmlsaXR5IiwiY3NzTm9ybWFsVHJhbnNmb3JtIiwibGV0dGVyU3BhY2luZyIsImZvbnRXZWlnaHQiLCJzZXRQb3NpdGl2ZU51bWJlciIsInN1YnRyYWN0IiwiYm94TW9kZWxBZGp1c3RtZW50IiwiZGltZW5zaW9uIiwiYm94IiwiaXNCb3JkZXJCb3giLCJjb21wdXRlZFZhbCIsImV4dHJhIiwiZGVsdGEiLCJnZXRXaWR0aE9ySGVpZ2h0IiwidmFsdWVJc0JvcmRlckJveCIsIm9mZnNldFByb3AiLCJnZXRDbGllbnRSZWN0cyIsIlR3ZWVuIiwiZWFzaW5nIiwiY3NzSG9va3MiLCJvcGFjaXR5Iiwib3JpZ05hbWUiLCJpc0Zpbml0ZSIsInNjcm9sbGJveFNpemVCdWdneSIsIm1hcmdpbiIsInBhZGRpbmciLCJib3JkZXIiLCJwcmVmaXgiLCJzdWZmaXgiLCJleHBhbmQiLCJleHBhbmRlZCIsInBhcnRzIiwicHJvcEhvb2tzIiwicGVyY2VudCIsImVhc2VkIiwicG9zIiwic3RlcCIsImZ4Iiwic2Nyb2xsVG9wIiwic2Nyb2xsTGVmdCIsImxpbmVhciIsInN3aW5nIiwiY29zIiwiUEkiLCJmeE5vdyIsImluUHJvZ3Jlc3MiLCJyZnh0eXBlcyIsInJydW4iLCJzY2hlZHVsZSIsImhpZGRlbiIsImludGVydmFsIiwiY3JlYXRlRnhOb3ciLCJnZW5GeCIsImluY2x1ZGVXaWR0aCIsImNyZWF0ZVR3ZWVuIiwiYW5pbWF0aW9uIiwiQW5pbWF0aW9uIiwidHdlZW5lcnMiLCJwcm9wZXJ0aWVzIiwic3RvcHBlZCIsInByZWZpbHRlcnMiLCJjdXJyZW50VGltZSIsInN0YXJ0VGltZSIsInR3ZWVucyIsIm9wdHMiLCJzcGVjaWFsRWFzaW5nIiwib3JpZ2luYWxQcm9wZXJ0aWVzIiwib3JpZ2luYWxPcHRpb25zIiwiZ290b0VuZCIsInByb3BGaWx0ZXIiLCJjb21wbGV0ZSIsInRpbWVyIiwiYW5pbSIsInR3ZWVuZXIiLCJvbGRmaXJlIiwicHJvcFR3ZWVuIiwicmVzdG9yZURpc3BsYXkiLCJpc0JveCIsImRhdGFTaG93IiwidW5xdWV1ZWQiLCJvdmVyZmxvdyIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsInByZWZpbHRlciIsInNwZWVkIiwic3BlZWRzIiwiZmFkZVRvIiwiYW5pbWF0ZSIsIm9wdGFsbCIsImRvQW5pbWF0aW9uIiwiZmluaXNoIiwic3RvcFF1ZXVlIiwidGltZXJzIiwiY3NzRm4iLCJzbGlkZURvd24iLCJzbGlkZVVwIiwic2xpZGVUb2dnbGUiLCJmYWRlSW4iLCJmYWRlVG9nZ2xlIiwic2xvdyIsImZhc3QiLCJjbGVhclRpbWVvdXQiLCJjaGVja09uIiwib3B0U2VsZWN0ZWQiLCJyYWRpb1ZhbHVlIiwiYm9vbEhvb2siLCJyZW1vdmVBdHRyIiwiblR5cGUiLCJhdHRySG9va3MiLCJib29sIiwiYXR0ck5hbWVzIiwibG93ZXJjYXNlTmFtZSIsInJmb2N1c2FibGUiLCJyY2xpY2thYmxlIiwic3RyaXBBbmRDb2xsYXBzZSIsImdldENsYXNzIiwiY2xhc3Nlc1RvQXJyYXkiLCJyZW1vdmVQcm9wIiwicHJvcEZpeCIsInRhYmluZGV4IiwiY2xhc3NOYW1lcyIsImN1clZhbHVlIiwiZmluYWxWYWx1ZSIsInN0YXRlVmFsIiwiaXNWYWxpZFZhbHVlIiwiaGFzQ2xhc3MiLCJycmV0dXJuIiwidmFsSG9va3MiLCJvcHRpb25TZXQiLCJmb2N1c2luIiwicmZvY3VzTW9ycGgiLCJzdG9wUHJvcGFnYXRpb25DYWxsYmFjayIsIm9ubHlIYW5kbGVycyIsImJ1YmJsZVR5cGUiLCJvbnR5cGUiLCJsYXN0RWxlbWVudCIsImV2ZW50UGF0aCIsInBhcmVudFdpbmRvdyIsInNpbXVsYXRlIiwidHJpZ2dlckhhbmRsZXIiLCJhdHRhY2hlcyIsInJxdWVyeSIsInBhcnNlWE1MIiwicGFyc2VyRXJyb3JFbGVtIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwicmJyYWNrZXQiLCJyQ1JMRiIsInJzdWJtaXR0ZXJUeXBlcyIsInJzdWJtaXR0YWJsZSIsImJ1aWxkUGFyYW1zIiwidHJhZGl0aW9uYWwiLCJwYXJhbSIsInZhbHVlT3JGdW5jdGlvbiIsInNlcmlhbGl6ZSIsInNlcmlhbGl6ZUFycmF5IiwicjIwIiwicmhhc2giLCJyYW50aUNhY2hlIiwicmhlYWRlcnMiLCJybm9Db250ZW50IiwicnByb3RvY29sIiwidHJhbnNwb3J0cyIsImFsbFR5cGVzIiwib3JpZ2luQW5jaG9yIiwiYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwic3RydWN0dXJlIiwiZGF0YVR5cGVFeHByZXNzaW9uIiwiZGF0YVR5cGUiLCJkYXRhVHlwZXMiLCJpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsImpxWEhSIiwiaW5zcGVjdGVkIiwic2Vla2luZ1RyYW5zcG9ydCIsImluc3BlY3QiLCJwcmVmaWx0ZXJPckZhY3RvcnkiLCJkYXRhVHlwZU9yVHJhbnNwb3J0IiwiYWpheEV4dGVuZCIsImZsYXRPcHRpb25zIiwiYWpheFNldHRpbmdzIiwibGFzdE1vZGlmaWVkIiwiZXRhZyIsImlzTG9jYWwiLCJwcm90b2NvbCIsInByb2Nlc3NEYXRhIiwiY29udGVudFR5cGUiLCJhY2NlcHRzIiwicmVzcG9uc2VGaWVsZHMiLCJjb252ZXJ0ZXJzIiwiYWpheFNldHVwIiwiYWpheFByZWZpbHRlciIsImFqYXhUcmFuc3BvcnQiLCJhamF4IiwidHJhbnNwb3J0IiwiY2FjaGVVUkwiLCJyZXNwb25zZUhlYWRlcnNTdHJpbmciLCJyZXNwb25zZUhlYWRlcnMiLCJ0aW1lb3V0VGltZXIiLCJ1cmxBbmNob3IiLCJmaXJlR2xvYmFscyIsInVuY2FjaGVkIiwiY2FsbGJhY2tDb250ZXh0IiwiZ2xvYmFsRXZlbnRDb250ZXh0IiwiY29tcGxldGVEZWZlcnJlZCIsInN0YXR1c0NvZGUiLCJyZXF1ZXN0SGVhZGVycyIsInJlcXVlc3RIZWFkZXJzTmFtZXMiLCJzdHJBYm9ydCIsImdldFJlc3BvbnNlSGVhZGVyIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwic2V0UmVxdWVzdEhlYWRlciIsIm92ZXJyaWRlTWltZVR5cGUiLCJtaW1lVHlwZSIsInN0YXR1cyIsImFib3J0Iiwic3RhdHVzVGV4dCIsImZpbmFsVGV4dCIsImNyb3NzRG9tYWluIiwiaGFzQ29udGVudCIsImlmTW9kaWZpZWQiLCJoZWFkZXJzIiwiYmVmb3JlU2VuZCIsInN1Y2Nlc3MiLCJzZW5kIiwibmF0aXZlU3RhdHVzVGV4dCIsInJlc3BvbnNlcyIsImlzU3VjY2VzcyIsInJlc3BvbnNlIiwibW9kaWZpZWQiLCJjdCIsImZpbmFsRGF0YVR5cGUiLCJmaXJzdERhdGFUeXBlIiwiYWpheEhhbmRsZVJlc3BvbnNlcyIsImNvbnYyIiwiY29udiIsImRhdGFGaWx0ZXIiLCJ0aHJvd3MiLCJhamF4Q29udmVydCIsImdldEpTT04iLCJnZXRTY3JpcHQiLCJ3cmFwQWxsIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJ3cmFwSW5uZXIiLCJodG1sSXNGdW5jdGlvbiIsInVud3JhcCIsInZpc2libGUiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsInhoclN1Y2Nlc3NTdGF0dXMiLCJ4aHJTdXBwb3J0ZWQiLCJjb3JzIiwiZXJyb3JDYWxsYmFjayIsIm9wZW4iLCJ1c2VybmFtZSIsInhockZpZWxkcyIsIm9ubG9hZCIsIm9uZXJyb3IiLCJvbmFib3J0Iiwib250aW1lb3V0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVzcG9uc2VUeXBlIiwicmVzcG9uc2VUZXh0IiwiYmluYXJ5Iiwic2NyaXB0QXR0cnMiLCJjaGFyc2V0Iiwic2NyaXB0Q2hhcnNldCIsImV2dCIsIm9sZENhbGxiYWNrcyIsInJqc29ucCIsImpzb25wIiwianNvbnBDYWxsYmFjayIsIm9yaWdpbmFsU2V0dGluZ3MiLCJjYWxsYmFja05hbWUiLCJvdmVyd3JpdHRlbiIsInJlc3BvbnNlQ29udGFpbmVyIiwianNvblByb3AiLCJjcmVhdGVIVE1MRG9jdW1lbnQiLCJpbXBsZW1lbnRhdGlvbiIsImtlZXBTY3JpcHRzIiwicGFyc2VkIiwiYW5pbWF0ZWQiLCJvZmZzZXQiLCJzZXRPZmZzZXQiLCJjdXJQb3NpdGlvbiIsImN1ckxlZnQiLCJjdXJDU1NUb3AiLCJjdXJUb3AiLCJjdXJPZmZzZXQiLCJjdXJDU1NMZWZ0IiwiY3VyRWxlbSIsInVzaW5nIiwicmVjdCIsIndpbiIsInBhZ2VZT2Zmc2V0IiwicGFnZVhPZmZzZXQiLCJvZmZzZXRQYXJlbnQiLCJwYXJlbnRPZmZzZXQiLCJzY3JvbGxUbyIsIkhlaWdodCIsIldpZHRoIiwiZGVmYXVsdEV4dHJhIiwiZnVuY05hbWUiLCJ1bmJpbmQiLCJkZWxlZ2F0ZSIsInVuZGVsZWdhdGUiLCJob3ZlciIsImZuT3ZlciIsImZuT3V0IiwiaG9sZFJlYWR5IiwiaG9sZCIsInBhcnNlSlNPTiIsImlzTnVtZXJpYyIsIl9qUXVlcnkiLCJfJCIsIm5vQ29uZmxpY3QiLCJzZmMiLCJsb2NhbHMiLCJoYXNEb2N1bWVudCIsIkRFQlVHIiwic3R5bGVzSW5Eb20iLCJzaW5nbGV0b25FbGVtZW50Iiwic2luZ2xldG9uQ291bnRlciIsImlzUHJvZHVjdGlvbiIsInNzcklkS2V5IiwiaXNPbGRJRSIsImFkZFN0eWxlc0NsaWVudCIsInBhcmVudElkIiwiX2lzUHJvZHVjdGlvbiIsIl9vcHRpb25zIiwiYWRkU3R5bGVzVG9Eb20iLCJuZXdMaXN0IiwibWF5UmVtb3ZlIiwiZG9tU3R5bGUiLCJhZGRTdHlsZSIsImNyZWF0ZVN0eWxlRWxlbWVudCIsInN0eWxlRWxlbWVudCIsInN0eWxlSW5kZXgiLCJhcHBseVRvU2luZ2xldG9uVGFnIiwiYXBwbHlUb1RhZyIsIm5ld09iaiIsInNvdXJjZU1hcCIsInRleHRTdG9yZSIsInJlcGxhY2VUZXh0IiwicmVwbGFjZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzTm9kZSIsInNzcklkIiwic291cmNlcyIsImxpc3RUb1N0eWxlcyIsInBhcnQiLCJhY3RpdmVQaW5pYSIsInNldEFjdGl2ZVBpbmlhIiwicGluaWEiLCJnZXRBY3RpdmVQaW5pYSIsInBpbmlhU3ltYm9sIiwidG9KU09OIiwiTXV0YXRpb25UeXBlIiwiSVNfQ0xJRU5UIiwiVVNFX0RFVlRPT0xTIiwiX2dsb2JhbCIsImRvd25sb2FkIiwic2F2ZUFzIiwiY29yc0VuYWJsZWQiLCJNb3VzZUV2ZW50IiwiY3JlYXRlRXZlbnQiLCJpbml0TW91c2VFdmVudCIsIl9uYXZpZ2F0b3IiLCJpc01hY09TV2ViVmlldyIsIkhUTUxBbmNob3JFbGVtZW50IiwiYmxvYiIsInJlbCIsIm9yaWdpbiIsImNyZWF0ZU9iamVjdFVSTCIsInJldm9rZU9iamVjdFVSTCIsIm1zU2F2ZU9yT3BlbkJsb2IiLCJhdXRvQm9tIiwiQmxvYiIsImJvbSIsInBvcHVwIiwiZm9yY2UiLCJpc1NhZmFyaSIsImlzQ2hyb21lSU9TIiwiRmlsZVJlYWRlciIsInJlYWRlciIsIm9ubG9hZGVuZCIsInJlYWRBc0RhdGFVUkwiLCJ0b2FzdE1lc3NhZ2UiLCJwaW5pYU1lc3NhZ2UiLCJfX1ZVRV9ERVZUT09MU19UT0FTVF9fIiwiaXNQaW5pYSIsImNoZWNrQ2xpcGJvYXJkQWNjZXNzIiwiY2hlY2tOb3RGb2N1c2VkRXJyb3IiLCJmaWxlSW5wdXQiLCJhY3Rpb25HbG9iYWxPcGVuU3RhdGVGaWxlIiwiYWNjZXB0Iiwib25jaGFuZ2UiLCJmaWxlcyIsIm9uY2FuY2VsIiwibG9hZFN0b3Jlc1N0YXRlIiwic3RvcmVTdGF0ZSIsImZvcm1hdERpc3BsYXkiLCJfY3VzdG9tIiwiUElOSUFfUk9PVF9MQUJFTCIsIlBJTklBX1JPT1RfSUQiLCJmb3JtYXRTdG9yZUZvckluc3BlY3RvclRyZWUiLCJzdG9yZSIsImxhYmVsIiwiJGlkIiwiZm9ybWF0RXZlbnREYXRhIiwib3BlcmF0aW9ucyIsIm9wZXJhdGlvbiIsImZvcm1hdE11dGF0aW9uVHlwZSIsImRpcmVjdCIsInBhdGNoRnVuY3Rpb24iLCJwYXRjaE9iamVjdCIsImlzVGltZWxpbmVBY3RpdmUiLCJjb21wb25lbnRTdGF0ZVR5cGVzIiwiTVVUQVRJT05TX0xBWUVSX0lEIiwiSU5TUEVDVE9SX0lEIiwiYXNzaWduJDEiLCJnZXRTdG9yZVR5cGUiLCJyZWdpc3RlclBpbmlhRGV2dG9vbHMiLCJsb2dvIiwicGFja2FnZU5hbWUiLCJob21lcGFnZSIsImFwaSIsImFkZFRpbWVsaW5lTGF5ZXIiLCJjb2xvciIsImFkZEluc3BlY3RvciIsImljb24iLCJ0cmVlRmlsdGVyUGxhY2Vob2xkZXIiLCJjbGlwYm9hcmQiLCJ3cml0ZVRleHQiLCJhY3Rpb25HbG9iYWxDb3B5U3RhdGUiLCJ0b29sdGlwIiwicmVhZFRleHQiLCJhY3Rpb25HbG9iYWxQYXN0ZVN0YXRlIiwic2VuZEluc3BlY3RvclRyZWUiLCJzZW5kSW5zcGVjdG9yU3RhdGUiLCJhY3Rpb25HbG9iYWxTYXZlU3RhdGUiLCJub2RlQWN0aW9ucyIsIm5vZGVJZCIsIl9zIiwiJHJlc2V0IiwiaW5zcGVjdENvbXBvbmVudCIsInBheWxvYWQiLCJjb21wb25lbnRJbnN0YW5jZSIsIl9wU3RvcmVzIiwicGluaWFTdG9yZXMiLCJpbnN0YW5jZURhdGEiLCJlZGl0YWJsZSIsIl9pc09wdGlvbnNBUEkiLCIkc3RhdGUiLCJfZ2V0dGVycyIsImdldHRlcnMiLCJnZXRJbnNwZWN0b3JUcmVlIiwiaW5zcGVjdG9ySWQiLCJzdG9yZXMiLCJyb290Tm9kZXMiLCJnZXRJbnNwZWN0b3JTdGF0ZSIsImluc3BlY3RlZFN0b3JlIiwic3RvcmVOYW1lcyIsInN0b3JlTWFwIiwic3RvcmVJZCIsImdldHRlck5hbWUiLCJfY3VzdG9tUHJvcGVydGllcyIsImN1c3RvbVByb3BlcnRpZXMiLCJmb3JtYXRTdG9yZUZvckluc3BlY3RvclN0YXRlIiwiZWRpdEluc3BlY3RvclN0YXRlIiwiZWRpdENvbXBvbmVudFN0YXRlIiwiYWN0aXZlQWN0aW9uIiwicnVubmluZ0FjdGlvbklkIiwicGF0Y2hBY3Rpb25Gb3JHcm91cGluZyIsImFjdGlvbk5hbWVzIiwid3JhcFdpdGhQcm94eSIsInN0b3JlQWN0aW9ucyIsImFjdGlvbk5hbWUiLCJfYWN0aW9uSWQiLCJ0cmFja2VkU3RvcmUiLCJyZXRWYWx1ZSIsImRldnRvb2xzUGx1Z2luIiwib3JpZ2luYWxIb3RVcGRhdGUiLCJfaG90VXBkYXRlIiwibmV3U3RvcmUiLCJfaG1yUGF5bG9hZCIsImxvZ1N0b3JlQ2hhbmdlcyIsIiRvbkFjdGlvbiIsImdyb3VwSWQiLCJhZGRUaW1lbGluZUV2ZW50IiwibGF5ZXJJZCIsInN1YnRpdGxlIiwibG9nVHlwZSIsIm5vdGlmeUNvbXBvbmVudFVwZGF0ZSIsIiRzdWJzY3JpYmUiLCJldmVudERhdGEiLCJob3RVcGRhdGUiLCIkZGlzcG9zZSIsImFkZFN0b3JlVG9EZXZ0b29scyIsImNyZWF0ZVBpbmlhIiwiX3AiLCJ0b0JlSW5zdGFsbGVkIiwiaXNWdWUyIiwiJHBpbmlhIiwiX2UiLCJuZXdTdGF0ZSIsIm9sZFN0YXRlIiwic3ViUGF0Y2giLCJ0YXJnZXRWYWx1ZSIsImFjY2VwdEhNUlVwZGF0ZSIsImluaXRpYWxVc2VTdG9yZSIsImhvdCIsIm5ld01vZHVsZSIsIl9waW5pYSIsImV4cG9ydE5hbWUiLCJ1c2VTdG9yZSIsImludmFsaWRhdGUiLCJleGlzdGluZ1N0b3JlIiwiYWRkU3Vic2NyaXB0aW9uIiwic3Vic2NyaXB0aW9ucyIsInJlbW92ZVN1YnNjcmlwdGlvbiIsInRyaWdnZXJTdWJzY3JpcHRpb25zIiwiZmFsbGJhY2tSdW5XaXRoQ29udGV4dCIsIm1lcmdlUmVhY3RpdmVPYmplY3RzIiwicGF0Y2hUb0FwcGx5Iiwic2tpcEh5ZHJhdGVTeW1ib2wiLCJza2lwSHlkcmF0ZU1hcCIsInNraXBIeWRyYXRlIiwiaXNDb21wdXRlZCIsImNyZWF0ZU9wdGlvbnNTdG9yZSIsImluaXRpYWxTdGF0ZSIsImNyZWF0ZVNldHVwU3RvcmUiLCJsb2NhbFN0YXRlIiwiY29tcHV0ZWRHZXR0ZXJzIiwiX3IiLCJpc09wdGlvbnNTdG9yZSIsIm9wdGlvbnNGb3JQbHVnaW4iLCIkc3Vic2NyaWJlT3B0aW9ucyIsImlzTGlzdGVuaW5nIiwiaXNTeW5jTGlzdGVuaW5nIiwiZGVidWdnZXJFdmVudHMiLCJfaG90VXBkYXRpbmciLCJhY3Rpb25TdWJzY3JpcHRpb25zIiwiaG90U3RhdGUiLCJhY3RpdmVMaXN0ZW5lciIsIiRwYXRjaCIsInBhcnRpYWxTdGF0ZU9yTXV0YXRvciIsInN1YnNjcmlwdGlvbk11dGF0aW9uIiwibXlMaXN0ZW5lcklkIiwid3JhcEFjdGlvbiIsImFmdGVyQ2FsbGJhY2tMaXN0Iiwib25FcnJvckNhbGxiYWNrTGlzdCIsInBhcnRpYWxTdG9yZSIsInN0b3BXYXRjaGVyIiwic2V0dXBTdG9yZSIsImFjdGlvblZhbHVlIiwic3RhdGVLZXkiLCJuZXdTdGF0ZVRhcmdldCIsIm9sZFN0YXRlU291cmNlIiwiZGVsIiwiZ2V0dGVyVmFsdWUiLCJub25FbnVtZXJhYmxlIiwiZXh0ZW5kZXIiLCJleHRlbnNpb25zIiwiaWRPck9wdGlvbnMiLCJzZXR1cE9wdGlvbnMiLCJpc1NldHVwU3RvcmUiLCJoYXNDb250ZXh0IiwiaG90SWQiLCJ2bSIsIm1hcFN0b3JlU3VmZml4Iiwic2V0TWFwU3RvcmVTdWZmaXgiLCJtYXBTdG9yZXMiLCJyZWR1Y2VkIiwibWFwU3RhdGUiLCJrZXlzT3JNYXBwZXIiLCJzdG9yZUtleSIsIm1hcEdldHRlcnMiLCJtYXBBY3Rpb25zIiwibWFwV3JpdGFibGVTdGF0ZSIsInN0b3JlVG9SZWZzIiwiUGluaWFWdWVQbHVnaW4iLCJfVnVlIiwiX3Byb3ZpZGVkIiwicHJvdmlkZUNhY2hlIiwiaXNWdWUzIiwiVnVlMiIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJkZWZpbml0aW9uIiwic2NyaXB0VXJsIiwiaW1wb3J0U2NyaXB0cyIsImN1cnJlbnRTY3JpcHQiLCJiYXNlVVJJIiwibWVzIiwibWVzcyIsImluZm9CYW5uZXJDbG9zZWQiLCJzdG9yYWdlIiwicHJvZHVjdENvdW50Il0sInNvdXJjZVJvb3QiOiIifQ==